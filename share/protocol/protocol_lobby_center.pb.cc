// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_lobby_center.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol_lobby_center.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TgsProtocol {

namespace {

const ::google::protobuf::Descriptor* Lobby2Center_ServerInfo_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_ServerInfo_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_ServerConf_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_ServerConf_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_SetTime_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_SetTime_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_ServerWarConf_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_ServerWarConf_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_PlayerTurntable_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_PlayerTurntable_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_GetTurntableRank_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_GetTurntableRank_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_GetTurntableRank_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_GetTurntableRank_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_CloseTurntableRank_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_CloseTurntableRank_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_TurntableRankReward_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_TurntableRankReward_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_GetArenaList_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_GetArenaList_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_GetArenaList_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_GetArenaList_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_ServerWarRankReward_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_ServerWarRankReward_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_CloseSWar_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_CloseSWar_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_UpdateTeamHonor_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_UpdateTeamHonor_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_ServerTeamRankReward_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_ServerTeamRankReward_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_ReduceGlobalGoodsNum_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_ReduceGlobalGoodsNum_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_UpdateGlobalGoods_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_UpdateGlobalGoods_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_Auction_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_Auction_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_BuyAuction_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_BuyAuction_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_BuyAuction_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_BuyAuction_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_Auction_End_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_Auction_End_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_Auction_Clear_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_Auction_Clear_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_GetList_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_GetList_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_GetList_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_GetList_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_GetGlobalServerRank_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_GetGlobalServerRank_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_GetGlobalServerRank_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_GetGlobalServerRank_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_PlayerGlobalServerRank_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_PlayerGlobalServerRank_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_UpdateRank_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_UpdateRank_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_GetRank_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_GetRank_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_GetRank_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_GetRank_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lobby2Center_CloseConsumeRank_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby2Center_CloseConsumeRank_Ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center2Lobby_ConsumeRankReward_Ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center2Lobby_ConsumeRankReward_Ntf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_5flobby_5fcenter_2eproto() {
  protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol_lobby_center.proto");
  GOOGLE_CHECK(file != NULL);
  Lobby2Center_ServerInfo_Ntf_descriptor_ = file->message_type(0);
  static const int Lobby2Center_ServerInfo_Ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerInfo_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerInfo_Ntf, server_id_),
  };
  Lobby2Center_ServerInfo_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_ServerInfo_Ntf_descriptor_,
      Lobby2Center_ServerInfo_Ntf::default_instance_,
      Lobby2Center_ServerInfo_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerInfo_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerInfo_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_ServerInfo_Ntf));
  Lobby2Center_ServerConf_Ntf_descriptor_ = file->message_type(1);
  static const int Lobby2Center_ServerConf_Ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerConf_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerConf_Ntf, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerConf_Ntf, steam_),
  };
  Lobby2Center_ServerConf_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_ServerConf_Ntf_descriptor_,
      Lobby2Center_ServerConf_Ntf::default_instance_,
      Lobby2Center_ServerConf_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerConf_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerConf_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_ServerConf_Ntf));
  Lobby2Center_SetTime_Ntf_descriptor_ = file->message_type(2);
  static const int Lobby2Center_SetTime_Ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_SetTime_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_SetTime_Ntf, time_off_),
  };
  Lobby2Center_SetTime_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_SetTime_Ntf_descriptor_,
      Lobby2Center_SetTime_Ntf::default_instance_,
      Lobby2Center_SetTime_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_SetTime_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_SetTime_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_SetTime_Ntf));
  Lobby2Center_ServerWarConf_Ntf_descriptor_ = file->message_type(3);
  static const int Lobby2Center_ServerWarConf_Ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerWarConf_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerWarConf_Ntf, conf_),
  };
  Lobby2Center_ServerWarConf_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_ServerWarConf_Ntf_descriptor_,
      Lobby2Center_ServerWarConf_Ntf::default_instance_,
      Lobby2Center_ServerWarConf_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerWarConf_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ServerWarConf_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_ServerWarConf_Ntf));
  Lobby2Center_PlayerTurntable_Ntf_descriptor_ = file->message_type(4);
  static const int Lobby2Center_PlayerTurntable_Ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_PlayerTurntable_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_PlayerTurntable_Ntf, data_),
  };
  Lobby2Center_PlayerTurntable_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_PlayerTurntable_Ntf_descriptor_,
      Lobby2Center_PlayerTurntable_Ntf::default_instance_,
      Lobby2Center_PlayerTurntable_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_PlayerTurntable_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_PlayerTurntable_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_PlayerTurntable_Ntf));
  Lobby2Center_GetTurntableRank_Req_descriptor_ = file->message_type(5);
  static const int Lobby2Center_GetTurntableRank_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetTurntableRank_Req, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetTurntableRank_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetTurntableRank_Req, charid_),
  };
  Lobby2Center_GetTurntableRank_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_GetTurntableRank_Req_descriptor_,
      Lobby2Center_GetTurntableRank_Req::default_instance_,
      Lobby2Center_GetTurntableRank_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetTurntableRank_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetTurntableRank_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_GetTurntableRank_Req));
  Center2Lobby_GetTurntableRank_Ret_descriptor_ = file->message_type(6);
  static const int Center2Lobby_GetTurntableRank_Ret_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetTurntableRank_Ret, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetTurntableRank_Ret, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetTurntableRank_Ret, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetTurntableRank_Ret, data_),
  };
  Center2Lobby_GetTurntableRank_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_GetTurntableRank_Ret_descriptor_,
      Center2Lobby_GetTurntableRank_Ret::default_instance_,
      Center2Lobby_GetTurntableRank_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetTurntableRank_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetTurntableRank_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_GetTurntableRank_Ret));
  Lobby2Center_CloseTurntableRank_Ntf_descriptor_ = file->message_type(7);
  static const int Lobby2Center_CloseTurntableRank_Ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseTurntableRank_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseTurntableRank_Ntf, uid_),
  };
  Lobby2Center_CloseTurntableRank_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_CloseTurntableRank_Ntf_descriptor_,
      Lobby2Center_CloseTurntableRank_Ntf::default_instance_,
      Lobby2Center_CloseTurntableRank_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseTurntableRank_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseTurntableRank_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_CloseTurntableRank_Ntf));
  CommonRankInfo_descriptor_ = file->message_type(8);
  static const int CommonRankInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRankInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRankInfo, rank_),
  };
  CommonRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonRankInfo_descriptor_,
      CommonRankInfo::default_instance_,
      CommonRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonRankInfo));
  Center2Lobby_TurntableRankReward_Ntf_descriptor_ = file->message_type(9);
  static const int Center2Lobby_TurntableRankReward_Ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_TurntableRankReward_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_TurntableRankReward_Ntf, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_TurntableRankReward_Ntf, item_),
  };
  Center2Lobby_TurntableRankReward_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_TurntableRankReward_Ntf_descriptor_,
      Center2Lobby_TurntableRankReward_Ntf::default_instance_,
      Center2Lobby_TurntableRankReward_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_TurntableRankReward_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_TurntableRankReward_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_TurntableRankReward_Ntf));
  Center2Lobby_GetArenaList_Req_descriptor_ = file->message_type(10);
  static const int Center2Lobby_GetArenaList_Req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetArenaList_Req, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetArenaList_Req, needrobot_),
  };
  Center2Lobby_GetArenaList_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_GetArenaList_Req_descriptor_,
      Center2Lobby_GetArenaList_Req::default_instance_,
      Center2Lobby_GetArenaList_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetArenaList_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetArenaList_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_GetArenaList_Req));
  Lobby2Center_GetArenaList_Ret_descriptor_ = file->message_type(11);
  static const int Lobby2Center_GetArenaList_Ret_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetArenaList_Ret, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetArenaList_Ret, item_),
  };
  Lobby2Center_GetArenaList_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_GetArenaList_Ret_descriptor_,
      Lobby2Center_GetArenaList_Ret::default_instance_,
      Lobby2Center_GetArenaList_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetArenaList_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetArenaList_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_GetArenaList_Ret));
  RankInfo_descriptor_ = file->message_type(12);
  static const int RankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, country_),
  };
  RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankInfo_descriptor_,
      RankInfo::default_instance_,
      RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankInfo));
  Center2Lobby_ServerWarRankReward_Ntf_descriptor_ = file->message_type(13);
  static const int Center2Lobby_ServerWarRankReward_Ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ServerWarRankReward_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ServerWarRankReward_Ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ServerWarRankReward_Ntf, item_),
  };
  Center2Lobby_ServerWarRankReward_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_ServerWarRankReward_Ntf_descriptor_,
      Center2Lobby_ServerWarRankReward_Ntf::default_instance_,
      Center2Lobby_ServerWarRankReward_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ServerWarRankReward_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ServerWarRankReward_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_ServerWarRankReward_Ntf));
  Lobby2Center_CloseSWar_Ntf_descriptor_ = file->message_type(14);
  static const int Lobby2Center_CloseSWar_Ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseSWar_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseSWar_Ntf, isclose_),
  };
  Lobby2Center_CloseSWar_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_CloseSWar_Ntf_descriptor_,
      Lobby2Center_CloseSWar_Ntf::default_instance_,
      Lobby2Center_CloseSWar_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseSWar_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseSWar_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_CloseSWar_Ntf));
  Lobby2Center_UpdateTeamHonor_Ntf_descriptor_ = file->message_type(15);
  static const int Lobby2Center_UpdateTeamHonor_Ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateTeamHonor_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateTeamHonor_Ntf, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateTeamHonor_Ntf, oldhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateTeamHonor_Ntf, newhonor_),
  };
  Lobby2Center_UpdateTeamHonor_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_UpdateTeamHonor_Ntf_descriptor_,
      Lobby2Center_UpdateTeamHonor_Ntf::default_instance_,
      Lobby2Center_UpdateTeamHonor_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateTeamHonor_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateTeamHonor_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_UpdateTeamHonor_Ntf));
  Center2Lobby_ServerTeamRankReward_Ntf_descriptor_ = file->message_type(16);
  static const int Center2Lobby_ServerTeamRankReward_Ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ServerTeamRankReward_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ServerTeamRankReward_Ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ServerTeamRankReward_Ntf, item_),
  };
  Center2Lobby_ServerTeamRankReward_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_ServerTeamRankReward_Ntf_descriptor_,
      Center2Lobby_ServerTeamRankReward_Ntf::default_instance_,
      Center2Lobby_ServerTeamRankReward_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ServerTeamRankReward_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ServerTeamRankReward_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_ServerTeamRankReward_Ntf));
  Lobby2Center_ReduceGlobalGoodsNum_Ntf_descriptor_ = file->message_type(17);
  static const int Lobby2Center_ReduceGlobalGoodsNum_Ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ReduceGlobalGoodsNum_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ReduceGlobalGoodsNum_Ntf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ReduceGlobalGoodsNum_Ntf, num_),
  };
  Lobby2Center_ReduceGlobalGoodsNum_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_ReduceGlobalGoodsNum_Ntf_descriptor_,
      Lobby2Center_ReduceGlobalGoodsNum_Ntf::default_instance_,
      Lobby2Center_ReduceGlobalGoodsNum_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ReduceGlobalGoodsNum_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_ReduceGlobalGoodsNum_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_ReduceGlobalGoodsNum_Ntf));
  Center2Lobby_UpdateGlobalGoods_Ntf_descriptor_ = file->message_type(18);
  static const int Center2Lobby_UpdateGlobalGoods_Ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_UpdateGlobalGoods_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_UpdateGlobalGoods_Ntf, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_UpdateGlobalGoods_Ntf, isreset_),
  };
  Center2Lobby_UpdateGlobalGoods_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_UpdateGlobalGoods_Ntf_descriptor_,
      Center2Lobby_UpdateGlobalGoods_Ntf::default_instance_,
      Center2Lobby_UpdateGlobalGoods_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_UpdateGlobalGoods_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_UpdateGlobalGoods_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_UpdateGlobalGoods_Ntf));
  Lobby2Center_Auction_Ntf_descriptor_ = file->message_type(19);
  static const int Lobby2Center_Auction_Ntf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_Auction_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_Auction_Ntf, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_Auction_Ntf, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_Auction_Ntf, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_Auction_Ntf, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_Auction_Ntf, activityid_),
  };
  Lobby2Center_Auction_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_Auction_Ntf_descriptor_,
      Lobby2Center_Auction_Ntf::default_instance_,
      Lobby2Center_Auction_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_Auction_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_Auction_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_Auction_Ntf));
  Lobby2Center_BuyAuction_Ntf_descriptor_ = file->message_type(20);
  static const int Lobby2Center_BuyAuction_Ntf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_BuyAuction_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_BuyAuction_Ntf, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_BuyAuction_Ntf, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_BuyAuction_Ntf, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_BuyAuction_Ntf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_BuyAuction_Ntf, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_BuyAuction_Ntf, index_),
  };
  Lobby2Center_BuyAuction_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_BuyAuction_Ntf_descriptor_,
      Lobby2Center_BuyAuction_Ntf::default_instance_,
      Lobby2Center_BuyAuction_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_BuyAuction_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_BuyAuction_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_BuyAuction_Ntf));
  Center2Lobby_BuyAuction_Ntf_descriptor_ = file->message_type(21);
  static const int Center2Lobby_BuyAuction_Ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_BuyAuction_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_BuyAuction_Ntf, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_BuyAuction_Ntf, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_BuyAuction_Ntf, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_BuyAuction_Ntf, errcode_),
  };
  Center2Lobby_BuyAuction_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_BuyAuction_Ntf_descriptor_,
      Center2Lobby_BuyAuction_Ntf::default_instance_,
      Center2Lobby_BuyAuction_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_BuyAuction_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_BuyAuction_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_BuyAuction_Ntf));
  Center2Lobby_Auction_End_Ntf_descriptor_ = file->message_type(22);
  static const int Center2Lobby_Auction_End_Ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_Auction_End_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_Auction_End_Ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_Auction_End_Ntf, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_Auction_End_Ntf, index_),
  };
  Center2Lobby_Auction_End_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_Auction_End_Ntf_descriptor_,
      Center2Lobby_Auction_End_Ntf::default_instance_,
      Center2Lobby_Auction_End_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_Auction_End_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_Auction_End_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_Auction_End_Ntf));
  Center2Lobby_Auction_Clear_Ntf_descriptor_ = file->message_type(23);
  static const int Center2Lobby_Auction_Clear_Ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_Auction_Clear_Ntf, cmdid_),
  };
  Center2Lobby_Auction_Clear_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_Auction_Clear_Ntf_descriptor_,
      Center2Lobby_Auction_Clear_Ntf::default_instance_,
      Center2Lobby_Auction_Clear_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_Auction_Clear_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_Auction_Clear_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_Auction_Clear_Ntf));
  Lobby2Center_GetList_Ntf_descriptor_ = file->message_type(24);
  static const int Lobby2Center_GetList_Ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetList_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetList_Ntf, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetList_Ntf, serverid_),
  };
  Lobby2Center_GetList_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_GetList_Ntf_descriptor_,
      Lobby2Center_GetList_Ntf::default_instance_,
      Lobby2Center_GetList_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetList_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetList_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_GetList_Ntf));
  Center2Lobby_GetList_Ntf_descriptor_ = file->message_type(25);
  static const int Center2Lobby_GetList_Ntf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetList_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetList_Ntf, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetList_Ntf, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetList_Ntf, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetList_Ntf, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetList_Ntf, win_),
  };
  Center2Lobby_GetList_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_GetList_Ntf_descriptor_,
      Center2Lobby_GetList_Ntf::default_instance_,
      Center2Lobby_GetList_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetList_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetList_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_GetList_Ntf));
  Lobby2Center_GetGlobalServerRank_Req_descriptor_ = file->message_type(26);
  static const int Lobby2Center_GetGlobalServerRank_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetGlobalServerRank_Req, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetGlobalServerRank_Req, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetGlobalServerRank_Req, type_),
  };
  Lobby2Center_GetGlobalServerRank_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_GetGlobalServerRank_Req_descriptor_,
      Lobby2Center_GetGlobalServerRank_Req::default_instance_,
      Lobby2Center_GetGlobalServerRank_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetGlobalServerRank_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetGlobalServerRank_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_GetGlobalServerRank_Req));
  Center2Lobby_GetGlobalServerRank_Ret_descriptor_ = file->message_type(27);
  static const int Center2Lobby_GetGlobalServerRank_Ret_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetGlobalServerRank_Ret, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetGlobalServerRank_Ret, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetGlobalServerRank_Ret, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetGlobalServerRank_Ret, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetGlobalServerRank_Ret, data_),
  };
  Center2Lobby_GetGlobalServerRank_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_GetGlobalServerRank_Ret_descriptor_,
      Center2Lobby_GetGlobalServerRank_Ret::default_instance_,
      Center2Lobby_GetGlobalServerRank_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetGlobalServerRank_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetGlobalServerRank_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_GetGlobalServerRank_Ret));
  Lobby2Center_PlayerGlobalServerRank_Ntf_descriptor_ = file->message_type(28);
  static const int Lobby2Center_PlayerGlobalServerRank_Ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_PlayerGlobalServerRank_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_PlayerGlobalServerRank_Ntf, data_),
  };
  Lobby2Center_PlayerGlobalServerRank_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_PlayerGlobalServerRank_Ntf_descriptor_,
      Lobby2Center_PlayerGlobalServerRank_Ntf::default_instance_,
      Lobby2Center_PlayerGlobalServerRank_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_PlayerGlobalServerRank_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_PlayerGlobalServerRank_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_PlayerGlobalServerRank_Ntf));
  Lobby2Center_UpdateRank_Ntf_descriptor_ = file->message_type(29);
  static const int Lobby2Center_UpdateRank_Ntf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateRank_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateRank_Ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateRank_Ntf, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateRank_Ntf, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateRank_Ntf, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateRank_Ntf, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateRank_Ntf, nationalid_),
  };
  Lobby2Center_UpdateRank_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_UpdateRank_Ntf_descriptor_,
      Lobby2Center_UpdateRank_Ntf::default_instance_,
      Lobby2Center_UpdateRank_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateRank_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_UpdateRank_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_UpdateRank_Ntf));
  Lobby2Center_GetRank_Req_descriptor_ = file->message_type(30);
  static const int Lobby2Center_GetRank_Req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetRank_Req, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetRank_Req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetRank_Req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetRank_Req, limitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetRank_Req, charid_),
  };
  Lobby2Center_GetRank_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_GetRank_Req_descriptor_,
      Lobby2Center_GetRank_Req::default_instance_,
      Lobby2Center_GetRank_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetRank_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_GetRank_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_GetRank_Req));
  Center2Lobby_GetRank_Ret_descriptor_ = file->message_type(31);
  static const int Center2Lobby_GetRank_Ret_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetRank_Ret, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetRank_Ret, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetRank_Ret, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetRank_Ret, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetRank_Ret, rank_info_),
  };
  Center2Lobby_GetRank_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_GetRank_Ret_descriptor_,
      Center2Lobby_GetRank_Ret::default_instance_,
      Center2Lobby_GetRank_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetRank_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_GetRank_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_GetRank_Ret));
  Lobby2Center_CloseConsumeRank_Ntf_descriptor_ = file->message_type(32);
  static const int Lobby2Center_CloseConsumeRank_Ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseConsumeRank_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseConsumeRank_Ntf, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseConsumeRank_Ntf, type_),
  };
  Lobby2Center_CloseConsumeRank_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby2Center_CloseConsumeRank_Ntf_descriptor_,
      Lobby2Center_CloseConsumeRank_Ntf::default_instance_,
      Lobby2Center_CloseConsumeRank_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseConsumeRank_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby2Center_CloseConsumeRank_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby2Center_CloseConsumeRank_Ntf));
  Center2Lobby_ConsumeRankReward_Ntf_descriptor_ = file->message_type(33);
  static const int Center2Lobby_ConsumeRankReward_Ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ConsumeRankReward_Ntf, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ConsumeRankReward_Ntf, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ConsumeRankReward_Ntf, rank_info_),
  };
  Center2Lobby_ConsumeRankReward_Ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center2Lobby_ConsumeRankReward_Ntf_descriptor_,
      Center2Lobby_ConsumeRankReward_Ntf::default_instance_,
      Center2Lobby_ConsumeRankReward_Ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ConsumeRankReward_Ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center2Lobby_ConsumeRankReward_Ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center2Lobby_ConsumeRankReward_Ntf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_5flobby_5fcenter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_ServerInfo_Ntf_descriptor_, &Lobby2Center_ServerInfo_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_ServerConf_Ntf_descriptor_, &Lobby2Center_ServerConf_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_SetTime_Ntf_descriptor_, &Lobby2Center_SetTime_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_ServerWarConf_Ntf_descriptor_, &Lobby2Center_ServerWarConf_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_PlayerTurntable_Ntf_descriptor_, &Lobby2Center_PlayerTurntable_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_GetTurntableRank_Req_descriptor_, &Lobby2Center_GetTurntableRank_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_GetTurntableRank_Ret_descriptor_, &Center2Lobby_GetTurntableRank_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_CloseTurntableRank_Ntf_descriptor_, &Lobby2Center_CloseTurntableRank_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonRankInfo_descriptor_, &CommonRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_TurntableRankReward_Ntf_descriptor_, &Center2Lobby_TurntableRankReward_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_GetArenaList_Req_descriptor_, &Center2Lobby_GetArenaList_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_GetArenaList_Ret_descriptor_, &Lobby2Center_GetArenaList_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankInfo_descriptor_, &RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_ServerWarRankReward_Ntf_descriptor_, &Center2Lobby_ServerWarRankReward_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_CloseSWar_Ntf_descriptor_, &Lobby2Center_CloseSWar_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_UpdateTeamHonor_Ntf_descriptor_, &Lobby2Center_UpdateTeamHonor_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_ServerTeamRankReward_Ntf_descriptor_, &Center2Lobby_ServerTeamRankReward_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_ReduceGlobalGoodsNum_Ntf_descriptor_, &Lobby2Center_ReduceGlobalGoodsNum_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_UpdateGlobalGoods_Ntf_descriptor_, &Center2Lobby_UpdateGlobalGoods_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_Auction_Ntf_descriptor_, &Lobby2Center_Auction_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_BuyAuction_Ntf_descriptor_, &Lobby2Center_BuyAuction_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_BuyAuction_Ntf_descriptor_, &Center2Lobby_BuyAuction_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_Auction_End_Ntf_descriptor_, &Center2Lobby_Auction_End_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_Auction_Clear_Ntf_descriptor_, &Center2Lobby_Auction_Clear_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_GetList_Ntf_descriptor_, &Lobby2Center_GetList_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_GetList_Ntf_descriptor_, &Center2Lobby_GetList_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_GetGlobalServerRank_Req_descriptor_, &Lobby2Center_GetGlobalServerRank_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_GetGlobalServerRank_Ret_descriptor_, &Center2Lobby_GetGlobalServerRank_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_PlayerGlobalServerRank_Ntf_descriptor_, &Lobby2Center_PlayerGlobalServerRank_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_UpdateRank_Ntf_descriptor_, &Lobby2Center_UpdateRank_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_GetRank_Req_descriptor_, &Lobby2Center_GetRank_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_GetRank_Ret_descriptor_, &Center2Lobby_GetRank_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby2Center_CloseConsumeRank_Ntf_descriptor_, &Lobby2Center_CloseConsumeRank_Ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center2Lobby_ConsumeRankReward_Ntf_descriptor_, &Center2Lobby_ConsumeRankReward_Ntf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_5flobby_5fcenter_2eproto() {
  delete Lobby2Center_ServerInfo_Ntf::default_instance_;
  delete Lobby2Center_ServerInfo_Ntf_reflection_;
  delete Lobby2Center_ServerConf_Ntf::default_instance_;
  delete Lobby2Center_ServerConf_Ntf_reflection_;
  delete Lobby2Center_SetTime_Ntf::default_instance_;
  delete Lobby2Center_SetTime_Ntf_reflection_;
  delete Lobby2Center_ServerWarConf_Ntf::default_instance_;
  delete Lobby2Center_ServerWarConf_Ntf_reflection_;
  delete Lobby2Center_PlayerTurntable_Ntf::default_instance_;
  delete Lobby2Center_PlayerTurntable_Ntf_reflection_;
  delete Lobby2Center_GetTurntableRank_Req::default_instance_;
  delete Lobby2Center_GetTurntableRank_Req_reflection_;
  delete Center2Lobby_GetTurntableRank_Ret::default_instance_;
  delete Center2Lobby_GetTurntableRank_Ret_reflection_;
  delete Lobby2Center_CloseTurntableRank_Ntf::default_instance_;
  delete Lobby2Center_CloseTurntableRank_Ntf_reflection_;
  delete CommonRankInfo::default_instance_;
  delete CommonRankInfo_reflection_;
  delete Center2Lobby_TurntableRankReward_Ntf::default_instance_;
  delete Center2Lobby_TurntableRankReward_Ntf_reflection_;
  delete Center2Lobby_GetArenaList_Req::default_instance_;
  delete Center2Lobby_GetArenaList_Req_reflection_;
  delete Lobby2Center_GetArenaList_Ret::default_instance_;
  delete Lobby2Center_GetArenaList_Ret_reflection_;
  delete RankInfo::default_instance_;
  delete RankInfo_reflection_;
  delete Center2Lobby_ServerWarRankReward_Ntf::default_instance_;
  delete Center2Lobby_ServerWarRankReward_Ntf_reflection_;
  delete Lobby2Center_CloseSWar_Ntf::default_instance_;
  delete Lobby2Center_CloseSWar_Ntf_reflection_;
  delete Lobby2Center_UpdateTeamHonor_Ntf::default_instance_;
  delete Lobby2Center_UpdateTeamHonor_Ntf_reflection_;
  delete Center2Lobby_ServerTeamRankReward_Ntf::default_instance_;
  delete Center2Lobby_ServerTeamRankReward_Ntf_reflection_;
  delete Lobby2Center_ReduceGlobalGoodsNum_Ntf::default_instance_;
  delete Lobby2Center_ReduceGlobalGoodsNum_Ntf_reflection_;
  delete Center2Lobby_UpdateGlobalGoods_Ntf::default_instance_;
  delete Center2Lobby_UpdateGlobalGoods_Ntf_reflection_;
  delete Lobby2Center_Auction_Ntf::default_instance_;
  delete Lobby2Center_Auction_Ntf_reflection_;
  delete Lobby2Center_BuyAuction_Ntf::default_instance_;
  delete Lobby2Center_BuyAuction_Ntf_reflection_;
  delete Center2Lobby_BuyAuction_Ntf::default_instance_;
  delete Center2Lobby_BuyAuction_Ntf_reflection_;
  delete Center2Lobby_Auction_End_Ntf::default_instance_;
  delete Center2Lobby_Auction_End_Ntf_reflection_;
  delete Center2Lobby_Auction_Clear_Ntf::default_instance_;
  delete Center2Lobby_Auction_Clear_Ntf_reflection_;
  delete Lobby2Center_GetList_Ntf::default_instance_;
  delete Lobby2Center_GetList_Ntf_reflection_;
  delete Center2Lobby_GetList_Ntf::default_instance_;
  delete Center2Lobby_GetList_Ntf_reflection_;
  delete Lobby2Center_GetGlobalServerRank_Req::default_instance_;
  delete Lobby2Center_GetGlobalServerRank_Req_reflection_;
  delete Center2Lobby_GetGlobalServerRank_Ret::default_instance_;
  delete Center2Lobby_GetGlobalServerRank_Ret_reflection_;
  delete Lobby2Center_PlayerGlobalServerRank_Ntf::default_instance_;
  delete Lobby2Center_PlayerGlobalServerRank_Ntf_reflection_;
  delete Lobby2Center_UpdateRank_Ntf::default_instance_;
  delete Lobby2Center_UpdateRank_Ntf_reflection_;
  delete Lobby2Center_GetRank_Req::default_instance_;
  delete Lobby2Center_GetRank_Req_reflection_;
  delete Center2Lobby_GetRank_Ret::default_instance_;
  delete Center2Lobby_GetRank_Ret_reflection_;
  delete Lobby2Center_CloseConsumeRank_Ntf::default_instance_;
  delete Lobby2Center_CloseConsumeRank_Ntf_reflection_;
  delete Center2Lobby_ConsumeRankReward_Ntf::default_instance_;
  delete Center2Lobby_ConsumeRankReward_Ntf_reflection_;
}

void protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TgsProtocol::protobuf_AddDesc_PacketDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033protocol_lobby_center.proto\022\013TgsProtoc"
    "ol\032\017PacketDef.proto\"t\n\033Lobby2Center_Serv"
    "erInfo_Ntf\022B\n\005cmdId\030\001 \001(\0162\026.TgsProtocol."
    "PacketDef:\033LOBBY2CENTER_SERVERINFO_NTF\022\021"
    "\n\tserver_id\030\002 \002(\r\"\272\001\n\033Lobby2Center_Serve"
    "rConf_Ntf\022B\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.P"
    "acketDef:\033LOBBY2CENTER_SERVERCONF_NTF\022+\n"
    "\005goods\030\002 \003(\0132\034.TgsProtocol.GlobalGoodsCo"
    "nf\022*\n\005steam\030\003 \001(\0132\033.TgsProtocol.ServerTe"
    "amConf\"m\n\030Lobby2Center_SetTime_Ntf\022\?\n\005cm"
    "dId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\030LOBBY"
    "2CENTER_SETTIME_NTF\022\020\n\010time_off\030\002 \002(\005\"\221\001"
    "\n\036Lobby2Center_ServerWarConf_Ntf\022E\n\005cmdI"
    "d\030\001 \001(\0162\026.TgsProtocol.PacketDef:\036LOBBY2C"
    "ENTER_SERVERWARCONF_NTF\022(\n\004conf\030\002 \002(\0132\032."
    "TgsProtocol.ServerWarConf\"\233\001\n Lobby2Cent"
    "er_PlayerTurntable_Ntf\022G\n\005cmdId\030\001 \001(\0162\026."
    "TgsProtocol.PacketDef: LOBBY2CENTER_PLAY"
    "ERTURNTABLE_NTF\022.\n\004data\030\002 \002(\0132 .TgsProto"
    "col.PlayerTurntableData\"\212\001\n!Lobby2Center"
    "_GetTurntableRank_Req\022H\n\005cmdId\030\001 \001(\0162\026.T"
    "gsProtocol.PacketDef:!LOBBY2CENTER_GETTU"
    "RNTABLERANK_REQ\022\013\n\003uid\030\002 \002(\004\022\016\n\006charid\030\003"
    " \002(\004\"\272\001\n!Center2Lobby_GetTurntableRank_R"
    "et\022H\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDe"
    "f:!CENTER2LOBBY_GETTURNTABLERANK_RET\022\016\n\006"
    "charid\030\002 \002(\004\022\013\n\003uid\030\003 \002(\004\022.\n\004data\030\004 \003(\0132"
    " .TgsProtocol.PlayerTurntableData\"~\n#Lob"
    "by2Center_CloseTurntableRank_Ntf\022J\n\005cmdI"
    "d\030\001 \001(\0162\026.TgsProtocol.PacketDef:#LOBBY2C"
    "ENTER_CLOSETURNTABLERANK_NTF\022\013\n\003uid\030\002 \002("
    "\004\".\n\016CommonRankInfo\022\016\n\006charid\030\001 \002(\004\022\014\n\004r"
    "ank\030\002 \002(\r\"\253\001\n$Center2Lobby_TurntableRank"
    "Reward_Ntf\022K\n\005cmdId\030\001 \001(\0162\026.TgsProtocol."
    "PacketDef:$CENTER2LOBBY_TURNTABLERANKREW"
    "ARD_NTF\022\013\n\003uid\030\002 \002(\004\022)\n\004item\030\003 \003(\0132\033.Tgs"
    "Protocol.CommonRankInfo\"x\n\035Center2Lobby_"
    "GetArenaList_Req\022D\n\005cmdId\030\001 \001(\0162\026.TgsPro"
    "tocol.PacketDef:\035CENTER2LOBBY_GETARENALI"
    "ST_REQ\022\021\n\tneedRobot\030\002 \001(\010\"\227\001\n\035Lobby2Cent"
    "er_GetArenaList_Ret\022D\n\005cmdId\030\001 \001(\0162\026.Tgs"
    "Protocol.PacketDef:\035LOBBY2CENTER_GETAREN"
    "ALIST_RET\0220\n\004item\030\002 \003(\0132\".TgsProtocol.Cl"
    "ientServerWarPlayer\"9\n\010RankInfo\022\016\n\006chari"
    "d\030\001 \002(\004\022\014\n\004rank\030\002 \002(\r\022\017\n\007country\030\003 \001(\r\"\246"
    "\001\n$Center2Lobby_ServerWarRankReward_Ntf\022"
    "K\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:$"
    "CENTER2LOBBY_SERVERWARRANKREWARD_NTF\022\014\n\004"
    "type\030\002 \002(\r\022#\n\004item\030\003 \003(\0132\025.TgsProtocol.R"
    "ankInfo\"p\n\032Lobby2Center_CloseSWar_Ntf\022A\n"
    "\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\032LO"
    "BBY2CENTER_CLOSESWAR_NTF\022\017\n\007isclose\030\002 \002("
    "\010\"\237\001\n Lobby2Center_UpdateTeamHonor_Ntf\022G"
    "\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef: L"
    "OBBY2CENTER_UPDATETEAMHONOR_NTF\022\016\n\006chari"
    "d\030\002 \002(\004\022\020\n\010oldhonor\030\003 \002(\r\022\020\n\010newhonor\030\004 "
    "\002(\r\"\256\001\n%Center2Lobby_ServerTeamRankRewar"
    "d_Ntf\022L\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Packe"
    "tDef:%CENTER2LOBBY_SERVERTEAMRANKREWARD_"
    "NTF\022\014\n\004type\030\002 \002(\r\022)\n\004item\030\003 \003(\0132\033.TgsPro"
    "tocol.CommonRankInfo\"\216\001\n%Lobby2Center_Re"
    "duceGlobalGoodsNum_Ntf\022L\n\005cmdId\030\001 \001(\0162\026."
    "TgsProtocol.PacketDef:%LOBBY2CENTER_REDU"
    "CEGLOBALGOODSNUM_NTF\022\n\n\002id\030\002 \002(\r\022\013\n\003num\030"
    "\003 \002(\r\"\254\001\n\"Center2Lobby_UpdateGlobalGoods"
    "_Ntf\022I\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Packet"
    "Def:\"CENTER2LOBBY_UPDATEGLOBALGOODS_NTF\022"
    "*\n\004item\030\002 \003(\0132\034.TgsProtocol.GlobalGoodsC"
    "onf\022\017\n\007isreset\030\003 \001(\010\"\310\001\n\030Lobby2Center_Au"
    "ction_Ntf\022@\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.P"
    "acketDef:\031LOBBY2CENTER_AUCTION_SELF\022\017\n\007e"
    "ndTime\030\002 \002(\r\022)\n\006source\030\003 \003(\0132\031.TgsProtoc"
    "ol.ClientSource\022\013\n\003num\030\004 \003(\r\022\r\n\005limit\030\005 "
    "\003(\r\022\022\n\nactivityid\030\006 \002(\r\"\301\001\n\033Lobby2Center"
    "_BuyAuction_Ntf\022D\n\005cmdId\030\001 \001(\0162\026.TgsProt"
    "ocol.PacketDef:\035LOBBY2CENTER_BUY_AUCTION"
    "_SELF\022\016\n\006charid\030\002 \002(\r\022\020\n\010serverId\030\003 \002(\r\022"
    "\r\n\005photo\030\004 \002(\r\022\014\n\004name\030\005 \002(\t\022\016\n\006buyNum\030\006"
    " \002(\r\022\r\n\005index\030\007 \002(\r\"\243\001\n\033Center2Lobby_Buy"
    "Auction_Ntf\022D\n\005cmdId\030\001 \001(\0162\026.TgsProtocol"
    ".PacketDef:\035CENTER2LOBBY_BUY_AUCTION_SEL"
    "F\022\016\n\006charid\030\002 \002(\r\022\016\n\006buyNum\030\003 \002(\r\022\r\n\005ind"
    "ex\030\004 \002(\r\022\017\n\007errCode\030\005 \002(\r\"\221\001\n\034Center2Lob"
    "by_Auction_End_Ntf\022D\n\005cmdId\030\001 \001(\0162\026.TgsP"
    "rotocol.PacketDef:\035CENTER2LOBBY_AUCTION_"
    "END_SELF\022\014\n\004type\030\002 \002(\r\022\016\n\006charid\030\003 \002(\r\022\r"
    "\n\005index\030\004 \002(\r\"c\n\036Center2Lobby_Auction_Cl"
    "ear_Ntf\022A\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Pac"
    "ketDef:\032LOBBY2CENTER_CLEAN_AUCTION\"\177\n\030Lo"
    "bby2Center_GetList_Ntf\022A\n\005cmdId\030\001 \001(\0162\026."
    "TgsProtocol.PacketDef:\032LOBBY2CENTER_GET_"
    "LIST_SELF\022\016\n\006charid\030\002 \002(\r\022\020\n\010serverid\030\003 "
    "\002(\r\"\277\001\n\030Center2Lobby_GetList_Ntf\022A\n\005cmdI"
    "d\030\001 \001(\0162\026.TgsProtocol.PacketDef:\032CENTER2"
    "LOBBY_GET_LIST_SELF\022\016\n\006charid\030\002 \002(\r\022&\n\004i"
    "nfo\030\003 \003(\0132\030.TgsProtocol.AuctionInfo\022\013\n\003n"
    "um\030\004 \003(\r\022\016\n\006buyNum\030\005 \003(\r\022\013\n\003win\030\006 \003(\r\"\221\001"
    "\n$Lobby2Center_GetGlobalServerRank_Req\022K"
    "\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:$L"
    "OBBY2CENTER_GETGLOBALSERVERRANK_REQ\022\016\n\006c"
    "harid\030\002 \002(\004\022\014\n\004type\030\003 \002(\r\"\314\001\n$Center2Lob"
    "by_GetGlobalServerRank_Ret\022K\n\005cmdId\030\001 \001("
    "\0162\026.TgsProtocol.PacketDef:$CENTER2LOBBY_"
    "GETGLOBALSERVERRANK_RET\022\016\n\006charid\030\002 \002(\004\022"
    "\016\n\006myrank\030\003 \001(\r\022\014\n\004type\030\004 \001(\r\022)\n\004data\030\005 "
    "\003(\0132\033.TgsProtocol.PlayerRankData\"\244\001\n\'Lob"
    "by2Center_PlayerGlobalServerRank_Ntf\022N\n\005"
    "cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\'LOB"
    "BY2CENTER_PLAYERGLOBALSERVERRANK_NTF\022)\n\004"
    "data\030\002 \002(\0132\033.TgsProtocol.PlayerRankData\""
    "\337\001\n\033Lobby2Center_UpdateRank_Ntf\022B\n\005cmdId"
    "\030\001 \001(\0162\026.TgsProtocol.PacketDef:\033LOBBY2CE"
    "NTER_UPDATERANK_NTF\022*\n\004type\030\002 \002(\0162\034.TgsP"
    "rotocol.ECenterRankType\022\016\n\006charid\030\003 \002(\004\022"
    "\r\n\005value\030\004 \002(\004\022\013\n\003uid\030\005 \002(\004\022\020\n\010charname\030"
    "\006 \002(\t\022\022\n\nnationalId\030\007 \001(\r\"\266\001\n\030Lobby2Cent"
    "er_GetRank_Req\022\?\n\005cmdId\030\001 \001(\0162\026.TgsProto"
    "col.PacketDef:\030LOBBY2CENTER_GETRANK_REQ\022"
    "\013\n\003uid\030\002 \002(\004\022*\n\004type\030\003 \002(\0162\034.TgsProtocol"
    ".ECenterRankType\022\020\n\010limitNum\030\004 \002(\r\022\016\n\006ch"
    "arid\030\005 \002(\004\"\270\001\n\030Center2Lobby_GetRank_Ret\022"
    "\?\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\030"
    "CENTER2LOBBY_GETRANK_RET\022\013\n\003uid\030\002 \002(\004\022\016\n"
    "\006charid\030\003 \002(\004\022\016\n\006myrank\030\004 \002(\r\022.\n\trank_in"
    "fo\030\005 \003(\0132\033.TgsProtocol.CenterRankInfo\"\246\001"
    "\n!Lobby2Center_CloseConsumeRank_Ntf\022H\n\005c"
    "mdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:!LOBB"
    "Y2CENTER_CLOSECONSUMERANK_NTF\022\013\n\003uid\030\002 \002"
    "(\004\022*\n\004type\030\003 \002(\0162\034.TgsProtocol.ECenterRa"
    "nkType\"\254\001\n\"Center2Lobby_ConsumeRankRewar"
    "d_Ntf\022I\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Packe"
    "tDef:\"CENTER2LOBBY_CONSUMERANKREWARD_NTF"
    "\022\013\n\003uid\030\002 \002(\004\022.\n\trank_info\030\003 \003(\0132\033.TgsPr"
    "otocol.CenterRankInfo", 5341);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol_lobby_center.proto", &protobuf_RegisterTypes);
  Lobby2Center_ServerInfo_Ntf::default_instance_ = new Lobby2Center_ServerInfo_Ntf();
  Lobby2Center_ServerConf_Ntf::default_instance_ = new Lobby2Center_ServerConf_Ntf();
  Lobby2Center_SetTime_Ntf::default_instance_ = new Lobby2Center_SetTime_Ntf();
  Lobby2Center_ServerWarConf_Ntf::default_instance_ = new Lobby2Center_ServerWarConf_Ntf();
  Lobby2Center_PlayerTurntable_Ntf::default_instance_ = new Lobby2Center_PlayerTurntable_Ntf();
  Lobby2Center_GetTurntableRank_Req::default_instance_ = new Lobby2Center_GetTurntableRank_Req();
  Center2Lobby_GetTurntableRank_Ret::default_instance_ = new Center2Lobby_GetTurntableRank_Ret();
  Lobby2Center_CloseTurntableRank_Ntf::default_instance_ = new Lobby2Center_CloseTurntableRank_Ntf();
  CommonRankInfo::default_instance_ = new CommonRankInfo();
  Center2Lobby_TurntableRankReward_Ntf::default_instance_ = new Center2Lobby_TurntableRankReward_Ntf();
  Center2Lobby_GetArenaList_Req::default_instance_ = new Center2Lobby_GetArenaList_Req();
  Lobby2Center_GetArenaList_Ret::default_instance_ = new Lobby2Center_GetArenaList_Ret();
  RankInfo::default_instance_ = new RankInfo();
  Center2Lobby_ServerWarRankReward_Ntf::default_instance_ = new Center2Lobby_ServerWarRankReward_Ntf();
  Lobby2Center_CloseSWar_Ntf::default_instance_ = new Lobby2Center_CloseSWar_Ntf();
  Lobby2Center_UpdateTeamHonor_Ntf::default_instance_ = new Lobby2Center_UpdateTeamHonor_Ntf();
  Center2Lobby_ServerTeamRankReward_Ntf::default_instance_ = new Center2Lobby_ServerTeamRankReward_Ntf();
  Lobby2Center_ReduceGlobalGoodsNum_Ntf::default_instance_ = new Lobby2Center_ReduceGlobalGoodsNum_Ntf();
  Center2Lobby_UpdateGlobalGoods_Ntf::default_instance_ = new Center2Lobby_UpdateGlobalGoods_Ntf();
  Lobby2Center_Auction_Ntf::default_instance_ = new Lobby2Center_Auction_Ntf();
  Lobby2Center_BuyAuction_Ntf::default_instance_ = new Lobby2Center_BuyAuction_Ntf();
  Center2Lobby_BuyAuction_Ntf::default_instance_ = new Center2Lobby_BuyAuction_Ntf();
  Center2Lobby_Auction_End_Ntf::default_instance_ = new Center2Lobby_Auction_End_Ntf();
  Center2Lobby_Auction_Clear_Ntf::default_instance_ = new Center2Lobby_Auction_Clear_Ntf();
  Lobby2Center_GetList_Ntf::default_instance_ = new Lobby2Center_GetList_Ntf();
  Center2Lobby_GetList_Ntf::default_instance_ = new Center2Lobby_GetList_Ntf();
  Lobby2Center_GetGlobalServerRank_Req::default_instance_ = new Lobby2Center_GetGlobalServerRank_Req();
  Center2Lobby_GetGlobalServerRank_Ret::default_instance_ = new Center2Lobby_GetGlobalServerRank_Ret();
  Lobby2Center_PlayerGlobalServerRank_Ntf::default_instance_ = new Lobby2Center_PlayerGlobalServerRank_Ntf();
  Lobby2Center_UpdateRank_Ntf::default_instance_ = new Lobby2Center_UpdateRank_Ntf();
  Lobby2Center_GetRank_Req::default_instance_ = new Lobby2Center_GetRank_Req();
  Center2Lobby_GetRank_Ret::default_instance_ = new Center2Lobby_GetRank_Ret();
  Lobby2Center_CloseConsumeRank_Ntf::default_instance_ = new Lobby2Center_CloseConsumeRank_Ntf();
  Center2Lobby_ConsumeRankReward_Ntf::default_instance_ = new Center2Lobby_ConsumeRankReward_Ntf();
  Lobby2Center_ServerInfo_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_ServerConf_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_SetTime_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_ServerWarConf_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_PlayerTurntable_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_GetTurntableRank_Req::default_instance_->InitAsDefaultInstance();
  Center2Lobby_GetTurntableRank_Ret::default_instance_->InitAsDefaultInstance();
  Lobby2Center_CloseTurntableRank_Ntf::default_instance_->InitAsDefaultInstance();
  CommonRankInfo::default_instance_->InitAsDefaultInstance();
  Center2Lobby_TurntableRankReward_Ntf::default_instance_->InitAsDefaultInstance();
  Center2Lobby_GetArenaList_Req::default_instance_->InitAsDefaultInstance();
  Lobby2Center_GetArenaList_Ret::default_instance_->InitAsDefaultInstance();
  RankInfo::default_instance_->InitAsDefaultInstance();
  Center2Lobby_ServerWarRankReward_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_CloseSWar_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_UpdateTeamHonor_Ntf::default_instance_->InitAsDefaultInstance();
  Center2Lobby_ServerTeamRankReward_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_ReduceGlobalGoodsNum_Ntf::default_instance_->InitAsDefaultInstance();
  Center2Lobby_UpdateGlobalGoods_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_Auction_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_BuyAuction_Ntf::default_instance_->InitAsDefaultInstance();
  Center2Lobby_BuyAuction_Ntf::default_instance_->InitAsDefaultInstance();
  Center2Lobby_Auction_End_Ntf::default_instance_->InitAsDefaultInstance();
  Center2Lobby_Auction_Clear_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_GetList_Ntf::default_instance_->InitAsDefaultInstance();
  Center2Lobby_GetList_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_GetGlobalServerRank_Req::default_instance_->InitAsDefaultInstance();
  Center2Lobby_GetGlobalServerRank_Ret::default_instance_->InitAsDefaultInstance();
  Lobby2Center_PlayerGlobalServerRank_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_UpdateRank_Ntf::default_instance_->InitAsDefaultInstance();
  Lobby2Center_GetRank_Req::default_instance_->InitAsDefaultInstance();
  Center2Lobby_GetRank_Ret::default_instance_->InitAsDefaultInstance();
  Lobby2Center_CloseConsumeRank_Ntf::default_instance_->InitAsDefaultInstance();
  Center2Lobby_ConsumeRankReward_Ntf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_5flobby_5fcenter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_5flobby_5fcenter_2eproto {
  StaticDescriptorInitializer_protocol_5flobby_5fcenter_2eproto() {
    protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  }
} static_descriptor_initializer_protocol_5flobby_5fcenter_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_ServerInfo_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_ServerInfo_Ntf::kServerIdFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_ServerInfo_Ntf::Lobby2Center_ServerInfo_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_ServerInfo_Ntf)
}

void Lobby2Center_ServerInfo_Ntf::InitAsDefaultInstance() {
}

Lobby2Center_ServerInfo_Ntf::Lobby2Center_ServerInfo_Ntf(const Lobby2Center_ServerInfo_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_ServerInfo_Ntf)
}

void Lobby2Center_ServerInfo_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 900000;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_ServerInfo_Ntf::~Lobby2Center_ServerInfo_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_ServerInfo_Ntf)
  SharedDtor();
}

void Lobby2Center_ServerInfo_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_ServerInfo_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_ServerInfo_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_ServerInfo_Ntf_descriptor_;
}

const Lobby2Center_ServerInfo_Ntf& Lobby2Center_ServerInfo_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_ServerInfo_Ntf* Lobby2Center_ServerInfo_Ntf::default_instance_ = NULL;

Lobby2Center_ServerInfo_Ntf* Lobby2Center_ServerInfo_Ntf::New() const {
  return new Lobby2Center_ServerInfo_Ntf;
}

void Lobby2Center_ServerInfo_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 900000;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_ServerInfo_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_ServerInfo_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERINFO_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // required uint32 server_id = 2;
      case 2: {
        if (tag == 16) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_ServerInfo_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_ServerInfo_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_ServerInfo_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_ServerInfo_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERINFO_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_ServerInfo_Ntf)
}

::google::protobuf::uint8* Lobby2Center_ServerInfo_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_ServerInfo_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERINFO_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_ServerInfo_Ntf)
  return target;
}

int Lobby2Center_ServerInfo_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERINFO_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_ServerInfo_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_ServerInfo_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_ServerInfo_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_ServerInfo_Ntf::MergeFrom(const Lobby2Center_ServerInfo_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_ServerInfo_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_ServerInfo_Ntf::CopyFrom(const Lobby2Center_ServerInfo_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_ServerInfo_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Lobby2Center_ServerInfo_Ntf::Swap(Lobby2Center_ServerInfo_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_ServerInfo_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_ServerInfo_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_ServerInfo_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_ServerConf_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_ServerConf_Ntf::kGoodsFieldNumber;
const int Lobby2Center_ServerConf_Ntf::kSteamFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_ServerConf_Ntf::Lobby2Center_ServerConf_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_ServerConf_Ntf)
}

void Lobby2Center_ServerConf_Ntf::InitAsDefaultInstance() {
  steam_ = const_cast< ::TgsProtocol::ServerTeamConf*>(&::TgsProtocol::ServerTeamConf::default_instance());
}

Lobby2Center_ServerConf_Ntf::Lobby2Center_ServerConf_Ntf(const Lobby2Center_ServerConf_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_ServerConf_Ntf)
}

void Lobby2Center_ServerConf_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 900006;
  steam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_ServerConf_Ntf::~Lobby2Center_ServerConf_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_ServerConf_Ntf)
  SharedDtor();
}

void Lobby2Center_ServerConf_Ntf::SharedDtor() {
  if (this != default_instance_) {
    delete steam_;
  }
}

void Lobby2Center_ServerConf_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_ServerConf_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_ServerConf_Ntf_descriptor_;
}

const Lobby2Center_ServerConf_Ntf& Lobby2Center_ServerConf_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_ServerConf_Ntf* Lobby2Center_ServerConf_Ntf::default_instance_ = NULL;

Lobby2Center_ServerConf_Ntf* Lobby2Center_ServerConf_Ntf::New() const {
  return new Lobby2Center_ServerConf_Ntf;
}

void Lobby2Center_ServerConf_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    cmdid_ = 900006;
    if (has_steam()) {
      if (steam_ != NULL) steam_->::TgsProtocol::ServerTeamConf::Clear();
    }
  }
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_ServerConf_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_ServerConf_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERCONF_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        break;
      }

      // repeated .TgsProtocol.GlobalGoodsConf goods = 2;
      case 2: {
        if (tag == 18) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        if (input->ExpectTag(26)) goto parse_steam;
        break;
      }

      // optional .TgsProtocol.ServerTeamConf steam = 3;
      case 3: {
        if (tag == 26) {
         parse_steam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_steam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_ServerConf_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_ServerConf_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_ServerConf_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_ServerConf_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERCONF_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.GlobalGoodsConf goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goods(i), output);
  }

  // optional .TgsProtocol.ServerTeamConf steam = 3;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->steam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_ServerConf_Ntf)
}

::google::protobuf::uint8* Lobby2Center_ServerConf_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_ServerConf_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERCONF_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.GlobalGoodsConf goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goods(i), target);
  }

  // optional .TgsProtocol.ServerTeamConf steam = 3;
  if (has_steam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->steam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_ServerConf_Ntf)
  return target;
}

int Lobby2Center_ServerConf_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERCONF_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional .TgsProtocol.ServerTeamConf steam = 3;
    if (has_steam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->steam());
    }

  }
  // repeated .TgsProtocol.GlobalGoodsConf goods = 2;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_ServerConf_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_ServerConf_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_ServerConf_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_ServerConf_Ntf::MergeFrom(const Lobby2Center_ServerConf_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_steam()) {
      mutable_steam()->::TgsProtocol::ServerTeamConf::MergeFrom(from.steam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_ServerConf_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_ServerConf_Ntf::CopyFrom(const Lobby2Center_ServerConf_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_ServerConf_Ntf::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->goods())) return false;
  if (has_steam()) {
    if (!this->steam().IsInitialized()) return false;
  }
  return true;
}

void Lobby2Center_ServerConf_Ntf::Swap(Lobby2Center_ServerConf_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    goods_.Swap(&other->goods_);
    std::swap(steam_, other->steam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_ServerConf_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_ServerConf_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_ServerConf_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_SetTime_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_SetTime_Ntf::kTimeOffFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_SetTime_Ntf::Lobby2Center_SetTime_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_SetTime_Ntf)
}

void Lobby2Center_SetTime_Ntf::InitAsDefaultInstance() {
}

Lobby2Center_SetTime_Ntf::Lobby2Center_SetTime_Ntf(const Lobby2Center_SetTime_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_SetTime_Ntf)
}

void Lobby2Center_SetTime_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 900005;
  time_off_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_SetTime_Ntf::~Lobby2Center_SetTime_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_SetTime_Ntf)
  SharedDtor();
}

void Lobby2Center_SetTime_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_SetTime_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_SetTime_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_SetTime_Ntf_descriptor_;
}

const Lobby2Center_SetTime_Ntf& Lobby2Center_SetTime_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_SetTime_Ntf* Lobby2Center_SetTime_Ntf::default_instance_ = NULL;

Lobby2Center_SetTime_Ntf* Lobby2Center_SetTime_Ntf::New() const {
  return new Lobby2Center_SetTime_Ntf;
}

void Lobby2Center_SetTime_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 900005;
    time_off_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_SetTime_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_SetTime_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SETTIME_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_off;
        break;
      }

      // required int32 time_off = 2;
      case 2: {
        if (tag == 16) {
         parse_time_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_off_)));
          set_has_time_off();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_SetTime_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_SetTime_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_SetTime_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_SetTime_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SETTIME_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required int32 time_off = 2;
  if (has_time_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_off(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_SetTime_Ntf)
}

::google::protobuf::uint8* Lobby2Center_SetTime_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_SetTime_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SETTIME_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required int32 time_off = 2;
  if (has_time_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_off(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_SetTime_Ntf)
  return target;
}

int Lobby2Center_SetTime_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SETTIME_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required int32 time_off = 2;
    if (has_time_off()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_off());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_SetTime_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_SetTime_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_SetTime_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_SetTime_Ntf::MergeFrom(const Lobby2Center_SetTime_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_time_off()) {
      set_time_off(from.time_off());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_SetTime_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_SetTime_Ntf::CopyFrom(const Lobby2Center_SetTime_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_SetTime_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Lobby2Center_SetTime_Ntf::Swap(Lobby2Center_SetTime_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(time_off_, other->time_off_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_SetTime_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_SetTime_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_SetTime_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_ServerWarConf_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_ServerWarConf_Ntf::kConfFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_ServerWarConf_Ntf::Lobby2Center_ServerWarConf_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_ServerWarConf_Ntf)
}

void Lobby2Center_ServerWarConf_Ntf::InitAsDefaultInstance() {
  conf_ = const_cast< ::TgsProtocol::ServerWarConf*>(&::TgsProtocol::ServerWarConf::default_instance());
}

Lobby2Center_ServerWarConf_Ntf::Lobby2Center_ServerWarConf_Ntf(const Lobby2Center_ServerWarConf_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_ServerWarConf_Ntf)
}

void Lobby2Center_ServerWarConf_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 900004;
  conf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_ServerWarConf_Ntf::~Lobby2Center_ServerWarConf_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_ServerWarConf_Ntf)
  SharedDtor();
}

void Lobby2Center_ServerWarConf_Ntf::SharedDtor() {
  if (this != default_instance_) {
    delete conf_;
  }
}

void Lobby2Center_ServerWarConf_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_ServerWarConf_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_ServerWarConf_Ntf_descriptor_;
}

const Lobby2Center_ServerWarConf_Ntf& Lobby2Center_ServerWarConf_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_ServerWarConf_Ntf* Lobby2Center_ServerWarConf_Ntf::default_instance_ = NULL;

Lobby2Center_ServerWarConf_Ntf* Lobby2Center_ServerWarConf_Ntf::New() const {
  return new Lobby2Center_ServerWarConf_Ntf;
}

void Lobby2Center_ServerWarConf_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 900004;
    if (has_conf()) {
      if (conf_ != NULL) conf_->::TgsProtocol::ServerWarConf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_ServerWarConf_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_ServerWarConf_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERWARCONF_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_conf;
        break;
      }

      // required .TgsProtocol.ServerWarConf conf = 2;
      case 2: {
        if (tag == 18) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_ServerWarConf_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_ServerWarConf_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_ServerWarConf_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_ServerWarConf_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERWARCONF_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required .TgsProtocol.ServerWarConf conf = 2;
  if (has_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->conf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_ServerWarConf_Ntf)
}

::google::protobuf::uint8* Lobby2Center_ServerWarConf_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_ServerWarConf_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERWARCONF_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required .TgsProtocol.ServerWarConf conf = 2;
  if (has_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->conf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_ServerWarConf_Ntf)
  return target;
}

int Lobby2Center_ServerWarConf_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_SERVERWARCONF_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required .TgsProtocol.ServerWarConf conf = 2;
    if (has_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_ServerWarConf_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_ServerWarConf_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_ServerWarConf_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_ServerWarConf_Ntf::MergeFrom(const Lobby2Center_ServerWarConf_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_conf()) {
      mutable_conf()->::TgsProtocol::ServerWarConf::MergeFrom(from.conf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_ServerWarConf_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_ServerWarConf_Ntf::CopyFrom(const Lobby2Center_ServerWarConf_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_ServerWarConf_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Lobby2Center_ServerWarConf_Ntf::Swap(Lobby2Center_ServerWarConf_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(conf_, other->conf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_ServerWarConf_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_ServerWarConf_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_ServerWarConf_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_PlayerTurntable_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_PlayerTurntable_Ntf::kDataFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_PlayerTurntable_Ntf::Lobby2Center_PlayerTurntable_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_PlayerTurntable_Ntf)
}

void Lobby2Center_PlayerTurntable_Ntf::InitAsDefaultInstance() {
  data_ = const_cast< ::TgsProtocol::PlayerTurntableData*>(&::TgsProtocol::PlayerTurntableData::default_instance());
}

Lobby2Center_PlayerTurntable_Ntf::Lobby2Center_PlayerTurntable_Ntf(const Lobby2Center_PlayerTurntable_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_PlayerTurntable_Ntf)
}

void Lobby2Center_PlayerTurntable_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 900001;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_PlayerTurntable_Ntf::~Lobby2Center_PlayerTurntable_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_PlayerTurntable_Ntf)
  SharedDtor();
}

void Lobby2Center_PlayerTurntable_Ntf::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Lobby2Center_PlayerTurntable_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_PlayerTurntable_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_PlayerTurntable_Ntf_descriptor_;
}

const Lobby2Center_PlayerTurntable_Ntf& Lobby2Center_PlayerTurntable_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_PlayerTurntable_Ntf* Lobby2Center_PlayerTurntable_Ntf::default_instance_ = NULL;

Lobby2Center_PlayerTurntable_Ntf* Lobby2Center_PlayerTurntable_Ntf::New() const {
  return new Lobby2Center_PlayerTurntable_Ntf;
}

void Lobby2Center_PlayerTurntable_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 900001;
    if (has_data()) {
      if (data_ != NULL) data_->::TgsProtocol::PlayerTurntableData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_PlayerTurntable_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_PlayerTurntable_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_PLAYERTURNTABLE_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .TgsProtocol.PlayerTurntableData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_PlayerTurntable_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_PlayerTurntable_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_PlayerTurntable_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_PlayerTurntable_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_PLAYERTURNTABLE_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required .TgsProtocol.PlayerTurntableData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_PlayerTurntable_Ntf)
}

::google::protobuf::uint8* Lobby2Center_PlayerTurntable_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_PlayerTurntable_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_PLAYERTURNTABLE_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required .TgsProtocol.PlayerTurntableData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_PlayerTurntable_Ntf)
  return target;
}

int Lobby2Center_PlayerTurntable_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_PLAYERTURNTABLE_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required .TgsProtocol.PlayerTurntableData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_PlayerTurntable_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_PlayerTurntable_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_PlayerTurntable_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_PlayerTurntable_Ntf::MergeFrom(const Lobby2Center_PlayerTurntable_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_data()) {
      mutable_data()->::TgsProtocol::PlayerTurntableData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_PlayerTurntable_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_PlayerTurntable_Ntf::CopyFrom(const Lobby2Center_PlayerTurntable_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_PlayerTurntable_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void Lobby2Center_PlayerTurntable_Ntf::Swap(Lobby2Center_PlayerTurntable_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_PlayerTurntable_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_PlayerTurntable_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_PlayerTurntable_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_GetTurntableRank_Req::kCmdIdFieldNumber;
const int Lobby2Center_GetTurntableRank_Req::kUidFieldNumber;
const int Lobby2Center_GetTurntableRank_Req::kCharidFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_GetTurntableRank_Req::Lobby2Center_GetTurntableRank_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_GetTurntableRank_Req)
}

void Lobby2Center_GetTurntableRank_Req::InitAsDefaultInstance() {
}

Lobby2Center_GetTurntableRank_Req::Lobby2Center_GetTurntableRank_Req(const Lobby2Center_GetTurntableRank_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_GetTurntableRank_Req)
}

void Lobby2Center_GetTurntableRank_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 900002;
  uid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_GetTurntableRank_Req::~Lobby2Center_GetTurntableRank_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_GetTurntableRank_Req)
  SharedDtor();
}

void Lobby2Center_GetTurntableRank_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_GetTurntableRank_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_GetTurntableRank_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_GetTurntableRank_Req_descriptor_;
}

const Lobby2Center_GetTurntableRank_Req& Lobby2Center_GetTurntableRank_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_GetTurntableRank_Req* Lobby2Center_GetTurntableRank_Req::default_instance_ = NULL;

Lobby2Center_GetTurntableRank_Req* Lobby2Center_GetTurntableRank_Req::New() const {
  return new Lobby2Center_GetTurntableRank_Req;
}

void Lobby2Center_GetTurntableRank_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Lobby2Center_GetTurntableRank_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, charid_);
    cmdid_ = 900002;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_GetTurntableRank_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_GetTurntableRank_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETTURNTABLERANK_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_GetTurntableRank_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_GetTurntableRank_Req)
  return false;
#undef DO_
}

void Lobby2Center_GetTurntableRank_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_GetTurntableRank_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETTURNTABLERANK_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_GetTurntableRank_Req)
}

::google::protobuf::uint8* Lobby2Center_GetTurntableRank_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_GetTurntableRank_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETTURNTABLERANK_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_GetTurntableRank_Req)
  return target;
}

int Lobby2Center_GetTurntableRank_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETTURNTABLERANK_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_GetTurntableRank_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_GetTurntableRank_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_GetTurntableRank_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_GetTurntableRank_Req::MergeFrom(const Lobby2Center_GetTurntableRank_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_GetTurntableRank_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_GetTurntableRank_Req::CopyFrom(const Lobby2Center_GetTurntableRank_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_GetTurntableRank_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Lobby2Center_GetTurntableRank_Req::Swap(Lobby2Center_GetTurntableRank_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(uid_, other->uid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_GetTurntableRank_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_GetTurntableRank_Req_descriptor_;
  metadata.reflection = Lobby2Center_GetTurntableRank_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_GetTurntableRank_Ret::kCmdIdFieldNumber;
const int Center2Lobby_GetTurntableRank_Ret::kCharidFieldNumber;
const int Center2Lobby_GetTurntableRank_Ret::kUidFieldNumber;
const int Center2Lobby_GetTurntableRank_Ret::kDataFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_GetTurntableRank_Ret::Center2Lobby_GetTurntableRank_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_GetTurntableRank_Ret)
}

void Center2Lobby_GetTurntableRank_Ret::InitAsDefaultInstance() {
}

Center2Lobby_GetTurntableRank_Ret::Center2Lobby_GetTurntableRank_Ret(const Center2Lobby_GetTurntableRank_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_GetTurntableRank_Ret)
}

void Center2Lobby_GetTurntableRank_Ret::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 900003;
  charid_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_GetTurntableRank_Ret::~Center2Lobby_GetTurntableRank_Ret() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_GetTurntableRank_Ret)
  SharedDtor();
}

void Center2Lobby_GetTurntableRank_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_GetTurntableRank_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_GetTurntableRank_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_GetTurntableRank_Ret_descriptor_;
}

const Center2Lobby_GetTurntableRank_Ret& Center2Lobby_GetTurntableRank_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_GetTurntableRank_Ret* Center2Lobby_GetTurntableRank_Ret::default_instance_ = NULL;

Center2Lobby_GetTurntableRank_Ret* Center2Lobby_GetTurntableRank_Ret::New() const {
  return new Center2Lobby_GetTurntableRank_Ret;
}

void Center2Lobby_GetTurntableRank_Ret::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Center2Lobby_GetTurntableRank_Ret*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(charid_, uid_);
    cmdid_ = 900003;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_GetTurntableRank_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_GetTurntableRank_Ret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETTURNTABLERANK_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint64 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .TgsProtocol.PlayerTurntableData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_GetTurntableRank_Ret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_GetTurntableRank_Ret)
  return false;
#undef DO_
}

void Center2Lobby_GetTurntableRank_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_GetTurntableRank_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETTURNTABLERANK_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required uint64 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  // repeated .TgsProtocol.PlayerTurntableData data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_GetTurntableRank_Ret)
}

::google::protobuf::uint8* Center2Lobby_GetTurntableRank_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_GetTurntableRank_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETTURNTABLERANK_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required uint64 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  // repeated .TgsProtocol.PlayerTurntableData data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_GetTurntableRank_Ret)
  return target;
}

int Center2Lobby_GetTurntableRank_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETTURNTABLERANK_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint64 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  // repeated .TgsProtocol.PlayerTurntableData data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_GetTurntableRank_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_GetTurntableRank_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_GetTurntableRank_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_GetTurntableRank_Ret::MergeFrom(const Center2Lobby_GetTurntableRank_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_GetTurntableRank_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_GetTurntableRank_Ret::CopyFrom(const Center2Lobby_GetTurntableRank_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_GetTurntableRank_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void Center2Lobby_GetTurntableRank_Ret::Swap(Center2Lobby_GetTurntableRank_Ret* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(uid_, other->uid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_GetTurntableRank_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_GetTurntableRank_Ret_descriptor_;
  metadata.reflection = Center2Lobby_GetTurntableRank_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_CloseTurntableRank_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_CloseTurntableRank_Ntf::kUidFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_CloseTurntableRank_Ntf::Lobby2Center_CloseTurntableRank_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_CloseTurntableRank_Ntf)
}

void Lobby2Center_CloseTurntableRank_Ntf::InitAsDefaultInstance() {
}

Lobby2Center_CloseTurntableRank_Ntf::Lobby2Center_CloseTurntableRank_Ntf(const Lobby2Center_CloseTurntableRank_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_CloseTurntableRank_Ntf)
}

void Lobby2Center_CloseTurntableRank_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210333;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_CloseTurntableRank_Ntf::~Lobby2Center_CloseTurntableRank_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_CloseTurntableRank_Ntf)
  SharedDtor();
}

void Lobby2Center_CloseTurntableRank_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_CloseTurntableRank_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_CloseTurntableRank_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_CloseTurntableRank_Ntf_descriptor_;
}

const Lobby2Center_CloseTurntableRank_Ntf& Lobby2Center_CloseTurntableRank_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_CloseTurntableRank_Ntf* Lobby2Center_CloseTurntableRank_Ntf::default_instance_ = NULL;

Lobby2Center_CloseTurntableRank_Ntf* Lobby2Center_CloseTurntableRank_Ntf::New() const {
  return new Lobby2Center_CloseTurntableRank_Ntf;
}

void Lobby2Center_CloseTurntableRank_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 210333;
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_CloseTurntableRank_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_CloseTurntableRank_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSETURNTABLERANK_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_CloseTurntableRank_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_CloseTurntableRank_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_CloseTurntableRank_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_CloseTurntableRank_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSETURNTABLERANK_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_CloseTurntableRank_Ntf)
}

::google::protobuf::uint8* Lobby2Center_CloseTurntableRank_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_CloseTurntableRank_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSETURNTABLERANK_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_CloseTurntableRank_Ntf)
  return target;
}

int Lobby2Center_CloseTurntableRank_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSETURNTABLERANK_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_CloseTurntableRank_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_CloseTurntableRank_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_CloseTurntableRank_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_CloseTurntableRank_Ntf::MergeFrom(const Lobby2Center_CloseTurntableRank_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_CloseTurntableRank_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_CloseTurntableRank_Ntf::CopyFrom(const Lobby2Center_CloseTurntableRank_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_CloseTurntableRank_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Lobby2Center_CloseTurntableRank_Ntf::Swap(Lobby2Center_CloseTurntableRank_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_CloseTurntableRank_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_CloseTurntableRank_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_CloseTurntableRank_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonRankInfo::kCharidFieldNumber;
const int CommonRankInfo::kRankFieldNumber;
#endif  // !_MSC_VER

CommonRankInfo::CommonRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.CommonRankInfo)
}

void CommonRankInfo::InitAsDefaultInstance() {
}

CommonRankInfo::CommonRankInfo(const CommonRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.CommonRankInfo)
}

void CommonRankInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonRankInfo::~CommonRankInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.CommonRankInfo)
  SharedDtor();
}

void CommonRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonRankInfo_descriptor_;
}

const CommonRankInfo& CommonRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

CommonRankInfo* CommonRankInfo::default_instance_ = NULL;

CommonRankInfo* CommonRankInfo::New() const {
  return new CommonRankInfo;
}

void CommonRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CommonRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charid_, rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.CommonRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required uint32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.CommonRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.CommonRankInfo)
  return false;
#undef DO_
}

void CommonRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.CommonRankInfo)
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.CommonRankInfo)
}

::google::protobuf::uint8* CommonRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.CommonRankInfo)
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.CommonRankInfo)
  return target;
}

int CommonRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonRankInfo::MergeFrom(const CommonRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonRankInfo::CopyFrom(const CommonRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CommonRankInfo::Swap(CommonRankInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonRankInfo_descriptor_;
  metadata.reflection = CommonRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_TurntableRankReward_Ntf::kCmdIdFieldNumber;
const int Center2Lobby_TurntableRankReward_Ntf::kUidFieldNumber;
const int Center2Lobby_TurntableRankReward_Ntf::kItemFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_TurntableRankReward_Ntf::Center2Lobby_TurntableRankReward_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_TurntableRankReward_Ntf)
}

void Center2Lobby_TurntableRankReward_Ntf::InitAsDefaultInstance() {
}

Center2Lobby_TurntableRankReward_Ntf::Center2Lobby_TurntableRankReward_Ntf(const Center2Lobby_TurntableRankReward_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_TurntableRankReward_Ntf)
}

void Center2Lobby_TurntableRankReward_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210334;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_TurntableRankReward_Ntf::~Center2Lobby_TurntableRankReward_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_TurntableRankReward_Ntf)
  SharedDtor();
}

void Center2Lobby_TurntableRankReward_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_TurntableRankReward_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_TurntableRankReward_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_TurntableRankReward_Ntf_descriptor_;
}

const Center2Lobby_TurntableRankReward_Ntf& Center2Lobby_TurntableRankReward_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_TurntableRankReward_Ntf* Center2Lobby_TurntableRankReward_Ntf::default_instance_ = NULL;

Center2Lobby_TurntableRankReward_Ntf* Center2Lobby_TurntableRankReward_Ntf::New() const {
  return new Center2Lobby_TurntableRankReward_Ntf;
}

void Center2Lobby_TurntableRankReward_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 210334;
    uid_ = GOOGLE_ULONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_TurntableRankReward_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_TurntableRankReward_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_TURNTABLERANKREWARD_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.CommonRankInfo item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_TurntableRankReward_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_TurntableRankReward_Ntf)
  return false;
#undef DO_
}

void Center2Lobby_TurntableRankReward_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_TurntableRankReward_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_TURNTABLERANKREWARD_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // repeated .TgsProtocol.CommonRankInfo item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_TurntableRankReward_Ntf)
}

::google::protobuf::uint8* Center2Lobby_TurntableRankReward_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_TurntableRankReward_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_TURNTABLERANKREWARD_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // repeated .TgsProtocol.CommonRankInfo item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_TurntableRankReward_Ntf)
  return target;
}

int Center2Lobby_TurntableRankReward_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_TURNTABLERANKREWARD_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  // repeated .TgsProtocol.CommonRankInfo item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_TurntableRankReward_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_TurntableRankReward_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_TurntableRankReward_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_TurntableRankReward_Ntf::MergeFrom(const Center2Lobby_TurntableRankReward_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_TurntableRankReward_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_TurntableRankReward_Ntf::CopyFrom(const Center2Lobby_TurntableRankReward_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_TurntableRankReward_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void Center2Lobby_TurntableRankReward_Ntf::Swap(Center2Lobby_TurntableRankReward_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(uid_, other->uid_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_TurntableRankReward_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_TurntableRankReward_Ntf_descriptor_;
  metadata.reflection = Center2Lobby_TurntableRankReward_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_GetArenaList_Req::kCmdIdFieldNumber;
const int Center2Lobby_GetArenaList_Req::kNeedRobotFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_GetArenaList_Req::Center2Lobby_GetArenaList_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_GetArenaList_Req)
}

void Center2Lobby_GetArenaList_Req::InitAsDefaultInstance() {
}

Center2Lobby_GetArenaList_Req::Center2Lobby_GetArenaList_Req(const Center2Lobby_GetArenaList_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_GetArenaList_Req)
}

void Center2Lobby_GetArenaList_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 310335;
  needrobot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_GetArenaList_Req::~Center2Lobby_GetArenaList_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_GetArenaList_Req)
  SharedDtor();
}

void Center2Lobby_GetArenaList_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_GetArenaList_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_GetArenaList_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_GetArenaList_Req_descriptor_;
}

const Center2Lobby_GetArenaList_Req& Center2Lobby_GetArenaList_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_GetArenaList_Req* Center2Lobby_GetArenaList_Req::default_instance_ = NULL;

Center2Lobby_GetArenaList_Req* Center2Lobby_GetArenaList_Req::New() const {
  return new Center2Lobby_GetArenaList_Req;
}

void Center2Lobby_GetArenaList_Req::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 310335;
    needrobot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_GetArenaList_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_GetArenaList_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETARENALIST_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_needRobot;
        break;
      }

      // optional bool needRobot = 2;
      case 2: {
        if (tag == 16) {
         parse_needRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needrobot_)));
          set_has_needrobot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_GetArenaList_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_GetArenaList_Req)
  return false;
#undef DO_
}

void Center2Lobby_GetArenaList_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_GetArenaList_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETARENALIST_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // optional bool needRobot = 2;
  if (has_needrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->needrobot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_GetArenaList_Req)
}

::google::protobuf::uint8* Center2Lobby_GetArenaList_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_GetArenaList_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETARENALIST_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // optional bool needRobot = 2;
  if (has_needrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->needrobot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_GetArenaList_Req)
  return target;
}

int Center2Lobby_GetArenaList_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETARENALIST_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional bool needRobot = 2;
    if (has_needrobot()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_GetArenaList_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_GetArenaList_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_GetArenaList_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_GetArenaList_Req::MergeFrom(const Center2Lobby_GetArenaList_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_needrobot()) {
      set_needrobot(from.needrobot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_GetArenaList_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_GetArenaList_Req::CopyFrom(const Center2Lobby_GetArenaList_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_GetArenaList_Req::IsInitialized() const {

  return true;
}

void Center2Lobby_GetArenaList_Req::Swap(Center2Lobby_GetArenaList_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(needrobot_, other->needrobot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_GetArenaList_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_GetArenaList_Req_descriptor_;
  metadata.reflection = Center2Lobby_GetArenaList_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_GetArenaList_Ret::kCmdIdFieldNumber;
const int Lobby2Center_GetArenaList_Ret::kItemFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_GetArenaList_Ret::Lobby2Center_GetArenaList_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_GetArenaList_Ret)
}

void Lobby2Center_GetArenaList_Ret::InitAsDefaultInstance() {
}

Lobby2Center_GetArenaList_Ret::Lobby2Center_GetArenaList_Ret(const Lobby2Center_GetArenaList_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_GetArenaList_Ret)
}

void Lobby2Center_GetArenaList_Ret::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 310336;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_GetArenaList_Ret::~Lobby2Center_GetArenaList_Ret() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_GetArenaList_Ret)
  SharedDtor();
}

void Lobby2Center_GetArenaList_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_GetArenaList_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_GetArenaList_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_GetArenaList_Ret_descriptor_;
}

const Lobby2Center_GetArenaList_Ret& Lobby2Center_GetArenaList_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_GetArenaList_Ret* Lobby2Center_GetArenaList_Ret::default_instance_ = NULL;

Lobby2Center_GetArenaList_Ret* Lobby2Center_GetArenaList_Ret::New() const {
  return new Lobby2Center_GetArenaList_Ret;
}

void Lobby2Center_GetArenaList_Ret::Clear() {
  cmdid_ = 310336;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_GetArenaList_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_GetArenaList_Ret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETARENALIST_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.ClientServerWarPlayer item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_GetArenaList_Ret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_GetArenaList_Ret)
  return false;
#undef DO_
}

void Lobby2Center_GetArenaList_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_GetArenaList_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETARENALIST_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.ClientServerWarPlayer item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_GetArenaList_Ret)
}

::google::protobuf::uint8* Lobby2Center_GetArenaList_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_GetArenaList_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETARENALIST_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.ClientServerWarPlayer item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_GetArenaList_Ret)
  return target;
}

int Lobby2Center_GetArenaList_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETARENALIST_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  // repeated .TgsProtocol.ClientServerWarPlayer item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_GetArenaList_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_GetArenaList_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_GetArenaList_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_GetArenaList_Ret::MergeFrom(const Lobby2Center_GetArenaList_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_GetArenaList_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_GetArenaList_Ret::CopyFrom(const Lobby2Center_GetArenaList_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_GetArenaList_Ret::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void Lobby2Center_GetArenaList_Ret::Swap(Lobby2Center_GetArenaList_Ret* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_GetArenaList_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_GetArenaList_Ret_descriptor_;
  metadata.reflection = Lobby2Center_GetArenaList_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankInfo::kCharidFieldNumber;
const int RankInfo::kRankFieldNumber;
const int RankInfo::kCountryFieldNumber;
#endif  // !_MSC_VER

RankInfo::RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.RankInfo)
}

void RankInfo::InitAsDefaultInstance() {
}

RankInfo::RankInfo(const RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.RankInfo)
}

void RankInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  country_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankInfo::~RankInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.RankInfo)
  SharedDtor();
}

void RankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankInfo_descriptor_;
}

const RankInfo& RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

RankInfo* RankInfo::default_instance_ = NULL;

RankInfo* RankInfo::New() const {
  return new RankInfo;
}

void RankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charid_, country_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.RankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required uint32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_country;
        break;
      }

      // optional uint32 country = 3;
      case 3: {
        if (tag == 24) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.RankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.RankInfo)
  return false;
#undef DO_
}

void RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.RankInfo)
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->country(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.RankInfo)
}

::google::protobuf::uint8* RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.RankInfo)
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 country = 3;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->country(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.RankInfo)
  return target;
}

int RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RankInfo::Swap(RankInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(rank_, other->rank_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankInfo_descriptor_;
  metadata.reflection = RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_ServerWarRankReward_Ntf::kCmdIdFieldNumber;
const int Center2Lobby_ServerWarRankReward_Ntf::kTypeFieldNumber;
const int Center2Lobby_ServerWarRankReward_Ntf::kItemFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_ServerWarRankReward_Ntf::Center2Lobby_ServerWarRankReward_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_ServerWarRankReward_Ntf)
}

void Center2Lobby_ServerWarRankReward_Ntf::InitAsDefaultInstance() {
}

Center2Lobby_ServerWarRankReward_Ntf::Center2Lobby_ServerWarRankReward_Ntf(const Center2Lobby_ServerWarRankReward_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_ServerWarRankReward_Ntf)
}

void Center2Lobby_ServerWarRankReward_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210366;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_ServerWarRankReward_Ntf::~Center2Lobby_ServerWarRankReward_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_ServerWarRankReward_Ntf)
  SharedDtor();
}

void Center2Lobby_ServerWarRankReward_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_ServerWarRankReward_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_ServerWarRankReward_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_ServerWarRankReward_Ntf_descriptor_;
}

const Center2Lobby_ServerWarRankReward_Ntf& Center2Lobby_ServerWarRankReward_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_ServerWarRankReward_Ntf* Center2Lobby_ServerWarRankReward_Ntf::default_instance_ = NULL;

Center2Lobby_ServerWarRankReward_Ntf* Center2Lobby_ServerWarRankReward_Ntf::New() const {
  return new Center2Lobby_ServerWarRankReward_Ntf;
}

void Center2Lobby_ServerWarRankReward_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 210366;
    type_ = 0u;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_ServerWarRankReward_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_ServerWarRankReward_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_SERVERWARRANKREWARD_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.RankInfo item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_ServerWarRankReward_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_ServerWarRankReward_Ntf)
  return false;
#undef DO_
}

void Center2Lobby_ServerWarRankReward_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_ServerWarRankReward_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_SERVERWARRANKREWARD_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // repeated .TgsProtocol.RankInfo item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_ServerWarRankReward_Ntf)
}

::google::protobuf::uint8* Center2Lobby_ServerWarRankReward_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_ServerWarRankReward_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_SERVERWARRANKREWARD_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // repeated .TgsProtocol.RankInfo item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_ServerWarRankReward_Ntf)
  return target;
}

int Center2Lobby_ServerWarRankReward_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_SERVERWARRANKREWARD_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .TgsProtocol.RankInfo item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_ServerWarRankReward_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_ServerWarRankReward_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_ServerWarRankReward_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_ServerWarRankReward_Ntf::MergeFrom(const Center2Lobby_ServerWarRankReward_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_ServerWarRankReward_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_ServerWarRankReward_Ntf::CopyFrom(const Center2Lobby_ServerWarRankReward_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_ServerWarRankReward_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void Center2Lobby_ServerWarRankReward_Ntf::Swap(Center2Lobby_ServerWarRankReward_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(type_, other->type_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_ServerWarRankReward_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_ServerWarRankReward_Ntf_descriptor_;
  metadata.reflection = Center2Lobby_ServerWarRankReward_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_CloseSWar_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_CloseSWar_Ntf::kIscloseFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_CloseSWar_Ntf::Lobby2Center_CloseSWar_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_CloseSWar_Ntf)
}

void Lobby2Center_CloseSWar_Ntf::InitAsDefaultInstance() {
}

Lobby2Center_CloseSWar_Ntf::Lobby2Center_CloseSWar_Ntf(const Lobby2Center_CloseSWar_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_CloseSWar_Ntf)
}

void Lobby2Center_CloseSWar_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210367;
  isclose_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_CloseSWar_Ntf::~Lobby2Center_CloseSWar_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_CloseSWar_Ntf)
  SharedDtor();
}

void Lobby2Center_CloseSWar_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_CloseSWar_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_CloseSWar_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_CloseSWar_Ntf_descriptor_;
}

const Lobby2Center_CloseSWar_Ntf& Lobby2Center_CloseSWar_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_CloseSWar_Ntf* Lobby2Center_CloseSWar_Ntf::default_instance_ = NULL;

Lobby2Center_CloseSWar_Ntf* Lobby2Center_CloseSWar_Ntf::New() const {
  return new Lobby2Center_CloseSWar_Ntf;
}

void Lobby2Center_CloseSWar_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 210367;
    isclose_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_CloseSWar_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_CloseSWar_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSESWAR_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isclose;
        break;
      }

      // required bool isclose = 2;
      case 2: {
        if (tag == 16) {
         parse_isclose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isclose_)));
          set_has_isclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_CloseSWar_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_CloseSWar_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_CloseSWar_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_CloseSWar_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSESWAR_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required bool isclose = 2;
  if (has_isclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isclose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_CloseSWar_Ntf)
}

::google::protobuf::uint8* Lobby2Center_CloseSWar_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_CloseSWar_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSESWAR_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required bool isclose = 2;
  if (has_isclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isclose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_CloseSWar_Ntf)
  return target;
}

int Lobby2Center_CloseSWar_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSESWAR_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required bool isclose = 2;
    if (has_isclose()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_CloseSWar_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_CloseSWar_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_CloseSWar_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_CloseSWar_Ntf::MergeFrom(const Lobby2Center_CloseSWar_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_isclose()) {
      set_isclose(from.isclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_CloseSWar_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_CloseSWar_Ntf::CopyFrom(const Lobby2Center_CloseSWar_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_CloseSWar_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Lobby2Center_CloseSWar_Ntf::Swap(Lobby2Center_CloseSWar_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(isclose_, other->isclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_CloseSWar_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_CloseSWar_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_CloseSWar_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_UpdateTeamHonor_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_UpdateTeamHonor_Ntf::kCharidFieldNumber;
const int Lobby2Center_UpdateTeamHonor_Ntf::kOldhonorFieldNumber;
const int Lobby2Center_UpdateTeamHonor_Ntf::kNewhonorFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_UpdateTeamHonor_Ntf::Lobby2Center_UpdateTeamHonor_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_UpdateTeamHonor_Ntf)
}

void Lobby2Center_UpdateTeamHonor_Ntf::InitAsDefaultInstance() {
}

Lobby2Center_UpdateTeamHonor_Ntf::Lobby2Center_UpdateTeamHonor_Ntf(const Lobby2Center_UpdateTeamHonor_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_UpdateTeamHonor_Ntf)
}

void Lobby2Center_UpdateTeamHonor_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210368;
  charid_ = GOOGLE_ULONGLONG(0);
  oldhonor_ = 0u;
  newhonor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_UpdateTeamHonor_Ntf::~Lobby2Center_UpdateTeamHonor_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_UpdateTeamHonor_Ntf)
  SharedDtor();
}

void Lobby2Center_UpdateTeamHonor_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_UpdateTeamHonor_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_UpdateTeamHonor_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_UpdateTeamHonor_Ntf_descriptor_;
}

const Lobby2Center_UpdateTeamHonor_Ntf& Lobby2Center_UpdateTeamHonor_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_UpdateTeamHonor_Ntf* Lobby2Center_UpdateTeamHonor_Ntf::default_instance_ = NULL;

Lobby2Center_UpdateTeamHonor_Ntf* Lobby2Center_UpdateTeamHonor_Ntf::New() const {
  return new Lobby2Center_UpdateTeamHonor_Ntf;
}

void Lobby2Center_UpdateTeamHonor_Ntf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Lobby2Center_UpdateTeamHonor_Ntf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(oldhonor_, newhonor_);
    cmdid_ = 210368;
    charid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_UpdateTeamHonor_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_UpdateTeamHonor_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_UPDATETEAMHONOR_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oldhonor;
        break;
      }

      // required uint32 oldhonor = 3;
      case 3: {
        if (tag == 24) {
         parse_oldhonor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldhonor_)));
          set_has_oldhonor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_newhonor;
        break;
      }

      // required uint32 newhonor = 4;
      case 4: {
        if (tag == 32) {
         parse_newhonor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newhonor_)));
          set_has_newhonor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_UpdateTeamHonor_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_UpdateTeamHonor_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_UpdateTeamHonor_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_UpdateTeamHonor_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_UPDATETEAMHONOR_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required uint32 oldhonor = 3;
  if (has_oldhonor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oldhonor(), output);
  }

  // required uint32 newhonor = 4;
  if (has_newhonor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newhonor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_UpdateTeamHonor_Ntf)
}

::google::protobuf::uint8* Lobby2Center_UpdateTeamHonor_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_UpdateTeamHonor_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_UPDATETEAMHONOR_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required uint32 oldhonor = 3;
  if (has_oldhonor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oldhonor(), target);
  }

  // required uint32 newhonor = 4;
  if (has_newhonor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newhonor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_UpdateTeamHonor_Ntf)
  return target;
}

int Lobby2Center_UpdateTeamHonor_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_UPDATETEAMHONOR_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 oldhonor = 3;
    if (has_oldhonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldhonor());
    }

    // required uint32 newhonor = 4;
    if (has_newhonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newhonor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_UpdateTeamHonor_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_UpdateTeamHonor_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_UpdateTeamHonor_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_UpdateTeamHonor_Ntf::MergeFrom(const Lobby2Center_UpdateTeamHonor_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_oldhonor()) {
      set_oldhonor(from.oldhonor());
    }
    if (from.has_newhonor()) {
      set_newhonor(from.newhonor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_UpdateTeamHonor_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_UpdateTeamHonor_Ntf::CopyFrom(const Lobby2Center_UpdateTeamHonor_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_UpdateTeamHonor_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void Lobby2Center_UpdateTeamHonor_Ntf::Swap(Lobby2Center_UpdateTeamHonor_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(oldhonor_, other->oldhonor_);
    std::swap(newhonor_, other->newhonor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_UpdateTeamHonor_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_UpdateTeamHonor_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_UpdateTeamHonor_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_ServerTeamRankReward_Ntf::kCmdIdFieldNumber;
const int Center2Lobby_ServerTeamRankReward_Ntf::kTypeFieldNumber;
const int Center2Lobby_ServerTeamRankReward_Ntf::kItemFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_ServerTeamRankReward_Ntf::Center2Lobby_ServerTeamRankReward_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_ServerTeamRankReward_Ntf)
}

void Center2Lobby_ServerTeamRankReward_Ntf::InitAsDefaultInstance() {
}

Center2Lobby_ServerTeamRankReward_Ntf::Center2Lobby_ServerTeamRankReward_Ntf(const Center2Lobby_ServerTeamRankReward_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_ServerTeamRankReward_Ntf)
}

void Center2Lobby_ServerTeamRankReward_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210369;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_ServerTeamRankReward_Ntf::~Center2Lobby_ServerTeamRankReward_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_ServerTeamRankReward_Ntf)
  SharedDtor();
}

void Center2Lobby_ServerTeamRankReward_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_ServerTeamRankReward_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_ServerTeamRankReward_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_ServerTeamRankReward_Ntf_descriptor_;
}

const Center2Lobby_ServerTeamRankReward_Ntf& Center2Lobby_ServerTeamRankReward_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_ServerTeamRankReward_Ntf* Center2Lobby_ServerTeamRankReward_Ntf::default_instance_ = NULL;

Center2Lobby_ServerTeamRankReward_Ntf* Center2Lobby_ServerTeamRankReward_Ntf::New() const {
  return new Center2Lobby_ServerTeamRankReward_Ntf;
}

void Center2Lobby_ServerTeamRankReward_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 210369;
    type_ = 0u;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_ServerTeamRankReward_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_ServerTeamRankReward_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_SERVERTEAMRANKREWARD_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.CommonRankInfo item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_ServerTeamRankReward_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_ServerTeamRankReward_Ntf)
  return false;
#undef DO_
}

void Center2Lobby_ServerTeamRankReward_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_ServerTeamRankReward_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_SERVERTEAMRANKREWARD_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // repeated .TgsProtocol.CommonRankInfo item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_ServerTeamRankReward_Ntf)
}

::google::protobuf::uint8* Center2Lobby_ServerTeamRankReward_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_ServerTeamRankReward_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_SERVERTEAMRANKREWARD_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // repeated .TgsProtocol.CommonRankInfo item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_ServerTeamRankReward_Ntf)
  return target;
}

int Center2Lobby_ServerTeamRankReward_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_SERVERTEAMRANKREWARD_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .TgsProtocol.CommonRankInfo item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_ServerTeamRankReward_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_ServerTeamRankReward_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_ServerTeamRankReward_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_ServerTeamRankReward_Ntf::MergeFrom(const Center2Lobby_ServerTeamRankReward_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_ServerTeamRankReward_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_ServerTeamRankReward_Ntf::CopyFrom(const Center2Lobby_ServerTeamRankReward_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_ServerTeamRankReward_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void Center2Lobby_ServerTeamRankReward_Ntf::Swap(Center2Lobby_ServerTeamRankReward_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(type_, other->type_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_ServerTeamRankReward_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_ServerTeamRankReward_Ntf_descriptor_;
  metadata.reflection = Center2Lobby_ServerTeamRankReward_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_ReduceGlobalGoodsNum_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_ReduceGlobalGoodsNum_Ntf::kIdFieldNumber;
const int Lobby2Center_ReduceGlobalGoodsNum_Ntf::kNumFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_ReduceGlobalGoodsNum_Ntf::Lobby2Center_ReduceGlobalGoodsNum_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_ReduceGlobalGoodsNum_Ntf)
}

void Lobby2Center_ReduceGlobalGoodsNum_Ntf::InitAsDefaultInstance() {
}

Lobby2Center_ReduceGlobalGoodsNum_Ntf::Lobby2Center_ReduceGlobalGoodsNum_Ntf(const Lobby2Center_ReduceGlobalGoodsNum_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_ReduceGlobalGoodsNum_Ntf)
}

void Lobby2Center_ReduceGlobalGoodsNum_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210386;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_ReduceGlobalGoodsNum_Ntf::~Lobby2Center_ReduceGlobalGoodsNum_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_ReduceGlobalGoodsNum_Ntf)
  SharedDtor();
}

void Lobby2Center_ReduceGlobalGoodsNum_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_ReduceGlobalGoodsNum_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_ReduceGlobalGoodsNum_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_ReduceGlobalGoodsNum_Ntf_descriptor_;
}

const Lobby2Center_ReduceGlobalGoodsNum_Ntf& Lobby2Center_ReduceGlobalGoodsNum_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_ReduceGlobalGoodsNum_Ntf* Lobby2Center_ReduceGlobalGoodsNum_Ntf::default_instance_ = NULL;

Lobby2Center_ReduceGlobalGoodsNum_Ntf* Lobby2Center_ReduceGlobalGoodsNum_Ntf::New() const {
  return new Lobby2Center_ReduceGlobalGoodsNum_Ntf;
}

void Lobby2Center_ReduceGlobalGoodsNum_Ntf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Lobby2Center_ReduceGlobalGoodsNum_Ntf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, num_);
    cmdid_ = 210386;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_ReduceGlobalGoodsNum_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_ReduceGlobalGoodsNum_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_REDUCEGLOBALGOODSNUM_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_ReduceGlobalGoodsNum_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_ReduceGlobalGoodsNum_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_ReduceGlobalGoodsNum_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_ReduceGlobalGoodsNum_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_REDUCEGLOBALGOODSNUM_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_ReduceGlobalGoodsNum_Ntf)
}

::google::protobuf::uint8* Lobby2Center_ReduceGlobalGoodsNum_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_ReduceGlobalGoodsNum_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_REDUCEGLOBALGOODSNUM_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_ReduceGlobalGoodsNum_Ntf)
  return target;
}

int Lobby2Center_ReduceGlobalGoodsNum_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_REDUCEGLOBALGOODSNUM_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_ReduceGlobalGoodsNum_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_ReduceGlobalGoodsNum_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_ReduceGlobalGoodsNum_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_ReduceGlobalGoodsNum_Ntf::MergeFrom(const Lobby2Center_ReduceGlobalGoodsNum_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_ReduceGlobalGoodsNum_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_ReduceGlobalGoodsNum_Ntf::CopyFrom(const Lobby2Center_ReduceGlobalGoodsNum_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_ReduceGlobalGoodsNum_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Lobby2Center_ReduceGlobalGoodsNum_Ntf::Swap(Lobby2Center_ReduceGlobalGoodsNum_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_ReduceGlobalGoodsNum_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_ReduceGlobalGoodsNum_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_ReduceGlobalGoodsNum_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_UpdateGlobalGoods_Ntf::kCmdIdFieldNumber;
const int Center2Lobby_UpdateGlobalGoods_Ntf::kItemFieldNumber;
const int Center2Lobby_UpdateGlobalGoods_Ntf::kIsresetFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_UpdateGlobalGoods_Ntf::Center2Lobby_UpdateGlobalGoods_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_UpdateGlobalGoods_Ntf)
}

void Center2Lobby_UpdateGlobalGoods_Ntf::InitAsDefaultInstance() {
}

Center2Lobby_UpdateGlobalGoods_Ntf::Center2Lobby_UpdateGlobalGoods_Ntf(const Center2Lobby_UpdateGlobalGoods_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_UpdateGlobalGoods_Ntf)
}

void Center2Lobby_UpdateGlobalGoods_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210387;
  isreset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_UpdateGlobalGoods_Ntf::~Center2Lobby_UpdateGlobalGoods_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_UpdateGlobalGoods_Ntf)
  SharedDtor();
}

void Center2Lobby_UpdateGlobalGoods_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_UpdateGlobalGoods_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_UpdateGlobalGoods_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_UpdateGlobalGoods_Ntf_descriptor_;
}

const Center2Lobby_UpdateGlobalGoods_Ntf& Center2Lobby_UpdateGlobalGoods_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_UpdateGlobalGoods_Ntf* Center2Lobby_UpdateGlobalGoods_Ntf::default_instance_ = NULL;

Center2Lobby_UpdateGlobalGoods_Ntf* Center2Lobby_UpdateGlobalGoods_Ntf::New() const {
  return new Center2Lobby_UpdateGlobalGoods_Ntf;
}

void Center2Lobby_UpdateGlobalGoods_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    cmdid_ = 210387;
    isreset_ = false;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_UpdateGlobalGoods_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_UpdateGlobalGoods_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_UPDATEGLOBALGOODS_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.GlobalGoodsConf item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_isreset;
        break;
      }

      // optional bool isreset = 3;
      case 3: {
        if (tag == 24) {
         parse_isreset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreset_)));
          set_has_isreset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_UpdateGlobalGoods_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_UpdateGlobalGoods_Ntf)
  return false;
#undef DO_
}

void Center2Lobby_UpdateGlobalGoods_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_UpdateGlobalGoods_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_UPDATEGLOBALGOODS_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.GlobalGoodsConf item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // optional bool isreset = 3;
  if (has_isreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isreset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_UpdateGlobalGoods_Ntf)
}

::google::protobuf::uint8* Center2Lobby_UpdateGlobalGoods_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_UpdateGlobalGoods_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_UPDATEGLOBALGOODS_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.GlobalGoodsConf item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // optional bool isreset = 3;
  if (has_isreset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isreset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_UpdateGlobalGoods_Ntf)
  return target;
}

int Center2Lobby_UpdateGlobalGoods_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_UPDATEGLOBALGOODS_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional bool isreset = 3;
    if (has_isreset()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TgsProtocol.GlobalGoodsConf item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_UpdateGlobalGoods_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_UpdateGlobalGoods_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_UpdateGlobalGoods_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_UpdateGlobalGoods_Ntf::MergeFrom(const Center2Lobby_UpdateGlobalGoods_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_isreset()) {
      set_isreset(from.isreset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_UpdateGlobalGoods_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_UpdateGlobalGoods_Ntf::CopyFrom(const Center2Lobby_UpdateGlobalGoods_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_UpdateGlobalGoods_Ntf::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void Center2Lobby_UpdateGlobalGoods_Ntf::Swap(Center2Lobby_UpdateGlobalGoods_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    item_.Swap(&other->item_);
    std::swap(isreset_, other->isreset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_UpdateGlobalGoods_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_UpdateGlobalGoods_Ntf_descriptor_;
  metadata.reflection = Center2Lobby_UpdateGlobalGoods_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_Auction_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_Auction_Ntf::kEndTimeFieldNumber;
const int Lobby2Center_Auction_Ntf::kSourceFieldNumber;
const int Lobby2Center_Auction_Ntf::kNumFieldNumber;
const int Lobby2Center_Auction_Ntf::kLimitFieldNumber;
const int Lobby2Center_Auction_Ntf::kActivityidFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_Auction_Ntf::Lobby2Center_Auction_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_Auction_Ntf)
}

void Lobby2Center_Auction_Ntf::InitAsDefaultInstance() {
}

Lobby2Center_Auction_Ntf::Lobby2Center_Auction_Ntf(const Lobby2Center_Auction_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_Auction_Ntf)
}

void Lobby2Center_Auction_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210530;
  endtime_ = 0u;
  activityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_Auction_Ntf::~Lobby2Center_Auction_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_Auction_Ntf)
  SharedDtor();
}

void Lobby2Center_Auction_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_Auction_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_Auction_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_Auction_Ntf_descriptor_;
}

const Lobby2Center_Auction_Ntf& Lobby2Center_Auction_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_Auction_Ntf* Lobby2Center_Auction_Ntf::default_instance_ = NULL;

Lobby2Center_Auction_Ntf* Lobby2Center_Auction_Ntf::New() const {
  return new Lobby2Center_Auction_Ntf;
}

void Lobby2Center_Auction_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 35) {
    cmdid_ = 210530;
    endtime_ = 0u;
    activityid_ = 0u;
  }
  source_.Clear();
  num_.Clear();
  limit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_Auction_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_Auction_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_AUCTION_SELF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // required uint32 endTime = 2;
      case 2: {
        if (tag == 16) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_source;
        break;
      }

      // repeated .TgsProtocol.ClientSource source = 3;
      case 3: {
        if (tag == 26) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_source;
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // repeated uint32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_num())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }

      // repeated uint32 limit = 5;
      case 5: {
        if (tag == 40) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_limit())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_limit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_limit;
        if (input->ExpectTag(48)) goto parse_activityid;
        break;
      }

      // required uint32 activityid = 6;
      case 6: {
        if (tag == 48) {
         parse_activityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_Auction_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_Auction_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_Auction_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_Auction_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_AUCTION_SELF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endtime(), output);
  }

  // repeated .TgsProtocol.ClientSource source = 3;
  for (int i = 0; i < this->source_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->source(i), output);
  }

  // repeated uint32 num = 4;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->num(i), output);
  }

  // repeated uint32 limit = 5;
  for (int i = 0; i < this->limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->limit(i), output);
  }

  // required uint32 activityid = 6;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->activityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_Auction_Ntf)
}

::google::protobuf::uint8* Lobby2Center_Auction_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_Auction_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_AUCTION_SELF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endtime(), target);
  }

  // repeated .TgsProtocol.ClientSource source = 3;
  for (int i = 0; i < this->source_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->source(i), target);
  }

  // repeated uint32 num = 4;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->num(i), target);
  }

  // repeated uint32 limit = 5;
  for (int i = 0; i < this->limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->limit(i), target);
  }

  // required uint32 activityid = 6;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->activityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_Auction_Ntf)
  return target;
}

int Lobby2Center_Auction_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_AUCTION_SELF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // required uint32 activityid = 6;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

  }
  // repeated .TgsProtocol.ClientSource source = 3;
  total_size += 1 * this->source_size();
  for (int i = 0; i < this->source_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->source(i));
  }

  // repeated uint32 num = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  // repeated uint32 limit = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->limit(i));
    }
    total_size += 1 * this->limit_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_Auction_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_Auction_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_Auction_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_Auction_Ntf::MergeFrom(const Lobby2Center_Auction_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  source_.MergeFrom(from.source_);
  num_.MergeFrom(from.num_);
  limit_.MergeFrom(from.limit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_Auction_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_Auction_Ntf::CopyFrom(const Lobby2Center_Auction_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_Auction_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000022) != 0x00000022) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->source())) return false;
  return true;
}

void Lobby2Center_Auction_Ntf::Swap(Lobby2Center_Auction_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(endtime_, other->endtime_);
    source_.Swap(&other->source_);
    num_.Swap(&other->num_);
    limit_.Swap(&other->limit_);
    std::swap(activityid_, other->activityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_Auction_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_Auction_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_Auction_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_BuyAuction_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_BuyAuction_Ntf::kCharidFieldNumber;
const int Lobby2Center_BuyAuction_Ntf::kServerIdFieldNumber;
const int Lobby2Center_BuyAuction_Ntf::kPhotoFieldNumber;
const int Lobby2Center_BuyAuction_Ntf::kNameFieldNumber;
const int Lobby2Center_BuyAuction_Ntf::kBuyNumFieldNumber;
const int Lobby2Center_BuyAuction_Ntf::kIndexFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_BuyAuction_Ntf::Lobby2Center_BuyAuction_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_BuyAuction_Ntf)
}

void Lobby2Center_BuyAuction_Ntf::InitAsDefaultInstance() {
}

Lobby2Center_BuyAuction_Ntf::Lobby2Center_BuyAuction_Ntf(const Lobby2Center_BuyAuction_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_BuyAuction_Ntf)
}

void Lobby2Center_BuyAuction_Ntf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 210531;
  charid_ = 0u;
  serverid_ = 0u;
  photo_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buynum_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_BuyAuction_Ntf::~Lobby2Center_BuyAuction_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_BuyAuction_Ntf)
  SharedDtor();
}

void Lobby2Center_BuyAuction_Ntf::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Lobby2Center_BuyAuction_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_BuyAuction_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_BuyAuction_Ntf_descriptor_;
}

const Lobby2Center_BuyAuction_Ntf& Lobby2Center_BuyAuction_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_BuyAuction_Ntf* Lobby2Center_BuyAuction_Ntf::default_instance_ = NULL;

Lobby2Center_BuyAuction_Ntf* Lobby2Center_BuyAuction_Ntf::New() const {
  return new Lobby2Center_BuyAuction_Ntf;
}

void Lobby2Center_BuyAuction_Ntf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Lobby2Center_BuyAuction_Ntf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(charid_, photo_);
    ZR_(buynum_, index_);
    cmdid_ = 210531;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_BuyAuction_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_BuyAuction_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_BUY_AUCTION_SELF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint32 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverId;
        break;
      }

      // required uint32 serverId = 3;
      case 3: {
        if (tag == 24) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_photo;
        break;
      }

      // required uint32 photo = 4;
      case 4: {
        if (tag == 32) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_buyNum;
        break;
      }

      // required uint32 buyNum = 6;
      case 6: {
        if (tag == 48) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_index;
        break;
      }

      // required uint32 index = 7;
      case 7: {
        if (tag == 56) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_BuyAuction_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_BuyAuction_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_BuyAuction_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_BuyAuction_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_BUY_AUCTION_SELF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // required uint32 serverId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // required uint32 photo = 4;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->photo(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // required uint32 buyNum = 6;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buynum(), output);
  }

  // required uint32 index = 7;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_BuyAuction_Ntf)
}

::google::protobuf::uint8* Lobby2Center_BuyAuction_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_BuyAuction_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_BUY_AUCTION_SELF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // required uint32 serverId = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // required uint32 photo = 4;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->photo(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required uint32 buyNum = 6;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->buynum(), target);
  }

  // required uint32 index = 7;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_BuyAuction_Ntf)
  return target;
}

int Lobby2Center_BuyAuction_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_BUY_AUCTION_SELF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 serverId = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 photo = 4;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 buyNum = 6;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

    // required uint32 index = 7;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_BuyAuction_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_BuyAuction_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_BuyAuction_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_BuyAuction_Ntf::MergeFrom(const Lobby2Center_BuyAuction_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_BuyAuction_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_BuyAuction_Ntf::CopyFrom(const Lobby2Center_BuyAuction_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_BuyAuction_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  return true;
}

void Lobby2Center_BuyAuction_Ntf::Swap(Lobby2Center_BuyAuction_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(serverid_, other->serverid_);
    std::swap(photo_, other->photo_);
    std::swap(name_, other->name_);
    std::swap(buynum_, other->buynum_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_BuyAuction_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_BuyAuction_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_BuyAuction_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_BuyAuction_Ntf::kCmdIdFieldNumber;
const int Center2Lobby_BuyAuction_Ntf::kCharidFieldNumber;
const int Center2Lobby_BuyAuction_Ntf::kBuyNumFieldNumber;
const int Center2Lobby_BuyAuction_Ntf::kIndexFieldNumber;
const int Center2Lobby_BuyAuction_Ntf::kErrCodeFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_BuyAuction_Ntf::Center2Lobby_BuyAuction_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_BuyAuction_Ntf)
}

void Center2Lobby_BuyAuction_Ntf::InitAsDefaultInstance() {
}

Center2Lobby_BuyAuction_Ntf::Center2Lobby_BuyAuction_Ntf(const Center2Lobby_BuyAuction_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_BuyAuction_Ntf)
}

void Center2Lobby_BuyAuction_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210532;
  charid_ = 0u;
  buynum_ = 0u;
  index_ = 0u;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_BuyAuction_Ntf::~Center2Lobby_BuyAuction_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_BuyAuction_Ntf)
  SharedDtor();
}

void Center2Lobby_BuyAuction_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_BuyAuction_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_BuyAuction_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_BuyAuction_Ntf_descriptor_;
}

const Center2Lobby_BuyAuction_Ntf& Center2Lobby_BuyAuction_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_BuyAuction_Ntf* Center2Lobby_BuyAuction_Ntf::default_instance_ = NULL;

Center2Lobby_BuyAuction_Ntf* Center2Lobby_BuyAuction_Ntf::New() const {
  return new Center2Lobby_BuyAuction_Ntf;
}

void Center2Lobby_BuyAuction_Ntf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Center2Lobby_BuyAuction_Ntf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, errcode_);
    cmdid_ = 210532;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_BuyAuction_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_BuyAuction_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_BUY_AUCTION_SELF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint32 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buyNum;
        break;
      }

      // required uint32 buyNum = 3;
      case 3: {
        if (tag == 24) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_errCode;
        break;
      }

      // required uint32 errCode = 5;
      case 5: {
        if (tag == 40) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_BuyAuction_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_BuyAuction_Ntf)
  return false;
#undef DO_
}

void Center2Lobby_BuyAuction_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_BuyAuction_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_BUY_AUCTION_SELF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // required uint32 buyNum = 3;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buynum(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // required uint32 errCode = 5;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->errcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_BuyAuction_Ntf)
}

::google::protobuf::uint8* Center2Lobby_BuyAuction_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_BuyAuction_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_BUY_AUCTION_SELF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // required uint32 buyNum = 3;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buynum(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // required uint32 errCode = 5;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->errcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_BuyAuction_Ntf)
  return target;
}

int Center2Lobby_BuyAuction_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_BUY_AUCTION_SELF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 buyNum = 3;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 errCode = 5;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_BuyAuction_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_BuyAuction_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_BuyAuction_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_BuyAuction_Ntf::MergeFrom(const Center2Lobby_BuyAuction_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_BuyAuction_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_BuyAuction_Ntf::CopyFrom(const Center2Lobby_BuyAuction_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_BuyAuction_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void Center2Lobby_BuyAuction_Ntf::Swap(Center2Lobby_BuyAuction_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(buynum_, other->buynum_);
    std::swap(index_, other->index_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_BuyAuction_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_BuyAuction_Ntf_descriptor_;
  metadata.reflection = Center2Lobby_BuyAuction_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_Auction_End_Ntf::kCmdIdFieldNumber;
const int Center2Lobby_Auction_End_Ntf::kTypeFieldNumber;
const int Center2Lobby_Auction_End_Ntf::kCharidFieldNumber;
const int Center2Lobby_Auction_End_Ntf::kIndexFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_Auction_End_Ntf::Center2Lobby_Auction_End_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_Auction_End_Ntf)
}

void Center2Lobby_Auction_End_Ntf::InitAsDefaultInstance() {
}

Center2Lobby_Auction_End_Ntf::Center2Lobby_Auction_End_Ntf(const Center2Lobby_Auction_End_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_Auction_End_Ntf)
}

void Center2Lobby_Auction_End_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210540;
  type_ = 0u;
  charid_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_Auction_End_Ntf::~Center2Lobby_Auction_End_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_Auction_End_Ntf)
  SharedDtor();
}

void Center2Lobby_Auction_End_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_Auction_End_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_Auction_End_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_Auction_End_Ntf_descriptor_;
}

const Center2Lobby_Auction_End_Ntf& Center2Lobby_Auction_End_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_Auction_End_Ntf* Center2Lobby_Auction_End_Ntf::default_instance_ = NULL;

Center2Lobby_Auction_End_Ntf* Center2Lobby_Auction_End_Ntf::New() const {
  return new Center2Lobby_Auction_End_Ntf;
}

void Center2Lobby_Auction_End_Ntf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Center2Lobby_Auction_End_Ntf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, index_);
    cmdid_ = 210540;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_Auction_End_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_Auction_End_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_AUCTION_END_SELF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint32 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_Auction_End_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_Auction_End_Ntf)
  return false;
#undef DO_
}

void Center2Lobby_Auction_End_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_Auction_End_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_AUCTION_END_SELF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_Auction_End_Ntf)
}

::google::protobuf::uint8* Center2Lobby_Auction_End_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_Auction_End_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_AUCTION_END_SELF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_Auction_End_Ntf)
  return target;
}

int Center2Lobby_Auction_End_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_AUCTION_END_SELF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_Auction_End_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_Auction_End_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_Auction_End_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_Auction_End_Ntf::MergeFrom(const Center2Lobby_Auction_End_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_Auction_End_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_Auction_End_Ntf::CopyFrom(const Center2Lobby_Auction_End_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_Auction_End_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void Center2Lobby_Auction_End_Ntf::Swap(Center2Lobby_Auction_End_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_Auction_End_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_Auction_End_Ntf_descriptor_;
  metadata.reflection = Center2Lobby_Auction_End_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_Auction_Clear_Ntf::kCmdIdFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_Auction_Clear_Ntf::Center2Lobby_Auction_Clear_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_Auction_Clear_Ntf)
}

void Center2Lobby_Auction_Clear_Ntf::InitAsDefaultInstance() {
}

Center2Lobby_Auction_Clear_Ntf::Center2Lobby_Auction_Clear_Ntf(const Center2Lobby_Auction_Clear_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_Auction_Clear_Ntf)
}

void Center2Lobby_Auction_Clear_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210541;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_Auction_Clear_Ntf::~Center2Lobby_Auction_Clear_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_Auction_Clear_Ntf)
  SharedDtor();
}

void Center2Lobby_Auction_Clear_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_Auction_Clear_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_Auction_Clear_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_Auction_Clear_Ntf_descriptor_;
}

const Center2Lobby_Auction_Clear_Ntf& Center2Lobby_Auction_Clear_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_Auction_Clear_Ntf* Center2Lobby_Auction_Clear_Ntf::default_instance_ = NULL;

Center2Lobby_Auction_Clear_Ntf* Center2Lobby_Auction_Clear_Ntf::New() const {
  return new Center2Lobby_Auction_Clear_Ntf;
}

void Center2Lobby_Auction_Clear_Ntf::Clear() {
  cmdid_ = 210541;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_Auction_Clear_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_Auction_Clear_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLEAN_AUCTION];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_Auction_Clear_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_Auction_Clear_Ntf)
  return false;
#undef DO_
}

void Center2Lobby_Auction_Clear_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_Auction_Clear_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLEAN_AUCTION];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_Auction_Clear_Ntf)
}

::google::protobuf::uint8* Center2Lobby_Auction_Clear_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_Auction_Clear_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLEAN_AUCTION];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_Auction_Clear_Ntf)
  return target;
}

int Center2Lobby_Auction_Clear_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLEAN_AUCTION];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_Auction_Clear_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_Auction_Clear_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_Auction_Clear_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_Auction_Clear_Ntf::MergeFrom(const Center2Lobby_Auction_Clear_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_Auction_Clear_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_Auction_Clear_Ntf::CopyFrom(const Center2Lobby_Auction_Clear_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_Auction_Clear_Ntf::IsInitialized() const {

  return true;
}

void Center2Lobby_Auction_Clear_Ntf::Swap(Center2Lobby_Auction_Clear_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_Auction_Clear_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_Auction_Clear_Ntf_descriptor_;
  metadata.reflection = Center2Lobby_Auction_Clear_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_GetList_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_GetList_Ntf::kCharidFieldNumber;
const int Lobby2Center_GetList_Ntf::kServeridFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_GetList_Ntf::Lobby2Center_GetList_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_GetList_Ntf)
}

void Lobby2Center_GetList_Ntf::InitAsDefaultInstance() {
}

Lobby2Center_GetList_Ntf::Lobby2Center_GetList_Ntf(const Lobby2Center_GetList_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_GetList_Ntf)
}

void Lobby2Center_GetList_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210534;
  charid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_GetList_Ntf::~Lobby2Center_GetList_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_GetList_Ntf)
  SharedDtor();
}

void Lobby2Center_GetList_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_GetList_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_GetList_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_GetList_Ntf_descriptor_;
}

const Lobby2Center_GetList_Ntf& Lobby2Center_GetList_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_GetList_Ntf* Lobby2Center_GetList_Ntf::default_instance_ = NULL;

Lobby2Center_GetList_Ntf* Lobby2Center_GetList_Ntf::New() const {
  return new Lobby2Center_GetList_Ntf;
}

void Lobby2Center_GetList_Ntf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Lobby2Center_GetList_Ntf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(charid_, serverid_);
    cmdid_ = 210534;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_GetList_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_GetList_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GET_LIST_SELF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint32 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (tag == 24) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_GetList_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_GetList_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_GetList_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_GetList_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GET_LIST_SELF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_GetList_Ntf)
}

::google::protobuf::uint8* Lobby2Center_GetList_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_GetList_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GET_LIST_SELF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_GetList_Ntf)
  return target;
}

int Lobby2Center_GetList_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GET_LIST_SELF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_GetList_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_GetList_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_GetList_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_GetList_Ntf::MergeFrom(const Lobby2Center_GetList_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_GetList_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_GetList_Ntf::CopyFrom(const Lobby2Center_GetList_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_GetList_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Lobby2Center_GetList_Ntf::Swap(Lobby2Center_GetList_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_GetList_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_GetList_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_GetList_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_GetList_Ntf::kCmdIdFieldNumber;
const int Center2Lobby_GetList_Ntf::kCharidFieldNumber;
const int Center2Lobby_GetList_Ntf::kInfoFieldNumber;
const int Center2Lobby_GetList_Ntf::kNumFieldNumber;
const int Center2Lobby_GetList_Ntf::kBuyNumFieldNumber;
const int Center2Lobby_GetList_Ntf::kWinFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_GetList_Ntf::Center2Lobby_GetList_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_GetList_Ntf)
}

void Center2Lobby_GetList_Ntf::InitAsDefaultInstance() {
}

Center2Lobby_GetList_Ntf::Center2Lobby_GetList_Ntf(const Center2Lobby_GetList_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_GetList_Ntf)
}

void Center2Lobby_GetList_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210535;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_GetList_Ntf::~Center2Lobby_GetList_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_GetList_Ntf)
  SharedDtor();
}

void Center2Lobby_GetList_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_GetList_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_GetList_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_GetList_Ntf_descriptor_;
}

const Center2Lobby_GetList_Ntf& Center2Lobby_GetList_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_GetList_Ntf* Center2Lobby_GetList_Ntf::default_instance_ = NULL;

Center2Lobby_GetList_Ntf* Center2Lobby_GetList_Ntf::New() const {
  return new Center2Lobby_GetList_Ntf;
}

void Center2Lobby_GetList_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 210535;
    charid_ = 0u;
  }
  info_.Clear();
  num_.Clear();
  buynum_.Clear();
  win_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_GetList_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_GetList_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GET_LIST_SELF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint32 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .TgsProtocol.AuctionInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // repeated uint32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_num())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        if (input->ExpectTag(40)) goto parse_buyNum;
        break;
      }

      // repeated uint32 buyNum = 5;
      case 5: {
        if (tag == 40) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_buynum())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buynum())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_buyNum;
        if (input->ExpectTag(48)) goto parse_win;
        break;
      }

      // repeated uint32 win = 6;
      case 6: {
        if (tag == 48) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_win())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_win())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_win;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_GetList_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_GetList_Ntf)
  return false;
#undef DO_
}

void Center2Lobby_GetList_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_GetList_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GET_LIST_SELF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // repeated .TgsProtocol.AuctionInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  // repeated uint32 num = 4;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->num(i), output);
  }

  // repeated uint32 buyNum = 5;
  for (int i = 0; i < this->buynum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->buynum(i), output);
  }

  // repeated uint32 win = 6;
  for (int i = 0; i < this->win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->win(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_GetList_Ntf)
}

::google::protobuf::uint8* Center2Lobby_GetList_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_GetList_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GET_LIST_SELF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // repeated .TgsProtocol.AuctionInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  // repeated uint32 num = 4;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->num(i), target);
  }

  // repeated uint32 buyNum = 5;
  for (int i = 0; i < this->buynum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->buynum(i), target);
  }

  // repeated uint32 win = 6;
  for (int i = 0; i < this->win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->win(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_GetList_Ntf)
  return target;
}

int Center2Lobby_GetList_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GET_LIST_SELF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .TgsProtocol.AuctionInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated uint32 num = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  // repeated uint32 buyNum = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->buynum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buynum(i));
    }
    total_size += 1 * this->buynum_size() + data_size;
  }

  // repeated uint32 win = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->win(i));
    }
    total_size += 1 * this->win_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_GetList_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_GetList_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_GetList_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_GetList_Ntf::MergeFrom(const Center2Lobby_GetList_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  num_.MergeFrom(from.num_);
  buynum_.MergeFrom(from.buynum_);
  win_.MergeFrom(from.win_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_GetList_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_GetList_Ntf::CopyFrom(const Center2Lobby_GetList_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_GetList_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void Center2Lobby_GetList_Ntf::Swap(Center2Lobby_GetList_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    info_.Swap(&other->info_);
    num_.Swap(&other->num_);
    buynum_.Swap(&other->buynum_);
    win_.Swap(&other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_GetList_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_GetList_Ntf_descriptor_;
  metadata.reflection = Center2Lobby_GetList_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_GetGlobalServerRank_Req::kCmdIdFieldNumber;
const int Lobby2Center_GetGlobalServerRank_Req::kCharidFieldNumber;
const int Lobby2Center_GetGlobalServerRank_Req::kTypeFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_GetGlobalServerRank_Req::Lobby2Center_GetGlobalServerRank_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_GetGlobalServerRank_Req)
}

void Lobby2Center_GetGlobalServerRank_Req::InitAsDefaultInstance() {
}

Lobby2Center_GetGlobalServerRank_Req::Lobby2Center_GetGlobalServerRank_Req(const Lobby2Center_GetGlobalServerRank_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_GetGlobalServerRank_Req)
}

void Lobby2Center_GetGlobalServerRank_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210542;
  charid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_GetGlobalServerRank_Req::~Lobby2Center_GetGlobalServerRank_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_GetGlobalServerRank_Req)
  SharedDtor();
}

void Lobby2Center_GetGlobalServerRank_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_GetGlobalServerRank_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_GetGlobalServerRank_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_GetGlobalServerRank_Req_descriptor_;
}

const Lobby2Center_GetGlobalServerRank_Req& Lobby2Center_GetGlobalServerRank_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_GetGlobalServerRank_Req* Lobby2Center_GetGlobalServerRank_Req::default_instance_ = NULL;

Lobby2Center_GetGlobalServerRank_Req* Lobby2Center_GetGlobalServerRank_Req::New() const {
  return new Lobby2Center_GetGlobalServerRank_Req;
}

void Lobby2Center_GetGlobalServerRank_Req::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmdid_ = 210542;
    charid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_GetGlobalServerRank_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_GetGlobalServerRank_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETGLOBALSERVERRANK_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_GetGlobalServerRank_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_GetGlobalServerRank_Req)
  return false;
#undef DO_
}

void Lobby2Center_GetGlobalServerRank_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_GetGlobalServerRank_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETGLOBALSERVERRANK_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_GetGlobalServerRank_Req)
}

::google::protobuf::uint8* Lobby2Center_GetGlobalServerRank_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_GetGlobalServerRank_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETGLOBALSERVERRANK_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_GetGlobalServerRank_Req)
  return target;
}

int Lobby2Center_GetGlobalServerRank_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETGLOBALSERVERRANK_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_GetGlobalServerRank_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_GetGlobalServerRank_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_GetGlobalServerRank_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_GetGlobalServerRank_Req::MergeFrom(const Lobby2Center_GetGlobalServerRank_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_GetGlobalServerRank_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_GetGlobalServerRank_Req::CopyFrom(const Lobby2Center_GetGlobalServerRank_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_GetGlobalServerRank_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Lobby2Center_GetGlobalServerRank_Req::Swap(Lobby2Center_GetGlobalServerRank_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_GetGlobalServerRank_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_GetGlobalServerRank_Req_descriptor_;
  metadata.reflection = Lobby2Center_GetGlobalServerRank_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_GetGlobalServerRank_Ret::kCmdIdFieldNumber;
const int Center2Lobby_GetGlobalServerRank_Ret::kCharidFieldNumber;
const int Center2Lobby_GetGlobalServerRank_Ret::kMyrankFieldNumber;
const int Center2Lobby_GetGlobalServerRank_Ret::kTypeFieldNumber;
const int Center2Lobby_GetGlobalServerRank_Ret::kDataFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_GetGlobalServerRank_Ret::Center2Lobby_GetGlobalServerRank_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_GetGlobalServerRank_Ret)
}

void Center2Lobby_GetGlobalServerRank_Ret::InitAsDefaultInstance() {
}

Center2Lobby_GetGlobalServerRank_Ret::Center2Lobby_GetGlobalServerRank_Ret(const Center2Lobby_GetGlobalServerRank_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_GetGlobalServerRank_Ret)
}

void Center2Lobby_GetGlobalServerRank_Ret::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210543;
  charid_ = GOOGLE_ULONGLONG(0);
  myrank_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_GetGlobalServerRank_Ret::~Center2Lobby_GetGlobalServerRank_Ret() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_GetGlobalServerRank_Ret)
  SharedDtor();
}

void Center2Lobby_GetGlobalServerRank_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_GetGlobalServerRank_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_GetGlobalServerRank_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_GetGlobalServerRank_Ret_descriptor_;
}

const Center2Lobby_GetGlobalServerRank_Ret& Center2Lobby_GetGlobalServerRank_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_GetGlobalServerRank_Ret* Center2Lobby_GetGlobalServerRank_Ret::default_instance_ = NULL;

Center2Lobby_GetGlobalServerRank_Ret* Center2Lobby_GetGlobalServerRank_Ret::New() const {
  return new Center2Lobby_GetGlobalServerRank_Ret;
}

void Center2Lobby_GetGlobalServerRank_Ret::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmdid_ = 210543;
    charid_ = GOOGLE_ULONGLONG(0);
    myrank_ = 0u;
    type_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_GetGlobalServerRank_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_GetGlobalServerRank_Ret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETGLOBALSERVERRANK_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_myrank;
        break;
      }

      // optional uint32 myrank = 3;
      case 3: {
        if (tag == 24) {
         parse_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .TgsProtocol.PlayerRankData data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_GetGlobalServerRank_Ret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_GetGlobalServerRank_Ret)
  return false;
#undef DO_
}

void Center2Lobby_GetGlobalServerRank_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_GetGlobalServerRank_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETGLOBALSERVERRANK_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional uint32 myrank = 3;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->myrank(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // repeated .TgsProtocol.PlayerRankData data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_GetGlobalServerRank_Ret)
}

::google::protobuf::uint8* Center2Lobby_GetGlobalServerRank_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_GetGlobalServerRank_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETGLOBALSERVERRANK_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional uint32 myrank = 3;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->myrank(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // repeated .TgsProtocol.PlayerRankData data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_GetGlobalServerRank_Ret)
  return target;
}

int Center2Lobby_GetGlobalServerRank_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETGLOBALSERVERRANK_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 myrank = 3;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .TgsProtocol.PlayerRankData data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_GetGlobalServerRank_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_GetGlobalServerRank_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_GetGlobalServerRank_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_GetGlobalServerRank_Ret::MergeFrom(const Center2Lobby_GetGlobalServerRank_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_GetGlobalServerRank_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_GetGlobalServerRank_Ret::CopyFrom(const Center2Lobby_GetGlobalServerRank_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_GetGlobalServerRank_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void Center2Lobby_GetGlobalServerRank_Ret::Swap(Center2Lobby_GetGlobalServerRank_Ret* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(myrank_, other->myrank_);
    std::swap(type_, other->type_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_GetGlobalServerRank_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_GetGlobalServerRank_Ret_descriptor_;
  metadata.reflection = Center2Lobby_GetGlobalServerRank_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_PlayerGlobalServerRank_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_PlayerGlobalServerRank_Ntf::kDataFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_PlayerGlobalServerRank_Ntf::Lobby2Center_PlayerGlobalServerRank_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_PlayerGlobalServerRank_Ntf)
}

void Lobby2Center_PlayerGlobalServerRank_Ntf::InitAsDefaultInstance() {
  data_ = const_cast< ::TgsProtocol::PlayerRankData*>(&::TgsProtocol::PlayerRankData::default_instance());
}

Lobby2Center_PlayerGlobalServerRank_Ntf::Lobby2Center_PlayerGlobalServerRank_Ntf(const Lobby2Center_PlayerGlobalServerRank_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_PlayerGlobalServerRank_Ntf)
}

void Lobby2Center_PlayerGlobalServerRank_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 210546;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_PlayerGlobalServerRank_Ntf::~Lobby2Center_PlayerGlobalServerRank_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_PlayerGlobalServerRank_Ntf)
  SharedDtor();
}

void Lobby2Center_PlayerGlobalServerRank_Ntf::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Lobby2Center_PlayerGlobalServerRank_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_PlayerGlobalServerRank_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_PlayerGlobalServerRank_Ntf_descriptor_;
}

const Lobby2Center_PlayerGlobalServerRank_Ntf& Lobby2Center_PlayerGlobalServerRank_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_PlayerGlobalServerRank_Ntf* Lobby2Center_PlayerGlobalServerRank_Ntf::default_instance_ = NULL;

Lobby2Center_PlayerGlobalServerRank_Ntf* Lobby2Center_PlayerGlobalServerRank_Ntf::New() const {
  return new Lobby2Center_PlayerGlobalServerRank_Ntf;
}

void Lobby2Center_PlayerGlobalServerRank_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 210546;
    if (has_data()) {
      if (data_ != NULL) data_->::TgsProtocol::PlayerRankData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_PlayerGlobalServerRank_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_PlayerGlobalServerRank_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_PLAYERGLOBALSERVERRANK_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .TgsProtocol.PlayerRankData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_PlayerGlobalServerRank_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_PlayerGlobalServerRank_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_PlayerGlobalServerRank_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_PlayerGlobalServerRank_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_PLAYERGLOBALSERVERRANK_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required .TgsProtocol.PlayerRankData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_PlayerGlobalServerRank_Ntf)
}

::google::protobuf::uint8* Lobby2Center_PlayerGlobalServerRank_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_PlayerGlobalServerRank_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_PLAYERGLOBALSERVERRANK_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required .TgsProtocol.PlayerRankData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_PlayerGlobalServerRank_Ntf)
  return target;
}

int Lobby2Center_PlayerGlobalServerRank_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_PLAYERGLOBALSERVERRANK_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required .TgsProtocol.PlayerRankData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_PlayerGlobalServerRank_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_PlayerGlobalServerRank_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_PlayerGlobalServerRank_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_PlayerGlobalServerRank_Ntf::MergeFrom(const Lobby2Center_PlayerGlobalServerRank_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_data()) {
      mutable_data()->::TgsProtocol::PlayerRankData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_PlayerGlobalServerRank_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_PlayerGlobalServerRank_Ntf::CopyFrom(const Lobby2Center_PlayerGlobalServerRank_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_PlayerGlobalServerRank_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void Lobby2Center_PlayerGlobalServerRank_Ntf::Swap(Lobby2Center_PlayerGlobalServerRank_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_PlayerGlobalServerRank_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_PlayerGlobalServerRank_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_PlayerGlobalServerRank_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_UpdateRank_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_UpdateRank_Ntf::kTypeFieldNumber;
const int Lobby2Center_UpdateRank_Ntf::kCharidFieldNumber;
const int Lobby2Center_UpdateRank_Ntf::kValueFieldNumber;
const int Lobby2Center_UpdateRank_Ntf::kUidFieldNumber;
const int Lobby2Center_UpdateRank_Ntf::kCharnameFieldNumber;
const int Lobby2Center_UpdateRank_Ntf::kNationalIdFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_UpdateRank_Ntf::Lobby2Center_UpdateRank_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_UpdateRank_Ntf)
}

void Lobby2Center_UpdateRank_Ntf::InitAsDefaultInstance() {
}

Lobby2Center_UpdateRank_Ntf::Lobby2Center_UpdateRank_Ntf(const Lobby2Center_UpdateRank_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_UpdateRank_Ntf)
}

void Lobby2Center_UpdateRank_Ntf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 900007;
  type_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nationalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_UpdateRank_Ntf::~Lobby2Center_UpdateRank_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_UpdateRank_Ntf)
  SharedDtor();
}

void Lobby2Center_UpdateRank_Ntf::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void Lobby2Center_UpdateRank_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_UpdateRank_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_UpdateRank_Ntf_descriptor_;
}

const Lobby2Center_UpdateRank_Ntf& Lobby2Center_UpdateRank_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_UpdateRank_Ntf* Lobby2Center_UpdateRank_Ntf::default_instance_ = NULL;

Lobby2Center_UpdateRank_Ntf* Lobby2Center_UpdateRank_Ntf::New() const {
  return new Lobby2Center_UpdateRank_Ntf;
}

void Lobby2Center_UpdateRank_Ntf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Lobby2Center_UpdateRank_Ntf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(type_, uid_);
    cmdid_ = 900007;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    nationalid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_UpdateRank_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_UpdateRank_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_UPDATERANK_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .TgsProtocol.ECenterRankType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::ECenterRankType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::ECenterRankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // required uint64 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uid;
        break;
      }

      // required uint64 uid = 5;
      case 5: {
        if (tag == 40) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_charname;
        break;
      }

      // required string charname = 6;
      case 6: {
        if (tag == 50) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nationalId;
        break;
      }

      // optional uint32 nationalId = 7;
      case 7: {
        if (tag == 56) {
         parse_nationalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nationalid_)));
          set_has_nationalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_UpdateRank_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_UpdateRank_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_UpdateRank_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_UpdateRank_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_UPDATERANK_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required .TgsProtocol.ECenterRankType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint64 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->value(), output);
  }

  // required uint64 uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uid(), output);
  }

  // required string charname = 6;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->charname(), output);
  }

  // optional uint32 nationalId = 7;
  if (has_nationalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nationalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_UpdateRank_Ntf)
}

::google::protobuf::uint8* Lobby2Center_UpdateRank_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_UpdateRank_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_UPDATERANK_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required .TgsProtocol.ECenterRankType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint64 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->value(), target);
  }

  // required uint64 uid = 5;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->uid(), target);
  }

  // required string charname = 6;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->charname(), target);
  }

  // optional uint32 nationalId = 7;
  if (has_nationalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->nationalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_UpdateRank_Ntf)
  return target;
}

int Lobby2Center_UpdateRank_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_UPDATERANK_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required .TgsProtocol.ECenterRankType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint64 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // required uint64 uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required string charname = 6;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 nationalId = 7;
    if (has_nationalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nationalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_UpdateRank_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_UpdateRank_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_UpdateRank_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_UpdateRank_Ntf::MergeFrom(const Lobby2Center_UpdateRank_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_nationalid()) {
      set_nationalid(from.nationalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_UpdateRank_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_UpdateRank_Ntf::CopyFrom(const Lobby2Center_UpdateRank_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_UpdateRank_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  return true;
}

void Lobby2Center_UpdateRank_Ntf::Swap(Lobby2Center_UpdateRank_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(value_, other->value_);
    std::swap(uid_, other->uid_);
    std::swap(charname_, other->charname_);
    std::swap(nationalid_, other->nationalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_UpdateRank_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_UpdateRank_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_UpdateRank_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_GetRank_Req::kCmdIdFieldNumber;
const int Lobby2Center_GetRank_Req::kUidFieldNumber;
const int Lobby2Center_GetRank_Req::kTypeFieldNumber;
const int Lobby2Center_GetRank_Req::kLimitNumFieldNumber;
const int Lobby2Center_GetRank_Req::kCharidFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_GetRank_Req::Lobby2Center_GetRank_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_GetRank_Req)
}

void Lobby2Center_GetRank_Req::InitAsDefaultInstance() {
}

Lobby2Center_GetRank_Req::Lobby2Center_GetRank_Req(const Lobby2Center_GetRank_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_GetRank_Req)
}

void Lobby2Center_GetRank_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 900008;
  uid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  limitnum_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_GetRank_Req::~Lobby2Center_GetRank_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_GetRank_Req)
  SharedDtor();
}

void Lobby2Center_GetRank_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_GetRank_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_GetRank_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_GetRank_Req_descriptor_;
}

const Lobby2Center_GetRank_Req& Lobby2Center_GetRank_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_GetRank_Req* Lobby2Center_GetRank_Req::default_instance_ = NULL;

Lobby2Center_GetRank_Req* Lobby2Center_GetRank_Req::New() const {
  return new Lobby2Center_GetRank_Req;
}

void Lobby2Center_GetRank_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Lobby2Center_GetRank_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, limitnum_);
    cmdid_ = 900008;
    uid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_GetRank_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_GetRank_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETRANK_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .TgsProtocol.ECenterRankType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::ECenterRankType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::ECenterRankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limitNum;
        break;
      }

      // required uint32 limitNum = 4;
      case 4: {
        if (tag == 32) {
         parse_limitNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limitnum_)));
          set_has_limitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // required uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_GetRank_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_GetRank_Req)
  return false;
#undef DO_
}

void Lobby2Center_GetRank_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_GetRank_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETRANK_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required .TgsProtocol.ECenterRankType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required uint32 limitNum = 4;
  if (has_limitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->limitnum(), output);
  }

  // required uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_GetRank_Req)
}

::google::protobuf::uint8* Lobby2Center_GetRank_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_GetRank_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETRANK_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required .TgsProtocol.ECenterRankType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required uint32 limitNum = 4;
  if (has_limitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->limitnum(), target);
  }

  // required uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_GetRank_Req)
  return target;
}

int Lobby2Center_GetRank_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_GETRANK_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required .TgsProtocol.ECenterRankType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 limitNum = 4;
    if (has_limitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limitnum());
    }

    // required uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_GetRank_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_GetRank_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_GetRank_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_GetRank_Req::MergeFrom(const Lobby2Center_GetRank_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_limitnum()) {
      set_limitnum(from.limitnum());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_GetRank_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_GetRank_Req::CopyFrom(const Lobby2Center_GetRank_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_GetRank_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void Lobby2Center_GetRank_Req::Swap(Lobby2Center_GetRank_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(limitnum_, other->limitnum_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_GetRank_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_GetRank_Req_descriptor_;
  metadata.reflection = Lobby2Center_GetRank_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_GetRank_Ret::kCmdIdFieldNumber;
const int Center2Lobby_GetRank_Ret::kUidFieldNumber;
const int Center2Lobby_GetRank_Ret::kCharidFieldNumber;
const int Center2Lobby_GetRank_Ret::kMyrankFieldNumber;
const int Center2Lobby_GetRank_Ret::kRankInfoFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_GetRank_Ret::Center2Lobby_GetRank_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_GetRank_Ret)
}

void Center2Lobby_GetRank_Ret::InitAsDefaultInstance() {
}

Center2Lobby_GetRank_Ret::Center2Lobby_GetRank_Ret(const Center2Lobby_GetRank_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_GetRank_Ret)
}

void Center2Lobby_GetRank_Ret::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 900009;
  uid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_GetRank_Ret::~Center2Lobby_GetRank_Ret() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_GetRank_Ret)
  SharedDtor();
}

void Center2Lobby_GetRank_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_GetRank_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_GetRank_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_GetRank_Ret_descriptor_;
}

const Center2Lobby_GetRank_Ret& Center2Lobby_GetRank_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_GetRank_Ret* Center2Lobby_GetRank_Ret::default_instance_ = NULL;

Center2Lobby_GetRank_Ret* Center2Lobby_GetRank_Ret::New() const {
  return new Center2Lobby_GetRank_Ret;
}

void Center2Lobby_GetRank_Ret::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Center2Lobby_GetRank_Ret*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(myrank_, charid_);
    cmdid_ = 900009;
    uid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rank_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_GetRank_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_GetRank_Ret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETRANK_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_myrank;
        break;
      }

      // required uint32 myrank = 4;
      case 4: {
        if (tag == 32) {
         parse_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rank_info;
        break;
      }

      // repeated .TgsProtocol.CenterRankInfo rank_info = 5;
      case 5: {
        if (tag == 42) {
         parse_rank_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rank_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_GetRank_Ret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_GetRank_Ret)
  return false;
#undef DO_
}

void Center2Lobby_GetRank_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_GetRank_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETRANK_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint32 myrank = 4;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->myrank(), output);
  }

  // repeated .TgsProtocol.CenterRankInfo rank_info = 5;
  for (int i = 0; i < this->rank_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rank_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_GetRank_Ret)
}

::google::protobuf::uint8* Center2Lobby_GetRank_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_GetRank_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETRANK_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint32 myrank = 4;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->myrank(), target);
  }

  // repeated .TgsProtocol.CenterRankInfo rank_info = 5;
  for (int i = 0; i < this->rank_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rank_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_GetRank_Ret)
  return target;
}

int Center2Lobby_GetRank_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_GETRANK_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 myrank = 4;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .TgsProtocol.CenterRankInfo rank_info = 5;
  total_size += 1 * this->rank_info_size();
  for (int i = 0; i < this->rank_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_GetRank_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_GetRank_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_GetRank_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_GetRank_Ret::MergeFrom(const Center2Lobby_GetRank_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_info_.MergeFrom(from.rank_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_GetRank_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_GetRank_Ret::CopyFrom(const Center2Lobby_GetRank_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_GetRank_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rank_info())) return false;
  return true;
}

void Center2Lobby_GetRank_Ret::Swap(Center2Lobby_GetRank_Ret* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(uid_, other->uid_);
    std::swap(charid_, other->charid_);
    std::swap(myrank_, other->myrank_);
    rank_info_.Swap(&other->rank_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_GetRank_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_GetRank_Ret_descriptor_;
  metadata.reflection = Center2Lobby_GetRank_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lobby2Center_CloseConsumeRank_Ntf::kCmdIdFieldNumber;
const int Lobby2Center_CloseConsumeRank_Ntf::kUidFieldNumber;
const int Lobby2Center_CloseConsumeRank_Ntf::kTypeFieldNumber;
#endif  // !_MSC_VER

Lobby2Center_CloseConsumeRank_Ntf::Lobby2Center_CloseConsumeRank_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Lobby2Center_CloseConsumeRank_Ntf)
}

void Lobby2Center_CloseConsumeRank_Ntf::InitAsDefaultInstance() {
}

Lobby2Center_CloseConsumeRank_Ntf::Lobby2Center_CloseConsumeRank_Ntf(const Lobby2Center_CloseConsumeRank_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Lobby2Center_CloseConsumeRank_Ntf)
}

void Lobby2Center_CloseConsumeRank_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 900010;
  uid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby2Center_CloseConsumeRank_Ntf::~Lobby2Center_CloseConsumeRank_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Lobby2Center_CloseConsumeRank_Ntf)
  SharedDtor();
}

void Lobby2Center_CloseConsumeRank_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby2Center_CloseConsumeRank_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby2Center_CloseConsumeRank_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby2Center_CloseConsumeRank_Ntf_descriptor_;
}

const Lobby2Center_CloseConsumeRank_Ntf& Lobby2Center_CloseConsumeRank_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Lobby2Center_CloseConsumeRank_Ntf* Lobby2Center_CloseConsumeRank_Ntf::default_instance_ = NULL;

Lobby2Center_CloseConsumeRank_Ntf* Lobby2Center_CloseConsumeRank_Ntf::New() const {
  return new Lobby2Center_CloseConsumeRank_Ntf;
}

void Lobby2Center_CloseConsumeRank_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmdid_ = 900010;
    uid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby2Center_CloseConsumeRank_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Lobby2Center_CloseConsumeRank_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSECONSUMERANK_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .TgsProtocol.ECenterRankType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::ECenterRankType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::ECenterRankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Lobby2Center_CloseConsumeRank_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Lobby2Center_CloseConsumeRank_Ntf)
  return false;
#undef DO_
}

void Lobby2Center_CloseConsumeRank_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Lobby2Center_CloseConsumeRank_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSECONSUMERANK_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required .TgsProtocol.ECenterRankType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Lobby2Center_CloseConsumeRank_Ntf)
}

::google::protobuf::uint8* Lobby2Center_CloseConsumeRank_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Lobby2Center_CloseConsumeRank_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSECONSUMERANK_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required .TgsProtocol.ECenterRankType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Lobby2Center_CloseConsumeRank_Ntf)
  return target;
}

int Lobby2Center_CloseConsumeRank_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2CENTER_CLOSECONSUMERANK_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required .TgsProtocol.ECenterRankType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby2Center_CloseConsumeRank_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby2Center_CloseConsumeRank_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby2Center_CloseConsumeRank_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby2Center_CloseConsumeRank_Ntf::MergeFrom(const Lobby2Center_CloseConsumeRank_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby2Center_CloseConsumeRank_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby2Center_CloseConsumeRank_Ntf::CopyFrom(const Lobby2Center_CloseConsumeRank_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby2Center_CloseConsumeRank_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Lobby2Center_CloseConsumeRank_Ntf::Swap(Lobby2Center_CloseConsumeRank_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby2Center_CloseConsumeRank_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby2Center_CloseConsumeRank_Ntf_descriptor_;
  metadata.reflection = Lobby2Center_CloseConsumeRank_Ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center2Lobby_ConsumeRankReward_Ntf::kCmdIdFieldNumber;
const int Center2Lobby_ConsumeRankReward_Ntf::kUidFieldNumber;
const int Center2Lobby_ConsumeRankReward_Ntf::kRankInfoFieldNumber;
#endif  // !_MSC_VER

Center2Lobby_ConsumeRankReward_Ntf::Center2Lobby_ConsumeRankReward_Ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Center2Lobby_ConsumeRankReward_Ntf)
}

void Center2Lobby_ConsumeRankReward_Ntf::InitAsDefaultInstance() {
}

Center2Lobby_ConsumeRankReward_Ntf::Center2Lobby_ConsumeRankReward_Ntf(const Center2Lobby_ConsumeRankReward_Ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Center2Lobby_ConsumeRankReward_Ntf)
}

void Center2Lobby_ConsumeRankReward_Ntf::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 900011;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center2Lobby_ConsumeRankReward_Ntf::~Center2Lobby_ConsumeRankReward_Ntf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Center2Lobby_ConsumeRankReward_Ntf)
  SharedDtor();
}

void Center2Lobby_ConsumeRankReward_Ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center2Lobby_ConsumeRankReward_Ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center2Lobby_ConsumeRankReward_Ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center2Lobby_ConsumeRankReward_Ntf_descriptor_;
}

const Center2Lobby_ConsumeRankReward_Ntf& Center2Lobby_ConsumeRankReward_Ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fcenter_2eproto();
  return *default_instance_;
}

Center2Lobby_ConsumeRankReward_Ntf* Center2Lobby_ConsumeRankReward_Ntf::default_instance_ = NULL;

Center2Lobby_ConsumeRankReward_Ntf* Center2Lobby_ConsumeRankReward_Ntf::New() const {
  return new Center2Lobby_ConsumeRankReward_Ntf;
}

void Center2Lobby_ConsumeRankReward_Ntf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 900011;
    uid_ = GOOGLE_ULONGLONG(0);
  }
  rank_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center2Lobby_ConsumeRankReward_Ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Center2Lobby_ConsumeRankReward_Ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_CONSUMERANKREWARD_NTF];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rank_info;
        break;
      }

      // repeated .TgsProtocol.CenterRankInfo rank_info = 3;
      case 3: {
        if (tag == 26) {
         parse_rank_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rank_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Center2Lobby_ConsumeRankReward_Ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Center2Lobby_ConsumeRankReward_Ntf)
  return false;
#undef DO_
}

void Center2Lobby_ConsumeRankReward_Ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Center2Lobby_ConsumeRankReward_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_CONSUMERANKREWARD_NTF];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // repeated .TgsProtocol.CenterRankInfo rank_info = 3;
  for (int i = 0; i < this->rank_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rank_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Center2Lobby_ConsumeRankReward_Ntf)
}

::google::protobuf::uint8* Center2Lobby_ConsumeRankReward_Ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Center2Lobby_ConsumeRankReward_Ntf)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_CONSUMERANKREWARD_NTF];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // repeated .TgsProtocol.CenterRankInfo rank_info = 3;
  for (int i = 0; i < this->rank_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rank_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Center2Lobby_ConsumeRankReward_Ntf)
  return target;
}

int Center2Lobby_ConsumeRankReward_Ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = CENTER2LOBBY_CONSUMERANKREWARD_NTF];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  // repeated .TgsProtocol.CenterRankInfo rank_info = 3;
  total_size += 1 * this->rank_info_size();
  for (int i = 0; i < this->rank_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center2Lobby_ConsumeRankReward_Ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center2Lobby_ConsumeRankReward_Ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center2Lobby_ConsumeRankReward_Ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center2Lobby_ConsumeRankReward_Ntf::MergeFrom(const Center2Lobby_ConsumeRankReward_Ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_info_.MergeFrom(from.rank_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center2Lobby_ConsumeRankReward_Ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center2Lobby_ConsumeRankReward_Ntf::CopyFrom(const Center2Lobby_ConsumeRankReward_Ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center2Lobby_ConsumeRankReward_Ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rank_info())) return false;
  return true;
}

void Center2Lobby_ConsumeRankReward_Ntf::Swap(Center2Lobby_ConsumeRankReward_Ntf* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(uid_, other->uid_);
    rank_info_.Swap(&other->rank_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center2Lobby_ConsumeRankReward_Ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center2Lobby_ConsumeRankReward_Ntf_descriptor_;
  metadata.reflection = Center2Lobby_ConsumeRankReward_Ntf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TgsProtocol

// @@protoc_insertion_point(global_scope)
