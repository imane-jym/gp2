// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketDef.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PacketDef.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TgsProtocol {

namespace {

const ::google::protobuf::Descriptor* NotFinQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotFinQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoinInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeedSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeedSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBGodEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBGodEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBEvaluation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBEvaluation_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBEvaluationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBEvaluationList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBChapterRewardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBChapterRewardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBHeroEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBHeroEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBEquipNew_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBEquipNew_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBEquipNewList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBEquipNewList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBHeroList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBHeroList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBEssenceItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBEssenceItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBEssenceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBEssenceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemUseRestrict_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemUseRestrict_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBShopGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBShopGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBGoodsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBGoodsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBShopList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBShopList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBShopRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBShopRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBShopRefreshList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBShopRefreshList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBFestivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBFestivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBFestivityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBFestivityList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBArenaHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBArenaHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBArenaPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBArenaPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBArenaRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBArenaRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBArenaLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBArenaLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBArenaLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBArenaLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBFriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEvaluation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEvaluation_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroEquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroEquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroEquipNew_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroEquipNew_reflection_ = NULL;
const ::google::protobuf::Descriptor* Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* WakeAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WakeAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Diagram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Diagram_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiagramChapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiagramChapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiagramChapterMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiagramChapterMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiagramMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiagramMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* GhostDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GhostDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ghost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ghost_reflection_ = NULL;
const ::google::protobuf::Descriptor* GhostList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GhostList_reflection_ = NULL;
const ::google::protobuf::Descriptor* EpicBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EpicBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* EpicBossList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EpicBossList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineRewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetrieveState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetrieveState_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassWordState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassWordState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientInstanceEvaluation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientInstanceEvaluation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientFestivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientFestivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherUserInfoClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherUserInfoClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBPlayerActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBPlayerActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBPlayerActivityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBPlayerActivityList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChapterMapBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChapterMapBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBChapterBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBChapterBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBChapterBoxList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBChapterBoxList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientBattleHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientBattleHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientBattlePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientBattlePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRaidTeamHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRaidTeamHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRaidTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRaidTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TodayTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TodayTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* SourceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SourceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMonthCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMonthCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientItemLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientItemLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* LString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LString_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* HalfBuyElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HalfBuyElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* HalfBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HalfBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchieveElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchieveElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Achieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientHeroRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientHeroRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientAchieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientAchieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGuildMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGuildMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGuildRitual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGuildRitual_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGuildTechnology_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGuildTechnology_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGuildState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGuildState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGuildWarMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGuildWarMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGuildWarEndMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGuildWarEndMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonthCardEle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonthCardEle_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbMonthCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbMonthCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrizeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrizeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrizeInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrizeInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMapMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMapMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMapItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMapItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMapReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMapReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBGuildMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBGuildMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildNewMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildNewMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildChapterMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildChapterMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildChapterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildChapterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildTerritoryEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildTerritoryEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildTerritoryEventUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildTerritoryEventUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildTerritoryChapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildTerritoryChapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildTerritoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildTerritoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberTerritoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberTerritoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTerritoryEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTerritoryEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTerritoryChapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTerritoryChapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TerritorySkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TerritorySkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTerritoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTerritoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendTerritoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendTerritoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientNoticeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientNoticeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbTreasureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbTreasureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbDropEle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbDropEle_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientChargeShopConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientChargeShopConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientSevenDayRankEle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientSevenDayRankEle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientSevenDayRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientSevenDayRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbNoticeEle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbNoticeEle_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptGlobal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptGlobal_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientContinueCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientContinueCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbHandBookEle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbHandBookEle_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbHandBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbHandBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientHandBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientHandBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTurntableData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTurntableData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalGoodsConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalGoodsConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerWarConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerWarConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* STeamWinProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STeamWinProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTeamConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTeamConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientServerWarPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientServerWarPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TombImp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TombImp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTeamBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTeamBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientServerTeamPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientServerTeamPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTeamPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTeamPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientServerTeamFightTurn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientServerTeamFightTurn_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientServerTeamBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientServerTeamBattleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecretHole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecretHole_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBSecretHole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBSecretHole_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRecords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRecords_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRoleMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRoleMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionSerialize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionSerialize_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBReturnTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBReturnTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefineEquipImp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefineEquipImp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerCompareInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerCompareInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerCompareGot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerCompareGot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroundInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroundInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FarmNoticeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FarmNoticeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FarmWell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FarmWell_reflection_ = NULL;
const ::google::protobuf::Descriptor* FarmInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FarmInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonthCardPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonthCardPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* FarmDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FarmDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeedBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeedBag_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketDef_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eItemUseRestrict_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RetrieveActivity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eRefershType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SourceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CoinType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ShopType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* emLobby2ClientErr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EActTargetTimesType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERankType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eGuildJob_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RaidTeamOpt_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RaidTeamNtf_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RaidTeamStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eGuildMemberType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eGuildStateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ePrizeGet_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildTerritoryEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerTerritoryEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eUseItem_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eNoticeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eGameModuleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eDropType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EServerWarStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECountryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETombEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EServerTeamOpType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELanguage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EReturnType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EReturnPrivilegeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EServerRankType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EModuleOldFlag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPrivilegeCard_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPrivilege_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerCompareType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECenterRankType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FarmNoticeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FarmNoticeStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PacketDef_2eproto() {
  protobuf_AddDesc_PacketDef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PacketDef.proto");
  GOOGLE_CHECK(file != NULL);
  NotFinQuest_descriptor_ = file->message_type(0);
  static const int NotFinQuest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotFinQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotFinQuest, complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotFinQuest, targetvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotFinQuest, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotFinQuest, got_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotFinQuest, completetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotFinQuest, targetvalue64_),
  };
  NotFinQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotFinQuest_descriptor_,
      NotFinQuest::default_instance_,
      NotFinQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotFinQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotFinQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotFinQuest));
  DbQuest_descriptor_ = file->message_type(1);
  static const int DbQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbQuest, commitquests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbQuest, notfinquests_),
  };
  DbQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbQuest_descriptor_,
      DbQuest::default_instance_,
      DbQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbQuest));
  CoinInfo_descriptor_ = file->message_type(2);
  static const int CoinInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinInfo, cointype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinInfo, coinnum_),
  };
  CoinInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoinInfo_descriptor_,
      CoinInfo::default_instance_,
      CoinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoinInfo));
  ItemInfo_descriptor_ = file->message_type(3);
  static const int ItemInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, value2_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  SeedSource_descriptor_ = file->message_type(4);
  static const int SeedSource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedSource, seedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedSource, totalnum_),
  };
  SeedSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeedSource_descriptor_,
      SeedSource::default_instance_,
      SeedSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeedSource));
  DBGodEquip_descriptor_ = file->message_type(5);
  static const int DBGodEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGodEquip, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGodEquip, totalnum_),
  };
  DBGodEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBGodEquip_descriptor_,
      DBGodEquip::default_instance_,
      DBGodEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGodEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGodEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBGodEquip));
  DbBagInfo_descriptor_ = file->message_type(6);
  static const int DbBagInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbBagInfo, prop_),
  };
  DbBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbBagInfo_descriptor_,
      DbBagInfo::default_instance_,
      DbBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbBagInfo));
  DBEvaluation_descriptor_ = file->message_type(7);
  static const int DBEvaluation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEvaluation, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEvaluation, evaluation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEvaluation, challengetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEvaluation, resettimes_),
  };
  DBEvaluation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBEvaluation_descriptor_,
      DBEvaluation::default_instance_,
      DBEvaluation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEvaluation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEvaluation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBEvaluation));
  DBEvaluationList_descriptor_ = file->message_type(8);
  static const int DBEvaluationList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEvaluationList, evaluation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEvaluationList, share_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEvaluationList, share_buy_),
  };
  DBEvaluationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBEvaluationList_descriptor_,
      DBEvaluationList::default_instance_,
      DBEvaluationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEvaluationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEvaluationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBEvaluationList));
  DBChapterRewardList_descriptor_ = file->message_type(9);
  static const int DBChapterRewardList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterRewardList, chapterreward_),
  };
  DBChapterRewardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBChapterRewardList_descriptor_,
      DBChapterRewardList::default_instance_,
      DBChapterRewardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterRewardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterRewardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBChapterRewardList));
  DBHeroEquip_descriptor_ = file->message_type(10);
  static const int DBHeroEquip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroEquip, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroEquip, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroEquip, attrval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroEquip, scheduleval_),
  };
  DBHeroEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBHeroEquip_descriptor_,
      DBHeroEquip::default_instance_,
      DBHeroEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBHeroEquip));
  DBEquipNew_descriptor_ = file->message_type(11);
  static const int DBEquipNew_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNew, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNew, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNew, strenglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNew, refinelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNew, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNew, strengexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNew, refineexp_),
  };
  DBEquipNew_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBEquipNew_descriptor_,
      DBEquipNew::default_instance_,
      DBEquipNew_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNew, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNew, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBEquipNew));
  DBEquipNewList_descriptor_ = file->message_type(12);
  static const int DBEquipNewList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNewList, equipnewlist_),
  };
  DBEquipNewList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBEquipNewList_descriptor_,
      DBEquipNewList::default_instance_,
      DBEquipNewList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNewList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEquipNewList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBEquipNewList));
  DBHeroInfo_descriptor_ = file->message_type(13);
  static const int DBHeroInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, evolutionlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, forcelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, heroname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, equipnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, deificationlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, wingslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, wingsrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, wakelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, wakeequips_),
  };
  DBHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBHeroInfo_descriptor_,
      DBHeroInfo::default_instance_,
      DBHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBHeroInfo));
  DBHeroList_descriptor_ = file->message_type(14);
  static const int DBHeroList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroList, herolist_),
  };
  DBHeroList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBHeroList_descriptor_,
      DBHeroList::default_instance_,
      DBHeroList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHeroList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBHeroList));
  DBEssenceItem_descriptor_ = file->message_type(15);
  static const int DBEssenceItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEssenceItem, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEssenceItem, itemvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEssenceItem, num_),
  };
  DBEssenceItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBEssenceItem_descriptor_,
      DBEssenceItem::default_instance_,
      DBEssenceItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEssenceItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEssenceItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBEssenceItem));
  DBEssenceList_descriptor_ = file->message_type(16);
  static const int DBEssenceList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEssenceList, essenceitem_),
  };
  DBEssenceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBEssenceList_descriptor_,
      DBEssenceList::default_instance_,
      DBEssenceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEssenceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBEssenceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBEssenceList));
  ItemUseRestrict_descriptor_ = file->message_type(17);
  static const int ItemUseRestrict_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseRestrict, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseRestrict, value_),
  };
  ItemUseRestrict_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemUseRestrict_descriptor_,
      ItemUseRestrict::default_instance_,
      ItemUseRestrict_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseRestrict, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseRestrict, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemUseRestrict));
  DBShopGoods_descriptor_ = file->message_type(18);
  static const int DBShopGoods_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopGoods, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopGoods, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopGoods, sellval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopGoods, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopGoods, para1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopGoods, para2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopGoods, bsale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopGoods, goodsid_),
  };
  DBShopGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBShopGoods_descriptor_,
      DBShopGoods::default_instance_,
      DBShopGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBShopGoods));
  DBGoodsList_descriptor_ = file->message_type(19);
  static const int DBGoodsList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGoodsList, shoptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGoodsList, activitytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGoodsList, lastrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGoodsList, goodslist_),
  };
  DBGoodsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBGoodsList_descriptor_,
      DBGoodsList::default_instance_,
      DBGoodsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGoodsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGoodsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBGoodsList));
  DBShopList_descriptor_ = file->message_type(20);
  static const int DBShopList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopList, shoplist_),
  };
  DBShopList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBShopList_descriptor_,
      DBShopList::default_instance_,
      DBShopList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBShopList));
  DBShopRefresh_descriptor_ = file->message_type(21);
  static const int DBShopRefresh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopRefresh, refreshnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopRefresh, lastrefreshtime_),
  };
  DBShopRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBShopRefresh_descriptor_,
      DBShopRefresh::default_instance_,
      DBShopRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBShopRefresh));
  DBShopRefreshList_descriptor_ = file->message_type(22);
  static const int DBShopRefreshList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopRefreshList, refreshlist_),
  };
  DBShopRefreshList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBShopRefreshList_descriptor_,
      DBShopRefreshList::default_instance_,
      DBShopRefreshList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopRefreshList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopRefreshList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBShopRefreshList));
  DBFestivityInfo_descriptor_ = file->message_type(23);
  static const int DBFestivityInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFestivityInfo, festivityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFestivityInfo, entercount_),
  };
  DBFestivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBFestivityInfo_descriptor_,
      DBFestivityInfo::default_instance_,
      DBFestivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFestivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFestivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBFestivityInfo));
  DBFestivityList_descriptor_ = file->message_type(24);
  static const int DBFestivityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFestivityList, festivitylist_),
  };
  DBFestivityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBFestivityList_descriptor_,
      DBFestivityList::default_instance_,
      DBFestivityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFestivityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFestivityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBFestivityList));
  ClientSource_descriptor_ = file->message_type(25);
  static const int ClientSource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSource, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSource, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSource, sourcenum_),
  };
  ClientSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientSource_descriptor_,
      ClientSource::default_instance_,
      ClientSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientSource));
  DBMailInfo_descriptor_ = file->message_type(26);
  static const int DBMailInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, subjectstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, contextstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, senderstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, bread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, accessory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, savetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, contextparam_),
  };
  DBMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBMailInfo_descriptor_,
      DBMailInfo::default_instance_,
      DBMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBMailInfo));
  DBArenaHero_descriptor_ = file->message_type(27);
  static const int DBArenaHero_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaHero, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaHero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaHero, evolutionlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaHero, forcelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaHero, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaHero, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaHero, heroname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaHero, newequip_),
  };
  DBArenaHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBArenaHero_descriptor_,
      DBArenaHero::default_instance_,
      DBArenaHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBArenaHero));
  DBArenaPlayer_descriptor_ = file->message_type(28);
  static const int DBArenaPlayer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaPlayer, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaPlayer, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaPlayer, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaPlayer, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaPlayer, playerphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaPlayer, viplvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaPlayer, effective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaPlayer, totalwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaPlayer, arherolist_),
  };
  DBArenaPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBArenaPlayer_descriptor_,
      DBArenaPlayer::default_instance_,
      DBArenaPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBArenaPlayer));
  DBArenaRank_descriptor_ = file->message_type(29);
  static const int DBArenaRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaRank, arenaplayerlist_),
  };
  DBArenaRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBArenaRank_descriptor_,
      DBArenaRank::default_instance_,
      DBArenaRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBArenaRank));
  DBArenaLog_descriptor_ = file->message_type(30);
  static const int DBArenaLog_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, charlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, charphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, charvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, bwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, newrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, brobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, curtime_),
  };
  DBArenaLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBArenaLog_descriptor_,
      DBArenaLog::default_instance_,
      DBArenaLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBArenaLog));
  DBArenaLogList_descriptor_ = file->message_type(31);
  static const int DBArenaLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLogList, arenalog_),
  };
  DBArenaLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBArenaLogList_descriptor_,
      DBArenaLogList::default_instance_,
      DBArenaLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBArenaLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBArenaLogList));
  DBFriendInfo_descriptor_ = file->message_type(32);
  static const int DBFriendInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, charlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, bsend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, receive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, effect64_),
  };
  DBFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBFriendInfo_descriptor_,
      DBFriendInfo::default_instance_,
      DBFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBFriendInfo));
  DBFriendList_descriptor_ = file->message_type(33);
  static const int DBFriendList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendList, friendlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendList, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendList, applylist_),
  };
  DBFriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBFriendList_descriptor_,
      DBFriendList::default_instance_,
      DBFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBFriendList));
  ShopInfo_descriptor_ = file->message_type(34);
  static const int ShopInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, shoptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, buytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, buycontentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, buycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, costtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, costcontentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, costcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, costcountold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, platformtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, limitnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, limittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, prizefloat_),
  };
  ShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopInfo_descriptor_,
      ShopInfo::default_instance_,
      ShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopInfo));
  GoodsData_descriptor_ = file->message_type(35);
  static const int GoodsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsData, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsData, already_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsData, flushtime_),
  };
  GoodsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsData_descriptor_,
      GoodsData::default_instance_,
      GoodsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsData));
  GoodsDataList_descriptor_ = file->message_type(36);
  static const int GoodsDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataList, goodsdatalist_),
  };
  GoodsDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsDataList_descriptor_,
      GoodsDataList::default_instance_,
      GoodsDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsDataList));
  ClientQuest_descriptor_ = file->message_type(37);
  static const int ClientQuest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuest, complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuest, targetvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuest, isshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuest, isget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuest, completetime_),
  };
  ClientQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientQuest_descriptor_,
      ClientQuest::default_instance_,
      ClientQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientQuest));
  TEvaluation_descriptor_ = file->message_type(38);
  static const int TEvaluation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEvaluation, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEvaluation, evaluation_),
  };
  TEvaluation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEvaluation_descriptor_,
      TEvaluation::default_instance_,
      TEvaluation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEvaluation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEvaluation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEvaluation));
  HeroEquipInfo_descriptor_ = file->message_type(39);
  static const int HeroEquipInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipInfo, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipInfo, attrval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipInfo, scheduleval_),
  };
  HeroEquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroEquipInfo_descriptor_,
      HeroEquipInfo::default_instance_,
      HeroEquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroEquipInfo));
  HeroEquipNew_descriptor_ = file->message_type(40);
  static const int HeroEquipNew_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipNew, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipNew, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipNew, strenglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipNew, refinelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipNew, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipNew, strengexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipNew, refineexp_),
  };
  HeroEquipNew_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroEquipNew_descriptor_,
      HeroEquipNew::default_instance_,
      HeroEquipNew_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipNew, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroEquipNew, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroEquipNew));
  Property_descriptor_ = file->message_type(41);
  static const int Property_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, per_),
  };
  Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Property_descriptor_,
      Property::default_instance_,
      Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Property));
  WakeAttr_descriptor_ = file->message_type(42);
  static const int WakeAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WakeAttr, prop_),
  };
  WakeAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WakeAttr_descriptor_,
      WakeAttr::default_instance_,
      WakeAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WakeAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WakeAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WakeAttr));
  Diagram_descriptor_ = file->message_type(43);
  static const int Diagram_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagram, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagram, level_),
  };
  Diagram_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Diagram_descriptor_,
      Diagram::default_instance_,
      Diagram_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagram, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagram, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Diagram));
  DiagramChapter_descriptor_ = file->message_type(44);
  static const int DiagramChapter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagramChapter, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagramChapter, num_),
  };
  DiagramChapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiagramChapter_descriptor_,
      DiagramChapter::default_instance_,
      DiagramChapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagramChapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagramChapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiagramChapter));
  DiagramChapterMap_descriptor_ = file->message_type(45);
  static const int DiagramChapterMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagramChapterMap, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagramChapterMap, diagram_),
  };
  DiagramChapterMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiagramChapterMap_descriptor_,
      DiagramChapterMap::default_instance_,
      DiagramChapterMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagramChapterMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagramChapterMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiagramChapterMap));
  DiagramMap_descriptor_ = file->message_type(46);
  static const int DiagramMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagramMap, diagramchaptermap_),
  };
  DiagramMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiagramMap_descriptor_,
      DiagramMap::default_instance_,
      DiagramMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagramMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagramMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiagramMap));
  GhostDetail_descriptor_ = file->message_type(47);
  static const int GhostDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDetail, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDetail, activeid_),
  };
  GhostDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GhostDetail_descriptor_,
      GhostDetail::default_instance_,
      GhostDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GhostDetail));
  Ghost_descriptor_ = file->message_type(48);
  static const int Ghost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ghost, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ghost, activeid_),
  };
  Ghost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ghost_descriptor_,
      Ghost::default_instance_,
      Ghost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ghost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ghost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ghost));
  GhostList_descriptor_ = file->message_type(49);
  static const int GhostList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostList, ghostlist_),
  };
  GhostList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GhostList_descriptor_,
      GhostList::default_instance_,
      GhostList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GhostList));
  EpicBoss_descriptor_ = file->message_type(50);
  static const int EpicBoss_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpicBoss, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpicBoss, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpicBoss, state_),
  };
  EpicBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EpicBoss_descriptor_,
      EpicBoss::default_instance_,
      EpicBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpicBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpicBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EpicBoss));
  EpicBossList_descriptor_ = file->message_type(51);
  static const int EpicBossList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpicBossList, list_),
  };
  EpicBossList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EpicBossList_descriptor_,
      EpicBossList::default_instance_,
      EpicBossList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpicBossList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpicBossList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EpicBossList));
  OnlineRewards_descriptor_ = file->message_type(52);
  static const int OnlineRewards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewards, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewards, sources_),
  };
  OnlineRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineRewards_descriptor_,
      OnlineRewards::default_instance_,
      OnlineRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineRewards));
  TreeState_descriptor_ = file->message_type(53);
  static const int TreeState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeState, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeState, acctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeState, sources_),
  };
  TreeState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeState_descriptor_,
      TreeState::default_instance_,
      TreeState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeState));
  RetrieveState_descriptor_ = file->message_type(54);
  static const int RetrieveState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieveState, retrieveactivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieveState, state_),
  };
  RetrieveState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetrieveState_descriptor_,
      RetrieveState::default_instance_,
      RetrieveState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieveState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieveState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetrieveState));
  PassWordState_descriptor_ = file->message_type(55);
  static const int PassWordState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassWordState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassWordState, state_),
  };
  PassWordState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassWordState_descriptor_,
      PassWordState::default_instance_,
      PassWordState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassWordState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassWordState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassWordState));
  ClientHeroInfo_descriptor_ = file->message_type(56);
  static const int ClientHeroInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, evolutionlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, forcelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, heroname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, equipnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, comboskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, fateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, equipnewlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, deificationlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, wingslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, wingsrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, wakeequips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, wakelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, property_),
  };
  ClientHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientHeroInfo_descriptor_,
      ClientHeroInfo::default_instance_,
      ClientHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientHeroInfo));
  ClientInstanceEvaluation_descriptor_ = file->message_type(57);
  static const int ClientInstanceEvaluation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInstanceEvaluation, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInstanceEvaluation, evaluation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInstanceEvaluation, challengetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInstanceEvaluation, resettimes_),
  };
  ClientInstanceEvaluation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientInstanceEvaluation_descriptor_,
      ClientInstanceEvaluation::default_instance_,
      ClientInstanceEvaluation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInstanceEvaluation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInstanceEvaluation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientInstanceEvaluation));
  ClientFestivityInfo_descriptor_ = file->message_type(58);
  static const int ClientFestivityInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFestivityInfo, festivityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFestivityInfo, entercount_),
  };
  ClientFestivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientFestivityInfo_descriptor_,
      ClientFestivityInfo::default_instance_,
      ClientFestivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFestivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFestivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientFestivityInfo));
  OtherUserInfo_descriptor_ = file->message_type(59);
  static const int OtherUserInfo_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, curstamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, maxstamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, updatestaminatime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, bitflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, evaluation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, herolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, essenceitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, refreshprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, festivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, lockchatendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, daychattimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, skillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, updateskillpointtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, updateenergytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, equipnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, arenaformation_),
  };
  OtherUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherUserInfo_descriptor_,
      OtherUserInfo::default_instance_,
      OtherUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherUserInfo));
  OtherUserInfoClient_descriptor_ = file->message_type(60);
  static const int OtherUserInfoClient_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, charexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, charlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, curstamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, recoverytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, herobag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, bitflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, instanceevaluation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, refreshprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, festivityinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, skillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, energyretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, equipnewbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, heroraise_),
  };
  OtherUserInfoClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherUserInfoClient_descriptor_,
      OtherUserInfoClient::default_instance_,
      OtherUserInfoClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfoClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherUserInfoClient));
  DBPlayerActivity_descriptor_ = file->message_type(61);
  static const int DBPlayerActivity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerActivity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerActivity, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerActivity, got_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerActivity, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerActivity, donevalue_),
  };
  DBPlayerActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBPlayerActivity_descriptor_,
      DBPlayerActivity::default_instance_,
      DBPlayerActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBPlayerActivity));
  DBPlayerActivityList_descriptor_ = file->message_type(62);
  static const int DBPlayerActivityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerActivityList, act_),
  };
  DBPlayerActivityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBPlayerActivityList_descriptor_,
      DBPlayerActivityList::default_instance_,
      DBPlayerActivityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerActivityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerActivityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBPlayerActivityList));
  ChapterMapBox_descriptor_ = file->message_type(63);
  static const int ChapterMapBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterMapBox, maptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterMapBox, got_),
  };
  ChapterMapBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChapterMapBox_descriptor_,
      ChapterMapBox::default_instance_,
      ChapterMapBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterMapBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterMapBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChapterMapBox));
  DBChapterBox_descriptor_ = file->message_type(64);
  static const int DBChapterBox_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterBox, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterBox, got_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterBox, elite_got_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterBox, epic_got_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterBox, legend_got_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterBox, mapbox_),
  };
  DBChapterBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBChapterBox_descriptor_,
      DBChapterBox::default_instance_,
      DBChapterBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBChapterBox));
  DBChapterBoxList_descriptor_ = file->message_type(65);
  static const int DBChapterBoxList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterBoxList, items_),
  };
  DBChapterBoxList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBChapterBoxList_descriptor_,
      DBChapterBoxList::default_instance_,
      DBChapterBoxList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterBoxList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBChapterBoxList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBChapterBoxList));
  ClientFriendInfo_descriptor_ = file->message_type(66);
  static const int ClientFriendInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, charlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, bsend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, receive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, effect64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, nationalid_),
  };
  ClientFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientFriendInfo_descriptor_,
      ClientFriendInfo::default_instance_,
      ClientFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientFriendInfo));
  ClientBattleHero_descriptor_ = file->message_type(67);
  static const int ClientBattleHero_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, evolutionlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, forcelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, heroname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, equipnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, isfashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, postion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, deificationlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, wingslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, wakelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, wakeequips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, effect64_),
  };
  ClientBattleHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientBattleHero_descriptor_,
      ClientBattleHero::default_instance_,
      ClientBattleHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattleHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientBattleHero));
  GuildSkill_descriptor_ = file->message_type(68);
  static const int GuildSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSkill, level_),
  };
  GuildSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildSkill_descriptor_,
      GuildSkill::default_instance_,
      GuildSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildSkill));
  ClientBattlePlayer_descriptor_ = file->message_type(69);
  static const int ClientBattlePlayer_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, charlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, guild_job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, assist_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, guild_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, handbook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, fashionhero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, steamwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, secrethole_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, cheerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, activetitleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, effect64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, nationalid_),
  };
  ClientBattlePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientBattlePlayer_descriptor_,
      ClientBattlePlayer::default_instance_,
      ClientBattlePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBattlePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientBattlePlayer));
  ClientRaidTeamHeroInfo_descriptor_ = file->message_type(70);
  static const int ClientRaidTeamHeroInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamHeroInfo, heroindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamHeroInfo, isfashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamHeroInfo, evolutionlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamHeroInfo, forcelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamHeroInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamHeroInfo, deificationlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamHeroInfo, wingslevel_),
  };
  ClientRaidTeamHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRaidTeamHeroInfo_descriptor_,
      ClientRaidTeamHeroInfo::default_instance_,
      ClientRaidTeamHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRaidTeamHeroInfo));
  ClientRaidTeamInfo_descriptor_ = file->message_type(71);
  static const int ClientRaidTeamInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, charlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, bsend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, receive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, nationalid_),
  };
  ClientRaidTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRaidTeamInfo_descriptor_,
      ClientRaidTeamInfo::default_instance_,
      ClientRaidTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRaidTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRaidTeamInfo));
  TodayTime_descriptor_ = file->message_type(72);
  static const int TodayTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayTime, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayTime, endtime_),
  };
  TodayTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TodayTime_descriptor_,
      TodayTime::default_instance_,
      TodayTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TodayTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TodayTime));
  SourceList_descriptor_ = file->message_type(73);
  static const int SourceList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceList, source_),
  };
  SourceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SourceList_descriptor_,
      SourceList::default_instance_,
      SourceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SourceList));
  ClientMonthCard_descriptor_ = file->message_type(74);
  static const int ClientMonthCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMonthCard, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMonthCard, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMonthCard, gettime_),
  };
  ClientMonthCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMonthCard_descriptor_,
      ClientMonthCard::default_instance_,
      ClientMonthCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMonthCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMonthCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMonthCard));
  ClientItemLimit_descriptor_ = file->message_type(75);
  static const int ClientItemLimit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemLimit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemLimit, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemLimit, got_),
  };
  ClientItemLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientItemLimit_descriptor_,
      ClientItemLimit::default_instance_,
      ClientItemLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientItemLimit));
  LString_descriptor_ = file->message_type(76);
  static const int LString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LString, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LString, type_),
  };
  LString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LString_descriptor_,
      LString::default_instance_,
      LString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LString));
  IntList_descriptor_ = file->message_type(77);
  static const int IntList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntList, value_),
  };
  IntList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntList_descriptor_,
      IntList::default_instance_,
      IntList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntList));
  ClientActivity_descriptor_ = file->message_type(78);
  static const int ClientActivity_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, closed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, opentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, actype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, showbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, showendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, playerlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, todaytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, rewardgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, childdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, sharevalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, values2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, sharetex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, activetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, globalitemlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, playeritemlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, gettimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, everyvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, everydonevalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, name_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, desc_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, childdesc_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, intnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, intnumberlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, child2desc_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, iconindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, expand_),
  };
  ClientActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientActivity_descriptor_,
      ClientActivity::default_instance_,
      ClientActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientActivity));
  HalfBuyElement_descriptor_ = file->message_type(79);
  static const int HalfBuyElement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfBuyElement, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfBuyElement, number_),
  };
  HalfBuyElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HalfBuyElement_descriptor_,
      HalfBuyElement::default_instance_,
      HalfBuyElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfBuyElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfBuyElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HalfBuyElement));
  HalfBuy_descriptor_ = file->message_type(80);
  static const int HalfBuy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfBuy, halfbuyele_),
  };
  HalfBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HalfBuy_descriptor_,
      HalfBuy::default_instance_,
      HalfBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HalfBuy));
  AchieveElement_descriptor_ = file->message_type(81);
  static const int AchieveElement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveElement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveElement, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveElement, got_),
  };
  AchieveElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchieveElement_descriptor_,
      AchieveElement::default_instance_,
      AchieveElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchieveElement));
  Achieve_descriptor_ = file->message_type(82);
  static const int Achieve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve, achieves_),
  };
  Achieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achieve_descriptor_,
      Achieve::default_instance_,
      Achieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achieve));
  ClientRank_descriptor_ = file->message_type(83);
  static const int ClientRank_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, playerlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, viplev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, playerguild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, instancevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, nationalid_),
  };
  ClientRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRank_descriptor_,
      ClientRank::default_instance_,
      ClientRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRank));
  ClientRankList_descriptor_ = file->message_type(84);
  static const int ClientRankList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRankList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRankList, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRankList, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRankList, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRankList, myvalue_),
  };
  ClientRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRankList_descriptor_,
      ClientRankList::default_instance_,
      ClientRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRankList));
  ClientHeroRank_descriptor_ = file->message_type(85);
  static const int ClientHeroRank_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, forcelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, deificationlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, wingslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, effect_),
  };
  ClientHeroRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientHeroRank_descriptor_,
      ClientHeroRank::default_instance_,
      ClientHeroRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeroRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientHeroRank));
  ClientAchieve_descriptor_ = file->message_type(86);
  static const int ClientAchieve_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchieve, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchieve, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchieve, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchieve, playerlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchieve, viplev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchieve, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchieve, got_),
  };
  ClientAchieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientAchieve_descriptor_,
      ClientAchieve::default_instance_,
      ClientAchieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientAchieve));
  ActionRecord_descriptor_ = file->message_type(87);
  static const int ActionRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecord, value_),
  };
  ActionRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionRecord_descriptor_,
      ActionRecord::default_instance_,
      ActionRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionRecord));
  GuildInfo_descriptor_ = file->message_type(88);
  static const int GuildInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, creater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, manifesto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, ritual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, technology_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, technology_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, unlocked_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildwar_enemy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guildwar_enemy_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, city_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, city_exp_),
  };
  GuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInfo_descriptor_,
      GuildInfo::default_instance_,
      GuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInfo));
  ClientGuildInfo_descriptor_ = file->message_type(89);
  static const int ClientGuildInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildInfo, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildInfo, membermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildInfo, isapply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildInfo, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildInfo, myjob_),
  };
  ClientGuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGuildInfo_descriptor_,
      ClientGuildInfo::default_instance_,
      ClientGuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGuildInfo));
  ClientGuildMember_descriptor_ = file->message_type(90);
  static const int ClientGuildMember_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, arenarank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, devote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, dailydevote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, nationalid_),
  };
  ClientGuildMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGuildMember_descriptor_,
      ClientGuildMember::default_instance_,
      ClientGuildMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGuildMember));
  ClientGuildRitual_descriptor_ = file->message_type(91);
  static const int ClientGuildRitual_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildRitual, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildRitual, ritual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildRitual, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildRitual, rewardgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildRitual, ratereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildRitual, guildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildRitual, guildexp_),
  };
  ClientGuildRitual_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGuildRitual_descriptor_,
      ClientGuildRitual::default_instance_,
      ClientGuildRitual_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildRitual, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildRitual, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGuildRitual));
  ClientGuildTechnology_descriptor_ = file->message_type(92);
  static const int ClientGuildTechnology_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildTechnology, technology_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildTechnology, technology_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildTechnology, unlocked_skill_),
  };
  ClientGuildTechnology_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGuildTechnology_descriptor_,
      ClientGuildTechnology::default_instance_,
      ClientGuildTechnology_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildTechnology, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildTechnology, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGuildTechnology));
  ClientGuildState_descriptor_ = file->message_type(93);
  static const int ClientGuildState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildState, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildState, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildState, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildState, name2_),
  };
  ClientGuildState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGuildState_descriptor_,
      ClientGuildState::default_instance_,
      ClientGuildState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGuildState));
  ClientGuildWarMsg_descriptor_ = file->message_type(94);
  static const int ClientGuildWarMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, is_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, is_attacker_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, attacker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, attacker_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, defender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, defender_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, enemy_guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, attacker_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, attacker_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, total_exp_),
  };
  ClientGuildWarMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGuildWarMsg_descriptor_,
      ClientGuildWarMsg::default_instance_,
      ClientGuildWarMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGuildWarMsg));
  ClientGuildWarEndMsg_descriptor_ = file->message_type(95);
  static const int ClientGuildWarEndMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarEndMsg, is_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarEndMsg, enemy_guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarEndMsg, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarEndMsg, attack_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarEndMsg, attack_win_),
  };
  ClientGuildWarEndMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGuildWarEndMsg_descriptor_,
      ClientGuildWarEndMsg::default_instance_,
      ClientGuildWarEndMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarEndMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGuildWarEndMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGuildWarEndMsg));
  MonthCardEle_descriptor_ = file->message_type(96);
  static const int MonthCardEle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardEle, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardEle, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardEle, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardEle, repeat_),
  };
  MonthCardEle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonthCardEle_descriptor_,
      MonthCardEle::default_instance_,
      MonthCardEle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardEle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardEle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonthCardEle));
  DbMonthCard_descriptor_ = file->message_type(97);
  static const int DbMonthCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbMonthCard, card_),
  };
  DbMonthCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbMonthCard_descriptor_,
      DbMonthCard::default_instance_,
      DbMonthCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbMonthCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbMonthCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbMonthCard));
  PrizeInfo_descriptor_ = file->message_type(98);
  static const int PrizeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, got_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, reset_),
  };
  PrizeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrizeInfo_descriptor_,
      PrizeInfo::default_instance_,
      PrizeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrizeInfo));
  PrizeInfoList_descriptor_ = file->message_type(99);
  static const int PrizeInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfoList, item_),
  };
  PrizeInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrizeInfoList_descriptor_,
      PrizeInfoList::default_instance_,
      PrizeInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrizeInfoList));
  GuildMapInfo_descriptor_ = file->message_type(100);
  static const int GuildMapInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapInfo, passed_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapInfo, select_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapInfo, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapInfo, is_map_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapInfo, pass_time_),
  };
  GuildMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMapInfo_descriptor_,
      GuildMapInfo::default_instance_,
      GuildMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMapInfo));
  GuildMapMonster_descriptor_ = file->message_type(101);
  static const int GuildMapMonster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapMonster, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapMonster, hp_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapMonster, hp_max_),
  };
  GuildMapMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMapMonster_descriptor_,
      GuildMapMonster::default_instance_,
      GuildMapMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMapMonster));
  GuildMapItem_descriptor_ = file->message_type(102);
  static const int GuildMapItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapItem, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapItem, photo_),
  };
  GuildMapItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMapItem_descriptor_,
      GuildMapItem::default_instance_,
      GuildMapItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMapItem));
  GuildMapReward_descriptor_ = file->message_type(103);
  static const int GuildMapReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapReward, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapReward, item_),
  };
  GuildMapReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMapReward_descriptor_,
      GuildMapReward::default_instance_,
      GuildMapReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMapReward));
  DBGuildMap_descriptor_ = file->message_type(104);
  static const int DBGuildMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildMap, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildMap, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildMap, item_),
  };
  DBGuildMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBGuildMap_descriptor_,
      DBGuildMap::default_instance_,
      DBGuildMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBGuildMap));
  GuildNewMapInfo_descriptor_ = file->message_type(105);
  static const int GuildNewMapInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildNewMapInfo, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildNewMapInfo, pass_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildNewMapInfo, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildNewMapInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildNewMapInfo, pass_name_),
  };
  GuildNewMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildNewMapInfo_descriptor_,
      GuildNewMapInfo::default_instance_,
      GuildNewMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildNewMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildNewMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildNewMapInfo));
  GuildChapterMap_descriptor_ = file->message_type(106);
  static const int GuildChapterMap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterMap, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterMap, map_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterMap, attack_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterMap, self_attacked_),
  };
  GuildChapterMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildChapterMap_descriptor_,
      GuildChapterMap::default_instance_,
      GuildChapterMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildChapterMap));
  GuildChapterInfo_descriptor_ = file->message_type(107);
  static const int GuildChapterInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterInfo, passed_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterInfo, chapter_back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterInfo, chapter_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterInfo, attack_chapterid_),
  };
  GuildChapterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildChapterInfo_descriptor_,
      GuildChapterInfo::default_instance_,
      GuildChapterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChapterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildChapterInfo));
  GuildTerritoryEvent_descriptor_ = file->message_type(108);
  static const int GuildTerritoryEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEvent, sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEvent, suppress_charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEvent, suppress_name_),
  };
  GuildTerritoryEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildTerritoryEvent_descriptor_,
      GuildTerritoryEvent::default_instance_,
      GuildTerritoryEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildTerritoryEvent));
  GuildTerritoryEventUpdate_descriptor_ = file->message_type(109);
  static const int GuildTerritoryEventUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEventUpdate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEventUpdate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEventUpdate, index_),
  };
  GuildTerritoryEventUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildTerritoryEventUpdate_descriptor_,
      GuildTerritoryEventUpdate::default_instance_,
      GuildTerritoryEventUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEventUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryEventUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildTerritoryEventUpdate));
  GuildTerritoryChapter_descriptor_ = file->message_type(110);
  static const int GuildTerritoryChapter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryChapter, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryChapter, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryChapter, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryChapter, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryChapter, sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryChapter, source_rate_),
  };
  GuildTerritoryChapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildTerritoryChapter_descriptor_,
      GuildTerritoryChapter::default_instance_,
      GuildTerritoryChapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryChapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryChapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildTerritoryChapter));
  GuildTerritoryInfo_descriptor_ = file->message_type(111);
  static const int GuildTerritoryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryInfo, passed_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryInfo, item_),
  };
  GuildTerritoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildTerritoryInfo_descriptor_,
      GuildTerritoryInfo::default_instance_,
      GuildTerritoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTerritoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildTerritoryInfo));
  GuildMemberTerritoryInfo_descriptor_ = file->message_type(112);
  static const int GuildMemberTerritoryInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTerritoryInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTerritoryInfo, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTerritoryInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTerritoryInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTerritoryInfo, territorycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTerritoryInfo, territoryriotcount_),
  };
  GuildMemberTerritoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberTerritoryInfo_descriptor_,
      GuildMemberTerritoryInfo::default_instance_,
      GuildMemberTerritoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTerritoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberTerritoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberTerritoryInfo));
  PlayerTerritoryEvent_descriptor_ = file->message_type(113);
  static const int PlayerTerritoryEvent_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, suppress_charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, suppress_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, suppress_sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, patrol_words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, suppress_words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, suppress_time_),
  };
  PlayerTerritoryEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTerritoryEvent_descriptor_,
      PlayerTerritoryEvent::default_instance_,
      PlayerTerritoryEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTerritoryEvent));
  PlayerTerritoryChapter_descriptor_ = file->message_type(114);
  static const int PlayerTerritoryChapter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryChapter, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryChapter, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryChapter, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryChapter, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryChapter, patrol_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryChapter, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryChapter, sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryChapter, next_event_time_),
  };
  PlayerTerritoryChapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTerritoryChapter_descriptor_,
      PlayerTerritoryChapter::default_instance_,
      PlayerTerritoryChapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryChapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryChapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTerritoryChapter));
  TerritorySkill_descriptor_ = file->message_type(115);
  static const int TerritorySkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerritorySkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerritorySkill, level_),
  };
  TerritorySkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TerritorySkill_descriptor_,
      TerritorySkill::default_instance_,
      TerritorySkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerritorySkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerritorySkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TerritorySkill));
  PlayerTerritoryInfo_descriptor_ = file->message_type(116);
  static const int PlayerTerritoryInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryInfo, passed_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryInfo, skill_),
  };
  PlayerTerritoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTerritoryInfo_descriptor_,
      PlayerTerritoryInfo::default_instance_,
      PlayerTerritoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTerritoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTerritoryInfo));
  FriendTerritoryInfo_descriptor_ = file->message_type(117);
  static const int FriendTerritoryInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendTerritoryInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendTerritoryInfo, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendTerritoryInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendTerritoryInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendTerritoryInfo, territorycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendTerritoryInfo, territoryriotcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendTerritoryInfo, patrolcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendTerritoryInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendTerritoryInfo, offlinetime_),
  };
  FriendTerritoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendTerritoryInfo_descriptor_,
      FriendTerritoryInfo::default_instance_,
      FriendTerritoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendTerritoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendTerritoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendTerritoryInfo));
  ClientNoticeInfo_descriptor_ = file->message_type(118);
  static const int ClientNoticeInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, confid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, playerstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, hasitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, wordsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, sourcetype_),
  };
  ClientNoticeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientNoticeInfo_descriptor_,
      ClientNoticeInfo::default_instance_,
      ClientNoticeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientNoticeInfo));
  DbTreasureInfo_descriptor_ = file->message_type(119);
  static const int DbTreasureInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbTreasureInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbTreasureInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbTreasureInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbTreasureInfo, itemlist_),
  };
  DbTreasureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbTreasureInfo_descriptor_,
      DbTreasureInfo::default_instance_,
      DbTreasureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbTreasureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbTreasureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbTreasureInfo));
  DbDropEle_descriptor_ = file->message_type(120);
  static const int DbDropEle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbDropEle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbDropEle, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbDropEle, val_),
  };
  DbDropEle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbDropEle_descriptor_,
      DbDropEle::default_instance_,
      DbDropEle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbDropEle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbDropEle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbDropEle));
  DbDrop_descriptor_ = file->message_type(121);
  static const int DbDrop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbDrop, one_),
  };
  DbDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbDrop_descriptor_,
      DbDrop::default_instance_,
      DbDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbDrop));
  RobotEffect_descriptor_ = file->message_type(122);
  static const int RobotEffect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotEffect, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotEffect, effect_),
  };
  RobotEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotEffect_descriptor_,
      RobotEffect::default_instance_,
      RobotEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotEffect));
  ClientChargeShopConf_descriptor_ = file->message_type(123);
  static const int ClientChargeShopConf_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, shoptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, platformtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, limitnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, limittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, prizefloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, isdouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, iosgoodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, androidgoodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, goodgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, itemicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, collectionicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, strdescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, monthcardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, extra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, oldprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, monthcardprize_),
  };
  ClientChargeShopConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientChargeShopConf_descriptor_,
      ClientChargeShopConf::default_instance_,
      ClientChargeShopConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientChargeShopConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientChargeShopConf));
  ClientSevenDayRankEle_descriptor_ = file->message_type(124);
  static const int ClientSevenDayRankEle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRankEle, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRankEle, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRankEle, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRankEle, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRankEle, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRankEle, level_),
  };
  ClientSevenDayRankEle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientSevenDayRankEle_descriptor_,
      ClientSevenDayRankEle::default_instance_,
      ClientSevenDayRankEle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRankEle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRankEle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientSevenDayRankEle));
  ClientSevenDayRank_descriptor_ = file->message_type(125);
  static const int ClientSevenDayRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRank, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRank, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRank, item_),
  };
  ClientSevenDayRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientSevenDayRank_descriptor_,
      ClientSevenDayRank::default_instance_,
      ClientSevenDayRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSevenDayRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientSevenDayRank));
  DbNoticeEle_descriptor_ = file->message_type(126);
  static const int DbNoticeEle_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, wordsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, sendnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, content_),
  };
  DbNoticeEle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbNoticeEle_descriptor_,
      DbNoticeEle::default_instance_,
      DbNoticeEle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbNoticeEle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbNoticeEle));
  OptGlobal_descriptor_ = file->message_type(127);
  static const int OptGlobal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptGlobal, notice_),
  };
  OptGlobal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptGlobal_descriptor_,
      OptGlobal::default_instance_,
      OptGlobal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptGlobal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptGlobal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptGlobal));
  ClientContinueCharge_descriptor_ = file->message_type(128);
  static const int ClientContinueCharge_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, skillindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, chargetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, chargevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, chargeprize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, chargeprize2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, chargeprize3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, chargeprize4_),
  };
  ClientContinueCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientContinueCharge_descriptor_,
      ClientContinueCharge::default_instance_,
      ClientContinueCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContinueCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientContinueCharge));
  DbHandBookEle_descriptor_ = file->message_type(129);
  static const int DbHandBookEle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbHandBookEle, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbHandBookEle, val_),
  };
  DbHandBookEle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbHandBookEle_descriptor_,
      DbHandBookEle::default_instance_,
      DbHandBookEle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbHandBookEle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbHandBookEle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbHandBookEle));
  DbHandBook_descriptor_ = file->message_type(130);
  static const int DbHandBook_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbHandBook, one_),
  };
  DbHandBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbHandBook_descriptor_,
      DbHandBook::default_instance_,
      DbHandBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbHandBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbHandBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbHandBook));
  ClientHandBook_descriptor_ = file->message_type(131);
  static const int ClientHandBook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHandBook, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHandBook, val_),
  };
  ClientHandBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientHandBook_descriptor_,
      ClientHandBook::default_instance_,
      ClientHandBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHandBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHandBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientHandBook));
  PlayerTurntableData_descriptor_ = file->message_type(132);
  static const int PlayerTurntableData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, turnnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, mailtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, nationalid_),
  };
  PlayerTurntableData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTurntableData_descriptor_,
      PlayerTurntableData::default_instance_,
      PlayerTurntableData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTurntableData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTurntableData));
  GlobalGoodsConf_descriptor_ = file->message_type(133);
  static const int GlobalGoodsConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalGoodsConf, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalGoodsConf, num_),
  };
  GlobalGoodsConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalGoodsConf_descriptor_,
      GlobalGoodsConf::default_instance_,
      GlobalGoodsConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalGoodsConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalGoodsConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalGoodsConf));
  ServerWarConf_descriptor_ = file->message_type(134);
  static const int ServerWarConf_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_open_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_open_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_close_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_close_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, fight_open_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, fight_open_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, fight_close_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, fight_close_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, country_fight_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, fight_show_topnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, fight_enemy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_rank_country_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, fight_rank_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_win_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_win_scoremin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_win_scoremax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_win_honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_win_honormin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_win_honormax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_lose_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_lose_honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, effect_check_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, effect_skip_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, fight_win_honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, fight_lose_honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_enemy_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, score_open_players_),
  };
  ServerWarConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerWarConf_descriptor_,
      ServerWarConf::default_instance_,
      ServerWarConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerWarConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerWarConf));
  STeamWinProperty_descriptor_ = file->message_type(135);
  static const int STeamWinProperty_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STeamWinProperty, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STeamWinProperty, atkhurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STeamWinProperty, defhurt_),
  };
  STeamWinProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STeamWinProperty_descriptor_,
      STeamWinProperty::default_instance_,
      STeamWinProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STeamWinProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STeamWinProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STeamWinProperty));
  ServerTeamConf_descriptor_ = file->message_type(136);
  static const int ServerTeamConf_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, teamopentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, teamhonordoubletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, teamscoreaddper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, teamscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, teamhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, teamfighteffectper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, teamfightattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, teamfightfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, teamroboteffectper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, property_),
  };
  ServerTeamConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTeamConf_descriptor_,
      ServerTeamConf::default_instance_,
      ServerTeamConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTeamConf));
  ClientServerWarPlayer_descriptor_ = file->message_type(137);
  static const int ClientServerWarPlayer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerWarPlayer, battle_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerWarPlayer, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerWarPlayer, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerWarPlayer, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerWarPlayer, win_),
  };
  ClientServerWarPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientServerWarPlayer_descriptor_,
      ClientServerWarPlayer::default_instance_,
      ClientServerWarPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerWarPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerWarPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientServerWarPlayer));
  TombImp_descriptor_ = file->message_type(138);
  static const int TombImp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TombImp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TombImp, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TombImp, opponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TombImp, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TombImp, rate_),
  };
  TombImp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TombImp_descriptor_,
      TombImp::default_instance_,
      TombImp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TombImp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TombImp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TombImp));
  ServerTeamBattle_descriptor_ = file->message_type(139);
  static const int ServerTeamBattle_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamBattle, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamBattle, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamBattle, forcelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamBattle, refinelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamBattle, nature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamBattle, equipstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamBattle, hp64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamBattle, atk64_),
  };
  ServerTeamBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTeamBattle_descriptor_,
      ServerTeamBattle::default_instance_,
      ServerTeamBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTeamBattle));
  ClientServerTeamPlayer_descriptor_ = file->message_type(140);
  static const int ClientServerTeamPlayer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamPlayer, battle_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamPlayer, isleader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamPlayer, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamPlayer, isready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamPlayer, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamPlayer, battle_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamPlayer, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamPlayer, honor_rank_),
  };
  ClientServerTeamPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientServerTeamPlayer_descriptor_,
      ClientServerTeamPlayer::default_instance_,
      ClientServerTeamPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientServerTeamPlayer));
  ServerTeamPos_descriptor_ = file->message_type(141);
  static const int ServerTeamPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamPos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamPos, charid_),
  };
  ServerTeamPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTeamPos_descriptor_,
      ServerTeamPos::default_instance_,
      ServerTeamPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTeamPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTeamPos));
  ClientServerTeamFightTurn_descriptor_ = file->message_type(142);
  static const int ClientServerTeamFightTurn_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamFightTurn, pos1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamFightTurn, pos2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamFightTurn, hp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamFightTurn, hp2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamFightTurn, dead1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamFightTurn, dead2_),
  };
  ClientServerTeamFightTurn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientServerTeamFightTurn_descriptor_,
      ClientServerTeamFightTurn::default_instance_,
      ClientServerTeamFightTurn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamFightTurn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamFightTurn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientServerTeamFightTurn));
  ClientServerTeamBattleResult_descriptor_ = file->message_type(143);
  static const int ClientServerTeamBattleResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamBattleResult, item1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamBattleResult, item2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamBattleResult, winteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamBattleResult, mvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamBattleResult, turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamBattleResult, myteam_),
  };
  ClientServerTeamBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientServerTeamBattleResult_descriptor_,
      ClientServerTeamBattleResult::default_instance_,
      ClientServerTeamBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientServerTeamBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientServerTeamBattleResult));
  SecretHole_descriptor_ = file->message_type(144);
  static const int SecretHole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretHole, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretHole, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretHole, totalstar_),
  };
  SecretHole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecretHole_descriptor_,
      SecretHole::default_instance_,
      SecretHole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretHole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretHole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecretHole));
  DBSecretHole_descriptor_ = file->message_type(145);
  static const int DBSecretHole_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSecretHole, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSecretHole, floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSecretHole, boxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSecretHole, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSecretHole, hole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSecretHole, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSecretHole, stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSecretHole, floor_stars_),
  };
  DBSecretHole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBSecretHole_descriptor_,
      DBSecretHole::default_instance_,
      DBSecretHole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSecretHole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSecretHole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBSecretHole));
  AuctionInfo_descriptor_ = file->message_type(146);
  static const int AuctionInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, servername_),
  };
  AuctionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionInfo_descriptor_,
      AuctionInfo::default_instance_,
      AuctionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionInfo));
  AuctionConfig_descriptor_ = file->message_type(147);
  static const int AuctionConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionConfig, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionConfig, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionConfig, sourcenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionConfig, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionConfig, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionConfig, buynum_),
  };
  AuctionConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionConfig_descriptor_,
      AuctionConfig::default_instance_,
      AuctionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionConfig));
  AuctionRecords_descriptor_ = file->message_type(148);
  static const int AuctionRecords_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, sourcenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, num_),
  };
  AuctionRecords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRecords_descriptor_,
      AuctionRecords::default_instance_,
      AuctionRecords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRecords));
  AuctionRoleInfo_descriptor_ = file->message_type(149);
  static const int AuctionRoleInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRoleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRoleInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRoleInfo, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRoleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRoleInfo, num_),
  };
  AuctionRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRoleInfo_descriptor_,
      AuctionRoleInfo::default_instance_,
      AuctionRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRoleInfo));
  AuctionRoleMap_descriptor_ = file->message_type(150);
  static const int AuctionRoleMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRoleMap, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRoleMap, info_),
  };
  AuctionRoleMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRoleMap_descriptor_,
      AuctionRoleMap::default_instance_,
      AuctionRoleMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRoleMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRoleMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRoleMap));
  AuctionSerialize_descriptor_ = file->message_type(151);
  static const int AuctionSerialize_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionSerialize, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionSerialize, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionSerialize, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionSerialize, conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionSerialize, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionSerialize, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionSerialize, inf_),
  };
  AuctionSerialize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionSerialize_descriptor_,
      AuctionSerialize::default_instance_,
      AuctionSerialize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionSerialize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionSerialize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionSerialize));
  ReturnTask_descriptor_ = file->message_type(152);
  static const int ReturnTask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTask, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTask, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTask, step64_),
  };
  ReturnTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnTask_descriptor_,
      ReturnTask::default_instance_,
      ReturnTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnTask));
  DBReturnTask_descriptor_ = file->message_type(153);
  static const int DBReturnTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReturnTask, task_),
  };
  DBReturnTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBReturnTask_descriptor_,
      DBReturnTask::default_instance_,
      DBReturnTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReturnTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReturnTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBReturnTask));
  RefineEquipImp_descriptor_ = file->message_type(154);
  static const int RefineEquipImp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineEquipImp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineEquipImp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineEquipImp, num_),
  };
  RefineEquipImp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefineEquipImp_descriptor_,
      RefineEquipImp::default_instance_,
      RefineEquipImp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineEquipImp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineEquipImp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefineEquipImp));
  PlayerRankData_descriptor_ = file->message_type(155);
  static const int PlayerRankData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankData, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankData, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankData, rank_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankData, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankData, value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankData, battle_player_),
  };
  PlayerRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRankData_descriptor_,
      PlayerRankData::default_instance_,
      PlayerRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRankData));
  ServerCompareInfo_descriptor_ = file->message_type(156);
  static const int ServerCompareInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCompareInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCompareInfo, first_rank_charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCompareInfo, first_rank_charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCompareInfo, my_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCompareInfo, get_reward_indexs_),
  };
  ServerCompareInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerCompareInfo_descriptor_,
      ServerCompareInfo::default_instance_,
      ServerCompareInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCompareInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCompareInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerCompareInfo));
  ServerCompareGot_descriptor_ = file->message_type(157);
  static const int ServerCompareGot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCompareGot, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCompareGot, index_),
  };
  ServerCompareGot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerCompareGot_descriptor_,
      ServerCompareGot::default_instance_,
      ServerCompareGot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCompareGot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCompareGot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerCompareGot));
  CenterRankInfo_descriptor_ = file->message_type(158);
  static const int CenterRankInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRankInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRankInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRankInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRankInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRankInfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRankInfo, nationalid_),
  };
  CenterRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterRankInfo_descriptor_,
      CenterRankInfo::default_instance_,
      CenterRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterRankInfo));
  SeedInfo_descriptor_ = file->message_type(159);
  static const int SeedInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInfo, seedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInfo, planttime_),
  };
  SeedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeedInfo_descriptor_,
      SeedInfo::default_instance_,
      SeedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeedInfo));
  GroundInfo_descriptor_ = file->message_type(160);
  static const int GroundInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundInfo, groundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundInfo, isreclaimed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundInfo, seed_),
  };
  GroundInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroundInfo_descriptor_,
      GroundInfo::default_instance_,
      GroundInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroundInfo));
  FarmNoticeInfo_descriptor_ = file->message_type(161);
  static const int FarmNoticeInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmNoticeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmNoticeInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmNoticeInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmNoticeInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmNoticeInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmNoticeInfo, status_),
  };
  FarmNoticeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FarmNoticeInfo_descriptor_,
      FarmNoticeInfo::default_instance_,
      FarmNoticeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmNoticeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmNoticeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FarmNoticeInfo));
  FarmWell_descriptor_ = file->message_type(162);
  static const int FarmWell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmWell, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmWell, water_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmWell, exp_),
  };
  FarmWell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FarmWell_descriptor_,
      FarmWell::default_instance_,
      FarmWell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmWell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmWell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FarmWell));
  FarmInfo_descriptor_ = file->message_type(163);
  static const int FarmInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmInfo, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmInfo, well_),
  };
  FarmInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FarmInfo_descriptor_,
      FarmInfo::default_instance_,
      FarmInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FarmInfo));
  MonthCardPrize_descriptor_ = file->message_type(164);
  static const int MonthCardPrize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardPrize, wordsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardPrize, value_),
  };
  MonthCardPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonthCardPrize_descriptor_,
      MonthCardPrize::default_instance_,
      MonthCardPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonthCardPrize));
  FarmDB_descriptor_ = file->message_type(165);
  static const int FarmDB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmDB, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmDB, well_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmDB, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmDB, signature_),
  };
  FarmDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FarmDB_descriptor_,
      FarmDB::default_instance_,
      FarmDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FarmDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FarmDB));
  SeedBag_descriptor_ = file->message_type(166);
  static const int SeedBag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedBag, seeds_),
  };
  SeedBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeedBag_descriptor_,
      SeedBag::default_instance_,
      SeedBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeedBag));
  PacketDef_descriptor_ = file->enum_type(0);
  ChatType_descriptor_ = file->enum_type(1);
  eItemUseRestrict_descriptor_ = file->enum_type(2);
  RetrieveActivity_descriptor_ = file->enum_type(3);
  eRefershType_descriptor_ = file->enum_type(4);
  SourceType_descriptor_ = file->enum_type(5);
  CoinType_descriptor_ = file->enum_type(6);
  ShopType_descriptor_ = file->enum_type(7);
  emLobby2ClientErr_descriptor_ = file->enum_type(8);
  EActTargetTimesType_descriptor_ = file->enum_type(9);
  ERankType_descriptor_ = file->enum_type(10);
  eActionType_descriptor_ = file->enum_type(11);
  eGuildJob_descriptor_ = file->enum_type(12);
  RaidTeamOpt_descriptor_ = file->enum_type(13);
  RaidTeamNtf_descriptor_ = file->enum_type(14);
  RaidTeamStatus_descriptor_ = file->enum_type(15);
  eGuildMemberType_descriptor_ = file->enum_type(16);
  eGuildStateType_descriptor_ = file->enum_type(17);
  ePrizeGet_descriptor_ = file->enum_type(18);
  GuildTerritoryEventType_descriptor_ = file->enum_type(19);
  PlayerTerritoryEventType_descriptor_ = file->enum_type(20);
  eItemType_descriptor_ = file->enum_type(21);
  eUseItem_descriptor_ = file->enum_type(22);
  EReason_descriptor_ = file->enum_type(23);
  eNoticeType_descriptor_ = file->enum_type(24);
  eGameModuleType_descriptor_ = file->enum_type(25);
  eDropType_descriptor_ = file->enum_type(26);
  EServerWarStatus_descriptor_ = file->enum_type(27);
  ECountryType_descriptor_ = file->enum_type(28);
  ETombEventType_descriptor_ = file->enum_type(29);
  EServerTeamOpType_descriptor_ = file->enum_type(30);
  ELanguage_descriptor_ = file->enum_type(31);
  EReturnType_descriptor_ = file->enum_type(32);
  EReturnPrivilegeType_descriptor_ = file->enum_type(33);
  EServerRankType_descriptor_ = file->enum_type(34);
  EModuleOldFlag_descriptor_ = file->enum_type(35);
  EPrivilegeCard_descriptor_ = file->enum_type(36);
  EPrivilege_descriptor_ = file->enum_type(37);
  ServerCompareType_descriptor_ = file->enum_type(38);
  ECenterRankType_descriptor_ = file->enum_type(39);
  FarmNoticeType_descriptor_ = file->enum_type(40);
  FarmNoticeStatus_descriptor_ = file->enum_type(41);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PacketDef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotFinQuest_descriptor_, &NotFinQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbQuest_descriptor_, &DbQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoinInfo_descriptor_, &CoinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeedSource_descriptor_, &SeedSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBGodEquip_descriptor_, &DBGodEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbBagInfo_descriptor_, &DbBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBEvaluation_descriptor_, &DBEvaluation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBEvaluationList_descriptor_, &DBEvaluationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBChapterRewardList_descriptor_, &DBChapterRewardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBHeroEquip_descriptor_, &DBHeroEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBEquipNew_descriptor_, &DBEquipNew::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBEquipNewList_descriptor_, &DBEquipNewList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBHeroInfo_descriptor_, &DBHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBHeroList_descriptor_, &DBHeroList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBEssenceItem_descriptor_, &DBEssenceItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBEssenceList_descriptor_, &DBEssenceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemUseRestrict_descriptor_, &ItemUseRestrict::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBShopGoods_descriptor_, &DBShopGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBGoodsList_descriptor_, &DBGoodsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBShopList_descriptor_, &DBShopList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBShopRefresh_descriptor_, &DBShopRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBShopRefreshList_descriptor_, &DBShopRefreshList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBFestivityInfo_descriptor_, &DBFestivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBFestivityList_descriptor_, &DBFestivityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientSource_descriptor_, &ClientSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBMailInfo_descriptor_, &DBMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBArenaHero_descriptor_, &DBArenaHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBArenaPlayer_descriptor_, &DBArenaPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBArenaRank_descriptor_, &DBArenaRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBArenaLog_descriptor_, &DBArenaLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBArenaLogList_descriptor_, &DBArenaLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBFriendInfo_descriptor_, &DBFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBFriendList_descriptor_, &DBFriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopInfo_descriptor_, &ShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsData_descriptor_, &GoodsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsDataList_descriptor_, &GoodsDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientQuest_descriptor_, &ClientQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEvaluation_descriptor_, &TEvaluation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroEquipInfo_descriptor_, &HeroEquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroEquipNew_descriptor_, &HeroEquipNew::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Property_descriptor_, &Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WakeAttr_descriptor_, &WakeAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Diagram_descriptor_, &Diagram::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiagramChapter_descriptor_, &DiagramChapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiagramChapterMap_descriptor_, &DiagramChapterMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiagramMap_descriptor_, &DiagramMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GhostDetail_descriptor_, &GhostDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ghost_descriptor_, &Ghost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GhostList_descriptor_, &GhostList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EpicBoss_descriptor_, &EpicBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EpicBossList_descriptor_, &EpicBossList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineRewards_descriptor_, &OnlineRewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeState_descriptor_, &TreeState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetrieveState_descriptor_, &RetrieveState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassWordState_descriptor_, &PassWordState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientHeroInfo_descriptor_, &ClientHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientInstanceEvaluation_descriptor_, &ClientInstanceEvaluation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientFestivityInfo_descriptor_, &ClientFestivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherUserInfo_descriptor_, &OtherUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherUserInfoClient_descriptor_, &OtherUserInfoClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBPlayerActivity_descriptor_, &DBPlayerActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBPlayerActivityList_descriptor_, &DBPlayerActivityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChapterMapBox_descriptor_, &ChapterMapBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBChapterBox_descriptor_, &DBChapterBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBChapterBoxList_descriptor_, &DBChapterBoxList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientFriendInfo_descriptor_, &ClientFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientBattleHero_descriptor_, &ClientBattleHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildSkill_descriptor_, &GuildSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientBattlePlayer_descriptor_, &ClientBattlePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRaidTeamHeroInfo_descriptor_, &ClientRaidTeamHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRaidTeamInfo_descriptor_, &ClientRaidTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TodayTime_descriptor_, &TodayTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SourceList_descriptor_, &SourceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMonthCard_descriptor_, &ClientMonthCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientItemLimit_descriptor_, &ClientItemLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LString_descriptor_, &LString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntList_descriptor_, &IntList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientActivity_descriptor_, &ClientActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HalfBuyElement_descriptor_, &HalfBuyElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HalfBuy_descriptor_, &HalfBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchieveElement_descriptor_, &AchieveElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achieve_descriptor_, &Achieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRank_descriptor_, &ClientRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRankList_descriptor_, &ClientRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientHeroRank_descriptor_, &ClientHeroRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientAchieve_descriptor_, &ClientAchieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionRecord_descriptor_, &ActionRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInfo_descriptor_, &GuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGuildInfo_descriptor_, &ClientGuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGuildMember_descriptor_, &ClientGuildMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGuildRitual_descriptor_, &ClientGuildRitual::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGuildTechnology_descriptor_, &ClientGuildTechnology::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGuildState_descriptor_, &ClientGuildState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGuildWarMsg_descriptor_, &ClientGuildWarMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGuildWarEndMsg_descriptor_, &ClientGuildWarEndMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonthCardEle_descriptor_, &MonthCardEle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbMonthCard_descriptor_, &DbMonthCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrizeInfo_descriptor_, &PrizeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrizeInfoList_descriptor_, &PrizeInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMapInfo_descriptor_, &GuildMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMapMonster_descriptor_, &GuildMapMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMapItem_descriptor_, &GuildMapItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMapReward_descriptor_, &GuildMapReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBGuildMap_descriptor_, &DBGuildMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildNewMapInfo_descriptor_, &GuildNewMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildChapterMap_descriptor_, &GuildChapterMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildChapterInfo_descriptor_, &GuildChapterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildTerritoryEvent_descriptor_, &GuildTerritoryEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildTerritoryEventUpdate_descriptor_, &GuildTerritoryEventUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildTerritoryChapter_descriptor_, &GuildTerritoryChapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildTerritoryInfo_descriptor_, &GuildTerritoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberTerritoryInfo_descriptor_, &GuildMemberTerritoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTerritoryEvent_descriptor_, &PlayerTerritoryEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTerritoryChapter_descriptor_, &PlayerTerritoryChapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TerritorySkill_descriptor_, &TerritorySkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTerritoryInfo_descriptor_, &PlayerTerritoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendTerritoryInfo_descriptor_, &FriendTerritoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientNoticeInfo_descriptor_, &ClientNoticeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbTreasureInfo_descriptor_, &DbTreasureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbDropEle_descriptor_, &DbDropEle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbDrop_descriptor_, &DbDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotEffect_descriptor_, &RobotEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientChargeShopConf_descriptor_, &ClientChargeShopConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientSevenDayRankEle_descriptor_, &ClientSevenDayRankEle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientSevenDayRank_descriptor_, &ClientSevenDayRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbNoticeEle_descriptor_, &DbNoticeEle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptGlobal_descriptor_, &OptGlobal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientContinueCharge_descriptor_, &ClientContinueCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbHandBookEle_descriptor_, &DbHandBookEle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbHandBook_descriptor_, &DbHandBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientHandBook_descriptor_, &ClientHandBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTurntableData_descriptor_, &PlayerTurntableData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalGoodsConf_descriptor_, &GlobalGoodsConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerWarConf_descriptor_, &ServerWarConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STeamWinProperty_descriptor_, &STeamWinProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTeamConf_descriptor_, &ServerTeamConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientServerWarPlayer_descriptor_, &ClientServerWarPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TombImp_descriptor_, &TombImp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTeamBattle_descriptor_, &ServerTeamBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientServerTeamPlayer_descriptor_, &ClientServerTeamPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTeamPos_descriptor_, &ServerTeamPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientServerTeamFightTurn_descriptor_, &ClientServerTeamFightTurn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientServerTeamBattleResult_descriptor_, &ClientServerTeamBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecretHole_descriptor_, &SecretHole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBSecretHole_descriptor_, &DBSecretHole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionInfo_descriptor_, &AuctionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionConfig_descriptor_, &AuctionConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRecords_descriptor_, &AuctionRecords::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRoleInfo_descriptor_, &AuctionRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRoleMap_descriptor_, &AuctionRoleMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionSerialize_descriptor_, &AuctionSerialize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnTask_descriptor_, &ReturnTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBReturnTask_descriptor_, &DBReturnTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefineEquipImp_descriptor_, &RefineEquipImp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRankData_descriptor_, &PlayerRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerCompareInfo_descriptor_, &ServerCompareInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerCompareGot_descriptor_, &ServerCompareGot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterRankInfo_descriptor_, &CenterRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeedInfo_descriptor_, &SeedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroundInfo_descriptor_, &GroundInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FarmNoticeInfo_descriptor_, &FarmNoticeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FarmWell_descriptor_, &FarmWell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FarmInfo_descriptor_, &FarmInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonthCardPrize_descriptor_, &MonthCardPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FarmDB_descriptor_, &FarmDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeedBag_descriptor_, &SeedBag::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PacketDef_2eproto() {
  delete NotFinQuest::default_instance_;
  delete NotFinQuest_reflection_;
  delete DbQuest::default_instance_;
  delete DbQuest_reflection_;
  delete CoinInfo::default_instance_;
  delete CoinInfo_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete SeedSource::default_instance_;
  delete SeedSource_reflection_;
  delete DBGodEquip::default_instance_;
  delete DBGodEquip_reflection_;
  delete DbBagInfo::default_instance_;
  delete DbBagInfo_reflection_;
  delete DBEvaluation::default_instance_;
  delete DBEvaluation_reflection_;
  delete DBEvaluationList::default_instance_;
  delete DBEvaluationList_reflection_;
  delete DBChapterRewardList::default_instance_;
  delete DBChapterRewardList_reflection_;
  delete DBHeroEquip::default_instance_;
  delete DBHeroEquip_reflection_;
  delete DBEquipNew::default_instance_;
  delete DBEquipNew_reflection_;
  delete DBEquipNewList::default_instance_;
  delete DBEquipNewList_reflection_;
  delete DBHeroInfo::default_instance_;
  delete DBHeroInfo_reflection_;
  delete DBHeroList::default_instance_;
  delete DBHeroList_reflection_;
  delete DBEssenceItem::default_instance_;
  delete DBEssenceItem_reflection_;
  delete DBEssenceList::default_instance_;
  delete DBEssenceList_reflection_;
  delete ItemUseRestrict::default_instance_;
  delete ItemUseRestrict_reflection_;
  delete DBShopGoods::default_instance_;
  delete DBShopGoods_reflection_;
  delete DBGoodsList::default_instance_;
  delete DBGoodsList_reflection_;
  delete DBShopList::default_instance_;
  delete DBShopList_reflection_;
  delete DBShopRefresh::default_instance_;
  delete DBShopRefresh_reflection_;
  delete DBShopRefreshList::default_instance_;
  delete DBShopRefreshList_reflection_;
  delete DBFestivityInfo::default_instance_;
  delete DBFestivityInfo_reflection_;
  delete DBFestivityList::default_instance_;
  delete DBFestivityList_reflection_;
  delete ClientSource::default_instance_;
  delete ClientSource_reflection_;
  delete DBMailInfo::default_instance_;
  delete DBMailInfo_reflection_;
  delete DBArenaHero::default_instance_;
  delete DBArenaHero_reflection_;
  delete DBArenaPlayer::default_instance_;
  delete DBArenaPlayer_reflection_;
  delete DBArenaRank::default_instance_;
  delete DBArenaRank_reflection_;
  delete DBArenaLog::default_instance_;
  delete DBArenaLog_reflection_;
  delete DBArenaLogList::default_instance_;
  delete DBArenaLogList_reflection_;
  delete DBFriendInfo::default_instance_;
  delete DBFriendInfo_reflection_;
  delete DBFriendList::default_instance_;
  delete DBFriendList_reflection_;
  delete ShopInfo::default_instance_;
  delete ShopInfo_reflection_;
  delete GoodsData::default_instance_;
  delete GoodsData_reflection_;
  delete GoodsDataList::default_instance_;
  delete GoodsDataList_reflection_;
  delete ClientQuest::default_instance_;
  delete ClientQuest_reflection_;
  delete TEvaluation::default_instance_;
  delete TEvaluation_reflection_;
  delete HeroEquipInfo::default_instance_;
  delete HeroEquipInfo_reflection_;
  delete HeroEquipNew::default_instance_;
  delete HeroEquipNew_reflection_;
  delete Property::default_instance_;
  delete Property_reflection_;
  delete WakeAttr::default_instance_;
  delete WakeAttr_reflection_;
  delete Diagram::default_instance_;
  delete Diagram_reflection_;
  delete DiagramChapter::default_instance_;
  delete DiagramChapter_reflection_;
  delete DiagramChapterMap::default_instance_;
  delete DiagramChapterMap_reflection_;
  delete DiagramMap::default_instance_;
  delete DiagramMap_reflection_;
  delete GhostDetail::default_instance_;
  delete GhostDetail_reflection_;
  delete Ghost::default_instance_;
  delete Ghost_reflection_;
  delete GhostList::default_instance_;
  delete GhostList_reflection_;
  delete EpicBoss::default_instance_;
  delete EpicBoss_reflection_;
  delete EpicBossList::default_instance_;
  delete EpicBossList_reflection_;
  delete OnlineRewards::default_instance_;
  delete OnlineRewards_reflection_;
  delete TreeState::default_instance_;
  delete TreeState_reflection_;
  delete RetrieveState::default_instance_;
  delete RetrieveState_reflection_;
  delete PassWordState::default_instance_;
  delete PassWordState_reflection_;
  delete ClientHeroInfo::default_instance_;
  delete ClientHeroInfo_reflection_;
  delete ClientInstanceEvaluation::default_instance_;
  delete ClientInstanceEvaluation_reflection_;
  delete ClientFestivityInfo::default_instance_;
  delete ClientFestivityInfo_reflection_;
  delete OtherUserInfo::default_instance_;
  delete OtherUserInfo_reflection_;
  delete OtherUserInfoClient::default_instance_;
  delete OtherUserInfoClient_reflection_;
  delete DBPlayerActivity::default_instance_;
  delete DBPlayerActivity_reflection_;
  delete DBPlayerActivityList::default_instance_;
  delete DBPlayerActivityList_reflection_;
  delete ChapterMapBox::default_instance_;
  delete ChapterMapBox_reflection_;
  delete DBChapterBox::default_instance_;
  delete DBChapterBox_reflection_;
  delete DBChapterBoxList::default_instance_;
  delete DBChapterBoxList_reflection_;
  delete ClientFriendInfo::default_instance_;
  delete ClientFriendInfo_reflection_;
  delete ClientBattleHero::default_instance_;
  delete ClientBattleHero_reflection_;
  delete GuildSkill::default_instance_;
  delete GuildSkill_reflection_;
  delete ClientBattlePlayer::default_instance_;
  delete ClientBattlePlayer_reflection_;
  delete ClientRaidTeamHeroInfo::default_instance_;
  delete ClientRaidTeamHeroInfo_reflection_;
  delete ClientRaidTeamInfo::default_instance_;
  delete ClientRaidTeamInfo_reflection_;
  delete TodayTime::default_instance_;
  delete TodayTime_reflection_;
  delete SourceList::default_instance_;
  delete SourceList_reflection_;
  delete ClientMonthCard::default_instance_;
  delete ClientMonthCard_reflection_;
  delete ClientItemLimit::default_instance_;
  delete ClientItemLimit_reflection_;
  delete LString::default_instance_;
  delete LString_reflection_;
  delete IntList::default_instance_;
  delete IntList_reflection_;
  delete ClientActivity::default_instance_;
  delete ClientActivity_reflection_;
  delete HalfBuyElement::default_instance_;
  delete HalfBuyElement_reflection_;
  delete HalfBuy::default_instance_;
  delete HalfBuy_reflection_;
  delete AchieveElement::default_instance_;
  delete AchieveElement_reflection_;
  delete Achieve::default_instance_;
  delete Achieve_reflection_;
  delete ClientRank::default_instance_;
  delete ClientRank_reflection_;
  delete ClientRankList::default_instance_;
  delete ClientRankList_reflection_;
  delete ClientHeroRank::default_instance_;
  delete ClientHeroRank_reflection_;
  delete ClientAchieve::default_instance_;
  delete ClientAchieve_reflection_;
  delete ActionRecord::default_instance_;
  delete ActionRecord_reflection_;
  delete GuildInfo::default_instance_;
  delete GuildInfo_reflection_;
  delete ClientGuildInfo::default_instance_;
  delete ClientGuildInfo_reflection_;
  delete ClientGuildMember::default_instance_;
  delete ClientGuildMember_reflection_;
  delete ClientGuildRitual::default_instance_;
  delete ClientGuildRitual_reflection_;
  delete ClientGuildTechnology::default_instance_;
  delete ClientGuildTechnology_reflection_;
  delete ClientGuildState::default_instance_;
  delete ClientGuildState_reflection_;
  delete ClientGuildWarMsg::default_instance_;
  delete ClientGuildWarMsg_reflection_;
  delete ClientGuildWarEndMsg::default_instance_;
  delete ClientGuildWarEndMsg_reflection_;
  delete MonthCardEle::default_instance_;
  delete MonthCardEle_reflection_;
  delete DbMonthCard::default_instance_;
  delete DbMonthCard_reflection_;
  delete PrizeInfo::default_instance_;
  delete PrizeInfo_reflection_;
  delete PrizeInfoList::default_instance_;
  delete PrizeInfoList_reflection_;
  delete GuildMapInfo::default_instance_;
  delete GuildMapInfo_reflection_;
  delete GuildMapMonster::default_instance_;
  delete GuildMapMonster_reflection_;
  delete GuildMapItem::default_instance_;
  delete GuildMapItem_reflection_;
  delete GuildMapReward::default_instance_;
  delete GuildMapReward_reflection_;
  delete DBGuildMap::default_instance_;
  delete DBGuildMap_reflection_;
  delete GuildNewMapInfo::default_instance_;
  delete GuildNewMapInfo_reflection_;
  delete GuildChapterMap::default_instance_;
  delete GuildChapterMap_reflection_;
  delete GuildChapterInfo::default_instance_;
  delete GuildChapterInfo_reflection_;
  delete GuildTerritoryEvent::default_instance_;
  delete GuildTerritoryEvent_reflection_;
  delete GuildTerritoryEventUpdate::default_instance_;
  delete GuildTerritoryEventUpdate_reflection_;
  delete GuildTerritoryChapter::default_instance_;
  delete GuildTerritoryChapter_reflection_;
  delete GuildTerritoryInfo::default_instance_;
  delete GuildTerritoryInfo_reflection_;
  delete GuildMemberTerritoryInfo::default_instance_;
  delete GuildMemberTerritoryInfo_reflection_;
  delete PlayerTerritoryEvent::default_instance_;
  delete PlayerTerritoryEvent_reflection_;
  delete PlayerTerritoryChapter::default_instance_;
  delete PlayerTerritoryChapter_reflection_;
  delete TerritorySkill::default_instance_;
  delete TerritorySkill_reflection_;
  delete PlayerTerritoryInfo::default_instance_;
  delete PlayerTerritoryInfo_reflection_;
  delete FriendTerritoryInfo::default_instance_;
  delete FriendTerritoryInfo_reflection_;
  delete ClientNoticeInfo::default_instance_;
  delete ClientNoticeInfo_reflection_;
  delete DbTreasureInfo::default_instance_;
  delete DbTreasureInfo_reflection_;
  delete DbDropEle::default_instance_;
  delete DbDropEle_reflection_;
  delete DbDrop::default_instance_;
  delete DbDrop_reflection_;
  delete RobotEffect::default_instance_;
  delete RobotEffect_reflection_;
  delete ClientChargeShopConf::default_instance_;
  delete ClientChargeShopConf_reflection_;
  delete ClientSevenDayRankEle::default_instance_;
  delete ClientSevenDayRankEle_reflection_;
  delete ClientSevenDayRank::default_instance_;
  delete ClientSevenDayRank_reflection_;
  delete DbNoticeEle::default_instance_;
  delete DbNoticeEle_reflection_;
  delete OptGlobal::default_instance_;
  delete OptGlobal_reflection_;
  delete ClientContinueCharge::default_instance_;
  delete ClientContinueCharge_reflection_;
  delete DbHandBookEle::default_instance_;
  delete DbHandBookEle_reflection_;
  delete DbHandBook::default_instance_;
  delete DbHandBook_reflection_;
  delete ClientHandBook::default_instance_;
  delete ClientHandBook_reflection_;
  delete PlayerTurntableData::default_instance_;
  delete PlayerTurntableData_reflection_;
  delete GlobalGoodsConf::default_instance_;
  delete GlobalGoodsConf_reflection_;
  delete ServerWarConf::default_instance_;
  delete ServerWarConf_reflection_;
  delete STeamWinProperty::default_instance_;
  delete STeamWinProperty_reflection_;
  delete ServerTeamConf::default_instance_;
  delete ServerTeamConf_reflection_;
  delete ClientServerWarPlayer::default_instance_;
  delete ClientServerWarPlayer_reflection_;
  delete TombImp::default_instance_;
  delete TombImp_reflection_;
  delete ServerTeamBattle::default_instance_;
  delete ServerTeamBattle_reflection_;
  delete ClientServerTeamPlayer::default_instance_;
  delete ClientServerTeamPlayer_reflection_;
  delete ServerTeamPos::default_instance_;
  delete ServerTeamPos_reflection_;
  delete ClientServerTeamFightTurn::default_instance_;
  delete ClientServerTeamFightTurn_reflection_;
  delete ClientServerTeamBattleResult::default_instance_;
  delete ClientServerTeamBattleResult_reflection_;
  delete SecretHole::default_instance_;
  delete SecretHole_reflection_;
  delete DBSecretHole::default_instance_;
  delete DBSecretHole_reflection_;
  delete AuctionInfo::default_instance_;
  delete AuctionInfo_reflection_;
  delete AuctionConfig::default_instance_;
  delete AuctionConfig_reflection_;
  delete AuctionRecords::default_instance_;
  delete AuctionRecords_reflection_;
  delete AuctionRoleInfo::default_instance_;
  delete AuctionRoleInfo_reflection_;
  delete AuctionRoleMap::default_instance_;
  delete AuctionRoleMap_reflection_;
  delete AuctionSerialize::default_instance_;
  delete AuctionSerialize_reflection_;
  delete ReturnTask::default_instance_;
  delete ReturnTask_reflection_;
  delete DBReturnTask::default_instance_;
  delete DBReturnTask_reflection_;
  delete RefineEquipImp::default_instance_;
  delete RefineEquipImp_reflection_;
  delete PlayerRankData::default_instance_;
  delete PlayerRankData_reflection_;
  delete ServerCompareInfo::default_instance_;
  delete ServerCompareInfo_reflection_;
  delete ServerCompareGot::default_instance_;
  delete ServerCompareGot_reflection_;
  delete CenterRankInfo::default_instance_;
  delete CenterRankInfo_reflection_;
  delete SeedInfo::default_instance_;
  delete SeedInfo_reflection_;
  delete GroundInfo::default_instance_;
  delete GroundInfo_reflection_;
  delete FarmNoticeInfo::default_instance_;
  delete FarmNoticeInfo_reflection_;
  delete FarmWell::default_instance_;
  delete FarmWell_reflection_;
  delete FarmInfo::default_instance_;
  delete FarmInfo_reflection_;
  delete MonthCardPrize::default_instance_;
  delete MonthCardPrize_reflection_;
  delete FarmDB::default_instance_;
  delete FarmDB_reflection_;
  delete SeedBag::default_instance_;
  delete SeedBag_reflection_;
}

void protobuf_AddDesc_PacketDef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017PacketDef.proto\022\013TgsProtocol\"\215\001\n\013NotFi"
    "nQuest\022\017\n\007questid\030\001 \002(\r\022\020\n\010complete\030\002 \002("
    "\r\022\023\n\013targetValue\030\003 \002(\r\022\014\n\004show\030\004 \001(\r\022\013\n\003"
    "got\030\005 \001(\r\022\024\n\014completeTime\030\006 \001(\r\022\025\n\rtarge"
    "tValue64\030\007 \001(\004\"O\n\007DbQuest\022\024\n\014commitquest"
    "s\030\001 \003(\r\022.\n\014notfinquests\030\002 \003(\0132\030.TgsProto"
    "col.NotFinQuest\"-\n\010CoinInfo\022\020\n\010coinType\030"
    "\001 \002(\r\022\017\n\007coinNum\030\002 \002(\r\"P\n\010ItemInfo\022\022\n\nte"
    "mplateid\030\001 \002(\r\022\020\n\010totalnum\030\002 \002(\r\022\016\n\006valu"
    "e1\030\003 \001(\r\022\016\n\006value2\030\004 \001(\r\".\n\nSeedSource\022\016"
    "\n\006seedId\030\001 \002(\r\022\020\n\010totalnum\030\002 \002(\r\"2\n\nDBGo"
    "dEquip\022\022\n\ntemplateid\030\001 \002(\r\022\020\n\010totalnum\030\002"
    " \002(\r\"0\n\tDbBagInfo\022#\n\004prop\030\001 \003(\0132\025.TgsPro"
    "tocol.ItemInfo\"b\n\014DBEvaluation\022\022\n\ninstan"
    "ceId\030\001 \002(\r\022\022\n\nevaluation\030\002 \002(\r\022\026\n\016challe"
    "ngeTimes\030\003 \002(\r\022\022\n\nresetTimes\030\004 \002(\r\"i\n\020DB"
    "EvaluationList\022-\n\nevaluation\030\001 \003(\0132\031.Tgs"
    "Protocol.DBEvaluation\022\023\n\013share_count\030\002 \001"
    "(\r\022\021\n\tshare_buy\030\003 \001(\r\",\n\023DBChapterReward"
    "List\022\025\n\rchapterReward\030\001 \003(\r\"U\n\013DBHeroEqu"
    "ip\022\022\n\ntemplateId\030\001 \002(\r\022\014\n\004star\030\002 \002(\r\022\017\n\007"
    "attrVal\030\003 \003(\r\022\023\n\013scheduleVal\030\004 \003(\r\"\227\001\n\nD"
    "BEquipNew\022\022\n\ntemplateId\030\001 \002(\r\022\022\n\ninstanc"
    "eId\030\002 \002(\004\022\023\n\013strengLevel\030\003 \002(\r\022\023\n\013refine"
    "Level\030\004 \002(\r\022\021\n\tstarLevel\030\005 \001(\r\022\021\n\tstreng"
    "Exp\030\006 \001(\r\022\021\n\trefineExp\030\007 \001(\r\"\?\n\016DBEquipN"
    "ewList\022-\n\014equipNewList\030\001 \003(\0132\027.TgsProtoc"
    "ol.DBEquipNew\"\377\002\n\nDBHeroInfo\022\022\n\ntemplate"
    "Id\030\001 \002(\r\022\022\n\ninstanceId\030\002 \002(\004\022\r\n\005level\030\003 "
    "\002(\r\022\013\n\003exp\030\004 \002(\r\022\026\n\016evolutionLevel\030\005 \002(\r"
    "\022\022\n\nforceLevel\030\006 \002(\r\022\'\n\005equip\030\007 \003(\0132\030.Tg"
    "sProtocol.DBHeroEquip\022\r\n\005skill\030\010 \003(\r\022\020\n\010"
    "heroName\030\t \001(\014\022\020\n\010equipNew\030\n \003(\004\022\021\n\tfash"
    "ionId\030\013 \001(\r\022\030\n\020deificationlevel\030\014 \001(\r\022\022\n"
    "\nwingslevel\030\r \001(\r\022\021\n\twingsrate\030\016 \001(\r\022*\n\007"
    "sources\030\017 \003(\0132\031.TgsProtocol.ClientSource"
    "\022\021\n\twakeLevel\030\020 \001(\r\022\022\n\nwakeEquips\030\021 \003(\r\""
    "7\n\nDBHeroList\022)\n\010heroList\030\001 \003(\0132\027.TgsPro"
    "tocol.DBHeroInfo\"C\n\rDBEssenceItem\022\022\n\ntem"
    "plateId\030\001 \002(\r\022\021\n\titemValue\030\002 \002(\r\022\013\n\003num\030"
    "\003 \002(\r\"@\n\rDBEssenceList\022/\n\013essenceItem\030\001 "
    "\003(\0132\032.TgsProtocol.DBEssenceItem\"M\n\017ItemU"
    "seRestrict\022+\n\004type\030\001 \002(\0162\035.TgsProtocol.e"
    "ItemUseRestrict\022\r\n\005value\030\002 \002(\r\"\225\001\n\013DBSho"
    "pGoods\022\020\n\010itemType\030\001 \002(\r\022\022\n\ntemplateId\030\002"
    " \002(\r\022\017\n\007SellVal\030\003 \002(\r\022\021\n\tPriceType\030\004 \002(\r"
    "\022\r\n\005PARA1\030\005 \002(\r\022\r\n\005PARA2\030\006 \002(\r\022\r\n\005bSale\030"
    "\007 \002(\010\022\017\n\007goodsid\030\010 \001(\r\"{\n\013DBGoodsList\022\020\n"
    "\010shopType\030\001 \002(\r\022\024\n\014activityTime\030\002 \002(\r\022\027\n"
    "\017lastRefreshTime\030\003 \002(\r\022+\n\tgoodsList\030\004 \003("
    "\0132\030.TgsProtocol.DBShopGoods\"8\n\nDBShopLis"
    "t\022*\n\010shopList\030\001 \003(\0132\030.TgsProtocol.DBGood"
    "sList\"<\n\rDBShopRefresh\022\022\n\nRefreshNum\030\001 \002"
    "(\r\022\027\n\017LastRefreshTime\030\002 \002(\r\"(\n\021DBShopRef"
    "reshList\022\023\n\013RefreshList\030\001 \003(\r\":\n\017DBFesti"
    "vityInfo\022\023\n\013festivityId\030\001 \002(\r\022\022\n\nenterCo"
    "unt\030\002 \002(\r\"F\n\017DBFestivityList\0223\n\rFestivit"
    "yList\030\001 \003(\0132\034.TgsProtocol.DBFestivityInf"
    "o\"G\n\014ClientSource\022\022\n\nsourceType\030\001 \002(\r\022\020\n"
    "\010sourceId\030\002 \002(\r\022\021\n\tsourceNum\030\003 \002(\r\"\212\002\n\nD"
    "BMailInfo\022\022\n\ninstanceId\030\001 \002(\004\022\022\n\ntemplat"
    "eId\030\002 \002(\r\022\020\n\010mailType\030\003 \002(\r\022\022\n\nsubjectSt"
    "r\030\004 \002(\014\022\022\n\ncontextStr\030\005 \002(\014\022\021\n\tsenderStr"
    "\030\006 \002(\014\022\022\n\ncreatetime\030\007 \002(\r\022\r\n\005bRead\030\010 \002("
    "\010\022,\n\taccessory\030\t \003(\0132\031.TgsProtocol.Clien"
    "tSource\022\016\n\006opType\030\n \002(\r\022\020\n\010saveTime\030\013 \002("
    "\r\022\024\n\014contextParam\030\014 \003(\014\"\326\001\n\013DBArenaHero\022"
    "\022\n\ntemplateId\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\026\n\016ev"
    "olutionLevel\030\003 \002(\r\022\022\n\nforceLevel\030\004 \002(\r\022\'"
    "\n\005equip\030\005 \003(\0132\030.TgsProtocol.DBHeroEquip\022"
    "\022\n\nskillLevel\030\006 \003(\r\022\020\n\010heroName\030\007 \001(\014\022)\n"
    "\010newEquip\030\010 \003(\0132\027.TgsProtocol.DBEquipNew"
    "\"\316\001\n\rDBArenaPlayer\022\014\n\004rank\030\001 \002(\r\022\016\n\006char"
    "ID\030\002 \002(\004\022\022\n\nplayerName\030\003 \001(\014\022\023\n\013playerLe"
    "vel\030\004 \002(\r\022\023\n\013playerPhoto\030\005 \002(\r\022\016\n\006vipLvl"
    "\030\006 \002(\r\022\021\n\teffective\030\007 \002(\r\022\020\n\010totalWin\030\010 "
    "\002(\r\022,\n\narHeroList\030\t \003(\0132\030.TgsProtocol.DB"
    "ArenaHero\"B\n\013DBArenaRank\0223\n\017arenaPlayerL"
    "ist\030\001 \003(\0132\032.TgsProtocol.DBArenaPlayer\"\261\001"
    "\n\nDBArenaLog\022\014\n\004type\030\001 \002(\r\022\016\n\006charId\030\002 \002"
    "(\004\022\020\n\010charName\030\003 \002(\014\022\017\n\007charLvl\030\004 \002(\r\022\021\n"
    "\tcharPhoto\030\005 \002(\r\022\017\n\007charVip\030\006 \002(\r\022\014\n\004bWi"
    "n\030\007 \002(\010\022\017\n\007newRank\030\010 \002(\r\022\016\n\006bRobot\030\t \002(\010"
    "\022\017\n\007curTime\030\n \002(\r\";\n\016DBArenaLogList\022)\n\010a"
    "renaLog\030\001 \003(\0132\027.TgsProtocol.DBArenaLog\"\314"
    "\001\n\014DBFriendInfo\022\016\n\006charId\030\001 \002(\004\022\020\n\010charN"
    "ame\030\002 \002(\014\022\r\n\005photo\030\003 \002(\r\022\021\n\tcharLevel\030\004 "
    "\002(\r\022\016\n\006effect\030\005 \002(\r\022\020\n\010vipLevel\030\006 \002(\r\022\021\n"
    "\tguildName\030\007 \002(\014\022\r\n\005bSend\030\010 \002(\010\022\017\n\007recei"
    "ve\030\t \002(\r\022\021\n\tloginTime\030\n \002(\r\022\020\n\010effect64\030"
    "\013 \001(\004\"\231\001\n\014DBFriendList\022-\n\nfriendList\030\001 \003"
    "(\0132\031.TgsProtocol.DBFriendInfo\022,\n\tblackLi"
    "st\030\002 \003(\0132\031.TgsProtocol.DBFriendInfo\022,\n\ta"
    "pplyList\030\003 \003(\0132\031.TgsProtocol.DBFriendInf"
    "o\"\232\002\n\010ShopInfo\022\017\n\007goodsid\030\001 \002(\r\022\020\n\010shopt"
    "ype\030\002 \002(\r\022\017\n\007buytype\030\003 \002(\r\022\024\n\014buycontent"
    "id\030\004 \002(\r\022\020\n\010buycount\030\005 \002(\r\022\020\n\010costtype\030\006"
    " \002(\r\022\025\n\rcostcontentid\030\007 \002(\r\022\021\n\tcostcount"
    "\030\010 \002(\r\022\024\n\014costcountold\030\t \002(\r\022\016\n\006status\030\n"
    " \002(\r\022\024\n\014platformtype\030\013 \002(\r\022\023\n\013limitnumbe"
    "r\030\014 \002(\014\022\021\n\tlimittype\030\r \002(\r\022\022\n\nprizefloat"
    "\030\016 \002(\r\"@\n\tGoodsData\022\017\n\007goodsid\030\001 \002(\r\022\017\n\007"
    "already\030\002 \002(\r\022\021\n\tflushtime\030\003 \002(\r\">\n\rGood"
    "sDataList\022-\n\rgoodsdatalist\030\001 \003(\0132\026.TgsPr"
    "otocol.GoodsData\"z\n\013ClientQuest\022\017\n\007quest"
    "id\030\001 \002(\r\022\020\n\010complete\030\002 \002(\r\022\023\n\013targetValu"
    "e\030\003 \002(\004\022\016\n\006isShow\030\004 \002(\r\022\r\n\005isGet\030\005 \001(\r\022\024"
    "\n\014completeTime\030\006 \001(\r\"5\n\013TEvaluation\022\022\n\ni"
    "nstanceId\030\001 \002(\r\022\022\n\nevaluation\030\002 \002(\r\"W\n\rH"
    "eroEquipInfo\022\022\n\ntemplateId\030\001 \002(\r\022\014\n\004star"
    "\030\002 \002(\r\022\017\n\007attrVal\030\003 \003(\r\022\023\n\013scheduleVal\030\004"
    " \003(\r\"\231\001\n\014HeroEquipNew\022\022\n\ntemplateId\030\001 \002("
    "\r\022\022\n\ninstanceId\030\002 \002(\004\022\023\n\013strengLevel\030\003 \002"
    "(\r\022\023\n\013refineLevel\030\004 \002(\r\022\021\n\tstarLevel\030\005 \001"
    "(\r\022\021\n\tstrengExp\030\006 \001(\r\022\021\n\trefineExp\030\007 \001(\r"
    "\"4\n\010Property\022\r\n\005index\030\001 \002(\r\022\014\n\004base\030\002 \001("
    "\002\022\013\n\003per\030\003 \001(\002\"/\n\010WakeAttr\022#\n\004prop\030\001 \003(\013"
    "2\025.TgsProtocol.Property\"$\n\007Diagram\022\n\n\002id"
    "\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\")\n\016DiagramChapter\022"
    "\n\n\002id\030\001 \002(\r\022\013\n\003num\030\002 \002(\r\"F\n\021DiagramChapt"
    "erMap\022\n\n\002id\030\001 \002(\r\022%\n\007diagram\030\002 \003(\0132\024.Tgs"
    "Protocol.Diagram\"G\n\nDiagramMap\0229\n\021diagra"
    "mChapterMap\030\001 \003(\0132\036.TgsProtocol.DiagramC"
    "hapterMap\"+\n\013GhostDetail\022\n\n\002id\030\001 \002(\r\022\020\n\010"
    "activeId\030\002 \003(\r\"%\n\005Ghost\022\n\n\002id\030\001 \002(\r\022\020\n\010a"
    "ctiveId\030\002 \003(\r\"8\n\tGhostList\022+\n\tghostList\030"
    "\001 \003(\0132\030.TgsProtocol.GhostDetail\";\n\010EpicB"
    "oss\022\021\n\tchapterId\030\001 \002(\r\022\r\n\005mapId\030\002 \002(\r\022\r\n"
    "\005state\030\003 \002(\r\"3\n\014EpicBossList\022#\n\004list\030\001 \003"
    "(\0132\025.TgsProtocol.EpicBoss\"O\n\rOnlineRewar"
    "ds\022\022\n\nonlinetime\030\001 \001(\r\022*\n\007sources\030\002 \003(\0132"
    "\031.TgsProtocol.ClientSource\"W\n\tTreeState\022"
    "\r\n\005level\030\001 \002(\r\022\017\n\007acctime\030\002 \002(\r\022*\n\007sourc"
    "es\030\003 \003(\0132\031.TgsProtocol.ClientSource\"8\n\rR"
    "etrieveState\022\030\n\020retrieveActivity\030\001 \002(\r\022\r"
    "\n\005state\030\002 \002(\r\"*\n\rPassWordState\022\n\n\002id\030\001 \002"
    "(\r\022\r\n\005state\030\002 \002(\r\"\210\004\n\016ClientHeroInfo\022\022\n\n"
    "templateId\030\001 \002(\r\022\022\n\ninstanceId\030\002 \002(\004\022\r\n\005"
    "level\030\003 \002(\r\022\013\n\003exp\030\004 \002(\r\022\026\n\016evolutionLev"
    "el\030\005 \002(\r\022\022\n\nforceLevel\030\006 \002(\r\022)\n\005equip\030\007 "
    "\003(\0132\032.TgsProtocol.HeroEquipInfo\022\022\n\nskill"
    "Level\030\010 \003(\r\022\020\n\010heroName\030\t \001(\014\022\020\n\010equipNe"
    "w\030\n \003(\004\022\021\n\tfashionId\030\013 \001(\r\022\022\n\ncomboSkill"
    "\030\014 \003(\r\022\016\n\006fateId\030\r \003(\r\022/\n\014equipNewList\030\016"
    " \003(\0132\031.TgsProtocol.HeroEquipNew\022\030\n\020deifi"
    "cationlevel\030\017 \001(\r\022\022\n\nwingslevel\030\020 \001(\r\022\021\n"
    "\twingsrate\030\021 \001(\r\022*\n\007sources\030\022 \003(\0132\031.TgsP"
    "rotocol.ClientSource\022\022\n\nwakeEquips\030\023 \003(\r"
    "\022\021\n\twakeLevel\030\024 \001(\r\022\'\n\010property\030\025 \001(\0132\025."
    "TgsProtocol.WakeAttr\"n\n\030ClientInstanceEv"
    "aluation\022\022\n\ninstanceId\030\001 \002(\r\022\022\n\nevaluati"
    "on\030\002 \002(\r\022\026\n\016challengeTimes\030\003 \002(\r\022\022\n\nrese"
    "tTimes\030\004 \002(\r\">\n\023ClientFestivityInfo\022\023\n\013f"
    "estivityId\030\001 \002(\r\022\022\n\nenterCount\030\002 \002(\r\"\207\006\n"
    "\rOtherUserInfo\022\016\n\006charId\030\003 \002(\004\022\020\n\010charNa"
    "me\030\004 \001(\014\022\014\n\004cash\030\005 \001(\r\022\014\n\004gold\030\006 \001(\r\022\r\n\005"
    "level\030\007 \001(\r\022\013\n\003exp\030\010 \001(\r\022\022\n\ncurStamina\030\t"
    " \001(\r\022\022\n\nmaxStamina\030\n \001(\r\022\022\n\ncreateTime\030\013"
    " \001(\r\022\023\n\013offlineTime\030\014 \001(\r\022\031\n\021updateStami"
    "naTime\030\r \001(\r\022\017\n\007bitFlag\030\016 \001(\r\022#\n\005quest\030\017"
    " \001(\0132\024.TgsProtocol.DbQuest\0221\n\nevaluation"
    "\030\020 \001(\0132\035.TgsProtocol.DBEvaluationList\022\016\n"
    "\006vipExp\030\022 \001(\r\022\020\n\010vipLevel\030\023 \001(\r\022\021\n\tforma"
    "tion\030\024 \003(\r\022)\n\010heroList\030\026 \001(\0132\027.TgsProtoc"
    "ol.DBHeroList\022\016\n\006gender\030\027 \001(\r\022\r\n\005photo\030\030"
    " \001(\r\022/\n\013essenceItem\030\031 \001(\0132\032.TgsProtocol."
    "DBEssenceList\022\024\n\014RefreshPrice\030\032 \003(\r\022/\n\tf"
    "estivity\030\033 \001(\0132\034.TgsProtocol.DBFestivity"
    "List\022\027\n\017lockChatEndTime\030\034 \001(\r\022\024\n\014dayChat"
    "Times\030\035 \001(\r\022\022\n\nskillPoint\030\036 \001(\r\022\034\n\024updat"
    "eSkillPointTime\030\037 \001(\r\022\016\n\006energy\030  \001(\r\022\030\n"
    "\020updateEnergyTime\030! \001(\r\022-\n\010equipNew\030\" \001("
    "\0132\033.TgsProtocol.DBEquipNewList\022\026\n\016arenaF"
    "ormation\030# \003(\r\"\327\004\n\023OtherUserInfoClient\022\016"
    "\n\006charId\030\001 \002(\004\022\020\n\010charName\030\002 \002(\014\022\017\n\007char"
    "Exp\030\003 \002(\r\022\021\n\tcharlevel\030\004 \002(\r\022\016\n\006vipExp\030\005"
    " \002(\r\022\020\n\010vipLevel\030\006 \002(\r\022\014\n\004cash\030\007 \002(\r\022\014\n\004"
    "gold\030\010 \002(\r\022\022\n\ncurStamina\030\t \002(\r\022\024\n\014recove"
    "ryTime\030\n \002(\r\022\021\n\tformation\030\013 \003(\r\022,\n\007heroB"
    "ag\030\016 \003(\0132\033.TgsProtocol.ClientHeroInfo\022\016\n"
    "\006gender\030\017 \002(\r\022\r\n\005photo\030\020 \002(\r\022\017\n\007bitFlag\030"
    "\021 \002(\r\022A\n\022instanceEvaluation\030\022 \003(\0132%.TgsP"
    "rotocol.ClientInstanceEvaluation\022\024\n\014Refr"
    "eshPrice\030\023 \003(\r\0227\n\rfestivityInfo\030\024 \003(\0132 ."
    "TgsProtocol.ClientFestivityInfo\022\022\n\nserve"
    "rTime\030\030 \002(\r\022\022\n\nskillPoint\030\031 \002(\r\022\016\n\006energ"
    "y\030\033 \002(\r\022\024\n\014energyReTime\030\034 \002(\r\022.\n\013equipNe"
    "wBag\030\035 \003(\0132\031.TgsProtocol.HeroEquipNew\022\021\n"
    "\theroRaise\030\036 \003(\r\"b\n\020DBPlayerActivity\022\n\n\002"
    "id\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\022\013\n\003got\030\003 \003(\r\022\023\n\013"
    "update_time\030\004 \001(\r\022\021\n\tdoneValue\030\005 \003(\r\"B\n\024"
    "DBPlayerActivityList\022*\n\003act\030\001 \003(\0132\035.TgsP"
    "rotocol.DBPlayerActivity\"-\n\rChapterMapBo"
    "x\022\017\n\007maptype\030\001 \002(\r\022\013\n\003got\030\002 \003(\010\"\214\001\n\014DBCh"
    "apterBox\022\n\n\002id\030\001 \002(\r\022\013\n\003got\030\002 \003(\r\022\021\n\teli"
    "te_got\030\003 \003(\r\022\020\n\010epic_got\030\004 \003(\r\022\022\n\nlegend"
    "_got\030\005 \003(\r\022*\n\006mapbox\030\006 \003(\0132\032.TgsProtocol"
    ".ChapterMapBox\"<\n\020DBChapterBoxList\022(\n\005it"
    "ems\030\001 \003(\0132\031.TgsProtocol.DBChapterBox\"\344\001\n"
    "\020ClientFriendInfo\022\016\n\006charId\030\001 \002(\004\022\020\n\010cha"
    "rName\030\002 \002(\014\022\r\n\005photo\030\003 \002(\r\022\021\n\tcharLevel\030"
    "\004 \002(\r\022\016\n\006effect\030\005 \002(\r\022\020\n\010vipLevel\030\006 \002(\r\022"
    "\021\n\tguildName\030\007 \002(\014\022\r\n\005bSend\030\010 \002(\010\022\017\n\007rec"
    "eive\030\t \002(\r\022\021\n\tloginTime\030\n \002(\r\022\020\n\010effect6"
    "4\030\013 \001(\004\022\022\n\nnationalId\030\014 \001(\r\"\261\003\n\020ClientBa"
    "ttleHero\022\022\n\ntemplateId\030\001 \002(\r\022\r\n\005level\030\002 "
    "\002(\r\022\026\n\016evolutionLevel\030\003 \002(\r\022\022\n\nforceLeve"
    "l\030\004 \002(\r\022)\n\005equip\030\005 \003(\0132\032.TgsProtocol.Her"
    "oEquipInfo\022\022\n\nskillLevel\030\006 \003(\r\022\020\n\010heroNa"
    "me\030\007 \001(\014\022+\n\010equipNew\030\010 \003(\0132\031.TgsProtocol"
    ".HeroEquipNew\022\021\n\tisFashion\030\t \001(\r\022\017\n\007post"
    "ion\030\n \001(\r\022\016\n\006effect\030\013 \002(\r\022\030\n\020deification"
    "level\030\014 \001(\r\022\022\n\nwingslevel\030\r \001(\r\022\014\n\004attr\030"
    "\016 \001(\t\022\021\n\twakeLevel\030\017 \001(\r\022\022\n\nwakeEquips\030\020"
    " \003(\r\022\'\n\010property\030\021 \001(\0132\025.TgsProtocol.Wak"
    "eAttr\022\020\n\010effect64\030\022 \001(\004\"\'\n\nGuildSkill\022\n\n"
    "\002id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\"\333\004\n\022ClientBattl"
    "ePlayer\022\016\n\006charId\030\001 \002(\004\022\020\n\010charName\030\002 \002("
    "\t\022\021\n\tcharLevel\030\003 \002(\r\022\r\n\005photo\030\004 \002(\r\022\016\n\006e"
    "ffect\030\005 \002(\r\022\020\n\010vipLevel\030\006 \002(\r\022\020\n\010positio"
    "n\030\007 \002(\r\022\017\n\007isRobot\030\010 \002(\r\022\021\n\tguild_job\030\t "
    "\001(\r\022\016\n\006online\030\n \001(\010\022+\n\004hero\030\013 \003(\0132\035.TgsP"
    "rotocol.ClientBattleHero\0222\n\013assist_hero\030"
    "\014 \003(\0132\035.TgsProtocol.ClientBattleHero\022,\n\013"
    "guild_skill\030\r \003(\0132\027.TgsProtocol.GuildSki"
    "ll\022\021\n\tserver_id\030\016 \001(\r\022\023\n\013server_name\030\017 \001"
    "(\t\022-\n\010handbook\030\020 \003(\0132\033.TgsProtocol.Clien"
    "tHandBook\022\023\n\013fashionHero\030\021 \003(\r\022\022\n\nguild_"
    "name\030\022 \001(\t\022\020\n\010steamwin\030\023 \001(\r\022\027\n\017secretho"
    "le_buff\030\024 \003(\r\022\017\n\007cheerid\030\025 \001(\r\022\025\n\ractive"
    "TitleId\030\026 \003(\r\022\021\n\tprivilege\030\027 \003(\010\022\020\n\010effe"
    "ct64\030\030 \001(\004\022\022\n\nnationalId\030\031 \001(\r\"\252\001\n\026Clien"
    "tRaidTeamHeroInfo\022\021\n\theroIndex\030\001 \002(\r\022\021\n\t"
    "isFashion\030\002 \002(\r\022\026\n\016evolutionLevel\030\003 \002(\r\022"
    "\022\n\nforceLevel\030\004 \002(\r\022\020\n\010position\030\005 \002(\r\022\030\n"
    "\020deificationlevel\030\006 \001(\r\022\022\n\nwingslevel\030\007 "
    "\001(\r\"\207\002\n\022ClientRaidTeamInfo\022\016\n\006charId\030\001 \002"
    "(\004\022\020\n\010charName\030\002 \002(\014\022\r\n\005photo\030\003 \002(\r\022\021\n\tc"
    "harLevel\030\004 \002(\r\022\016\n\006effect\030\005 \002(\004\022\020\n\010vipLev"
    "el\030\006 \002(\r\022\021\n\tguildName\030\007 \002(\014\022\r\n\005bSend\030\010 \002"
    "(\010\022\017\n\007receive\030\t \002(\r\022\021\n\tloginTime\030\n \002(\r\0221"
    "\n\004hero\030\013 \003(\0132#.TgsProtocol.ClientRaidTea"
    "mHeroInfo\022\022\n\nnationalId\030\014 \001(\r\"/\n\tTodayTi"
    "me\022\021\n\tbeginTime\030\001 \002(\r\022\017\n\007endTime\030\002 \002(\r\"7"
    "\n\nSourceList\022)\n\006source\030\001 \003(\0132\031.TgsProtoc"
    "ol.ClientSource\"D\n\017ClientMonthCard\022\r\n\005in"
    "dex\030\001 \002(\r\022\021\n\tstartTime\030\002 \002(\r\022\017\n\007getTime\030"
    "\003 \002(\r\"9\n\017ClientItemLimit\022\n\n\002id\030\001 \002(\r\022\r\n\005"
    "limit\030\002 \002(\r\022\013\n\003got\030\003 \002(\r\"$\n\007LString\022\013\n\003s"
    "tr\030\001 \002(\t\022\014\n\004type\030\002 \001(\r\"\030\n\007IntList\022\r\n\005val"
    "ue\030\001 \003(\r\"\360\007\n\016ClientActivity\022\n\n\002id\030\001 \002(\r\022"
    "\016\n\006closed\030\002 \001(\r\022\020\n\010opentype\030\003 \001(\r\022\016\n\006act"
    "ype\030\004 \001(\r\022\025\n\rshowBeginTime\030\005 \001(\r\022\023\n\013show"
    "EndTime\030\006 \001(\r\022\021\n\tbeginTime\030\007 \001(\r\022\017\n\007endT"
    "ime\030\010 \001(\r\022\021\n\tplayerLev\030\t \001(\r\022\014\n\004name\030\n \001"
    "(\t\022\014\n\004desc\030\013 \001(\t\022*\n\ntodayTimes\030\014 \003(\0132\026.T"
    "gsProtocol.TodayTime\022\016\n\006values\030\r \003(\r\022(\n\007"
    "rewards\030\016 \003(\0132\027.TgsProtocol.SourceList\022\021"
    "\n\trewardGot\030\017 \003(\r\022\r\n\005value\030\020 \001(\r\022\021\n\tchil"
    "dDesc\030\021 \003(\t\022\023\n\013shareValues\030\022 \003(\r\022(\n\007valu"
    "es2\030\023 \003(\0132\027.TgsProtocol.SourceList\022\020\n\010sh"
    "areTex\030\024 \003(\t\022\014\n\004icon\030\025 \001(\t\022\022\n\nactivetime"
    "\030\026 \001(\r\022\021\n\tcountdown\030\027 \001(\r\022*\n\004card\030\030 \003(\0132"
    "\034.TgsProtocol.ClientMonthCard\022\020\n\010sequenc"
    "e\030\031 \001(\r\0225\n\017globalItemLimit\030\032 \003(\0132\034.TgsPr"
    "otocol.ClientItemLimit\0225\n\017playerItemLimi"
    "t\030\033 \003(\0132\034.TgsProtocol.ClientItemLimit\022\020\n"
    "\010getTimes\030\034 \003(\r\022\023\n\013everyValues\030\035 \003(\r\022\027\n\017"
    "everyDoneValues\030\036 \003(\r\022$\n\006name_l\030\037 \001(\0132\024."
    "TgsProtocol.LString\022$\n\006desc_l\030  \001(\0132\024.Tg"
    "sProtocol.LString\022)\n\013childDesc_l\030! \003(\0132\024"
    ".TgsProtocol.LString\022\021\n\tintNumber\030\" \003(\r\022"
    "+\n\rintNumberList\030# \003(\0132\024.TgsProtocol.Int"
    "List\022\016\n\006mailid\030$ \003(\r\022*\n\014child2Desc_l\030% \003"
    "(\0132\024.TgsProtocol.LString\022\021\n\ticonIndex\030& "
    "\001(\r\022\016\n\006expand\030\' \001(\r\"/\n\016HalfBuyElement\022\r\n"
    "\005index\030\001 \002(\r\022\016\n\006number\030\002 \002(\r\":\n\007HalfBuy\022"
    "/\n\nhalfBuyEle\030\001 \003(\0132\033.TgsProtocol.HalfBu"
    "yElement\"9\n\016AchieveElement\022\n\n\002id\030\001 \002(\r\022\016"
    "\n\006charid\030\002 \001(\004\022\013\n\003got\030\003 \001(\r\"8\n\007Achieve\022-"
    "\n\010achieves\030\001 \003(\0132\033.TgsProtocol.AchieveEl"
    "ement\"\235\002\n\nClientRank\022$\n\004type\030\001 \002(\0162\026.Tgs"
    "Protocol.ERankType\022\014\n\004rank\030\002 \002(\r\022\016\n\006char"
    "id\030\003 \002(\004\022\021\n\tplayerLev\030\004 \002(\r\022\016\n\006vipLev\030\005 "
    "\002(\r\022\022\n\nplayerName\030\006 \002(\t\022\023\n\013playerGuild\030\007"
    " \001(\t\022\r\n\005value\030\010 \002(\004\022\022\n\ntemplateId\030\t \001(\r\022"
    "\022\n\ninstanceId\030\n \001(\004\022\025\n\rinstanceValue\030\013 \001"
    "(\r\022\016\n\006effect\030\014 \002(\004\022\r\n\005photo\030\r \002(\r\022\022\n\nnat"
    "ionalId\030\016 \001(\r\"\223\001\n\016ClientRankList\022$\n\004type"
    "\030\001 \002(\0162\026.TgsProtocol.ERankType\022&\n\005items\030"
    "\002 \003(\0132\027.TgsProtocol.ClientRank\022\016\n\006myrank"
    "\030\003 \002(\r\022\022\n\ntemplateId\030\004 \001(\r\022\017\n\007myvalue\030\005 "
    "\001(\004\"\341\001\n\016ClientHeroRank\022\014\n\004rank\030\001 \002(\r\022\017\n\007"
    "hero_id\030\002 \002(\r\022\016\n\006charid\030\003 \002(\004\022\014\n\004name\030\004 "
    "\002(\t\022\r\n\005guild\030\005 \001(\t\022\r\n\005photo\030\006 \002(\r\022\023\n\013pla"
    "yerlevel\030\007 \002(\r\022\r\n\005level\030\010 \002(\r\022\022\n\nforceLe"
    "vel\030\t \002(\r\022\030\n\020deificationlevel\030\n \002(\r\022\022\n\nw"
    "ingslevel\030\013 \002(\r\022\016\n\006effect\030\014 \002(\004\"~\n\rClien"
    "tAchieve\022\n\n\002id\030\001 \002(\r\022\016\n\006charid\030\002 \001(\004\022\r\n\005"
    "photo\030\003 \001(\r\022\021\n\tplayerLev\030\004 \001(\r\022\016\n\006vipLev"
    "\030\005 \001(\r\022\022\n\nplayerName\030\006 \001(\t\022\013\n\003got\030\007 \001(\r\""
    "H\n\014ActionRecord\022&\n\004type\030\001 \002(\0162\030.TgsProto"
    "col.eActionType\022\020\n\005value\030\002 \002(\r:\0010\"\334\002\n\tGu"
    "ildInfo\022\n\n\002id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\013\n\003ex"
    "p\030\003 \002(\r\022\017\n\007creater\030\004 \002(\004\022\016\n\006leader\030\005 \002(\004"
    "\022\022\n\ncreatetime\030\006 \002(\r\022\r\n\005photo\030\007 \002(\r\022\014\n\004n"
    "ame\030\010 \002(\t\022\016\n\006notice\030\t \002(\t\022\021\n\tmanifesto\030\n"
    " \002(\t\022\016\n\006ritual\030\013 \002(\r\022\030\n\020technology_level"
    "\030\014 \002(\r\022\026\n\016technology_exp\030\r \002(\r\022\026\n\016unlock"
    "ed_skill\030\016 \003(\r\022\026\n\016guildwar_enemy\030\017 \001(\t\022\032"
    "\n\022guildwar_enemy_exp\030\020 \001(\r\022\022\n\ncity_level"
    "\030\021 \001(\r\022\020\n\010city_exp\030\022 \001(\r\"\221\001\n\017ClientGuild"
    "Info\022$\n\004info\030\001 \002(\0132\026.TgsProtocol.GuildIn"
    "fo\022\021\n\tmembernum\030\002 \001(\r\022\021\n\tmembermax\030\003 \001(\r"
    "\022\017\n\007isapply\030\004 \001(\r\022\022\n\nleadername\030\005 \001(\t\022\r\n"
    "\005myjob\030\006 \001(\r\"\202\002\n\021ClientGuildMember\022\016\n\006ch"
    "arid\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\r\n\005photo\030\003 \002(\r\022"
    "\r\n\005level\030\004 \002(\r\022\013\n\003vip\030\005 \002(\r\022\016\n\006effect\030\006 "
    "\002(\004\022\016\n\006online\030\007 \001(\r\022\021\n\tarenarank\030\010 \001(\r\022\013"
    "\n\003job\030\t \001(\r\022\016\n\006devote\030\n \001(\r\022\023\n\013dailyDevo"
    "te\030\013 \001(\r\022+\n\004type\030\014 \001(\0162\035.TgsProtocol.eGu"
    "ildMemberType\022\022\n\nnationalId\030\r \001(\r\"\214\001\n\021Cl"
    "ientGuildRitual\022\014\n\004rate\030\001 \002(\r\022\016\n\006ritual\030"
    "\002 \001(\r\022\014\n\004days\030\003 \001(\r\022\021\n\trewardgot\030\004 \001(\r\022\022"
    "\n\nratereward\030\005 \001(\r\022\022\n\nguildlevel\030\006 \001(\r\022\020"
    "\n\010guildexp\030\007 \001(\r\"a\n\025ClientGuildTechnolog"
    "y\022\030\n\020technology_level\030\001 \002(\r\022\026\n\016technolog"
    "y_exp\030\002 \002(\r\022\026\n\016unlocked_skill\030\003 \003(\r\"w\n\020C"
    "lientGuildState\022\013\n\003job\030\001 \002(\r\022\014\n\004name\030\002 \002"
    "(\t\022*\n\004type\030\003 \002(\0162\034.TgsProtocol.eGuildSta"
    "teType\022\r\n\005value\030\004 \002(\r\022\r\n\005name2\030\005 \001(\t\"\203\002\n"
    "\021ClientGuildWarMsg\022\021\n\tis_attack\030\001 \002(\010\022\027\n"
    "\017is_attacker_win\030\002 \002(\010\022\025\n\rattacker_name\030"
    "\003 \002(\t\022\025\n\rattacker_star\030\004 \002(\r\022\025\n\rdefender"
    "_name\030\005 \002(\t\022\025\n\rdefender_star\030\006 \002(\r\022\030\n\020en"
    "emy_guild_name\030\007 \002(\t\022\013\n\003exp\030\010 \002(\r\022\026\n\016att"
    "acker_total\030\t \001(\r\022\024\n\014attacker_win\030\n \001(\r\022"
    "\021\n\ttotal_exp\030\013 \001(\r\"z\n\024ClientGuildWarEndM"
    "sg\022\021\n\tis_attack\030\001 \002(\010\022\030\n\020enemy_guild_nam"
    "e\030\002 \002(\t\022\013\n\003exp\030\003 \002(\r\022\024\n\014attack_total\030\004 \002"
    "(\r\022\022\n\nattack_win\030\005 \002(\r\"O\n\014MonthCardEle\022\r"
    "\n\005index\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022\021\n\tstartTim"
    "e\030\003 \002(\r\022\016\n\006repeat\030\004 \002(\r\"6\n\013DbMonthCard\022\'"
    "\n\004card\030\001 \003(\0132\031.TgsProtocol.MonthCardEle\""
    "D\n\tPrizeInfo\022\014\n\004type\030\001 \002(\005\022\013\n\003got\030\002 \002(\005\022"
    "\r\n\005value\030\003 \002(\005\022\r\n\005reset\030\004 \001(\r\"5\n\rPrizeIn"
    "foList\022$\n\004item\030\001 \003(\0132\026.TgsProtocol.Prize"
    "Info\"z\n\014GuildMapInfo\022\030\n\020passed_chapterid"
    "\030\001 \002(\r\022\030\n\020select_chapterid\030\002 \002(\r\022\016\n\006map_"
    "id\030\003 \001(\r\022\023\n\013is_map_pass\030\004 \001(\010\022\021\n\tpass_ti"
    "me\030\005 \001(\r\"E\n\017GuildMapMonster\022\022\n\nmonster_i"
    "d\030\001 \002(\r\022\016\n\006hp_per\030\002 \002(\r\022\016\n\006hp_max\030\003 \001(\r\""
    "f\n\014GuildMapItem\022)\n\006source\030\001 \001(\0132\031.TgsPro"
    "tocol.ClientSource\022\016\n\006charid\030\002 \001(\004\022\014\n\004na"
    "me\030\003 \001(\t\022\r\n\005photo\030\004 \001(\r\"I\n\016GuildMapRewar"
    "d\022\016\n\006map_id\030\001 \002(\r\022\'\n\004item\030\002 \003(\0132\031.TgsPro"
    "tocol.GuildMapItem\"\215\001\n\nDBGuildMap\022\'\n\004inf"
    "o\030\001 \001(\0132\031.TgsProtocol.GuildMapInfo\022-\n\007mo"
    "nster\030\002 \003(\0132\034.TgsProtocol.GuildMapMonste"
    "r\022\'\n\004item\030\003 \003(\0132\031.TgsProtocol.GuildMapIt"
    "em\"\237\001\n\017GuildNewMapInfo\022\016\n\006map_id\030\001 \002(\r\022\021"
    "\n\tpass_time\030\002 \001(\r\022-\n\007monster\030\003 \003(\0132\034.Tgs"
    "Protocol.GuildMapMonster\022\'\n\004item\030\004 \003(\0132\031"
    ".TgsProtocol.GuildMapItem\022\021\n\tpass_name\030\005"
    " \001(\t\"\203\001\n\017GuildChapterMap\022\022\n\nchapter_id\030\001"
    " \002(\r\022.\n\010map_item\030\002 \003(\0132\034.TgsProtocol.Gui"
    "ldNewMapInfo\022\025\n\rattack_player\030\003 \003(\004\022\025\n\rs"
    "elf_attacked\030\004 \001(\010\"\220\001\n\020GuildChapterInfo\022"
    "\030\n\020passed_chapterid\030\001 \002(\r\022\024\n\014chapter_bac"
    "k\030\002 \001(\010\0222\n\014chapter_item\030\003 \003(\0132\034.TgsProto"
    "col.GuildChapterMap\022\030\n\020attack_chapterid\030"
    "\004 \001(\r\"\261\001\n\023GuildTerritoryEvent\022\n\n\002id\030\001 \002("
    "\r\0222\n\004type\030\002 \002(\0162$.TgsProtocol.GuildTerri"
    "toryEventType\022*\n\007sources\030\003 \003(\0132\031.TgsProt"
    "ocol.ClientSource\022\027\n\017suppress_charid\030\004 \001"
    "(\004\022\025\n\rsuppress_name\030\005 \001(\t\"j\n\031GuildTerrit"
    "oryEventUpdate\022\n\n\002id\030\001 \002(\r\0222\n\004type\030\002 \002(\016"
    "2$.TgsProtocol.GuildTerritoryEventType\022\r"
    "\n\005index\030\003 \002(\r\"\302\001\n\025GuildTerritoryChapter\022"
    "\022\n\nchapter_id\030\001 \002(\r\022\017\n\007hero_id\030\002 \002(\r\022\022\n\n"
    "begin_time\030\003 \002(\r\022/\n\005event\030\004 \003(\0132 .TgsPro"
    "tocol.GuildTerritoryEvent\022*\n\007sources\030\005 \003"
    "(\0132\031.TgsProtocol.ClientSource\022\023\n\013source_"
    "rate\030\006 \002(\r\"`\n\022GuildTerritoryInfo\022\030\n\020pass"
    "ed_chapterid\030\001 \002(\r\0220\n\004item\030\002 \003(\0132\".TgsPr"
    "otocol.GuildTerritoryChapter\"\212\001\n\030GuildMe"
    "mberTerritoryInfo\022\016\n\006charid\030\001 \002(\004\022\r\n\005pho"
    "to\030\002 \002(\r\022\r\n\005level\030\003 \002(\r\022\014\n\004name\030\004 \002(\t\022\026\n"
    "\016territoryCount\030\005 \002(\r\022\032\n\022territoryRiotCo"
    "unt\030\006 \002(\r\"\317\002\n\024PlayerTerritoryEvent\022\n\n\002id"
    "\030\001 \002(\r\0223\n\004type\030\002 \002(\0162%.TgsProtocol.Playe"
    "rTerritoryEventType\022*\n\007sources\030\003 \003(\0132\031.T"
    "gsProtocol.ClientSource\022\027\n\017suppress_char"
    "id\030\004 \001(\004\022\025\n\rsuppress_name\030\005 \001(\t\022\022\n\nbegin"
    "_time\030\006 \001(\r\022\014\n\004rate\030\007 \001(\r\0223\n\020suppress_so"
    "urces\030\010 \003(\0132\031.TgsProtocol.ClientSource\022\024"
    "\n\014patrol_words\030\t \001(\r\022\026\n\016suppress_words\030\n"
    " \001(\r\022\025\n\rsuppress_time\030\013 \001(\r\"\357\001\n\026PlayerTe"
    "rritoryChapter\022\022\n\nchapter_id\030\001 \002(\r\022\017\n\007he"
    "ro_id\030\002 \002(\r\022\022\n\nbegin_time\030\003 \002(\r\022\020\n\010end_t"
    "ime\030\004 \002(\r\022\023\n\013patrol_type\030\005 \002(\r\0220\n\005event\030"
    "\006 \003(\0132!.TgsProtocol.PlayerTerritoryEvent"
    "\022*\n\007sources\030\007 \003(\0132\031.TgsProtocol.ClientSo"
    "urce\022\027\n\017next_event_time\030\010 \002(\r\"+\n\016Territo"
    "rySkill\022\n\n\002id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\"\216\001\n\023P"
    "layerTerritoryInfo\022\030\n\020passed_chapterid\030\001"
    " \002(\r\0221\n\004item\030\002 \003(\0132#.TgsProtocol.PlayerT"
    "erritoryChapter\022*\n\005skill\030\003 \003(\0132\033.TgsProt"
    "ocol.TerritorySkill\"\275\001\n\023FriendTerritoryI"
    "nfo\022\016\n\006charid\030\001 \002(\004\022\r\n\005photo\030\002 \002(\r\022\r\n\005le"
    "vel\030\003 \002(\r\022\014\n\004name\030\004 \002(\t\022\026\n\016territoryCoun"
    "t\030\005 \002(\r\022\032\n\022territoryRiotCount\030\006 \002(\r\022\023\n\013p"
    "atrolCount\030\007 \001(\r\022\014\n\004star\030\010 \001(\r\022\023\n\013offlin"
    "eTime\030\t \001(\r\"\235\002\n\020ClientNoticeInfo\022\n\n\002id\030\001"
    " \002(\r\022\016\n\006confid\030\002 \002(\r\022&\n\004type\030\003 \002(\0162\030.Tgs"
    "Protocol.eNoticeType\022\022\n\ntemplateid\030\004 \002(\r"
    "\022\r\n\005value\030\005 \001(\r\022\022\n\nplayername\030\006 \001(\t\022\022\n\np"
    "layerstar\030\007 \001(\r\022\017\n\007hasitem\030\010 \002(\010\022\017\n\007word"
    "sid\030\t \002(\r\022\016\n\006reason\030\n \001(\r\022\016\n\006charid\030\013 \001("
    "\r\022\013\n\003str\030\014 \003(\t\022+\n\nsourcetype\030\r \002(\0162\027.Tgs"
    "Protocol.SourceType\"U\n\016DbTreasureInfo\022\016\n"
    "\006charid\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\022\n\nplayerna"
    "me\030\003 \002(\t\022\020\n\010itemlist\030\004 \003(\r\"3\n\tDbDropEle\022"
    "\014\n\004type\030\001 \002(\r\022\013\n\003key\030\002 \002(\r\022\013\n\003val\030\003 \002(\r\""
    "-\n\006DbDrop\022#\n\003one\030\001 \003(\0132\026.TgsProtocol.DbD"
    "ropEle\")\n\013RobotEffect\022\n\n\002id\030\001 \002(\r\022\016\n\006eff"
    "ect\030\002 \002(\004\"\327\004\n\024ClientChargeShopConf\022\017\n\007go"
    "odsid\030\001 \002(\r\022\020\n\010shopType\030\002 \002(\r\022&\n\003buy\030\003 \003"
    "(\0132\031.TgsProtocol.ClientSource\022\'\n\004cost\030\004 "
    "\002(\0132\031.TgsProtocol.ClientSource\022\016\n\006status"
    "\030\005 \002(\r\022\024\n\014platformtype\030\006 \002(\r\022\023\n\013limitNum"
    "ber\030\007 \002(\014\022\021\n\tlimitType\030\010 \002(\r\022\022\n\nprizeFlo"
    "at\030\t \002(\r\022\020\n\010isDouble\030\n \002(\r\022\021\n\tIOSGoodId\030"
    "\013 \002(\014\022\025\n\rAndroidGoodId\030\014 \002(\014\022\020\n\010currency"
    "\030\r \002(\014\022\020\n\010goodGift\030\016 \002(\r\022\020\n\010itemIcon\030\017 \002"
    "(\014\022\026\n\016collectionIcon\030\020 \002(\014\022\017\n\007strName\030\021 "
    "\002(\014\022\026\n\016strDescription\030\022 \002(\014\022\021\n\tstartTime"
    "\030\023 \002(\r\022\017\n\007endTime\030\024 \002(\r\022\025\n\rmonthCardType"
    "\030\025 \001(\r\022(\n\005extra\030\026 \003(\0132\031.TgsProtocol.Clie"
    "ntSource\022+\n\010oldPrice\030\027 \001(\0132\031.TgsProtocol"
    ".ClientSource\022\014\n\004rate\030\030 \001(\r\022\026\n\016monthCard"
    "Prize\030\031 \001(\r\"p\n\025ClientSevenDayRankEle\022\014\n\004"
    "rank\030\001 \002(\r\022\016\n\006charid\030\002 \002(\004\022\014\n\004name\030\003 \002(\t"
    "\022\r\n\005value\030\004 \002(\r\022\r\n\005photo\030\005 \002(\r\022\r\n\005level\030"
    "\006 \002(\r\"d\n\022ClientSevenDayRank\022\013\n\003day\030\001 \002(\r"
    "\022\017\n\007seconds\030\002 \002(\r\0220\n\004item\030\003 \003(\0132\".TgsPro"
    "tocol.ClientSevenDayRankEle\"\222\002\n\013DbNotice"
    "Ele\022\n\n\002id\030\001 \002(\r\022&\n\004type\030\002 \002(\0162\030.TgsProto"
    "col.eNoticeType\022\016\n\006values\030\003 \002(\r\022\017\n\007words"
    "id\030\004 \002(\r\022\013\n\003pro\030\005 \002(\r\022)\n\006reward\030\006 \003(\0132\031."
    "TgsProtocol.ClientSource\022\016\n\006number\030\007 \002(\r"
    "\022\017\n\007timeout\030\010 \002(\r\022\016\n\006reason\030\t \002(\r\022\014\n\004rat"
    "e\030\n \002(\r\022\022\n\nsendNumber\030\013 \002(\r\022\022\n\ncreateTim"
    "e\030\014 \002(\r\022\017\n\007content\030\r \002(\t\"5\n\tOptGlobal\022(\n"
    "\006notice\030\001 \003(\0132\030.TgsProtocol.DbNoticeEle\""
    "\305\002\n\024ClientContinueCharge\022\r\n\005index\030\001 \002(\r\022"
    "\n\n\002cd\030\002 \002(\r\022\014\n\004name\030\003 \002(\t\022\014\n\004line\030\004 \003(\r\022"
    "\022\n\nskillIndex\030\005 \003(\r\022\022\n\nchargeType\030\006 \002(\r\022"
    "\023\n\013chargeValue\030\007 \003(\r\022,\n\013chargePrize\030\010 \003("
    "\0132\027.TgsProtocol.SourceList\022-\n\014chargePriz"
    "e2\030\t \003(\0132\027.TgsProtocol.SourceList\022-\n\014cha"
    "rgePrize3\030\n \003(\0132\027.TgsProtocol.SourceList"
    "\022-\n\014chargePrize4\030\013 \003(\0132\027.TgsProtocol.Sou"
    "rceList\")\n\rDbHandBookEle\022\013\n\003key\030\001 \002(\r\022\013\n"
    "\003val\030\002 \002(\r\"5\n\nDbHandBook\022\'\n\003one\030\001 \003(\0132\032."
    "TgsProtocol.DbHandBookEle\"*\n\016ClientHandB"
    "ook\022\013\n\003key\030\001 \002(\r\022\013\n\003val\030\002 \002(\r\"\275\001\n\023Player"
    "TurntableData\022\021\n\tserver_id\030\001 \001(\r\022\023\n\013serv"
    "er_name\030\002 \001(\t\022\016\n\006charid\030\003 \002(\004\022\r\n\005photo\030\004"
    " \002(\r\022\014\n\004name\030\005 \002(\t\022\r\n\005actid\030\006 \002(\r\022\017\n\007tur"
    "nnum\030\007 \002(\r\022\020\n\010mailtime\030\010 \001(\r\022\013\n\003uid\030\t \002("
    "\004\022\022\n\nnationalId\030\n \001(\r\"/\n\017GlobalGoodsConf"
    "\022\017\n\007goodsid\030\001 \002(\r\022\013\n\003num\030\002 \002(\r\"\322\005\n\rServe"
    "rWarConf\022\026\n\016score_open_day\030\001 \001(\r\022\027\n\017scor"
    "e_open_hour\030\002 \001(\r\022\027\n\017score_close_day\030\003 \001"
    "(\r\022\030\n\020score_close_hour\030\004 \001(\r\022\026\n\016fight_op"
    "en_day\030\005 \001(\r\022\027\n\017fight_open_hour\030\006 \001(\r\022\027\n"
    "\017fight_close_day\030\007 \001(\r\022\030\n\020fight_close_ho"
    "ur\030\010 \001(\r\022\031\n\021country_fight_num\030\t \001(\r\022\031\n\021f"
    "ight_show_topnum\030\n \001(\r\022\027\n\017fight_enemy_nu"
    "m\030\013 \001(\r\022\036\n\026score_rank_country_num\030\014 \001(\r\022"
    "\026\n\016fight_rank_num\030\r \001(\r\022\027\n\017score_win_sco"
    "re\030\016 \001(\r\022\032\n\022score_win_scoremin\030\017 \001(\r\022\032\n\022"
    "score_win_scoremax\030\020 \001(\r\022\027\n\017score_win_ho"
    "nor\030\021 \001(\r\022\032\n\022score_win_honormin\030\022 \001(\r\022\032\n"
    "\022score_win_honormax\030\023 \001(\r\022\030\n\020score_lose_"
    "score\030\024 \001(\r\022\030\n\020score_lose_honor\030\025 \001(\r\022\030\n"
    "\020effect_check_per\030\026 \001(\002\022\027\n\017effect_skip_p"
    "er\030\027 \001(\r\022\027\n\017fight_win_honor\030\030 \001(\r\022\030\n\020fig"
    "ht_lose_honor\030\031 \001(\r\022\032\n\022score_enemy_effec"
    "t\030\032 \003(\004\022\032\n\022score_open_players\030\033 \001(\r\"C\n\020S"
    "TeamWinProperty\022\r\n\005times\030\001 \002(\r\022\017\n\007atkHur"
    "t\030\002 \001(\r\022\017\n\007defHurt\030\003 \001(\r\"\313\002\n\016ServerTeamC"
    "onf\022,\n\014TeamOpenTime\030\001 \001(\0132\026.TgsProtocol."
    "TodayTime\0223\n\023TeamHonorDoubleTime\030\002 \003(\0132\026"
    ".TgsProtocol.TodayTime\022\027\n\017TeamScoreAddPe"
    "r\030\003 \003(\r\022\021\n\tTeamScore\030\004 \003(\r\022\021\n\tTeamHonor\030"
    "\005 \003(\r\022\032\n\022TeamFightEffectPer\030\006 \003(\r\022\025\n\rTea"
    "mFightAttr\030\007 \003(\r\022\027\n\017TeamFightFactor\030\010 \003("
    "\r\022\032\n\022TeamRobotEffectPer\030\t \003(\r\022/\n\010propert"
    "y\030\n \003(\0132\035.TgsProtocol.STeamWinProperty\"\212"
    "\001\n\025ClientServerWarPlayer\0226\n\rbattle_playe"
    "r\030\001 \002(\0132\037.TgsProtocol.ClientBattlePlayer"
    "\022\017\n\007country\030\002 \001(\r\022\014\n\004rank\030\003 \001(\r\022\r\n\005score"
    "\030\004 \001(\r\022\013\n\003win\030\005 \001(\010\"s\n\007TombImp\022\n\n\002id\030\001 \002"
    "(\r\022\r\n\005event\030\002 \001(\r\0221\n\010opponent\030\003 \001(\0132\037.Tg"
    "sProtocol.ClientBattlePlayer\022\014\n\004step\030\004 \001"
    "(\r\022\014\n\004rate\030\005 \001(\r\"\224\001\n\020ServerTeamBattle\022\n\n"
    "\002hp\030\001 \002(\r\022\013\n\003atk\030\002 \002(\r\022\022\n\nforceLevel\030\003 \002"
    "(\r\022\023\n\013refineLevel\030\004 \002(\r\022\016\n\006nature\030\005 \002(\r\022"
    "\021\n\tequipStar\030\006 \002(\r\022\014\n\004hp64\030\007 \001(\004\022\r\n\005atk6"
    "4\030\010 \001(\004\"\350\001\n\026ClientServerTeamPlayer\0226\n\rba"
    "ttle_player\030\001 \002(\0132\037.TgsProtocol.ClientBa"
    "ttlePlayer\022\020\n\010isleader\030\002 \001(\010\022\013\n\003pos\030\003 \001("
    "\r\022\017\n\007isready\030\004 \001(\010\022\017\n\007isrobot\030\005 \001(\010\0222\n\013b"
    "attle_attr\030\006 \001(\0132\035.TgsProtocol.ServerTea"
    "mBattle\022\r\n\005honor\030\007 \001(\r\022\022\n\nhonor_rank\030\010 \001"
    "(\r\",\n\rServerTeamPos\022\013\n\003pos\030\001 \002(\r\022\016\n\006char"
    "id\030\002 \002(\004\"o\n\031ClientServerTeamFightTurn\022\014\n"
    "\004pos1\030\001 \002(\r\022\014\n\004pos2\030\002 \002(\r\022\013\n\003hp1\030\003 \002(\004\022\013"
    "\n\003hp2\030\004 \002(\004\022\r\n\005dead1\030\005 \001(\010\022\r\n\005dead2\030\006 \001("
    "\010\"\352\001\n\034ClientServerTeamBattleResult\0222\n\005it"
    "em1\030\001 \003(\0132#.TgsProtocol.ClientServerTeam"
    "Player\0222\n\005item2\030\002 \003(\0132#.TgsProtocol.Clie"
    "ntServerTeamPlayer\022\017\n\007winteam\030\003 \002(\r\022\013\n\003m"
    "vp\030\004 \003(\004\0224\n\004turn\030\005 \003(\0132&.TgsProtocol.Cli"
    "entServerTeamFightTurn\022\016\n\006myteam\030\006 \002(\r\"9"
    "\n\nSecretHole\022\n\n\002id\030\001 \002(\r\022\014\n\004star\030\002 \003(\r\022\021"
    "\n\ttotalstar\030\003 \001(\r\"\245\001\n\014DBSecretHole\022\n\n\002id"
    "\030\001 \002(\r\022\r\n\005floor\030\002 \002(\r\022\020\n\010boxtimes\030\003 \002(\r\022"
    "\014\n\004buff\030\004 \003(\r\022%\n\004hole\030\005 \003(\0132\027.TgsProtoco"
    "l.SecretHole\022\017\n\007goodsid\030\006 \002(\r\022\r\n\005stars\030\007"
    " \002(\r\022\023\n\013floor_stars\030\010 \001(\r\"\210\001\n\013AuctionInf"
    "o\022\r\n\005photo\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\013\n\003num\030\003 "
    "\002(\r\022)\n\006source\030\004 \002(\0132\031.TgsProtocol.Client"
    "Source\022\020\n\010serverid\030\005 \002(\r\022\022\n\nservername\030\006"
    " \002(\t\"\203\001\n\rAuctionConfig\022\n\n\002id\030\001 \002(\r\022\022\n\nso"
    "urceType\030\002 \002(\r\022\020\n\010sourceId\030\003 \002(\r\022\021\n\tsour"
    "ceNum\030\004 \002(\r\022\016\n\006maxNum\030\005 \002(\r\022\r\n\005limit\030\006 \002"
    "(\r\022\016\n\006buyNum\030\007 \002(\r\"\265\001\n\016AuctionRecords\022\n\n"
    "\002id\030\001 \002(\r\022\022\n\nsourceType\030\002 \002(\r\022\020\n\010sourceI"
    "d\030\003 \002(\r\022\021\n\tsourceNum\030\004 \002(\r\022\016\n\006charid\030\005 \002"
    "(\r\022\r\n\005photo\030\006 \002(\r\022\014\n\004name\030\007 \002(\t\022\020\n\010serve"
    "rid\030\010 \002(\r\022\022\n\nservername\030\t \002(\t\022\013\n\003num\030\n \002"
    "(\r\"]\n\017AuctionRoleInfo\022\016\n\006charid\030\001 \002(\r\022\020\n"
    "\010serverid\030\002 \002(\r\022\r\n\005photo\030\003 \002(\r\022\014\n\004name\030\004"
    " \002(\t\022\013\n\003num\030\005 \002(\r\"K\n\016AuctionRoleMap\022\r\n\005i"
    "ndex\030\001 \002(\r\022*\n\004info\030\002 \003(\0132\034.TgsProtocol.A"
    "uctionRoleInfo\"\360\001\n\020AuctionSerialize\022\016\n\006s"
    "tatus\030\001 \002(\r\022\022\n\nactivityid\030\002 \002(\r\022\017\n\007endTi"
    "me\030\003 \002(\r\022(\n\004conf\030\004 \003(\0132\032.TgsProtocol.Auc"
    "tionConfig\022(\n\003cur\030\005 \003(\0132\033.TgsProtocol.Au"
    "ctionRecords\022)\n\004last\030\006 \003(\0132\033.TgsProtocol"
    ".AuctionRecords\022(\n\003inf\030\007 \003(\0132\033.TgsProtoc"
    "ol.AuctionRoleMap\"F\n\nReturnTask\022\n\n\002id\030\001 "
    "\002(\r\022\016\n\006status\030\002 \002(\r\022\014\n\004step\030\003 \002(\r\022\016\n\006ste"
    "p64\030\004 \001(\004\"5\n\014DBReturnTask\022%\n\004task\030\001 \003(\0132"
    "\027.TgsProtocol.ReturnTask\"7\n\016RefineEquipI"
    "mp\022\014\n\004type\030\001 \002(\r\022\n\n\002id\030\002 \002(\004\022\013\n\003num\030\003 \002("
    "\r\"\320\001\n\016PlayerRankData\022\021\n\tserver_id\030\001 \001(\r\022"
    "\014\n\004type\030\002 \002(\r\022\016\n\006charid\030\003 \002(\004\022\023\n\013server_"
    "name\030\004 \001(\t\022\022\n\nrank_value\030\005 \002(\004\022\016\n\006value1"
    "\030\006 \001(\004\022\016\n\006value2\030\007 \001(\004\022\014\n\004rank\030\010 \001(\r\0226\n\r"
    "battle_player\030\t \001(\0132\037.TgsProtocol.Client"
    "BattlePlayer\"\203\001\n\021ServerCompareInfo\022\n\n\002id"
    "\030\001 \002(\r\022\031\n\021first_rank_charid\030\002 \002(\004\022\033\n\023fir"
    "st_rank_charname\030\003 \002(\t\022\017\n\007my_rank\030\004 \002(\r\022"
    "\031\n\021get_reward_indexs\030\005 \003(\r\".\n\020ServerComp"
    "areGot\022\013\n\003day\030\001 \002(\r\022\r\n\005index\030\002 \003(\r\"\243\001\n\016C"
    "enterRankInfo\022*\n\004type\030\001 \002(\0162\034.TgsProtoco"
    "l.ECenterRankType\022\016\n\006charid\030\002 \002(\004\022\r\n\005val"
    "ue\030\003 \002(\004\022\020\n\010charname\030\004 \002(\t\022\022\n\nservername"
    "\030\005 \002(\t\022\014\n\004rank\030\006 \002(\r\022\022\n\nnationalId\030\007 \001(\r"
    "\"-\n\010SeedInfo\022\016\n\006seedId\030\001 \002(\r\022\021\n\tplantTim"
    "e\030\002 \002(\r\"X\n\nGroundInfo\022\020\n\010GroundId\030\001 \002(\r\022"
    "\023\n\013isReclaimed\030\002 \002(\010\022#\n\004seed\030\003 \001(\0132\025.Tgs"
    "Protocol.SeedInfo\"\246\001\n\016FarmNoticeInfo\022\n\n\002"
    "id\030\001 \002(\004\022\014\n\004time\030\002 \002(\r\022\016\n\006charId\030\003 \002(\004\022\020"
    "\n\010charname\030\004 \002(\t\022)\n\004type\030\005 \002(\0162\033.TgsProt"
    "ocol.FarmNoticeType\022-\n\006status\030\006 \002(\0162\035.Tg"
    "sProtocol.FarmNoticeStatus\"5\n\010FarmWell\022\r"
    "\n\005level\030\001 \002(\r\022\r\n\005water\030\002 \002(\r\022\013\n\003exp\030\003 \002("
    "\r\"{\n\010FarmInfo\022\016\n\006charid\030\001 \002(\004\022\020\n\010charnam"
    "e\030\002 \002(\t\022(\n\007grounds\030\003 \003(\0132\027.TgsProtocol.G"
    "roundInfo\022#\n\004well\030\004 \002(\0132\025.TgsProtocol.Fa"
    "rmWell\"0\n\016MonthCardPrize\022\017\n\007wordsid\030\001 \002("
    "\r\022\r\n\005value\030\002 \002(\r\"\227\001\n\006FarmDB\022(\n\007grounds\030\001"
    " \003(\0132\027.TgsProtocol.GroundInfo\022#\n\004well\030\002 "
    "\001(\0132\025.TgsProtocol.FarmWell\022+\n\006notice\030\003 \003"
    "(\0132\033.TgsProtocol.FarmNoticeInfo\022\021\n\tsigna"
    "ture\030\004 \001(\t\"1\n\007SeedBag\022&\n\005seeds\030\001 \003(\0132\027.T"
    "gsProtocol.SeedSource*\321\336\001\n\tPacketDef\022\032\n\024"
    "CLIENT2DIR_LOGIN_REQ\020\207\255K\022\033\n\024DIR2CLIENT_L"
    "OGIN_RET\020\261\227\323\003\022\034\n\026CLIENT2LOBBY_LOGIN_REQ\020"
    "\240\215\006\022\"\n\034CLIENT2LOBBY_LOGIN_TOKEN_REQ\020\241\215\006\022"
    "\"\n\034CLIENT2LOBBY_CREATE_CHAR_REQ\020\242\215\006\022\'\n!C"
    "LIENT2LOBBY_CHANGEFO_RMATION_REQ\020\245\215\006\022!\n\033"
    "CLIENT2LOBBY_CHANGENAME_REQ\020\246\215\006\022!\n\033CLIEN"
    "T2LOBBY_BUY_COPPER_REQ\020\247\215\006\022\"\n\034CLIENT2LOB"
    "BY_CHANGEPHOTO_REQ\020\250\215\006\022\037\n\031CLIENT2LOBBY_S"
    "YN_ITEM_REQ\020\251\215\006\022 \n\032CLIENT2LOBBY_SALE_ITE"
    "M_REQ\020\252\215\006\022\027\n\021CLIENT2LOBBY_TICK\020\253\215\006\022\035\n\027CL"
    "IENT2LOBBY_SIGNIN_REQ\020\255\215\006\022+\n%CLIENT2LOBB"
    "Y_GET_VIPSIGNIN_REWARD_REQ\020\256\215\006\022!\n\033CLIENT"
    "2LOBBY_AUTH_TOEKN_REQ\020\257\215\006\022%\n\037CLIENT2LOBB"
    "Y_CHANGEFO_RAISE_REQ\020\260\215\006\022\037\n\031CLIENT2LOBBY"
    "_PROGRESS_REQ\020\261\215\006\022\"\n\034CLIENT2LOBBY_AUTH_T"
    "OEKN2_REQ\020\262\215\006\022\035\n\027CLIENT2LOBBY_RESOLVEREQ"
    "\020\263\215\006\022\"\n\034CLIENT2LOBBY_RESOLVELOOK_REQ\020\264\215\006"
    "\022\"\n\034CLIENT2LOBBY_MONTHSIGNIN_REQ\020\267\215\006\022\"\n\034"
    "LOBBY2CLIENT_MONTHSIGNIN_RET\020\270\215\006\022!\n\033CLIE"
    "NT2LOBBY_AUTH_QUEUE_REQ\020\271\215\006\022!\n\033LOBBY2CLI"
    "ENT_AUTH_QUEUE_RET\020\272\215\006\022 \n\032CLIENT2LOBBY_C"
    "HAT_INFO_NTF\020\204\216\006\022$\n\036CLIENT2LOBBY_GETCHAT"
    "RECORD_REQ\020\265\215\006\022\'\n!CLIENT2LOBBY_HERO_DEIF"
    "ICATION_REQ\020\266\215\006\022!\n\033CLIENT2LOBBY_HERO_FOR"
    "CE_REQ\020\205\216\006\022%\n\037CLIENT2LOBBY_HERO_EVOLUTIO"
    "N_REQ\020\206\216\006\022\"\n\034CLIENT2LOBBY_EQUIP_FORCE_RE"
    "Q\020\207\216\006\022 \n\032CLIENT2LOBBY_SACRIFICE_REQ\020\210\216\006\022"
    "\037\n\031CLIENT2LOBBY_SALEHERO_REQ\020\211\216\006\022\037\n\031CLIE"
    "NT2LOBBY_OPEN_BOX_REQ\020\212\216\006\022\'\n!CLIENT2LOBB"
    "Y_HEROSKILLUPGRADE_REQ\020\213\216\006\022%\n\037CLIENT2LOB"
    "BY_GETOPENBOXINFO_REQ\020\214\216\006\022 \n\032CLIENT2LOBB"
    "Y_SKILLINFO_REQ\020\215\216\006\022%\n\037CLIENT2LOBBY_BUY_"
    "SKILLPOINT_REQ\020\216\216\006\022\"\n\034CLIENT2LOBBY_USE_E"
    "XPITEM_REQ\020\217\216\006\022!\n\033CLIENT2LOBBY_HERO_AWAK"
    "E_REQ\020\220\216\006\022\"\n\034CLIENT2LOBBY_HEROUPWINGS_RE"
    "Q\020\221\216\006\022\"\n\034LOBBY2CLIENT_HEROUPWINGS_RET\020\222\216"
    "\006\022\'\n!CLIENT2LOBBY_GETASTROLOGYHERO_REQ\020\223"
    "\216\006\022\'\n!LOBBY2CLIENT_GETASTROLOGYHERO_RET\020"
    "\224\216\006\022 \n\032CLIENT2LOBBY_MOVE_ITEM_REQ\020\350\216\006\022\037\n"
    "\031CLIENT2LOBBY_LOAD_BAG_REQ\020\351\216\006\022\037\n\031CLIENT"
    "2LOBBY_OPEN_BAG_REQ\020\352\216\006\022\037\n\031CLIENT2LOBBY_"
    "USE_PROP_REQ\020\353\216\006\022\"\n\034CLIENT2LOBBY_GETSHOP"
    "INFO_REQ\020\354\216\006\022\037\n\031CLIENT2LOBBY_BUYGOODS_RE"
    "Q\020\355\216\006\022\"\n\034CLIENT2LOBBY_REFRESHSHOP_REQ\020\356\216"
    "\006\022#\n\035CLIENT2LOBBY_COMMIT_QUEST_REQ\020\314\217\006\022#"
    "\n\035CLIENT2LOBBY_ACCEPT_QUEST_NTF\020\315\217\006\022\037\n\031C"
    "LIENT2LOBBY_NPC_TALK_REQ\020\316\217\006\022#\n\035CLIENT2L"
    "OBBY_GIVEUP_QUEST_REQ\020\317\217\006\022\'\n!CLIENT2LOBB"
    "Y_COMMIT_QUEST_ALL_REQ\020\320\217\006\022)\n#CLIENT2LOB"
    "BY_CHALLENGE_INSTANCE_REQ\020\224\221\006\022#\n\035CLIENT2"
    "LOBBY_CHALLENGE_RESULT\020\225\221\006\022#\n\035CLIENT2LOB"
    "BY_KILL_MONSTER_NTF\020\226\221\006\022\033\n\025CLIENT2LOBBY_"
    "FLOP_REQ\020\227\221\006\022(\n\"CLIENT2LOBBY_GET_CHAPTER"
    "REWARD_REQ\020\230\221\006\022\035\n\027CLIENT2LOBBY_REVIVE_RE"
    "Q\020\231\221\006\022+\n%CLIENT2LOBBY_RESETEVALUATIONTIM"
    "ES_REQ\020\232\221\006\022\037\n\031CLIENT2LOBBY_READMAIL_REQ\020"
    "\370\221\006\022\036\n\030CLIENT2LOBBY_DELMAIL_REQ\020\371\221\006\022\036\n\030L"
    "OBBY2CLIENT_DELMAIL_RET\020\372\221\006\022$\n\036CLIENT2LO"
    "BBY_EXPEDITION_RESULT\020\203\222\006\022\'\n!CLIENT2LOBB"
    "Y_RESET_EXPEDITION_REQ\020\205\222\006\022$\n\036CLIENT2LOB"
    "BY_GET_ARENAINFO_REQ\020\206\222\006\022&\n CLIENT2LOBBY"
    "_CHALLENGE_ARENA_REQ\020\207\222\006\022)\n#CLIENT2LOBBY"
    "_CHALLENGE_ARENA_RESULT\020\210\222\006\022\"\n\034CLIENT2LO"
    "BBY_RESET_ARENA_REQ\020\211\222\006\022+\n%CLIENT2LOBBY_"
    "CHANGE_ARENA_DEFENCE_REQ\020\212\222\006\022%\n\037CLIENT2L"
    "OBBY_ARENAFASTFIGHT_REQ\020\200\222\006\022%\n\037CLIENT2LO"
    "BBY_GET_FRIENDINFO_REQ\020\214\222\006\022!\n\033CLIENT2LOB"
    "BY_ADD_FRIEND_REQ\020\215\222\006\022!\n\033CLIENT2LOBBY_DE"
    "L_FRIEND_REQ\020\216\222\006\022#\n\035CLIENT2LOBBY_OP_APPL"
    "YLIST_REQ\020\217\222\006\022$\n\036CLIENT2LOBBY_ADD_BLACKL"
    "IST_REQ\020\220\222\006\022!\n\033CLIENT2LOBBY_ENERGYONCE_R"
    "EQ\020\221\222\006\022 \n\032CLIENT2LOBBY_ENERGYALL_REQ\020\222\222\006"
    "\022,\n&CLIENT2LOBBY_GET_TARGET_FRIENDINFO_R"
    "EQ\020\223\222\006\022\034\n\026CLIENT2LOBBY_EQUIP_REQ\020\227\222\006\022\036\n\030"
    "CLIENT2LOBBY_UNEQUIP_REQ\020\230\222\006\022#\n\035CLIENT2L"
    "OBBY_STRENG_EQUIP_REQ\020\231\222\006\022#\n\035CLIENT2LOBB"
    "Y_REFINE_EQUIP_REQ\020\232\222\006\022!\n\033CLIENT2LOBBY_S"
    "ALE_EQUIP_REQ\020\233\222\006\022%\n\037CLIENT2LOBBY_SHOP_B"
    "UY_GOODS_REQ\020\234\222\006\022&\n CLIENT2LOBBY_STRENG_"
    "TREASURE_REQ\020\235\222\006\022&\n CLIENT2LOBBY_REFINE_"
    "TREASURE_REQ\020\236\222\006\022\"\n\034CLIENT2LOBBY_CHANGEE"
    "QUIP_REQ\020\237\222\006\022&\n CLIENT2LOBBY_GETACTIVITY"
    "DATA_REQ\020\240\222\006\022(\n\"CLIENT2LOBBY_GETACTIVITY"
    "REWARD_REQ\020\241\222\006\022 \n\032CLIENT2LOBBY_BUYREBATE"
    "_REQ\020\243\222\006\022\"\n\034CLIENT2LOBBY_GETRANKDATA_REQ"
    "\020\252\222\006\022&\n CLIENT2LOBBY_GETRANKFIVEHERO_REQ"
    "\020\253\222\006\022$\n\036CLIENT2LOBBY_GETRANKWEAPON_REQ\020\254"
    "\222\006\022\"\n\034CLIENT2LOBBY_GETRANKHERO_REQ\020\255\222\006\022!"
    "\n\033CLIENT2LOBBY_GETACHIEVE_REQ\020\264\222\006\022\'\n!CLI"
    "ENT2LOBBY_GETACHIEVEREWARD_REQ\020\265\222\006\022\'\n!CL"
    "IENT2LOBBY_GETNEARBYPLAYERS_REQ\020\272\222\006\022!\n\033C"
    "LIENT2LOBBY_PUTFASHION_REQ\020\276\222\006\022\"\n\034CLIENT"
    "2LOBBY_EVOLVEEQUIP_REQ\020\310\222\006\022\"\n\034LOBBY2CLIE"
    "NT_EVOLVEEQUIP_RET\020\311\222\006\022!\n\033CLIENT2LOBBY_A"
    "WAKEEQUIP_REQ\020\312\222\006\022!\n\033LOBBY2CLIENT_AWAKEE"
    "QUIP_RET\020\313\222\006\022\037\n\031LOBBY2CLIENT_LOGIN_FAILE"
    "D\020\300\232\014\022\'\n!LOBBY2CLIENT_CREATE_CHARACTER_C"
    "MD\020\301\232\014\022%\n\037LOBBY2CLIENT_CREATE_CHAR_FAILE"
    "D\020\302\232\014\022%\n\037LOBBY2CLIENT_CHARACTER_INFO_NTF"
    "\020\303\232\014\022\'\n!LOBBY2CLIENT_CHAR_BASEINFO_UPDAT"
    "E\020\304\232\014\022\'\n!LOBBY2CLIENT_CHANGE_FORMATION_R"
    "ET\020\305\232\014\022!\n\033LOBBY2CLIENT_CHANGENAME_RET\020\306\232"
    "\014\022!\n\033LOBBY2CLIENT_BUY_COPPER_RET\020\307\232\014\022\"\n\034"
    "LOBBY2CLIENT_CHANGEPHOTO_RET\020\310\232\014\022\037\n\031LOBB"
    "Y2CLIENT_SYN_ITEM_RET\020\311\232\014\022 \n\032LOBBY2CLIEN"
    "T_SALE_ITEM_RET\020\312\232\014\022\"\n\034LOBBY2CLIENT_HERO"
    "INFO_UPDATE\020\313\232\014\022\033\n\025LOBBY2CLIENT_KICK_NTF"
    "\020\314\232\014\022\"\n\034LOBBY2CLIENT_SIGNIN_INFO_NTF\020\315\232\014"
    "\022\035\n\027LOBBY2CLIENT_SIGNIN_RET\020\316\232\014\022+\n%LOBBY"
    "2CLIENT_GET_VIPSIGNIN_REWARD_RET\020\317\232\014\022#\n\035"
    "LOBBY2CLIENT_CHANGE_RAISE_RET\020\320\232\014\022\037\n\031LOB"
    "BY2CLIENT_PROGRESS_RET\020\321\232\014\022(\n\"LOBBY2CLIE"
    "NT_LOGINDATACOMPLETE_NTF\020\322\232\014\022\035\n\027LOBBY2CL"
    "IENT_RESOLVERET\020\323\232\014\022!\n\033LOBBY2CLIENT_HERO"
    "DELETE_NTF\020\324\232\014\022\"\n\034LOBBY2CLIENT_RESOLVELO"
    "OK_RET\020\325\232\014\022\"\n\034LOBBY2CLIENT_CHAT_RECORD_N"
    "TF\020\243\233\014\022 \n\032LOBBY2CLIENT_CHAT_INFO_NTF\020\244\233\014"
    "\022%\n\037LOBBY2CLIENT_HERO_EVOLUTION_RET\020\245\233\014\022"
    "!\n\033LOBBY2CLIENT_HERO_FORCE_RET\020\246\233\014\022\'\n!LO"
    "BBY2CLIENT_HERO_DEIFICATION_RET\020\242\233\014\022\"\n\034L"
    "OBBY2CLIENT_EQUIP_FORCE_RET\020\247\233\014\022\037\n\031LOBBY"
    "2CLIENT_SALEHERO_RET\020\250\233\014\022\037\n\031LOBBY2CLIENT"
    "_OPEN_BOX_RET\020\251\233\014\022$\n\036LOBBY2CLIENT_SUPREM"
    "EHOTBOX_NTF\020\252\233\014\022\'\n!LOBBY2CLIENT_HEROSKIL"
    "LUPGRADE_RET\020\253\233\014\022%\n\037LOBBY2CLIENT_GRTOPEN"
    "BOXINFO_RET\020\254\233\014\022 \n\032LOBBY2CLIENT_SKILLINF"
    "O_RET\020\255\233\014\022%\n\037LOBBY2CLIENT_BUY_SKILLPOINT"
    "_RET\020\256\233\014\022\"\n\034LOBBY2CLIENT_USE_EXPITEM_RET"
    "\020\257\233\014\022#\n\035LOBBY2CLIENT_ANNOUNCEMENT_NTF\020\260\233"
    "\014\022!\n\033LOBBY2CLIENT_HERO_AWAKE_RET\020\261\233\014\022\"\n\034"
    "LOBBY2CLIENT_SEND_THINGS_NTF\020\210\234\014\022$\n\036LOBB"
    "Y2CLIENT_REDUCE_THINGS_NTF\020\211\234\014\022 \n\032LOBBY2"
    "CLIENT_MOVE_ITEM_NTF\020\212\234\014\022 \n\032LOBBY2CLIENT"
    "_SWAP_ITEM_NTF\020\213\234\014\022#\n\035LOBBY2CLIENT_OVERL"
    "AP_ITEM_NTF\020\214\234\014\022\037\n\031LOBBY2CLIENT_LOAD_BAG"
    "_RET\020\215\234\014\022\"\n\034LOBBY2CLIENT_GETSHOPINFO_RET"
    "\020\216\234\014\022\037\n\031LOBBY2CLIENT_BUYGOODS_RET\020\217\234\014\022\"\n"
    "\034LOBBY2CLIENT_REFRESHSHOP_RET\020\220\234\014\022#\n\035LOB"
    "BY2CLIENT_SHOPACTIVITY_NTF\020\221\234\014\022#\n\035LOBBY2"
    "CLIENT_COMMIT_QUEST_RET\020\354\234\014\022 \n\032LOBBY2CLI"
    "ENT_NEW_QUEST_NTF\020\355\234\014\022#\n\035LOBBY2CLIENT_QU"
    "EST_FIN_STATUS\020\356\234\014\022 \n\032LOBBY2CLIENT_QUEST"
    "_OBJ_NTF\020\357\234\014\022\037\n\031LOBBY2CLIENT_REMOVE_QUES"
    "T\020\360\234\014\022%\n\037LOBBY2CLIENT_NEW_SIDE_QUEST_NTF"
    "\020\361\234\014\022\'\n!LOBBY2CLIENT_COMMIT_QUEST_ALL_RE"
    "T\020\362\234\014\022 \n\032LOBBY2CLIENT_FESTIVITY_NTF\020\366\234\014\022"
    "#\n\035LOBBY2CLIENT_NEWDAYUPDATE_NTF\020\200\235\014\022)\n#"
    "LOBBY2CLIENT_CHALLENGE_INSTANCE_RET\020\264\236\014\022"
    "#\n\035LOBBY2CLIENT_CHALLENGE_RESULT\020\265\236\014\022\033\n\025"
    "LOBBY2CLIENT_FLOP_RET\020\266\236\014\022(\n\"LOBBY2CLIEN"
    "T_GET_CHAPTERREWARD_RET\020\267\236\014\022*\n$LOBBY2CLI"
    "ENT_GET_ARCHAEOLOGYINFO_RET\020\270\236\014\022\035\n\027LOBBY"
    "2CLIENT_REVIVE_RET\020\271\236\014\022 \n\032LOBBY2CLIENT_S"
    "ACRIFICE_RET\020\272\236\014\022+\n%LOBBY2CLIENT_RESETEV"
    "ALUATIONTIMES_RET\020\273\236\014\022\034\n\026LOBBY2CLIENT_MA"
    "IL_LIST\020\230\237\014\022\037\n\031LOBBY2CLIENT_NEW_MAIL_NTF"
    "\020\231\237\014\022\037\n\031LOBBY2CLIENT_READMAIL_RET\020\232\237\014\022\036\n"
    "\030LOBBY2CLIENT_DELMAIL_NTF\020\233\237\014\022\'\n!LOBBY2C"
    "LIENT_EXPEDITIONRESULT_RET\020\234\237\014\022*\n$LOBBY2"
    "CLIENT_GETEXPEDITIONREWARD_RET\020\235\237\014\022\'\n!LO"
    "BBY2CLIENT_RESET_EXPEDITION_RET\020\236\237\014\022$\n\036L"
    "OBBY2CLIENT_GET_ARENAINFO_RET\020\245\237\014\022&\n LOB"
    "BY2CLIENT_CHALLENGE_ARENA_RET\020\246\237\014\022)\n#LOB"
    "BY2CLIENT_CHALLENGE_ARENA_REWARD\020\247\237\014\022\"\n\034"
    "LOBBY2CLIENT_RESET_ARENA_RET\020\250\237\014\022+\n%LOBB"
    "Y2CLIENT_CHANGE_ARENA_DEFENCE_RET\020\251\237\014\022%\n"
    "\037LOBBY2CLIENT_ARENAFASTFIGHT_RET\020\240\237\014\022!\n\033"
    "LOBBY2CLIENT_FRIENDLIST_RET\020\254\237\014\022!\n\033LOBBY"
    "2CLIENT_ADD_FRIEND_RET\020\255\237\014\022!\n\033LOBBY2CLIE"
    "NT_DEL_FRIEND_RET\020\256\237\014\022#\n\035LOBBY2CLIENT_OP"
    "_APPLYLIST_RET\020\257\237\014\022$\n\036LOBBY2CLIENT_ADD_B"
    "LACKLIST_RET\020\260\237\014\022!\n\033LOBBY2CLIENT_ENERGYO"
    "NCE_RET\020\261\237\014\022 \n\032LOBBY2CLIENT_ENERGYALL_RE"
    "T\020\262\237\014\022 \n\032LOBBY2CLIENT_NEW_APPLY_NTF\020\263\237\014\022"
    "!\n\033LOBBY2CLIENT_NEW_FRIEND_NTF\020\264\237\014\022!\n\033LO"
    "BBY2CLIENT_DEL_FRIEND_NTF\020\265\237\014\022,\n&LOBBY2C"
    "LIENT_GET_TARGET_FRIENDINFO_RET\020\266\237\014\022\034\n\026L"
    "OBBY2CLIENT_EQUIP_RET\020\267\237\014\022\036\n\030LOBBY2CLIEN"
    "T_UNEQUIP_RET\020\270\237\014\022#\n\035LOBBY2CLIENT_STRENG"
    "_EQUIP_RET\020\271\237\014\022#\n\035LOBBY2CLIENT_REFINE_EQ"
    "UIP_RET\020\272\237\014\022!\n\033LOBBY2CLIENT_SALE_EQUIP_R"
    "ET\020\273\237\014\022%\n\037LOBBY2CLIENT_SHOP_BUY_GOODS_RE"
    "T\020\274\237\014\022&\n LOBBY2CLIENT_STRENG_TREASURE_RE"
    "T\020\275\237\014\022&\n LOBBY2CLIENT_REFINE_TREASURE_RE"
    "T\020\276\237\014\022\"\n\034LOBBY2CLIENT_CHANGEEQUIP_RET\020\277\237"
    "\014\022&\n LOBBY2CLIENT_GETACTIVITYDATA_RET\020\340\273"
    "\r\022(\n\"LOBBY2CLIENT_GETACTIVITYREWARD_RET\020"
    "\341\273\r\022)\n#LOBBY2CLIENT_UPDATEACTIVITYDATA_N"
    "TF\020\342\273\r\022 \n\032LOBBY2CLIENT_BUYREBATE_RET\020\343\273\r"
    "\022\"\n\034LOBBY2CLIENT_GETRANKDATA_RET\020\352\273\r\022&\n "
    "LOBBY2CLIENT_GETRANKFIVEHERO_RET\020\353\273\r\022$\n\036"
    "LOBBY2CLIENT_GETRANKWEAPON_RET\020\354\273\r\022\"\n\034LO"
    "BBY2CLIENT_GETRANKHERO_RET\020\355\273\r\022!\n\033LOBBY2"
    "CLIENT_GETACHIEVE_RET\020\364\273\r\022\'\n!LOBBY2CLIEN"
    "T_GETACHIEVEREWARD_RET\020\365\273\r\022\'\n!LOBBY2CLIE"
    "NT_GETNEARBYPLAYERS_RET\020\372\273\r\022!\n\033LOBBY2CLI"
    "ENT_PUTFASHION_RET\020\376\273\r\022*\n$CLIENT2LOBBY_G"
    "ET_TARGET_USERINFO_REQ\020\320\350\014\022*\n$LOBBY2CLIE"
    "NT_GET_TARGET_USERINFO_RET\020\321\350\014\022\035\n\027LOBBY2"
    "CLIENT_GLOBAL_NTF\020\322\350\014\022\'\n!CLIENT2LOBBY_GE"
    "T_SEVEN_REWARD_REQ\020\323\350\014\022\'\n!LOBBY2CLIENT_G"
    "ET_SEVEN_REWARD_RET\020\324\350\014\022\034\n\026LOBBY2CLIENT_"
    "SEVEN_NTF\020\325\350\014\022\034\n\026LOBBY2CLIENT_HEART_NTF\020"
    "\326\350\014\022\034\n\026CLIENT2LOBBY_HEART_REP\020\327\350\014\022%\n\037CLI"
    "ENT2LOBBY_SEVEN_HALF_BUY_REQ\020\330\350\014\022%\n\037LOBB"
    "Y2CLIENT_SEVEN_HALF_BUY_RET\020\331\350\014\022\"\n\034CLIEN"
    "T2LOBBY_BUYMAPTIMES_REQ\020\333\350\014\022\"\n\034LOBBY2CLI"
    "ENT_BUYMAPTIMES_RET\020\334\350\014\022.\n(CLIENT2LOBBY_"
    "REBEL_ARMY_BATTLE_START_REQ\020\335\350\014\022.\n(LOBBY"
    "2CLIENT_REBEL_ARMY_BATTLE_START_RET\020\336\350\014\022"
    ",\n&CLIENT2LOBBY_REBEL_ARMY_BATTLE_END_RE"
    "Q\020\337\350\014\022,\n&LOBBY2CLIENT_REBEL_ARMY_BATTLE_"
    "END_RET\020\340\350\014\022&\n CLIENT2LOBBY_REBEL_ARMY_B"
    "OSS_REQ\020\341\350\014\022&\n LOBBY2CLIENT_REBEL_ARMY_B"
    "OSS_RET\020\342\350\014\022,\n&CLIENT2LOBBY_REBEL_ARMY_B"
    "OSS_SHARE_REQ\020\343\350\014\022,\n&LOBBY2CLIENT_REBEL_"
    "ARMY_BOSS_SHARE_RET\020\344\350\014\022*\n$LOBBY2CLIENT_"
    "GET_TARGET_USERINFO_REQ\020\345\350\014\022*\n$CLIENT2LO"
    "BBY_GET_TARGET_USERINFO_RET\020\346\350\014\022+\n%LOBBY"
    "2CLIENT_RECOMMAND_FRIENDLIST_RET\020\347\350\014\022+\n%"
    "CLIENT2LOBBY_RECOMMAND_FRIENDLIST_REQ\020\350\350"
    "\014\022!\n\033LOBBY2CLIENT_FRIENDINFO_NTF\020\351\350\014\022$\n\036"
    "CLIENT2LOBBY_GET_RAID_TEAM_REQ\020\352\350\014\022$\n\036LO"
    "BBY2CLIENT_GET_RAID_TEAM_RET\020\353\350\014\022$\n\036CLIE"
    "NT2LOBBY_OPT_RAID_TEAM_REQ\020\354\350\014\022$\n\036LOBBY2"
    "CLIENT_OPT_RAID_TEAM_RET\020\355\350\014\022$\n\036LOBBY2CL"
    "IENT_ACTION_RECORD_NTF\020\356\350\014\022\037\n\031LOBBY2CLIE"
    "NT_RECHARGE_NTF\020\357\350\014\022\'\n!CLIENT2LOBBY_CREA"
    "TE_RAID_TEAM_REQ\020\360\350\014\022\'\n!LOBBY2CLIENT_CRE"
    "ATE_RAID_TEAM_RET\020\361\350\014\022\034\n\026LOBBY2CLIENT_SH"
    "ARE_NTF\020\362\350\014\022 \n\032LOBBY2CLIENT_RAID_TEAM_NT"
    "F\020\363\350\014\022(\n\"CLIENT2LOBBY_FRIEND_APPLY_INFO_"
    "REQ\020\364\350\014\022#\n\035CLIENT2LOBBY_GETGUILDLIST_REQ"
    "\020\370\350\014\022#\n\035LOBBY2CLIENT_GETGUILDLIST_RET\020\371\350"
    "\014\022\"\n\034CLIENT2LOBBY_CREATEGUILD_REQ\020\372\350\014\022\"\n"
    "\034LOBBY2CLIENT_CREATEGUILD_RET\020\373\350\014\022!\n\033CLI"
    "ENT2LOBBY_APPLYGUILD_REQ\020\374\350\014\022!\n\033LOBBY2CL"
    "IENT_APPLYGUILD_RET\020\375\350\014\022(\n\"CLIENT2LOBBY_"
    "APPLyGUILDRESPOND_REQ\020\376\350\014\022(\n\"LOBBY2CLIEN"
    "T_APPLYGUILDRESPOND_RET\020\377\350\014\022(\n\"CLIENT2LO"
    "BBY_GETGUILDAPPLYLIST_REQ\020\200\351\014\022(\n\"LOBBY2C"
    "LIENT_GETGUILDAPPLYLIST_RET\020\201\351\014\022 \n\032CLIEN"
    "T2LOBBY_QUITGUILD_REQ\020\202\351\014\022 \n\032LOBBY2CLIEN"
    "T_QUITGUILD_RET\020\203\351\014\022)\n#CLIENT2LOBBY_OPER"
    "ATEGUILDMEMBER_REQ\020\204\351\014\022)\n#LOBBY2CLIENT_O"
    "PERATEGUILDMEMBER_RET\020\205\351\014\022&\n CLIENT2LOBB"
    "Y_MODIFYGUILDTEXT_REQ\020\206\351\014\022&\n LOBBY2CLIEN"
    "T_MODIFYGUILDTEXT_RET\020\207\351\014\022)\n#CLIENT2LOBB"
    "Y_GETGUILDMEMBERLIST_REQ\020\210\351\014\022)\n#LOBBY2CL"
    "IENT_GETGUILDMEMBERLIST_RET\020\211\351\014\022 \n\032LOBBY"
    "2CLIENT_GUILDINFO_NTF\020\213\351\014\022\"\n\034LOBBY2CLIEN"
    "T_GUILDMEMBER_NTF\020\214\351\014\022!\n\033LOBBY2CLIENT_GU"
    "ILDAPPLY_NTF\020\215\351\014\022\"\n\034CLIENT2LOBBY_GUILDRI"
    "TUAL_REQ\020\216\351\014\022\"\n\034LOBBY2CLIENT_GUILDRITUAL"
    "_RET\020\217\351\014\022/\n)CLIENT2LOBBY_GETGUILDRITUALR"
    "ATEREWARD_REQ\020\220\351\014\022/\n)LOBBY2CLIENT_GETGUI"
    "LDRITUALRATEREWARD_RET\020\221\351\014\022/\n)CLIENT2LOB"
    "BY_GETGUILDRITUAL7DAYREWARD_REQ\020\222\351\014\022/\n)L"
    "OBBY2CLIENT_GETGUILDRITUAL7DAYREWARD_RET"
    "\020\223\351\014\022\"\n\034LOBBY2CLIENT_GUILDRITUAL_NTF\020\224\351\014"
    "\022$\n\036CLIENT2LOBBY_GETGUILDSTATE_REQ\020\225\351\014\022$"
    "\n\036LOBBY2CLIENT_GETGUILDSTATE_RET\020\226\351\014\022!\n\033"
    "LOBBY2CLIENT_GUILDSTATE_NTF\020\227\351\014\022 \n\032CLIEN"
    "T2LOBBY_GET_PRIZE_REQ\020\230\351\014\022 \n\032LOBBY2CLIEN"
    "T_GET_PRIZE_RET\020\231\351\014\022 \n\032LOBBY2CLIENT_PRIZ"
    "EINFO_NTF\020\232\351\014\022#\n\035LOBBY2CLIENT_GUILDMAPIN"
    "FO_NTF\020\240\351\014\022)\n#CLIENT2LOBBY_SELECTGUILDCH"
    "APTER_REQ\020\241\351\014\022)\n#LOBBY2CLIENT_SELECTGUIL"
    "DCHAPTER_RET\020\242\351\014\022%\n\037CLIENT2LOBBY_ATTACKG"
    "UILDMAP_REQ\020\243\351\014\022%\n\037LOBBY2CLIENT_ATTACKGU"
    "ILDMAP_RET\020\244\351\014\022,\n&CLIENT2LOBBY_GETGUILDM"
    "APREWARDLIST_REQ\020\245\351\014\022,\n&LOBBY2CLIENT_GET"
    "GUILDMAPREWARDLIST_RET\020\246\351\014\022+\n%CLIENT2LOB"
    "BY_ATTACKGUILDMAPRESULT_REQ\020\247\351\014\022+\n%LOBBY"
    "2CLIENT_ATTACKGUILDMAPRESULT_RET\020\250\351\014\022-\n\'"
    "CLIENT2LOBBY_SHOWGUILDMAPREWARDLIST_REQ\020"
    "\251\351\014\022-\n\'LOBBY2CLIENT_SHOWGUILDMAPREWARDLI"
    "ST_RET\020\252\351\014\022(\n\"CLIENT2LOBBY_RESETGUILDMAP"
    "TYPE_REQ\020\253\351\014\022(\n\"LOBBY2CLIENT_RESETGUILDM"
    "APTYPE_RET\020\254\351\014\0224\n.CLIENT2LOBBY_GETGUILDT"
    "ERRITORYBATTLEPLAYER_REQ\020\320\351\014\0224\n.LOBBY2CL"
    "IENT_GETGUILDTERRITORYBATTLEPLAYER_RET\020\321"
    "\351\014\022,\n&CLIENT2LOBBY_GETGUILDTERRITORYINFO"
    "_REQ\020\322\351\014\022,\n&LOBBY2CLIENT_GETGUILDTERRITO"
    "RYINFO_RET\020\323\351\014\0221\n+CLIENT2LOBBY_ATTACKGUI"
    "LDTERRITORYRESULT_REQ\020\324\351\014\0221\n+LOBBY2CLIEN"
    "T_ATTACKGUILDTERRITORYRESULT_RET\020\325\351\014\022+\n%"
    "CLIENT2LOBBY_PATROLGUILDTERRITORY_REQ\020\326\351"
    "\014\022+\n%LOBBY2CLIENT_PATROLGUILDTERRITORY_R"
    "ET\020\327\351\014\022.\n(CLIENT2LOBBY_GETGUILDTERRITORY"
    "REWARD_REQ\020\330\351\014\022.\n(LOBBY2CLIENT_GETGUILDT"
    "ERRITORYREWARD_RET\020\331\351\014\0223\n-CLIENT2LOBBY_G"
    "ETGUILDMEMBERSTERRITORYLIST_REQ\020\332\351\014\0223\n-L"
    "OBBY2CLIENT_GETGUILDMEMBERSTERRITORYLIST"
    "_RET\020\333\351\014\0222\n,CLIENT2LOBBY_GETGUILDMEMBERT"
    "ERRITORYINFO_REQ\020\334\351\014\0222\n,LOBBY2CLIENT_GET"
    "GUILDMEMBERTERRITORYINFO_RET\020\335\351\014\0223\n-CLIE"
    "NT2LOBBY_SUPPRESSGUILDMEMBERTERRITORY_RE"
    "Q\020\336\351\014\0223\n-LOBBY2CLIENT_SUPPRESSGUILDMEMBE"
    "RTERRITORY_RET\020\337\351\014\022.\n(LOBBY2CLIENT_GUILD"
    "TERRITORYRRIOTDONE_NTF\020\340\351\014\022\'\n!CLIENT2LOB"
    "BY_UNLOCKGUILDSKILL_REQ\020\346\351\014\022\'\n!LOBBY2CLI"
    "ENT_UNLOCKGUILDSKILL_RET\020\347\351\014\022#\n\035CLIENT2L"
    "OBBY_UPGUILDSKILL_REQ\020\350\351\014\022#\n\035LOBBY2CLIEN"
    "T_UPGUILDSKILL_RET\020\351\351\014\022+\n%CLIENT2LOBBY_G"
    "ETGUILDWARENEMYLIST_REQ\020\352\351\014\022+\n%LOBBY2CLI"
    "ENT_GETGUILDWARENEMYLIST_RET\020\353\351\014\022*\n$CLIE"
    "NT2LOBBY_SELECTGUILDWARENEMY_REQ\020\354\351\014\022*\n$"
    "LOBBY2CLIENT_SELECTGUILDWARENEMY_RET\020\355\351\014"
    "\022&\n CLIENT2LOBBY_GETGUILDWARINFO_REQ\020\356\351\014"
    "\022&\n LOBBY2CLIENT_GETGUILDWARINFO_RET\020\357\351\014"
    "\022/\n)CLIENT2LOBBY_SHOWGUILDWARENEMYMEMBER"
    "S_REQ\020\360\351\014\022/\n)LOBBY2CLIENT_SHOWGUILDWAREN"
    "EMYMEMBERS_RET\020\361\351\014\022*\n$CLIENT2LOBBY_ATTAC"
    "KGUILDWARENEMY_REQ\020\362\351\014\022*\n$LOBBY2CLIENT_A"
    "TTACKGUILDWARENEMY_RET\020\363\351\014\0220\n*CLIENT2LOB"
    "BY_ATTACKGUILDWARENEMYRESULT_REQ\020\364\351\014\0220\n*"
    "LOBBY2CLIENT_ATTACKGUILDWARENEMYRESULT_R"
    "ET\020\365\351\014\022\"\n\034LOBBY2CLIENT_GUILDWARMSG_NTF\020\366"
    "\351\014\022%\n\037LOBBY2CLIENT_GUILDWARENDMSG_NTF\020\367\351"
    "\014\022+\n%LOBBY2CLIENT_GUILDWARENDPLAYERMSG_N"
    "TF\020\370\351\014\022&\n LOBBY2CLIENT_GUILDTECHNOLOGY_N"
    "TF\020\371\351\014\022$\n\036LOBBY2CLIENT_GUILDCITYINFO_NTF"
    "\020\373\351\014\022(\n\"LOBBY2CLIENT_GUILDCITYTASKINFO_N"
    "TF\020\374\351\014\022*\n$LOBBY2CLIENT_GUILDCITYTASKUPDA"
    "TE_NTF\020\375\351\014\022-\n\'CLIENT2LOBBY_GETGUILDCITYT"
    "ASKREWARD_REQ\020\376\351\014\022-\n\'LOBBY2CLIENT_GETGUI"
    "LDCITYTASKREWARD_RET\020\377\351\014\022+\n%CLIENT2LOBBY"
    "_REFRESHGUILDCITYTASK_REQ\020\200\352\014\022+\n%LOBBY2C"
    "LIENT_REFRESHGUILDCITYTASK_RET\020\201\352\014\022\'\n!CL"
    "IENT2LOBBY_USE_ITEM_SPECAIL_REQ\020\263\351\014\022\'\n!L"
    "OBBY2CLIENT_USE_ITEM_SPECAIL_RET\020\264\351\014\022 \n\032"
    "CLIENT2LOBBY_ROBPLAYER_REQ\020\265\351\014\0220\n*CLIENT"
    "2LOBBY_ROB_TREASURE_BATTLE_START_REQ\020\266\351\014"
    "\022.\n(CLIENT2LOBBY_ROB_TREASURE_BATTLE_END"
    "_REQ\020\267\351\014\022\'\n!CLIENT2LOBBY_TREASURE_COMBIN"
    "E_REQ\020\270\351\014\022#\n\035CLIENT2LOBBY_ROB_OPEN_BOX_R"
    "EQ\020\271\351\014\022 \n\032LOBBY2CLIENT_ROBPLAYER_RET\020\272\351\014"
    "\0220\n*LOBBY2CLIENT_ROB_TREASURE_BATTLE_STA"
    "RT_RET\020\273\351\014\022.\n(LOBBY2CLIENT_ROB_TREASURE_"
    "BATTLE_END_RET\020\274\351\014\022\'\n!LOBBY2CLIENT_TREAS"
    "URE_COMBINE_RET\020\275\351\014\022#\n\035LOBBY2CLIENT_ROB_"
    "OPEN_BOX_RET\020\276\351\014\022 \n\032CLIENT2LOBBY_ONEKEYR"
    "OB_REQ\020\277\351\014\022 \n\032LOBBY2CLIENT_ONEKEYROB_RET"
    "\020\300\351\014\022#\n\035CLIENT2LOBBY_ONEKEYROBEND_REQ\020\301\351"
    "\014\022#\n\035LOBBY2CLIENT_ONEKEYROBEND_RET\020\302\351\014\022\035"
    "\n\027LOBBY2CLIENT_NOTICE_NTF\020\310\351\014\022$\n\036CLIENT2"
    "LOBBY_GETNOTICEITEM_REQ\020\311\351\014\022$\n\036LOBBY2CLI"
    "ENT_GETNOTICEITEM_RET\020\312\351\014\022#\n\035LOBBY2CLIEN"
    "T_NOTICEBYTASK_NTF\020\313\351\014\022#\n\035LOBBY2CLIENT_R"
    "EFERSHTIMES_NTF\020\230\352\014\022$\n\036CLIENT2LOBBY_BUYP"
    "RICETIMES_REQ\020\231\352\014\022$\n\036LOBBY2CLIENT_BUYPRI"
    "CETIMES_RET\020\232\352\014\022!\n\033CLIENT2LOBBY_UPPOSITI"
    "ON_REQ\020\233\352\014\022!\n\033LOBBY2CLIENT_UPPOSITION_RE"
    "T\020\234\352\014\022%\n\037LOBBY2CLIENT_GETFIRSTWEAPON_NTF"
    "\020\235\352\014\022%\n\037CLIENT2LOBBY_GETROBOTEFFECT_REQ\020"
    "\222\234\014\022%\n\037LOBBY2CLIENT_GetRobotEffect_RET\020\223"
    "\234\014\022(\n\"CLIENT2LOBBY_FIRSTCHARGECHOOSE_REQ"
    "\020\234\234\014\022(\n\"LOBBY2CLIENT_FIRSTCHARGECHOOSE_R"
    "ET\020\235\234\014\022-\n\'CLIENT2LOBBY_CONTINUE_CHARGE_C"
    "HOOSE_REQ\020\246\234\014\022-\n\'LOBBY2CLIENT_CONTINUE_C"
    "HARGE_CHOOSE_RET\020\247\234\014\022*\n$CLIENT2LOBBY_REB"
    "EL_ARMY_BOSS_TIP_REQ\020\374\352\014\022*\n$LOBBY2CLIENT"
    "_REBEL_ARMY_BOSS_TIP_RET\020\375\352\014\022)\n#CLIENT2L"
    "OBBY_GETEXPEDITIONROBOT_REQ\020\206\353\014\022)\n#LOBBY"
    "2CLIENT_GETEXPEDITIONROBOT_RET\020\207\353\014\0220\n*CL"
    "IENT2LOBBY_GETEXPEDITIONBATTLEPLAYER_REQ"
    "\020\210\353\014\0220\n*LOBBY2CLIENT_GETEXPEDITIONBATTLE"
    "PLAYER_RET\020\211\353\014\022&\n CLIENT2LOBBY_GETSEVEND"
    "AYRANK_REQ\020\212\353\014\022&\n LOBBY2CLIENT_GETSEVEND"
    "AYRANK_RET\020\213\353\014\022(\n\"CLIENT2LOBBY_GETPKBATT"
    "LEPLAYER_REQ\020\214\353\014\022(\n\"LOBBY2CLIENT_GETPKBA"
    "TTLEPLAYER_RET\020\215\353\014\022!\n\033LOBBY2CLIENT_TEAME"
    "FFECT_NTF\020\216\353\014\022&\n LOBBY2CLIENT_CONTINUE_C"
    "HARGE_NTF\020\220\353\014\022&\n LOBBY2CLIENT_TURNTABLER"
    "ESULT_NTF\020\232\353\014\022\'\n!CLIENT2LOBBY_GETTURNTAB"
    "LERANK_REQ\020\233\353\014\022\'\n!LOBBY2CLIENT_GETTURNTA"
    "BLERANK_RET\020\234\353\014\022)\n#LOBBY2CENTER_CLOSETUR"
    "NTABLERANK_NTF\020\235\353\014\022*\n$CENTER2LOBBY_TURNT"
    "ABLERANKREWARD_NTF\020\236\353\014\022#\n\035CENTER2LOBBY_G"
    "ETARENALIST_REQ\020\277\370\022\022#\n\035LOBBY2CENTER_GETA"
    "RENALIST_RET\020\300\370\022\022\'\n!CLIENT2LOBBY_INVITEF"
    "RIENDTEAM_REQ\020\301\370\022\022,\n&CLIENT2LOBBY_SERVER"
    "WARGETSCOREINFO_REQ\020\256\353\014\022,\n&LOBBY2CLIENT_"
    "SERVERWARGETSCOREINFO_RET\020\257\353\014\022*\n$CLIENT2"
    "LOBBY_SERVERWARSETCOUNTRY_REQ\020\260\353\014\022*\n$LOB"
    "BY2CLIENT_SERVERWARSETCOUNTRY_RET\020\261\353\014\022,\n"
    "&CLIENT2LOBBY_SERVERWARREFRESHENEMY_REQ\020"
    "\262\353\014\022,\n&LOBBY2CLIENT_SERVERWARREFRESHENEM"
    "Y_RET\020\263\353\014\022,\n&CLIENT2LOBBY_SERVERWARATTAC"
    "KRESULT_REQ\020\264\353\014\022,\n&LOBBY2CLIENT_SERVERWA"
    "RATTACKRESULT_RET\020\265\353\014\022,\n&CLIENT2LOBBY_SE"
    "RVERWARGETSCORERANK_REQ\020\266\353\014\022,\n&LOBBY2CLI"
    "ENT_SERVERWARGETSCORERANK_RET\020\267\353\014\022,\n&CLI"
    "ENT2LOBBY_SERVERWARGETFIGHTRANK_REQ\020\270\353\014\022"
    ",\n&LOBBY2CLIENT_SERVERWARGETFIGHTRANK_RE"
    "T\020\271\353\014\022&\n CLIENT2LOBBY_SERVERWARATTACK_RE"
    "Q\020\272\353\014\022&\n LOBBY2CLIENT_SERVERWARATTACK_RE"
    "T\020\273\353\014\022,\n&CLIENT2LOBBY_SERVERWARGETFIGHTI"
    "NFO_REQ\020\274\353\014\022,\n&LOBBY2CLIENT_SERVERWARGET"
    "FIGHTINFO_RET\020\275\353\014\022*\n$CENTER2LOBBY_SERVER"
    "WARRANKREWARD_NTF\020\276\353\014\022 \n\032LOBBY2CENTER_CL"
    "OSESWAR_NTF\020\277\353\014\022&\n LOBBY2CENTER_UPDATETE"
    "AMHONOR_NTF\020\300\353\014\022+\n%CENTER2LOBBY_SERVERTE"
    "AMRANKREWARD_NTF\020\301\353\014\022#\n\035CLIENT2LOBBY_SER"
    "VERTEAMOP_REQ\020\302\353\014\022#\n\035LOBBY2CLIENT_SERVER"
    "TEAMOP_RET\020\303\353\014\022&\n CLIENT2LOBBY_SERVERTEA"
    "MCLOSE_REQ\020\304\353\014\022&\n LOBBY2CLIENT_SERVERTEA"
    "MCLOSE_NTF\020\305\353\014\022(\n\"LOBBY2CLIENT_SERVERTEA"
    "MPLAYERS_NTF\020\306\353\014\022-\n\'CLIENT2LOBBY_SERVERT"
    "EAMINVITEFRIEND_REQ\020\307\353\014\022-\n\'LOBBY2CLIENT_"
    "SERVERTEAMINVITEFRIEND_RET\020\310\353\014\022(\n\"LOBBY2"
    "CLIENT_SERVERTEAMINVITED_NTF\020\311\353\014\022*\n$CLIE"
    "NT2LOBBY_SERVERTEAMCHANGEPOS_REQ\020\312\353\014\022*\n$"
    "LOBBY2CLIENT_SERVERTEAMCHANGEPOS_NTF\020\313\353\014"
    "\022*\n$LOBBY2CLIENT_SERVERTEAMWAITFIGHT_NTF"
    "\020\314\353\014\022,\n&LOBBY2CLIENT_SERVERTEAMFIGHTRESU"
    "LT_NTF\020\315\353\014\022%\n\037LOBBY2CLIENT_SERVERTEAMQUI"
    "T_NTF\020\316\353\014\022(\n\"LOBBY2CLIENT_SERVERTEAMDORE"
    "ADY_NTF\020\317\353\014\022-\n\'CLIENT2LOBBY_SERVERTEAMGE"
    "THONORRANK_REQ\020\320\353\014\022-\n\'LOBBY2CLIENT_SERVE"
    "RTEAMGETHONORRANK_RET\020\321\353\014\022+\n%LOBBY2CENTE"
    "R_REDUCEGLOBALGOODSNUM_NTF\020\322\353\014\022(\n\"CENTER"
    "2LOBBY_UPDATEGLOBALGOODS_NTF\020\323\353\014\022/\n)LOBB"
    "Y2CLIENT_CLEARSERVERTEAMHONORRANK_NTF\020\324\353"
    "\014\022(\n\"LOBBY2CLIENT_HANDBOOK_STRENGTH_RET\020"
    "\340\353\014\022(\n\"CLIENT2LOBBY_HANDBOOK_STRENGTH_RE"
    "Q\020\341\353\014\022(\n\"CLIENT2LOBBY_GETSEARCHTOMBINFO_"
    "REQ\020\304\354\014\022#\n\035CLIENT2LOBBY_SEARCHTOMBGO_REQ"
    "\020\305\354\014\022(\n\"LOBBY2CLIENT_GETSEARCHTOMBINFO_N"
    "TF\020\306\354\014\022*\n$CLIENT2LOBBY_SEARCHTOMBEVENTDO"
    "NE_REQ\020\307\354\014\022#\n\035LOBBY2CLIENT_SEARCHTOMBGO_"
    "RET\020\310\354\014\022*\n$LOBBY2CLIENT_SEARCHTOMBEVENTD"
    "ONE_RET\020\311\354\014\022)\n#CLIENT2LOBBY_GETSECRETHOL"
    "EROBOT_REQ\020\314\354\014\022)\n#LOBBY2CLIENT_GETSECRET"
    "HOLEROBOT_RET\020\315\354\014\022(\n\"CLIENT2LOBBY_GETSEC"
    "RETHOLEINFO_REQ\020\316\354\014\022(\n\"LOBBY2CLIENT_GETS"
    "ECRETHOLEINFO_RET\020\317\354\014\022\'\n!CLIENT2LOBBY_AT"
    "TACKSECRETHOLE_REQ\020\320\354\014\022\'\n!LOBBY2CLIENT_A"
    "TTACKSECRETHOLE_RET\020\321\354\014\022-\n\'CLIENT2LOBBY_"
    "ATTACKSECRETHOLERESULT_REQ\020\322\354\014\022-\n\'LOBBY2"
    "CLIENT_ATTACKSECRETHOLERESULT_RET\020\323\354\014\022(\n"
    "\"CLIENT2LOBBY_OPENSECRETHOLEBOX_REQ\020\324\354\014\022"
    "(\n\"LOBBY2CLIENT_OPENSECRETHOLEBOX_RET\020\325\354"
    "\014\022(\n\"CLIENT2LOBBY_BUYSECRETHOLEBUFF_REQ\020"
    "\326\354\014\022(\n\"LOBBY2CLIENT_BUYSECRETHOLEBUFF_RE"
    "T\020\327\354\014\022\'\n!CLIENT2LOBBY_CHOOSESECRETHOLE_R"
    "EQ\020\330\354\014\022\'\n!LOBBY2CLIENT_CHOOSESECRETHOLE_"
    "RET\020\331\354\014\022&\n CLIENT2LOBBY_SWEEPSECRETHOLE_"
    "REQ\020\332\354\014\022&\n LOBBY2CLIENT_SWEEPSECRETHOLE_"
    "RET\020\333\354\014\022)\n#CLIENT2LOBBY_BUYSECRETHOLEGOO"
    "DS_REQ\020\334\354\014\022)\n#LOBBY2CLIENT_BUYSECRETHOLE"
    "GOODS_RET\020\335\354\014\022$\n\036CLIENT2LOBBY_BUYSEVENON"
    "EINFOUR\020\336\354\014\022$\n\036LOBBY2CLIENT_BUYSEVENONEI"
    "NFOUR\020\337\354\014\022)\n#CLIENT2LOBBY_BUYSEVENONEINF"
    "OUR_SELF\020\340\354\014\022)\n#LOBBY2CLIENT_BUYSEVENONE"
    "INFOUR_SELF\020\341\354\014\022\037\n\031LOBBY2CENTER_AUCTION_"
    "SELF\020\342\354\014\022#\n\035LOBBY2CENTER_BUY_AUCTION_SEL"
    "F\020\343\354\014\022#\n\035CENTER2LOBBY_BUY_AUCTION_SELF\020\344"
    "\354\014\022 \n\032LOBBY2CENTER_GET_LIST_SELF\020\346\354\014\022 \n\032"
    "CENTER2LOBBY_GET_LIST_SELF\020\347\354\014\022#\n\035CLIENT"
    "2LOBBY_BUY_AUCTION_SELF\020\350\354\014\022 \n\032CLIENT2LO"
    "BBY_GET_LIST_SELF\020\351\354\014\022#\n\035LOBBY2CLIENT_BU"
    "Y_AUCTION_SELF\020\352\354\014\022 \n\032LOBBY2CLIENT_GET_L"
    "IST_SELF\020\353\354\014\022#\n\035CENTER2LOBBY_AUCTION_END"
    "_SELF\020\354\354\014\022 \n\032LOBBY2CENTER_CLEAN_AUCTION\020"
    "\355\354\014\022*\n$LOBBY2CENTER_GETGLOBALSERVERRANK_"
    "REQ\020\356\354\014\022*\n$CENTER2LOBBY_GETGLOBALSERVERR"
    "ANK_RET\020\357\354\014\022*\n$CLIENT2LOBBY_GETGLOBALSER"
    "VERRANK_REQ\020\360\354\014\022*\n$LOBBY2CLIENT_GETGLOBA"
    "LSERVERRANK_RET\020\361\354\014\022-\n\'LOBBY2CENTER_PLAY"
    "ERGLOBALSERVERRANK_NTF\020\362\354\014\022\"\n\034CLIENT2LOB"
    "BY_UPDATETITLE_REQ\020\363\354\014\022\"\n\034LOBBY2CLIENT_U"
    "PDATETITLE_RET\020\364\354\014\022\"\n\034CLIENT2LOBBY_GETHE"
    "RORANK_REQ\020\366\354\014\022\"\n\034LOBBY2CLIENT_GETHERORA"
    "NK_RET\020\367\354\014\022#\n\035LOBBY2CLIENT_FRIENDONLINE_"
    "NTF\020\370\354\014\022#\n\035LOBBY2CLIENT_RETURNSYSTEM_NTF"
    "\020\200\355\014\022*\n$CLIENT2LOBBY_GETRETURNTASKREWARD"
    "_REQ\020\201\355\014\022*\n$LOBBY2CLIENT_GETRETURNTASKRE"
    "WARD_RET\020\202\355\014\022\'\n!LOBBY2CLIENT_UPDATERETUR"
    "NTASK_RET\020\203\355\014\022$\n\036CLIENT2LOBBY_DOACTIVITY"
    "OPT_REQ\020\212\355\014\022$\n\036LOBBY2CLIENT_DOACTIVITYOP"
    "T_RET\020\213\355\014\022-\n\'CLIENT2LOBBY_GETPLAYERTERRI"
    "TORYINFO_REQ\020\224\355\014\0225\n/CLIENT2LOBBY_GETPLAY"
    "ERTERRITORYBATTLEPLAYER_REQ\020\225\355\014\0222\n,CLIEN"
    "T2LOBBY_ATTACKPLAYERTERRITORYRESULT_REQ\020"
    "\226\355\014\022,\n&CLIENT2LOBBY_PATROLPLAYERTERRITOR"
    "Y_REQ\020\227\355\014\022/\n)CLIENT2LOBBY_GETPLAYERTERRI"
    "TORYREWARD_REQ\020\230\355\014\022-\n\'CLIENT2LOBBY_GETFR"
    "IENDTERRITORYLIST_REQ\020\231\355\014\022-\n\'CLIENT2LOBB"
    "Y_GETFRIENDTERRITORYINFO_REQ\020\232\355\014\022.\n(CLIE"
    "NT2LOBBY_SUPPRESSFRIENDTERRITORY_REQ\020\233\355\014"
    "\022\'\n!CLIENT2LOBBY_UPTERRITORYSKILL_REQ\020\234\355"
    "\014\022\'\n!LOBBY2CLIENT_UPTERRITORYSKILL_RET\020\235"
    "\355\014\022-\n\'LOBBY2CLIENT_GETPLAYERTERRITORYINF"
    "O_RET\020\236\355\014\0225\n/LOBBY2CLIENT_GETPLAYERTERRI"
    "TORYBATTLEPLAYER_RET\020\237\355\014\0222\n,LOBBY2CLIENT"
    "_ATTACKPLAYERTERRITORYRESULT_RET\020\240\355\014\022,\n&"
    "LOBBY2CLIENT_PATROLPLAYERTERRITORY_RET\020\241"
    "\355\014\022/\n)LOBBY2CLIENT_GETPLAYERTERRITORYREW"
    "ARD_RET\020\242\355\014\022-\n\'LOBBY2CLIENT_GETFRIENDTER"
    "RITORYLIST_RET\020\243\355\014\022-\n\'LOBBY2CLIENT_GETFR"
    "IENDTERRITORYINFO_RET\020\244\355\014\022.\n(LOBBY2CLIEN"
    "T_SUPPRESSRRIENDTERRITORY_RET\020\245\355\014\022/\n)LOB"
    "BY2CLIENT_PLAYERTERRITORYRRIOTDONE_NTF\020\246"
    "\355\014\022/\n)LOBBY2CLIENT_PLAYERTERRITORYRNEWEV"
    "ENT_NTF\020\247\355\014\022,\n&CLIENT2LOBBY_ATTACKSECRET"
    "HOLEELITE_REQ\020\250\355\014\022,\n&LOBBY2CLIENT_ATTACK"
    "SECRETHOLEELITE_RET\020\251\355\014\0222\n,CLIENT2LOBBY_"
    "ATTACKSECRETHOLERESULTELITE_REQ\020\252\355\014\0222\n,L"
    "OBBY2CLIENT_ATTACKSECRETHOLERESULTELITE_"
    "RET\020\253\355\014\022 \n\032CLIENT2LOBBY_HERO_WAKE_REQ\020\254\355"
    "\014\022 \n\032LOBBY2CLIENT_HERO_WAKE_RET\020\255\355\014\022$\n\036C"
    "LIENT2LOBBY_SYN_WAKEEQUIP_REQ\020\256\355\014\022$\n\036LOB"
    "BY2CLIENT_SYN_WAKEEQUIP_RET\020\257\355\014\022\037\n\031CLIEN"
    "T2LOBBY_MARKITEM_REQ\020\260\355\014\022\037\n\031LOBBY2CLIENT"
    "_MARKITEM_RET\020\261\355\014\022&\n CLIENT2LOBBY_WEAR_W"
    "AKE_EQUIP_REQ\020\262\355\014\022&\n LOBBY2CLIENT_WEAR_W"
    "AKE_EQUIP_RET\020\263\355\014\022%\n\037LOBBY2CLIENT_HEROWA"
    "KENOTICE_NTF\020\264\355\014\022%\n\037CLIENT2LOBBY_UPGRADE"
    "DIAGRAM_REQ\020\265\355\014\022%\n\037LOBBY2CLIENT_UPGRADED"
    "IAGRAM_RET\020\266\355\014\022-\n\'CLIENT2LOBBY_DIAGRAMAC"
    "HIEVEACTIVATE_REQ\020\267\355\014\022-\n\'LOBBY2CLIENT_DI"
    "AGRAMACHIEVEACTIVATE_RET\020\270\355\014\022&\n CLIENT2L"
    "OBBY_GENERALEXERCISE_REQ\020\271\355\014\022&\n LOBBY2CL"
    "IENT_GENERALEXERCISE_RET\020\272\355\014\022,\n&CLIENT2L"
    "OBBY_GENERALEXERCISERESULT_REQ\020\273\355\014\022,\n&LO"
    "BBY2CLIENT_GENERALEXERCISERESULT_RET\020\274\355\014"
    "\022\"\n\034CLIENT2LOBBY_DIAGRAMLIST_REQ\020\275\355\014\022\"\n\034"
    "LOBBY2CLIENT_DIAGRAMLIST_RET\020\276\355\014\022!\n\033CLIE"
    "NT2LOBBY_ENTERGHOST_REQ\020\277\355\014\022!\n\033LOBBY2CLI"
    "ENT_ENTERGHOST_RET\020\300\355\014\022*\n$CLIENT2LOBBY_R"
    "EFRESHEXERCISEBOSS_REQ\020\301\355\014\022*\n$LOBBY2CLIE"
    "NT_REFRESHEXERCISEBOSS_RET\020\302\355\014\022\"\n\034LOBBY2"
    "CLIENT_GHOSTACTIVE_NTF\020\303\355\014\022&\n LOBBY2CLIE"
    "NT_REFRESHEPICBOSS_NTF\020\304\355\014\022 \n\032CLIENT2LOB"
    "BY_VIEWGHOST_REQ\020\311\355\014\022 \n\032LOBBY2CLIENT_VIE"
    "WGHOST_RET\020\312\355\014\022#\n\035CLIENT2LOBBY_BATCHRESO"
    "LVE_REQ\020\313\355\014\022#\n\035LOBBY2CLIENT_BATCHRESOLVE"
    "_RET\020\314\355\014\022%\n\037CLIENT2LOBBY_CANRESOLVELIST_"
    "REQ\020\315\355\014\022%\n\037LOBBY2CLIENT_CANRESOLVELIST_R"
    "ET\020\316\355\014\022&\n LOBBY2CLIENT_NEWHANDPROGRESS_R"
    "ET\020\214\356\014\022!\n\033CLIENT2LOBBY_SEVENGIFTS_REQ\020\220\356"
    "\014\022!\n\033LOBBY2CLIENT_SEVENGIFTS_RET\020\221\356\014\022!\n\033"
    "LOBBY2CLIENT_SEVENGIFTS_NTF\020\222\356\014\022#\n\035CLIEN"
    "T2LOBBY_ONLINEREWARD_REQ\020\223\356\014\022#\n\035LOBBY2CL"
    "IENT_ONLINEREWARD_RET\020\224\356\014\022#\n\035LOBBY2CLIEN"
    "T_ONLINEREWARD_NTF\020\225\356\014\022$\n\036CLIENT2LOBBY_O"
    "NLINEACCCOIN_REQ\020\226\356\014\022$\n\036LOBBY2CLIENT_ONL"
    "INEACCCOIN_RET\020\227\356\014\022$\n\036CLIENT2LOBBY_GETOF"
    "FLINEEXP_REQ\020\235\356\014\022$\n\036LOBBY2CLIENT_GETOFFL"
    "INEEXP_RET\020\236\356\014\022#\n\035LOBBY2CLIENT_OFFLINEST"
    "ATE_NTF\020\237\356\014\022(\n\"CLIENT2LOBBY_GETRETRIEVER"
    "EWARD_REQ\020\240\356\014\022(\n\"LOBBY2CLIENT_GETRETRIEV"
    "EREWARD_RET\020\241\356\014\022+\n%CLIENT2LOBBY_GETALLRE"
    "TRIEVEREWARD_REQ\020\242\356\014\022+\n%LOBBY2CLIENT_GET"
    "ALLRETRIEVEREWARD_RET\020\243\356\014\022$\n\036LOBBY2CLIEN"
    "T_RETRIEVESTATE_NTF\020\244\356\014\022#\n\035LOBBY2CLIENT_"
    "CHATPASSWORD_NTF\020\245\356\014\022&\n CLIENT2LOBBY_CHA"
    "TPASSWORDACT_REQ\020\246\356\014\022&\n LOBBY2CLIENT_CHA"
    "TPASSWORDACT_RET\020\247\356\014\022\034\n\026CLIENT2LOBBY_DEB"
    "UG_REQ\020\252\356\014\022\034\n\026LOBBY2CLIENT_DEBUG_RET\020\253\356\014"
    "\022\'\n!CLIENT2LOBBY_ONEKEYRESETSWEEP_REQ\020\254\356"
    "\014\022\'\n!LOBBY2CLIENT_ONEKEYRESETSWEEP_RET\020\255"
    "\356\014\022)\n#LOBBY2CLIENT_MERGESERVERCOMPARE_NT"
    "F\020\256\356\014\0220\n*CLIENT2LOBBY_GETMERGESERVERCOMP"
    "AREINFO_REQ\020\257\356\014\0220\n*LOBBY2CLIENT_GETMERGE"
    "SERVERCOMPAREINFO_RET\020\260\356\014\0222\n,CLIENT2LOBB"
    "Y_GETMERGESERVERCOMPAREREWARD_REQ\020\261\356\014\0222\n"
    ",LOBBY2CLIENT_GETMERGESERVERCOMPAREREWAR"
    "D_RET\020\262\356\014\022\"\n\034CLIENT2LOBBY_CONSUMERANK_RE"
    "Q\020\263\356\014\022\"\n\034LOBBY2CLIENT_CONSUMERANK_RET\020\264\356"
    "\014\022#\n\035CLIENT2LOBBY_REPLACEEQUIP_REQ\020\265\356\014\022#"
    "\n\035LOBBY2CLIENT_REPLACEEQUIP_RET\020\266\356\014\022$\n\036C"
    "LIENT2LOBBY_RECLAIMGROUND_REQ\020\267\356\014\022$\n\036LOB"
    "BY2CLIENT_RECLAIMGROUND_RET\020\270\356\014\022\"\n\034CLIEN"
    "T2LOBBY_PLANTGROUND_REQ\020\271\356\014\022\"\n\034LOBBY2CLI"
    "ENT_PLANTGROUND_RET\020\272\356\014\022\"\n\034CLIENT2LOBBY_"
    "WATERGROUND_REQ\020\273\356\014\022\"\n\034LOBBY2CLIENT_WATE"
    "RGROUND_RET\020\274\356\014\022$\n\036CLIENT2LOBBY_HARVESTG"
    "ROUND_REQ\020\275\356\014\022$\n\036LOBBY2CLIENT_HARVESTGRO"
    "UND_RET\020\276\356\014\022\037\n\031LOBBY2CLIENT_FARMINFO_NTF"
    "\020\277\356\014\022$\n\036CLIENT2LOBBY_ONEKEYHARVEST_REQ\020\300"
    "\356\014\022$\n\036LOBBY2CLIENT_ONEKEYHARVEST_RET\020\301\356\014"
    "\022&\n CLIENT2LOBBY_OTHERPLAYERFARM_REQ\020\302\356\014"
    "\022&\n LOBBY2CLIENT_OTHERPLAYERFARM_RET\020\303\356\014"
    "\022\037\n\031CLIENT2LOBBY_ADDWATER_REQ\020\304\356\014\022\037\n\031LOB"
    "BY2CLIENT_ADDWATER_RET\020\305\356\014\022\036\n\030CLIENT2LOB"
    "BY_THINKTO_REQ\020\306\356\014\022\036\n\030LOBBY2CLIENT_THINK"
    "TO_RET\020\307\356\014\022!\n\033LOBBY2CLIENT_FARMNOTICE_NT"
    "F\020\310\356\014\022&\n CLIENT2LOBBY_RIPEIMMEDIATELY_RE"
    "Q\020\311\356\014\022&\n LOBBY2CLIENT_RIPEIMMEDIATELY_RE"
    "T\020\312\356\014\022)\n#CLIENT2LOBBY_ALLRIPEIMMEDIATELY"
    "_REQ\020\313\356\014\022)\n#LOBBY2CLIENT_ALLRIPEIMMEDIAT"
    "ELY_RET\020\314\356\014\022\"\n\034CLIENT2LOBBY_ONEKEYPLANT_"
    "REQ\020\315\356\014\022\"\n\034LOBBY2CLIENT_ONEKEYPLANT_RET\020"
    "\316\356\014\022 \n\032CLIENT2LOBBY_AUTOPLANT_REQ\020\317\356\014\022 \n"
    "\032LOBBY2CLIENT_AUTOPLANT_RET\020\320\356\014\022\036\n\030CLIEN"
    "T2LOBBY_UPWATER_REQ\020\321\356\014\022\036\n\030LOBBY2CLIENT_"
    "UPWATER_RET\020\322\356\014\022\037\n\031LOBBY2CLIENT_FARMWELL"
    "_NTF\020\323\356\014\022%\n\037CLIENT2LOBBY_UPDATENATIONAL_"
    "REQ\020\324\356\014\022%\n\037LOBBY2CLIENT_UPDATENATIONAL_R"
    "ET\020\325\356\014\022&\n CLIENT2LOBBY_CANCELAUTOPLANT_R"
    "EQ\020\326\356\014\022&\n LOBBY2CLIENT_CANCELAUTOPLANT_R"
    "ET\020\327\356\014\022\"\n\034CLIENT2LOBBY_CANADDWATER_REQ\020\330"
    "\356\014\022\"\n\034LOBBY2CLIENT_CANADDWATER_RET\020\331\356\014\022&"
    "\n CLIENT2LOBBY_UPDATESIGNATURE_REQ\020\332\356\014\022&"
    "\n LOBBY2CLIENT_UPDATESIGNATURE_RET\020\333\356\014\022!"
    "\n\033LOBBY2DB_LOAD_CHARACTER_REQ\020\340\247\022\022#\n\035LOB"
    "BY2DB_CREATE_CHARACTER_REQ\020\341\247\022\022!\n\033LOBBY2"
    "DB_SAVE_CHARACTER_REQ\020\342\247\022\022\033\n\025LOBBY2DB_SA"
    "VE_BAG_REQ\020\343\247\022\022\033\n\025LOBBY2DB_LOAD_BAG_REQ\020"
    "\344\247\022\022\035\n\027LOBBY2DB_ADDDIAMOND_REQ\020\345\247\022\022 \n\032LO"
    "BBY2DB_LOAD_CHARLIST_REQ\020\346\247\022\022$\n\036LOBBY2DB"
    "_CHANGE_NAME_CHECK_REQ\020\347\247\022\022#\n\035LOBBY2DB_U"
    "PDATE_SUPREMEHOTBOX\020\350\247\022\022(\n\"LOBBY2DB_GET_"
    "ADVANCED_CHARINFO_REQ\020\351\247\022\022*\n$LOBBY2DB_SA"
    "VE_ADVANCED_CHARACTER_REQ\020\352\247\022\022 \n\032LOBBY2D"
    "B_UPDATE_ARENA_RANK\020\354\247\022\022\037\n\031LOBBY2DB_UPDA"
    "TE_ARENA_LOG\020\355\247\022\022\033\n\025LOBBY2DB_OFFLINE_MAI"
    "L\020\356\247\022\022\035\n\027LOBBY2DB_CHECKTOKEN_REQ\020\357\247\022\022\025\n\017"
    "LOBBY2DB_SERVER\020\360\247\022\022\033\n\025LOBBY2DB_APPLY_FR"
    "IEND\020\361\247\022\022\031\n\023LOBBY2DB_ADD_FRIEND\020\362\247\022\022\031\n\023L"
    "OBBY2DB_DEL_FRIEND\020\363\247\022\022\031\n\023LOBBY2DB_SENDE"
    "NERGY\020\364\247\022\022\033\n\025LOBBY2DB_PURCHASEINFO\020\365\247\022\022$"
    "\n\036LOBBY2DB_GET_TARGET_FRIENDINFO\020\366\247\022\022\036\n\030"
    "LOBBY2DB_LOADACTIVITYREQ\020\222\250\022\022 \n\032LOBBY2DB"
    "_UPDATEACTIVITYREQ\020\223\250\022\022\032\n\024LOBBY2DB_LOADR"
    "ANKREQ\020\234\250\022\022\034\n\026LOBBY2DB_UPDATERANKREQ\020\235\250\022"
    "\022\033\n\025LOBBY2DB_CLEARRANKREQ\020\236\250\022\022\033\n\025LOBBY2D"
    "B_LOADARENAREQ\020\246\250\022\022\035\n\027LOBBY2DB_UPDATEARE"
    "NAREQ\020\247\250\022\022$\n\036LOBBY2DB_LOADSERVERCOMPARE_"
    "REQ\020\250\250\022\022&\n LOBBY2DB_UPDATESERVERCOMPARE_"
    "REQ\020\251\250\022\022%\n\037LOBBY2DB_CLEARSERVERCOMPARE_R"
    "EQ\020\252\250\022\022\"\n\034LOBBY2DB_CLEARPLAYERRANK_REQ\020\253"
    "\250\022\022!\n\033DB2LOBBY_LOAD_CHARACTER_RET\020\260\256\025\022#\n"
    "\035DB2LOBBY_CREATE_CHARACTER_RET\020\261\256\025\022!\n\033DB"
    "2LOBBY_SAVE_CHARACTER_RET\020\262\256\025\022\033\n\025DB2LOBB"
    "Y_SAVE_BAG_RET\020\263\256\025\022\033\n\025DB2LOBBY_LOAD_BAG_"
    "RET\020\264\256\025\022 \n\032DB2LOBBY_LOAD_CHARLIST_RET\020\265\256"
    "\025\022$\n\036DB2LOBBY_CHANGE_NAME_CHECK_RET\020\266\256\025\022"
    " \n\032DB2LOBBY_SUPREMEHOTBOX_NTF\020\267\256\025\022(\n\"DB2"
    "LOBBY_GET_ADVANCED_CHARINFO_RET\020\270\256\025\022*\n$D"
    "B2LOBBY_SAVE_ADVANCED_CHARACTER_RET\020\271\256\025\022"
    "\035\n\027DB2LOBBY_CHECKTOKEN_RET\020\272\256\025\022\025\n\017DB2LOB"
    "BY_SERVER\020\273\256\025\022\033\n\025DB2LOBBY_APPLY_FRIEND\020\274"
    "\256\025\022\031\n\023DB2LOBBY_ADD_FRIEND\020\275\256\025\022\031\n\023DB2LOBB"
    "Y_DEL_FRIEND\020\276\256\025\022\023\n\rDB2LOBBY_SHOP\020\277\256\025\022(\n"
    "\"DB2LOBBY_GET_TARGET_FRIENDINFO_RET\020\300\256\025\022"
    "\036\n\030DB2LOBBY_LOADACTIVITYRET\020\342\256\025\022\032\n\024DB2LO"
    "BBY_LOADRANKRET\020\354\256\025\022\033\n\025DB2LOBBY_LOADAREN"
    "ARET\020\366\256\025\022$\n\036DB2LOBBY_LOADSERVERCOMPARE_R"
    "ET\020\367\256\025\022\034\n\026LOBBY2DB_LOADGUILD_REQ\020\200\257\025\022\034\n\026"
    "DB2LOBBY_GUILDINFO_RET\020\201\257\025\022\037\n\031DB2LOBBY_G"
    "UILDPlAYERS_RET\020\202\257\025\022\036\n\030DB2LOBBY_GUILDAPP"
    "LYS_RET\020\203\257\025\022\"\n\034LOBBY2DB_UPDATEGUILDINFO_"
    "REQ\020\205\257\025\022$\n\036LOBBY2DB_UPDATEGUILDPLAYER_RE"
    "Q\020\206\257\025\022#\n\035LOBBY2DB_UPDATEGUILDAPPLY_REQ\020\207"
    "\257\025\022$\n\036LOBBY2DB_UPDATEGUILDRITUAL_REQ\020\210\257\025"
    "\022$\n\036LOBBY2DB_UPDATEGUILDNEWDAY_REQ\020\211\257\025\022\035"
    "\n\027LOBBY2DB_LOAD_WORLD_REQ\020\212\257\025\022\035\n\027DB2LOBB"
    "Y_LOAD_WORLD_RET\020\213\257\025\022\035\n\027LOBBY2DB_LOAD_RO"
    "BOT_REQ\020\214\257\025\022\035\n\027DB2LOBBY_LOAD_ROBOT_RET\020\215"
    "\257\025\022\037\n\031LOBBY2DB_CREATE_ROBOT_REQ\020\216\257\025\022\037\n\031D"
    "B2LOBBY_CREATE_ROBOT_RET\020\217\257\025\022\035\n\027LOBBY2DB"
    "_SAVE_ROBOT_REQ\020\220\257\025\022\035\n\027DB2LOBBY_SAVE_ROB"
    "OT_RET\020\221\257\025\022\'\n!LOBBY2DB_GET_RECOMMAND_FRI"
    "END_REQ\020\300\374\025\022\'\n!DB2LOBBY_GET_RECOMMAND_FR"
    "IEND_RET\020\301\374\025\022\036\n\030LOBBY2DB_SAVE_GLOBAL_REQ"
    "\020\302\374\025\022\031\n\023DB2LOBBY_GLOBAL_NTF\020\303\374\025\022 \n\032LOBBY"
    "2DB_LOAD_TREASURE_REQ\020\304\374\025\022 \n\032DB2LOBBY_LO"
    "AD_TREASURE_RET\020\305\374\025\022\037\n\031LOBBY2DB_LOADOFFL"
    "INE_MAIL\020\306\374\025\022\037\n\031DB2LOBBY_LOADOFFLINE_MAI"
    "L\020\307\374\025\022&\n LOBBY2DB_GET_TARGET_USERINFO_RE"
    "Q\020\340\230\027\022&\n DB2LOBBY_GET_TARGET_USERINFO_RE"
    "T\020\341\230\027\022%\n\037LOBBY2DIR_LASTLOGINSERVERID_NTF"
    "\020\360\346\027\022\034\n\026LOBBY2DIR_UPDATE_STATE\020\361\346\027\022\017\n\tS2"
    "N_READY\020\201\265\030\022\021\n\013S2N_STARTED\020\202\265\030\022\021\n\013S2N_ST"
    "OPPED\020\203\265\030\022\034\n\026S2N_SHELL_COMMAND_OVER\020\204\265\030\022"
    "\027\n\021N2S_UPDATE_CONFIG\020\205\265\030\022\017\n\tN2S_START\020\206\265"
    "\030\022\016\n\010N2S_STOP\020\207\265\030\022\027\n\021N2S_SHELL_COMMAND\020\210"
    "\265\030\022\032\n\024HNET_TRANSFER_PACKET\020\240\302\036\022\033\n\025H2NET_"
    "SETUP_LISTENERS\020\241\302\036\022\031\n\023H2NET_CLOSE_NETWO"
    "RK\020\242\302\036\022\023\n\rH2NET_CONNECT\020\243\302\036\022\024\n\016NET2H_ACC"
    "EPTED\020\244\302\036\022\025\n\017NET2H_CONNECTED\020\245\302\036\022\020\n\nNET2"
    "H_LOST\020\246\302\036\022\027\n\021NET2H_CONNECTFAIL\020\247\302\036\022\031\n\023N"
    "ET2H_LISTEN_FAILED\020\250\302\036\022\020\n\nKEEP_ALIVE\020\301\317$"
    "\022\024\n\016KEEP_ALIVE_ACK\020\302\317$\022\021\n\013PACKET_PACK\020\303\317"
    "$\022\021\n\013MONITOR_CMD\020\305\317$\022\030\n\022MONITOR_CMD_RESU"
    "LT\020\306\317$\022\014\n\006RS_CMD\020\310\317$\022\017\n\tRS_PROMPT\020\311\317$\022\027\n"
    "\021ALL2LOG_ALLOC_LOG\020\341\334*\022\027\n\021ALL2LOG_BEGIN_"
    "LOG\020\342\334*\022\027\n\021ALL2LOG_WRITE_LOG\020\343\334*\022\025\n\017ALL2"
    "LOG_END_LOG\020\344\334*\022\030\n\022LOBBY2REPORT_LOGIN\020\345\334"
    "*\022\033\n\025LOBBY2REPORT_REGISTER\020\346\334*\022\031\n\023LOBBY2"
    "REPORT_ACCEPT\020\347\334*\022\031\n\023LOBBY2REPORT_INVITE"
    "\020\350\334*\022\032\n\024LOBBY2REPORT_CONSUME\020\351\334*\022\033\n\025LOBB"
    "Y2REPORT_RECHARGE\020\352\334*\022\027\n\021LOBBY2REPORT_QU"
    "IT\020\353\334*\022\027\n\021LOG2ALL_ALLOC_LOG\020\354\334*\022\027\n\021LOG2A"
    "LL_BEGIN_LOG\020\355\334*\022\027\n\021LOG2ALL_WRITE_LOG\020\356\334"
    "*\022\025\n\017LOG2ALL_END_LOG\020\357\334*\022\031\n\023CLIENT2LOBBY"
    "_GM_CMD\020\200\3520\022\031\n\023LOBBY2CLIENT_GM_CMD\020\201\3520\022!"
    "\n\033LOBBY2CENTER_SERVERINFO_NTF\020\240\3676\022&\n LOB"
    "BY2CENTER_PLAYERTURNTABLE_NTF\020\241\3676\022\'\n!LOB"
    "BY2CENTER_GETTURNTABLERANK_REQ\020\242\3676\022\'\n!CE"
    "NTER2LOBBY_GETTURNTABLERANK_RET\020\243\3676\022$\n\036L"
    "OBBY2CENTER_SERVERWARCONF_NTF\020\244\3676\022\036\n\030LOB"
    "BY2CENTER_SETTIME_NTF\020\245\3676\022!\n\033LOBBY2CENTE"
    "R_SERVERCONF_NTF\020\246\3676\022!\n\033LOBBY2CENTER_UPD"
    "ATERANK_NTF\020\247\3676\022\036\n\030LOBBY2CENTER_GETRANK_"
    "REQ\020\250\3676\022\036\n\030CENTER2LOBBY_GETRANK_RET\020\251\3676\022"
    "\'\n!LOBBY2CENTER_CLOSECONSUMERANK_NTF\020\252\3676"
    "\022(\n\"CENTER2LOBBY_CONSUMERANKREWARD_NTF\020\253"
    "\3676*\255\001\n\010ChatType\022\025\n\021CHAT_TYPE_PRIVATE\020\001\022\024"
    "\n\020CHAT_TYPE_SYSTEM\020\002\022\030\n\024CHAT_TYPE_PLAYER"
    "ROOM\020\003\022\030\n\024CHAT_TYPE_COMMONCHAT\020\004\022\024\n\020CHAT"
    "_TYPE_FAMILY\020\005\022\023\n\017CHAT_TYPE_MARRY\020\006\022\025\n\021C"
    "HAT_TYPE_BIGHORN\020\007*\266\003\n\020eItemUseRestrict\022"
    "\031\n\025eItemUseRestrict_None\020\000\022\032\n\026eItemUseRe"
    "strict_Level\020\001\022\033\n\027eItemUseRestrict_Effec"
    "t\020\002\022\030\n\024eItemUseRestrict_Vip\020\003\022\033\n\027eItemUs"
    "eRestrict_Gender\020\004\022\037\n\033eItemUseRestrict_G"
    "uildLevel\020\005\022\036\n\032eItemUseRestrict_ArenaRan"
    "k\020\006\022\037\n\033eItemUseRestrict_CrusadeMax\020\007\022\037\n\033"
    "eItemUseRestrict_SecretHole\020\010\022\034\n\030eItemUs"
    "eRestrict_Diagram\020\t\022\034\n\030eItemUseRestrict_"
    "MapStar\020\n\022\037\n\033eItemUseRestrict_DiamonCost"
    "\020\013\022\035\n\031eItemUseRestrict_Recharge\020\014\022\030\n\024eIt"
    "emUseRestrict_Max\020\r*\363\001\n\020RetrieveActivity"
    "\022\031\n\025RetrieveActivity_None\020\000\022\036\n\032RetrieveA"
    "ctivity_RebelBoss\020\001\022\034\n\030RetrieveActivity_"
    "Crusade\020\002\022\030\n\024RetrieveActivity_Rob\020\003\022\032\n\026R"
    "etrieveActivity_Arena\020\004\022\032\n\026RetrieveActiv"
    "ity_Ghost\020\005\022\032\n\026RetrieveActivity_Daily\020\006\022"
    "\030\n\024RetrieveActivity_Max\020\007*\333\020\n\014eRefershTy"
    "pe\022\032\n\026ePriceType_GeneralShop\020\000\022\030\n\024ePrice"
    "Type_RebelShop\020\001\022\030\n\024ePriceType_BlackShop"
    "\020\002\022\031\n\025ePriceType_SportsShop\020\003\022\030\n\024ePriceT"
    "ype_GuildShop\020\004\022\032\n\026ePriceType_CrusadeSho"
    "p\020\005\022!\n\035ePriceType_InterplanetaryShop\020\006\022\027"
    "\n\023ePriceType_Treasure\020\007\022\026\n\022ePriceType_Co"
    "nquer\020\010\022\024\n\020ePriceType_Elite\020\t\022\031\n\025ePriceT"
    "ype_ChangeName\020\n\022\032\n\026ePriceType_ChangePho"
    "to\020\013\022\034\n\030ePriceType_GainTreasures\020\014\022\027\n\023eP"
    "riceType_BuyToken\020\r\022\027\n\023ePriceType_BuySki"
    "ll\020\016\022\031\n\025ePriceType_ArenaTimes\020\017\022\031\n\025ePric"
    "eType_ResetArena\020\020\022\025\n\021ePriceType_Signin\020"
    "\021\022\033\n\027ePriceType_FriendEnergy\020\022\022\035\n\031ePrice"
    "Type_SourceMapTimes\020\023\022\"\n\036ePriceType_Atta"
    "ckGuildMapTimes\020\024\022\032\n\026ePriceType_NoticeTi"
    "mes\020\025\022%\n!ePriceType_SuppressTerritoryTim"
    "es\020\026\022\"\n\036ePriceType_DailyDiamonBoxTimes\020\027"
    "\022\032\n\026ePriceType_FirstCharge\020\030\022\030\n\024ePriceTy"
    "pe_FailTimes\020\031\022\"\n\036ePriceType_DailyCopper"
    "BoxTimes\020\032\022\034\n\030ePriceType_GuildWarTimes\020\033"
    "\022 \n\034ePriceType_ResetCrusadeTimes\020\034\022\037\n\033eP"
    "riceType_ArenaContinueWin\020\035\022\033\n\027ePriceTyp"
    "e_EpicMapTimes\020\036\022\032\n\026ePriceType_GodMapTim"
    "es\020\037\022\035\n\031ePriceType_TurnTableTimes\020 \022\035\n\031e"
    "PriceType_ServerWarTimes\020!\022 \n\034ePriceType"
    "_ServerWarWinTimes\020\"\022(\n$ePriceType_Serve"
    "rWarFreeRefreshTimes\020#\022\034\n\030ePriceType_Ser"
    "verWarShop\020$\022\035\n\031ePriceType_GlobalMailTim"
    "e\020%\022\025\n\021ePriceType_Charge\020(\022\"\n\036ePriceType"
    "_TombMoveRefreshTime\020)\022\"\n\036ePriceType_Tom"
    "bItemRefreshTime\020*\022!\n\035ePriceType_TombMov"
    "eBuyedTimes\020+\022!\n\035ePriceType_TombItemBuye"
    "dTimes\020,\022\037\n\033ePriceType_STeamSourceTimes\020"
    "-\022\034\n\030ePriceType_STeamWinTimes\020.\022\037\n\033ePric"
    "eType_ServerGlobalShop\020/\022\027\n\023ePriceType_T"
    "ombShop\0200\022\036\n\032ePriceType_SecretHoleTimes\020"
    "1\022\034\n\030ePriceType_SecretHoleBox\0202\022\035\n\031ePric"
    "eType_SecretHoleShop\0203\022\035\n\031ePriceType_Leg"
    "endMapTimes\0204\022\031\n\025ePriceType_ReturnShop\0205"
    "\022\"\n\036ePriceType_DailyAstrologyTimes\0206\022)\n%"
    "ePriceType_AttackGuildMapRecoveryTime\0207\022"
    "#\n\037ePriceType_SecretHoleEliteTimes\0208\022+\n\'"
    "ePriceType_SuppressFriendTerritoryTimes\020"
    "9\022\027\n\023ePriceType_WakeShop\020:\022&\n\"ePriceType"
    "_GeneralShopRecoveryTime\020;\022\024\n\020ePriceType"
    "_Ghost\020<\022\030\n\024ePriceType_Adventure\020=\022\027\n\023eP"
    "riceType_Exercise\020>\022\035\n\031ePriceType_Attack"
    "Exercise\020\?\022#\n\037ePriceType_WakeShopRecover"
    "yTime\020@\022\035\n\031ePriceType_NormalMapReset\020A\022\036"
    "\n\032ePriceType_MonthSignInFill\020B\022\030\n\024ePrice"
    "Type_HelpWater\020C\022\034\n\030ePriceType_BeHelpedW"
    "ater\020D\022\030\n\024ePriceType_AutoPlant\020E\022 \n\034ePri"
    "ceType_WaterRecoveryTime\020F\022\023\n\016ePriceType"
    "_Max\020\200\001*\267\001\n\nSourceType\022\026\n\022SourceType_Inv"
    "alid\020\000\022\023\n\017SourceType_Coin\020\001\022\023\n\017SourceTyp"
    "e_Item\020\002\022\023\n\017SourceType_Hero\020\003\022\024\n\020SourceT"
    "ype_Equip\020\004\022\023\n\017SourceType_Card\020\005\022\023\n\017Sour"
    "ceType_Seed\020\006\022\022\n\016SourceType_Max\020\007*\340\n\n\010Co"
    "inType\022\020\n\014CoinType_Exp\020e\022\021\n\rCoinType_TiL"
    "i\020f\022\023\n\017CoinType_Copper\020g\022\025\n\021CoinType_Dia"
    "monds\020h\022\024\n\020CoinType_Conquer\020i\022\023\n\017CoinTyp"
    "e_Sports\020j\022\022\n\016CoinType_Guild\020k\022\022\n\016CoinTy"
    "pe_Level\020l\022\023\n\017CoinType_VipExp\020m\022\025\n\021CoinT"
    "ype_VipLevel\020n\022\024\n\020CoinType_TiLiMax\020o\022\025\n\021"
    "CoinType_AvatarId\020p\022\027\n\023CoinType_SkillPoi"
    "nt\020q\022\021\n\rCoinType_Item\020r\022\023\n\017CoinType_Ener"
    "gy\020s\022\032\n\026CoinType_SkillPointMAX\020t\022\031\n\025Coin"
    "Type_PlayerGender\020u\022\026\n\022CoinType_JingliMa"
    "x\020v\022\024\n\020CoinType_HeroExp\020w\022\025\n\021CoinType_He"
    "roSoul\020x\022\025\n\021CoinType_Recharge\020y\022\030\n\024CoinT"
    "ype_BattleValue\020z\022\025\n\021CoinType_Exploits\020{"
    "\022\032\n\026CoinType_RebelArmyFree\020|\022\031\n\025CoinType"
    "_RebelArmyMax\020}\022!\n\035CoinType_DailyDiamond"
    "sConsume\020~\022\030\n\024CoinType_GuildDevote\020\177\022\036\n\031"
    "CoinType_GuildDailyDevote\020\200\001\022\036\n\031CoinType"
    "_GuildTotalDevote\020\201\001\022\033\n\026CoinType_DailyRe"
    "charge\020\202\001\022\033\n\026CoinType_RaidTeamCount\020\203\001\022\027"
    "\n\022CoinType_TaskScore\020\204\001\022\026\n\021CoinType_Guil"
    "dExp\020\205\001\022 \n\033CoinType_GuildTechnologyExp\020\206"
    "\001\022\025\n\020CoinType_Crystal\020\207\001\022\034\n\027CoinType_Ser"
    "verWarHonor\020\210\001\022\034\n\027CoinType_ServerWarScor"
    "e\020\211\001\022\024\n\017CoinType_Charge\020\212\001\022\027\n\022CoinType_T"
    "eamScore\020\213\001\022\027\n\022CoinType_TeamHonor\020\214\001\022\025\n\020"
    "CoinType_Courage\020\215\001\022\033\n\026CoinType_TombMove"
    "Point\020\216\001\022\033\n\026CoinType_TombItemPoint\020\217\001\022\026\n"
    "\021CoinType_Souljade\020\220\001\022\030\n\023CoinType_ArenaS"
    "core\020\221\001\022\031\n\024CoinType_ReturnScore\020\222\001\022\033\n\026Co"
    "inType_PatrolMinutes\020\223\001\022\022\n\rCoinType_Wake"
    "\020\224\001\022\032\n\025CoinType_GuildMapHarm\020\225\001\022\031\n\024CoinT"
    "ype_Achievement\020\226\001\022\023\n\016CoinType_Ghost\020\227\001\022"
    "\030\n\023CoinType_Adventures\020\230\001\022\025\n\020CoinType_Di"
    "agram\020\231\001\022\027\n\022CoinType_GuildFame\020\232\001\022\021\n\014Coi"
    "nType_Max\020\233\001*\314\005\n\010ShopType\022\030\n\024ShopType_Ge"
    "neralShop\020\000\022\026\n\022ShopType_RebelShop\020\001\022\026\n\022S"
    "hopType_BlackShop\020\002\022\027\n\023ShopType_SportsSh"
    "op\020\003\022\026\n\022ShopType_GuildShop\020\004\022\030\n\024ShopType"
    "_CrusadeShop\020\005\022\025\n\021ShopType_StarShop\020\006\022\026\n"
    "\022ShopType_ArenaRank\020\007\022\027\n\023ShopType_GuildL"
    "evel\020\010\022\027\n\023ShopType_CrusadeMax\020\t\022\025\n\021ShopT"
    "ype_Crusade2\020\n\022\025\n\021ShopType_Crusade3\020\013\022\026\n"
    "\022ShopType_ServerWar\020\014\022\027\n\023ShopType_Server"
    "Team\020\r\022\034\n\030ShopType_ServerWarGlobal\020\016\022\021\n\r"
    "ShopType_Tomb\020\017\022\027\n\023ShopType_SecretHole\020\020"
    "\022\023\n\017ShopType_Return\020\021\022\030\n\024ShopType_Secret"
    "Hole2\020\022\022\030\n\024ShopType_SecretHole3\020\023\022\030\n\024Sho"
    "pType_SecretHole4\020\024\022\025\n\021ShopType_HeroWake"
    "\020\025\022\033\n\027ShopType_Activity47Shop\020\026\022\022\n\016ShopT"
    "ype_Ghost\020\027\022\027\n\023ShopType_Adventures\020\030\022\030\n\024"
    "ShopType_Adventures2\020\031\022\030\n\024ShopType_Adven"
    "tures3\020\032\022\027\n\023ShopType_BlackShop2\020\033\022\020\n\014Sho"
    "pType_Max\020\034*\354G\n\021emLobby2ClientErr\022\017\n\013L2C"
    "_SUCCESS\020\000\022\017\n\013L2C_DB_LOST\020\001\022\023\n\017L2C_DB_TI"
    "MEDOUT\020\002\022\022\n\016L2C_DB_EXECERR\020\003\022\017\n\013L2C_DB_D"
    "ATA\020\004\022\027\n\023L2C_GOLD_NOT_ENOUGH\020\005\022\027\n\023L2C_CA"
    "SH_NOT_ENOUGH\020\006\022\025\n\021L2C_ITEM_NOT_FIND\020\007\022\032"
    "\n\026L2C_STAMINA_NOT_ENOUGH\020\010\022\026\n\022L2C_VIP_NO"
    "T_ENOUGH\020\t\022\031\n\025L2C_VERSION_NOT_MATCH\020\n\022\023\n"
    "\017L2C_AUTHERN_ERR\020\013\022\033\n\027L2C_LOBBYCREATECHA"
    "R_ERR\020\014\022\030\n\024L2C_DBCREATECHAR_ERR\020\r\022\026\n\022L2C"
    "_PLAYERLOCK_ERR\020\016\022\025\n\021L2C_ROLE_LOGINING\020\017"
    "\022\r\n\tL2C_CDING\020\020\022\r\n\tL2C_QUEUE\020\021\022\022\n\016L2C_HI"
    "RE_LIMIT\020\022\022\024\n\020L2C_BATTLE_ERROR\020\023\022\025\n\021L2C_"
    "NOT_MAIN_HERO\020\024\022\025\n\021L2C_HERO_STAR_MAX\020\025\022\022"
    "\n\016L2C_HERO_EXIST\020\026\022\026\n\022L2C_HERO_LEVEL_MAX"
    "\020\027\022\026\n\022L2C_HERO_NOT_EXIST\020\030\022\031\n\025L2C_HERO_I"
    "N_FORMATION\020\031\022\035\n\031L2C_HERO_FORCE_NOT_ENOU"
    "GH\020\032\022\034\n\030L2C_HERO_DEIFICATION_MAX\020\033\022\032\n\026L2"
    "C_HERO_ALREADY_AWAKE\020\034\022\023\n\017L2C_LEVEL_LIMI"
    "T\020\035\022\025\n\021L2C_DBLOADBAG_ERR\020\036\022\024\n\020L2C_BAG_NO"
    "T_LOAD\020\037\022\026\n\022L2C_BAG_NOT_ENOUGH\020 \022\032\n\026L2C_"
    "LOBBYCREATEBAG_ERR\020!\022\025\n\021L2C_NAME_REPEATE"
    "D\020\"\022\026\n\022L2C_PHOTO_REPEATED\020#\022\024\n\020L2C_SKILL"
    "_LV_MAX\020$\022\030\n\024L2C_SKILL_NOT_ENOUGH\020%\022\026\n\022L"
    "2C_NAME_LEN_ERROR\020&\022\026\n\022L2C_ENTERCOUNT_MA"
    "X\020(\022\023\n\017L2C_ENTERMAP_CD\020)\022\027\n\023L2C_STAR_NOT"
    "_ENOUGH\020*\022\030\n\024L2C_LEVEL_NOT_ENOUGH\020+\022\031\n\025L"
    "2C_BUYMAPTIMES_LIMIT\020,\022\026\n\022L2C_MAP_NOT_PA"
    "SSED\020-\022\026\n\022L2C_TODAY_NOT_OPEN\020.\022\022\n\016L2C_MA"
    "P_PASSED\020/\022\030\n\024L2C_QUEST_NOT_FINISH\0202\022\026\n\022"
    "L2C_QUEST_NOT_FIND\0203\022\030\n\024L2C_QUEST_REWARD"
    "_GOT\0204\022\022\n\016L2C_NOT_ONLINE\0207\022\022\n\016L2C_DIRTY_"
    "WORD\0208\022\023\n\017L2C_NAME_LENGTH\0209\022\031\n\025L2C_OPPON"
    "ENT_FIGHTING\020<\022\030\n\024L2C_ENERY_NOT_ENOUGH\020="
    "\022\030\n\024L2C_ARENA_CANTPKBOSS\020>\022\031\n\025L2C_ARENA_"
    "TIMES_LIMIT\020\?\022\035\n\031L2C_ARENA_RANK_NOT_ENOU"
    "GH\020@\022\027\n\023L2C_ENERGY_ALL_SEND\020E\022\025\n\021L2C_FRI"
    "END_MYSELF\020F\022\026\n\022L2C_ALREADY_FRIEND\020G\022\026\n\022"
    "L2C_FRIEND_NUM_MAX\020H\022\022\n\016L2C_BLACK_LIST\020I"
    "\022\026\n\022L2C_BLACK_LIST_MAX\020J\022\031\n\025L2C_FRIEND_N"
    "OT_EXISTS\020K\022\033\n\027L2C_FRIEND_IS_NOT_APPLY\020L"
    "\022\033\n\027L2C_FRIEND_PARA_UNVALID\020M\022 \n\034L2C_BLA"
    "CK_USER_IS_NOT_FRIEND\020N\022\034\n\030L2C_ALREADY_E"
    "NERGY_LIMIT\020O\022\021\n\rL2C_NO_FRIEND\020P\022\022\n\016L2C_"
    "STRENG_MAX\020Q\022\022\n\016L2C_REFINE_MAX\020R\022\027\n\023L2C_"
    "EQUIP_NOT_FOUND\020S\022\035\n\031L2C_STRENG_DO_NOT_U"
    "PEQUIP\020T\022\025\n\021L2C_EQUIP_ON_HERO\020U\022\035\n\031L2C_R"
    "EFINE_DO_NOT_UPEQUIP\020V\022\021\n\rL2C_GOODS_NOT\020"
    "[\022\023\n\017L2C_LIMIT_ERROR\020\\\022\034\n\030L2C_OTHER_FRIE"
    "ND_NUM_MAX\020]\022\027\n\023L2C_ITEM_NOT_ENOUGH\020d\022\031\n"
    "\025L2C_ITEM_USE_RESTRICT\020e\022\031\n\025L2C_EFFECT_N"
    "OT_ENOUGH\020f\022\024\n\020L2C_GENDER_ERROR\020g\022\027\n\023L2C"
    "_ITEM_CANNOT_USE\020h\022\032\n\026L2C_CRUSADE_SWEEP_"
    "OVER\020j\022\036\n\032L2C_CRUSADE_MAX_NOT_ENOUGH\020k\022\032"
    "\n\026L2C_CRUSADE_ALL_PASSED\020l\022\025\n\021L2C_CRUSAD"
    "E_ERROR\020m\022\037\n\033L2C_PLAYER_LEVEL_NOT_ENOUGH"
    "\020n\022\032\n\026L2C_REWARD_ALREADY_GOT\020o\022 \n\034L2C_EX"
    "PEDITION_CHAPTER_ERROR\020p\022\036\n\032L2C_EXPEDITI"
    "ON_SWEEP_CDING\020q\022\030\n\024L2C_PASSWORD_TIMEOUT"
    "\020r\022\026\n\022L2C_PASSWORD_LIMIT\020s\022\025\n\021L2C_PASSWO"
    "RD_USED\020t\022\026\n\022L2C_PASSWORD_ERROR\020u\022\025\n\021L2C"
    "_CHANNEL_ERROR\020v\022\032\n\026L2C_GIFTCODE_GOT_LIM"
    "IT\020w\022\032\n\026L2C_ACTIVITY_NOT_EXIST\020x\022\033\n\027L2C_"
    "ACTIVITY_NOT_INTIME\020y\022\033\n\027L2C_ACTIVITY_RE"
    "WARD_GOT\020z\022!\n\035L2C_ACTIVITY_VALUE_NOT_ENO"
    "UGH\020{\022\037\n\033L2C_ACTIVITY_CODE_NOT_EXIST\020|\022\035"
    "\n\031L2C_ACTIVITY_REBATE_BUYED\020}\022\037\n\033L2C_ACT"
    "IVITY_RECOMMID_ERROR\020~\022!\n\035L2C_ACTIVITY_R"
    "ECOMMID_NOTSELF\020\177\022\035\n\030L2C_ACTIVITY_DEVICE"
    "_SAME\020\200\001\022\032\n\025L2C_ACTIVITY_CODE_GOT\020\201\001\022 \n\033"
    "L2C_CHAPTER_STAR_NOT_ENOUGH\020\202\001\022\030\n\023L2C_CH"
    "APTER_BOX_GOT\020\203\001\022\037\n\032L2C_SEVENDAY_NOT_COM"
    "PELETE\020\204\001\022\032\n\025L2C_SEVENDAY_NOT_TIME\020\205\001\022\034\n"
    "\027L2C_SEVENDAY_NOT_REMAIN\020\206\001\022\036\n\031L2C_SEVEN"
    "DAY_USER_ALREADY\020\207\001\022!\n\034L2C_REBELARMY_BOS"
    "S_NOT_ALIVE\020\210\001\022!\n\034L2C_REBELARMY_BOSS_ATT"
    "ACKING\020\211\001\022 \n\033L2C_REBELARMY_BOSS_NO_SHARE"
    "\020\212\001\022\"\n\035L2C_REBELARMY_FREE_NOT_ENOUGH\020\213\001\022"
    "\037\n\032L2C_TARGET_USER_NOT_EXISTS\020\214\001\022\021\n\014L2C_"
    "RANK_OUT\020\226\001\022\035\n\030L2C_ACHIEVE_NOT_COMPLETE\020"
    "\233\001\022\031\n\024L2C_ACHIEVE_NOT_SELF\020\234\001\022\024\n\017L2C_ACH"
    "IEVE_GOT\020\235\001\022\022\n\rL2C_CHAT_LOCK\020\240\001\022\025\n\020L2C_C"
    "HAT_TIMEING\020\241\001\022\036\n\031L2C_CHAT_LEVEL_NOT_ENO"
    "UGH\020\242\001\022\035\n\030L2C_GUILD_MAP_NOT_ATTACK\020\243\001\022\035\n"
    "\030L2C_GUILD_MAP_TIME_ERROR\020\244\001\022\037\n\032L2C_GUIL"
    "D_LEVEL_NOT_ENOUGH\020\245\001\022\037\n\032L2C_GUILD_MAP_A"
    "TTACK_LIMIT\020\246\001\022!\n\034L2C_GUILD_MAP_REWARD_J"
    "OINNEW\020\247\001\022\037\n\032L2C_GUILD_MAP_REWARD_OTHER\020"
    "\250\001\022!\n\034L2C_GUILD_MAP_ATTACK_TIMEOUT\020\251\001\022\030\n"
    "\023L2C_GUILD_NOT_EXIST\020\252\001\022\035\n\030L2C_GUILD_JOB"
    "_NOT_ENOUGH\020\253\001\022\034\n\027L2C_GUILD_ALREADY_EXIS"
    "T\020\254\001\022\032\n\025L2C_GUILD_MEMBER_FULL\020\255\001\022\030\n\023L2C_"
    "GUILD_CANT_QUIT\020\256\001\022\037\n\032L2C_GUILD_MEMBER_N"
    "OT_EXIST\020\257\001\022\032\n\025L2C_GUILD_DEPUTY_FULL\020\260\001\022"
    "\031\n\024L2C_GUILD_APPLY_FULL\020\261\001\022\032\n\025L2C_GUILD_"
    "RITUAL_DONE\020\262\001\022\031\n\024L2C_GUILD_REWARD_GOT\020\263"
    "\001\022 \n\033L2C_GUILD_REWARD_NOT_ENOUGH\020\264\001\022\037\n\032L"
    "2C_GUILD_MAP_SELECT_ERROR\020\265\001\022\036\n\031L2C_GUIL"
    "D_MAP_SELECT_DONE\020\266\001\022\031\n\024L2C_GUILD_MAP_PA"
    "SSED\020\267\001\022\030\n\023L2C_GUILD_MAP_ERROR\020\270\001\022\034\n\027L2C"
    "_GUILD_MAP_ATTACKING\020\271\001\022 \n\033L2C_RAID_TEAM"
    "_ALREADY_APPLY\020\272\001\022\035\n\030L2C_RAID_TEAM_IN_RE"
    "QUEST\020\273\001\022\037\n\032L2C_RAID_TEAM_ALREADY_JOIN\020\274"
    "\001\022\035\n\030L2C_RAID_TEAM_NOT_ONLINE\020\275\001\022 \n\033L2C_"
    "RAID_TEAM_LV_NOT_ENOUGH\020\276\001\022\034\n\027L2C_RAID_T"
    "EAM_OPEN_TIME\020\277\001\022!\n\034L2C_RAID_TEAM_ALREAD"
    "Y_CREATE\020\300\001\022\037\n\032L2C_RAID_TEAM_ALREADY_TEA"
    "M\020\301\001\022\035\n\030L2C_RAID_TEAM_NOT_CREATE\020\302\001\022\033\n\026L"
    "2C_RAID_TEAM_NOT_TEAM\020\303\001\022\035\n\030L2C_RAID_TEA"
    "M_NOT_LEADER\020\304\001\022\"\n\035L2C_RAID_TEAM_KICKED_"
    "NOT_TEAM\020\305\001\022$\n\037L2C_RAID_TEAM_NOT_ENOUGH_"
    "NUMBER\020\306\001\022 \n\033L2C_RAID_TEAM_APPLY_UNVALID"
    "\020\307\001\022\026\n\021L2C_MONTHCARD_END\020\310\001\022\032\n\025L2C_MONTH"
    "CARD_ALREADY\020\311\001\022\036\n\031L2C_ONLINETIME_NOT_AR"
    "RIVE\020\312\001\022\034\n\027L2C_ONLINEPRIZE_ALREADY\020\313\001\022\035\n"
    "\030L2C_GETREWARD_NOT_ENOUGH\020\314\001\022\024\n\017L2C_ROB_"
    "BOX_ERR\020\322\001\022\027\n\022L2C_ROB_AVOID_TIME\020\323\001\022\033\n\026L"
    "2C_ROB_DST_AVOID_TIME\020\324\001\022\031\n\024L2C_ROB_ONEK"
    "EY_ERROR\020\325\001\022\027\n\022L2C_NOTICE_TIMEOUT\020\334\001\022\027\n\022"
    "L2C_NOTICE_NO_ITEM\020\335\001\022\031\n\024L2C_NOTICE_ITEM"
    "_OVER\020\336\001\022\030\n\023L2C_NOTICE_ITEM_GOT\020\337\001\022\032\n\025L2"
    "C_NOTICE_ITEM_LIMIT\020\340\001\022!\n\034L2C_GUILD_TERR"
    "ITORY_PATROLED\020\346\001\022\'\n\"L2C_GUILD_TERRITORY"
    "_HERO_PATROLING\020\347\001\022\"\n\035L2C_GUILD_TERRITOR"
    "Y_NOT_EXIST\020\350\001\022%\n L2C_GUILD_TERRITORY_NO"
    "T_FINISHED\020\351\001\022$\n\037L2C_GUILD_TERRITORY_NOT"
    "_RIOTING\020\352\001\022\'\n\"L2C_GUILD_TERRITORY_SUPPR"
    "ESS_LIMIT\020\353\001\022!\n\034L2C_GUILD_TERRITORY_FINI"
    "SHED\020\354\001\022\032\n\025L2C_ITEM_GLOBAL_LIMIT\020\360\001\022\032\n\025L"
    "2C_ITEM_PLAYER_LIMIT\020\361\001\022\030\n\023L2C_ITEM_USED"
    "_LIMIT\020\362\001\022*\n%L2C_GUILD_TECHNOLOGY_LEVEL_"
    "NOT_ENOUGH\020\372\001\022(\n#L2C_GUILD_TECHNOLOGY_EX"
    "P_NOT_ENOUGH\020\373\001\022\035\n\030L2C_GUILD_SKILL_UNLOC"
    "KED\020\374\001\022\033\n\026L2C_GUILD_SKILL_LOCKED\020\375\001\022\036\n\031L"
    "2C_GUILD_WAR_NOT_OPENING\020\376\001\022!\n\034L2C_GUILD"
    "_WAR_ENEMY_SELECTED\020\377\001\022$\n\037L2C_GUILD_WAR_"
    "ENEMY_CANT_SELECT\020\200\002\022#\n\036L2C_GUILD_WAR_EN"
    "EMY_NOT_SELECT\020\201\002\022!\n\034L2C_GUILD_WAR_OPPON"
    "ENT_ERROR\020\202\002\022!\n\034L2C_GUILD_WAR_ATTACK_TIM"
    "EOUT\020\203\002\022\035\n\030L2C_GUILD_WAR_JOIN_ERROR\020\204\002\022\037"
    "\n\032L2C_GUILD_WAR_ATTACK_LIMIT\020\205\002\022\035\n\030L2C_G"
    "UILD_EXP_NOT_ENOUGH\020\206\002\022\031\n\024L2C_MAIL_ITEM_"
    "NOTGOT\020\216\002\022\034\n\027L2C_TOMB_EVENT_NOT_DONE\020\217\002\022"
    "\030\n\023L2C_TOMB_MOVE_LIMIT\020\220\002\022\027\n\022L2C_RAID_TE"
    "AM_FULL\020\254\002\022\030\n\023L2C_BATTLE_NOT_SKIP\020\255\002\022\030\n\023"
    "L2C_HANDBOOK_MAX_LV\020\300\002\022\030\n\023L2C_SWAR_TIME_"
    "ERROR\020\312\002\022\026\n\021L2C_SWAR_REG_DONE\020\313\002\022\025\n\020L2C_"
    "SWAR_NOT_REG\020\314\002\022\026\n\021L2C_SWAR_FIGHTING\020\315\002\022"
    "\026\n\021L2C_SWAR_NO_ENEMY\020\316\002\022\031\n\024L2C_SWAR_ENEM"
    "Y_WINED\020\317\002\022\033\n\026L2C_SWAR_REFRESH_LIMIT\020\320\002\022"
    "\032\n\025L2C_SWAR_ATTACK_LIMIT\020\321\002\022\031\n\024L2C_SWAR_"
    "ENEMY_ERROR\020\322\002\022 \n\033L2C_FRIEND_LEVEL_NOT_E"
    "NGOUH\020\323\002\022\026\n\021L2C_STEAM_IN_TEAM\020\324\002\022\034\n\027L2C_"
    "STEAM_WAITING_EMPTY\020\325\002\022\023\n\016L2C_STEAM_FULL"
    "\020\326\002\022\030\n\023L2C_STEAM_NOT_EXIST\020\327\002\022\031\n\024L2C_STE"
    "AM_NOT_LEADER\020\330\002\022\033\n\026L2C_STEAM_NOT_ALLREA"
    "DY\020\331\002\022\027\n\022L2C_STEAM_NOT_FULL\020\332\002\022\026\n\021L2C_ST"
    "EAM_WAITING\020\333\002\022\031\n\024L2C_STEAM_NOT_INTIME\020\334"
    "\002\022\030\n\023L2C_STEAM_INVITE_CD\020\335\002\022\034\n\027L2C_SECRE"
    "THOLE_SELECTED\020\336\002\022\036\n\031L2C_SECRETHOLE_NOT_"
    "SELECT\020\337\002\022\037\n\032L2C_SECRETHOLE_CANT_SELECT\020"
    "\340\002\022\032\n\025L2C_SECRETHOLE_PASSED\020\341\002\022 \n\033L2C_SE"
    "CRETHOLE_ATTACK_ERROR\020\342\002\022!\n\034L2C_SECRETHO"
    "LE_OPENBOX_ERROR\020\343\002\022!\n\034L2C_SECRETHOLE_OP"
    "ENBOX_LIMIT\020\344\002\022 \n\033L2C_SECRETHOLE_ATTACK_"
    "LIMIT\020\345\002\022$\n\037L2C_SECRETHOLE_STARS_NOT_ENO"
    "UGH\020\346\002\022\036\n\031L2C_SECRETHOLE_GOODS_NULL\020\347\002\022\025"
    "\n\020L2C_AUCTION_OVER\020\350\002\022\034\n\027L2C_AUCTION_TOT"
    "AL_LIMIT\020\351\002\022\032\n\025L2C_AUCTION_ONE_LIMIT\020\352\002\022"
    "$\n\037L2C_SECRETHOLE_FLOOR_NOT_ENOUGH\020\354\002\022\036\n"
    "\031L2C_ARENASCORE_NOT_ENOUGH\020\355\002\022\033\n\026L2C_ARE"
    "NASCORE_ALL_GOT\020\356\002\022\035\n\030L2C_RETURNSYSTEM_N"
    "OTTIME\020\362\002\022\"\n\035L2C_ASTROLOGYLUCKY_NOT_ENOU"
    "GH\020\363\002\022\037\n\032L2C_ASTROLOGYCOUNTRY_ERROR\020\364\002\022\035"
    "\n\030L2C_TERRITORY_NOT_PASSED\020\365\002\022\"\n\035L2C_PLA"
    "YER_TERRITORY_PATROLED\020\366\002\022(\n#L2C_PLAYER_"
    "TERRITORY_HERO_PATROLING\020\367\002\022\033\n\026L2C_TERRI"
    "TORY_NOT_OVER\020\370\002\022\032\n\025L2C_PATROL_NOT_ENOUG"
    "H\020\371\002\022 \n\033L2C_ATTACK_TIMES_NOT_ENOUGH\020\372\002\022$"
    "\n\037L2C_SECRETHOLE_CANNOT_ATTACK_ID\020\373\002\022\"\n\035"
    "L2C_HEROWAKE_EQUIP_NOT_ENOUGH\020\374\002\022 \n\033L2C_"
    "HEROWAKE_EQUIP_NOT_NEED\020\375\002\022\036\n\031L2C_HEROWA"
    "KE_EQUIP_WEARED\020\376\002\022\036\n\031L2C_HEROWAKE_GOODS"
    "_MARKED\020\377\002\022 \n\033L2C_HEROWAKE_GOODS_NOT_MAR"
    "K\020\200\003\022 \n\033L2C_HEROWAKE_HAS_NO_OPERATE\020\201\003\022\033"
    "\n\026L2C_HEROWAKE_MAX_LEVEL\020\202\003\022\031\n\024L2C_MARKI"
    "TEM_MAX_NUM\020\203\003\022\037\n\032L2C_HEROWAKE_NO_EQUIP_"
    "WEAR\020\204\003\022\031\n\024L2C_DiagramLevel_Max\020\205\003\022!\n\034L2"
    "C_NOT_ACTIVATE_PRE_ACHIEVE\020\206\003\022\027\n\022L2C_CHA"
    "PTER_UNLOCK\020\207\003\022!\n\034L2C_REFRESH_TIMES_NOT_"
    "ENOUGH\020\210\003\022\031\n\024L2C_NOT_ACTIVE_TITLE\020\211\003\022\024\n\017"
    "L2C_HAS_NO_BOSS\020\212\003\022\031\n\024L2C_BOSS_BE_DEFEAT"
    "ED\020\213\003\022 \n\033L2C_DIAGRAMVALUE_NOT_ENOUGH\020\214\003\022"
    "\030\n\023L2C_ACTIVED_ACHIEVE\020\215\003\022\020\n\013L2C_TIMEOUT"
    "\020\220\003\022\021\n\014L2C_NO_QUEST\020\221\003\022\024\n\017L2C_REWARD_NON"
    "E\020\225\003\022\030\n\023L2C_TIME_NOT_ENOUGH\020\223\003\022\022\n\rL2C_TO"
    "DAY_GOT\020\224\003\022\025\n\020L2C_NO_PRIVILEGE\020\227\003\022\030\n\023L2C"
    "_OFFLINEEXP_NONE\020\230\003\022\027\n\022L2C_SIGNIN_ALREAD"
    "Y\020\232\003\022\030\n\023L2C_NO_CHATPASSWORD\020\233\003\022\032\n\025L2C_SE"
    "RVERCOMPARE_GOT\020\234\003\022\036\n\031L2C_SERVERCOMPARE_"
    "NOT_END\020\235\003\022\033\n\026L2C_SERVERCOMPARE_RANK\020\236\003\022"
    "!\n\034L2C_SERVERCOMPARE_NO_COMPARE\020\237\003\022\037\n\032L2"
    "C_SERVERCOMPARE_MAP_STAR\020\240\003\022\"\n\035L2C_SERVE"
    "RCOMPARE_DIAMON_COST\020\241\003\022\037\n\032L2C_SERVERCOM"
    "PARE_RECHARGE\020\242\003\022\036\n\031L2C_SERVERCOMPARE_OU"
    "TTIME\020\243\003\022\033\n\026L2C_OVERWHELM_NOT_OPEN\020\244\003\022\027\n"
    "\022L2C_PK_TARGET_SELF\020\245\003\022\031\n\024L2C_PLAYER_EXP"
    "_LIMIT\020\246\003\022!\n\034L2C_EXPEDITION_NEEDNOT_RESE"
    "T\020\247\003\022\031\n\024L2C_GROUND_NOT_EXIST\020\256\003\022\024\n\017L2C_G"
    "ROUND_LOCK\020\257\003\022\033\n\026L2C_GROUND_NOT_RECLAIM\020"
    "\260\003\022\026\n\021L2C_SEED_NOT_GROW\020\261\003\022\030\n\023L2C_GROUND"
    "_NOT_IDLE\020\262\003\022\033\n\026L2C_GROUND_NOT_HARVEST\020\263"
    "\003\022 \n\033L2C_GROUND_WATER_NOT_ENOUGH\020\264\003\022\031\n\024L"
    "2C_GROUND_WATER_MAX\020\265\003\022\034\n\027L2C_NOTICE_DO_"
    "NOT_THINK\020\266\003\022\032\n\025L2C_NOTICE_IS_THINKED\020\267\003"
    "\022\035\n\030L2C_HELP_WATER_TIMES_MAX\020\270\003\022!\n\034L2C_B"
    "EHELPED_WATER_TIMES_MAX\020\271\003\022#\n\036L2C_GROUND"
    "_AUTOPLANT_TIMES_MAX\020\272\003\022\030\n\023L2C_GROUND_NO"
    "T_RIPE\020\273\003\022\033\n\026L2C_FARMWELL_LEVEL_MAX\020\274\003\022\032"
    "\n\025L2C_DO_NOT_ENTER_FARM\020\275\003\022\037\n\032L2C_FARM_S"
    "IGNATURE_LEN_MAX\020\276\003\022\027\n\022L2C_FUNCTION_LIMI"
    "T\020\302\003\022\033\n\026L2C_NOT_IN_TIME_CHANGE\020\303\003\022\032\n\025L2C"
    "_CLIENT_NOT_ACTIVE\020\351\007\022\034\n\027L2C_CLIENT_KICK"
    "ED_OTHER\020\352\007\022\035\n\030L2C_LOAD_CHARINFO_FAILED\020"
    "\353\007\022\030\n\023L2C_LOAD_BAG_FAILED\020\354\007\022 \n\033L2C_LOAD"
    "_ADVANCEINFO_FAILED\020\355\007\022\025\n\020L2C_KIECKED_BY"
    "GM\020\356\007\022\033\n\026L2C_LOGIN_STATUS_ERROR\020\357\007\022\034\n\027L2"
    "C_SERVER_LOADDB_ERROR\020\360\007\022\017\n\nL2C_NOT_GM\020\362"
    "\007\022\026\n\021L2C_AUTH_SEQUENCE\020\363\007\022\022\n\rL2C_SYS_ERR"
    "OR\020\374\007\022\022\n\rL2C_CSV_ERROR\020\375\007\022\025\n\020L2C_PARA_IN"
    "VALID\020\376\007\022\024\n\017L2C_INVALID_CMD\020\377\007\022\022\n\rL2C_MA"
    "X_ERROR\020\200\010*\235\010\n\023EActTargetTimesType\022\034\n\030EA"
    "ctTargetTimesType_None\020\000\022)\n%EActTargetTi"
    "mesType_EquipDiamondsHire\020\001\022(\n$EActTarge"
    "tTimesType_HeroDiamondsHire\020\002\022%\n!EActTar"
    "getTimesType_ArenaAttacked\020\003\022 \n\034EActTarg"
    "etTimesType_ArenaWin\020\004\022(\n$EActTargetTime"
    "sType_ArenaContinueWin\020\005\022)\n%EActTargetTi"
    "mesType_RebelArmyAttacked\020\006\022+\n\'EActTarge"
    "tTimesType_RobTreasureAttacked\020\007\022\'\n#EAct"
    "TargetTimesType_CrusadeAttacked\020\010\022$\n EAc"
    "tTargetTimesType_NormalMapWin\020\t\022!\n\035EActT"
    "argetTimesType_CopyReset\020\n\022\'\n#EActTarget"
    "TimesType_TreasureCombine\020\013\022,\n(EActTarge"
    "tTimesType_ServerWarScoreAttack\020\014\022\037\n\033EAc"
    "tTargetTimesType_UpWings\020\r\022*\n&EActTarget"
    "TimesType_GeneralShopRefresh\020\016\022!\n\035EActTa"
    "rgetTimesType_TeamRebel\020\017\022%\n!EActTargetT"
    "imesType_AstrologyHire\020\020\022\'\n#EActTargetTi"
    "mesType_RebelArmyKilled\020\021\022$\n EActTargetT"
    "imesType_EliteCopyWin\020\022\022!\n\035EActTargetTim"
    "esType_TurnTable\020\023\022 \n\034EActTargetTimesTyp"
    "e_GhostBox\020\024\022#\n\037EActTargetTimesType_Epic"
    "CopyWin\020\025\022%\n!EActTargetTimesType_LegendC"
    "opyWin\020\026\022\037\n\033EActTargetTimesType_Collect\020"
    "\027\022\037\n\033EActTargetTimesType_Consume\020\030\022)\n%EA"
    "ctTargetTimesType_ChargeShopBuyItem\020\037\022\033\n"
    "\027EActTargetTimesType_Max\020 *\374\004\n\tERankType"
    "\022\022\n\016ERankType_None\020\000\022\031\n\025ERankType_Player"
    "Level\020\001\022\033\n\027ERankType_AllHeroEffect\020\002\022\034\n\030"
    "ERankType_FiveHeroEffect\020\003\022\024\n\020ERankType_"
    "Weapon\020\004\022\022\n\016ERankType_Hero\020\005\022\027\n\023ERankTyp"
    "e_CopyStars\020\006\022\031\n\025ERankType_NormalStars\020\007"
    "\022\030\n\024ERankType_EliteStars\020\010\022\023\n\017ERankType_"
    "Arena\020\t\022\022\n\016ERankType_Harm\020\n\022\026\n\022ERankType"
    "_Exploits\020\013\022\023\n\017ERankType_Guild\020\014\022\025\n\021ERan"
    "kType_Crusade\020\016\022\026\n\022ERankType_Recharge\020\017\022"
    "\026\n\022ERankType_GuildWar\020\020\022\034\n\030ERankType_Sec"
    "retHoleStar\020\021\022\"\n\036ERankType_RechargeScore"
    "Consume\020\022\022\031\n\025ERankType_GoldConsume\020\023\022\032\n\026"
    "ERankType_GoldConsume2\020\024\022\032\n\026ERankType_Gu"
    "ildMapHarm\020\025\022\025\n\021ERankType_Diagram\020\026\022\030\n\024E"
    "RankType_DiamonCost\020\027\022\027\n\023ERankType_Recha"
    "rge2\020\030\022\021\n\rERankType_Max\020\031*\034\n\013eActionType"
    "\022\r\n\tRebelArmy\020\001*\211\001\n\teGuildJob\022\022\n\016eGuildJ"
    "ob_None\020\000\022\024\n\020eGuildJob_Leader\020\001\022\024\n\020eGuil"
    "dJob_Deputy\020\002\022\023\n\017eGuildJob_Elite\020\003\022\024\n\020eG"
    "uildJob_Member\020\004\022\021\n\reGuildJob_Max\020\005*\214\001\n\013"
    "RaidTeamOpt\022\r\n\tRTO_ENTER\020\000\022\016\n\nRTO_CANCEL"
    "\020\001\022\023\n\017RTO_KICK_PERSON\020\002\022\024\n\020RTO_BATTLE_TI"
    "MER\020\003\022\024\n\020RTO_BATTLE_START\020\004\022\r\n\tRTO_AGREE"
    "\020\005\022\016\n\nRTO_REFUSE\020\006*\341\001\n\013RaidTeamNtf\022\014\n\010RT"
    "N_DATA\020\000\022\r\n\tRTN_ENTER\020\001\022\023\n\017RTN_TEAM_CANC"
    "EL\020\002\022\025\n\021RTN_PERSON_CANCEL\020\003\022\023\n\017RTN_KICK_"
    "PERSON\020\004\022\024\n\020RTN_BATTLE_TIMER\020\005\022\024\n\020RTN_BA"
    "TTLE_START\020\006\022\026\n\022RTN_BATTLE_RESTART\020\007\022\017\n\013"
    "RTN_REQUEST\020\010\022\016\n\nRTN_REFUSE\020\t\022\017\n\013RTN_REF"
    "USED\020\n*@\n\016RaidTeamStatus\022\014\n\010RTS_NONE\020\000\022\r"
    "\n\tRTS_READY\020\001\022\021\n\rRTS_BATTLEING\020\002*\265\001\n\020eGu"
    "ildMemberType\022\031\n\025eGuildMemberType_None\020\000"
    "\022\030\n\024eGuildMemberType_New\020\001\022\033\n\027eGuildMemb"
    "erType_Update\020\002\022\031\n\025eGuildMemberType_Quit"
    "\020\003\022\032\n\026eGuildMemberType_Apply\020\004\022\030\n\024eGuild"
    "MemberType_Max\020\005*\300\001\n\017eGuildStateType\022\030\n\024"
    "eGuildStateType_None\020\000\022\032\n\026eGuildStateTyp"
    "e_Ritual\020\001\022\035\n\031eGuildStateType_NewMember\020"
    "\002\022\035\n\031eGuildStateType_JobChange\020\003\022 \n\034eGui"
    "ldStateType_LeaderChange\020\004\022\027\n\023eGuildStat"
    "eType_Max\020\005*\236\002\n\tePrizeGet\022\022\n\016ePrizeGet_N"
    "one\020\000\022\030\n\024ePrizeGet_OnlineGift\020\001\022\027\n\023ePriz"
    "eGet_TaskScore\020\002\022\034\n\030ePrizeGet_GuildMapRe"
    "ward\020\003\022#\n\037ePrizeGet_GuildTechnologyRewar"
    "d\020\004\022\034\n\030ePrizeGet_FunctionReward\020\005\022\030\n\024ePr"
    "izeGet_ArenaScore\020\006\022!\n\035ePrizeGet_GuildCo"
    "pyPassReward\020\007\022\031\n\025ePrizeGet_MonthSignIn\020"
    "\010\022\021\n\rePrizeGet_Max\020\t*\316\001\n\027GuildTerritoryE"
    "ventType\022 \n\034GuildTerritoryEventType_None"
    "\020\000\022#\n\037GuildTerritoryEventType_Rioting\020\001\022"
    "$\n GuildTerritoryEventType_RiotDone\020\002\022%\n"
    "!GuildTerritoryEventType_NotHappen\020\003\022\037\n\033"
    "GuildTerritoryEventType_Max\020\004*\254\001\n\030Player"
    "TerritoryEventType\022!\n\035PlayerTerritoryEve"
    "ntType_None\020\000\022$\n PlayerTerritoryEventTyp"
    "e_Rioting\020\001\022%\n!PlayerTerritoryEventType_"
    "RiotDone\020\002\022 \n\034PlayerTerritoryEventType_M"
    "ax\020\003*\224\002\n\teItemType\022\021\n\reItemTypeNone\020\000\022\025\n"
    "\021eItemTypeHeroChip\020\001\022\025\n\021eItemTypeStrengt"
    "h\020\002\022\025\n\021eItemTypeMaterial\020\003\022\023\n\017eItemTypeS"
    "croll\020\004\022\024\n\020eItemTypeConsume\020\005\022\026\n\022eItemTy"
    "peEquipChip\020\006\022\026\n\022eItemTypeMaterial2\020\007\022\024\n"
    "\020eItemTypeRecruit\020\t\022\024\n\020eItemTypeFashion\020"
    "\n\022\025\n\021eItemTypeTreasure\020\013\022\021\n\reItemType_Ma"
    "x\020\014*\033\n\010eUseItem\022\017\n\013eUseItemRob\020\001*\272N\n\007ERe"
    "ason\022\020\n\014EReason_None\020\000\022\023\n\017EReason_Defaul"
    "t\020\001\022\022\n\016EReason_Add_GM\020\002\022\031\n\025EReason_Add_N"
    "ewPlayer\020\003\022\030\n\024EReason_Add_SaleItem\020\004\022\035\n\031"
    "EReason_Add_OpenBoxCopper\020\005\022\036\n\032EReason_A"
    "dd_OpenBoxDiamons\020\006\022\032\n\026EReason_Add_Exped"
    "ition\020\007\022\023\n\017EReason_Add_Map\020\010\022\033\n\027EReason_"
    "Add_ComposeItem\020\t\022\030\n\024EReason_Add_UsedIte"
    "m\020\n\022\027\n\023EReason_Add_ShopBuy\020\013\022\034\n\030EReason_"
    "Add_FriendEnergy\020\014\022\030\n\024EReason_Add_Activi"
    "ty\020\r\022\027\n\023EReason_Add_Resolve\020\016\022\024\n\020EReason"
    "_Add_Task\020\017\022\032\n\026EReason_Add_ChapterBox\020\020\022"
    "\024\n\020EReason_Add_Mail\020\021\022\025\n\021EReason_Add_Are"
    "na\020\022\022\026\n\022EReason_Add_SignIn\020\023\022\031\n\025EReason_"
    "Add_SaleEquip\020\024\022\034\n\030EReason_Add_RechargeS"
    "hop\020\025\022\031\n\025EReason_Add_RebelArmy\020\026\022\027\n\023ERea"
    "son_Add_Achieve\020\027\022\025\n\021EReason_Add_Guild\020\030"
    "\022\033\n\027EReason_Add_GuildRitual\020\031\022\030\n\024EReason"
    "_Add_RaidTeam\020\032\022\031\n\025EReason_Add_MonthCard"
    "\020\033\022\032\n\026EReason_Add_OnlineGift\020\034\022\031\n\025EReaso"
    "n_Add_TaskScore\020\035\022\033\n\027EReason_Add_RmbRech"
    "arge\020\036\022\026\n\022EReason_Add_Notice\020\037\022\031\n\025EReaso"
    "n_Add_Evolution\020 \022\031\n\025EReason_Add_HeroFor"
    "ce\020!\022\023\n\017EReason_Add_Rob\020\"\022\030\n\024EReason_Add"
    "_SevenDay\020#\022\027\n\023EReason_Add_HalfBuy\020$\022\025\n\021"
    "EReason_Add_Shop1\020)\022\025\n\021EReason_Add_Shop2"
    "\020*\022\025\n\021EReason_Add_Shop3\020+\022\025\n\021EReason_Add"
    "_Shop4\020,\022\025\n\021EReason_Add_Shop5\020-\022\025\n\021EReas"
    "on_Add_Shop6\020.\022\025\n\021EReason_Add_Shop7\020/\022\025\n"
    "\021EReason_Add_Shop8\0200\022\025\n\021EReason_Add_Shop"
    "9\0201\022\026\n\022EReason_Add_Shop10\0202\022\026\n\022EReason_A"
    "dd_Shop11\0203\022\026\n\022EReason_Add_Shop12\0204\022\026\n\022E"
    "Reason_Add_Shop13\0205\022\026\n\022EReason_Add_Shop1"
    "4\0206\022\026\n\022EReason_Add_Shop15\0207\022\026\n\022EReason_A"
    "dd_Shop16\0208\022\026\n\022EReason_Add_Shop17\0209\022\026\n\022E"
    "Reason_Add_Shop18\020:\022\026\n\022EReason_Add_Shop1"
    "9\020;\022\026\n\022EReason_Add_Shop20\020<\022\036\n\032EReason_A"
    "dd_GuildTerritory\020=\022\032\n\026EReason_Add_UpPos"
    "ition\020>\022\023\n\017EReason_Add_Opt\020\?\022\030\n\024EReason_"
    "Add_GuildWar\020@\022\036\n\032EReason_Add_GuildTechn"
    "olog\020A\022\031\n\025EReason_Add_NormalMap\020G\022\030\n\024ERe"
    "ason_Add_EliteMap\020H\022\031\n\025EReason_Add_Sourc"
    "eMap\020I\022\027\n\023EReason_Add_EpicMap\020J\022\026\n\022EReas"
    "on_Add_GodMap\020K\022\031\n\025EReason_Add_LegendMap"
    "\020L\022 \n\034EReason_Add_LegendChapterBox\020P\022 \n\034"
    "EReason_Add_NormalChapterBox\020Q\022\037\n\033EReaso"
    "n_Add_EliteChapterBox\020R\022\036\n\032EReason_Add_E"
    "picChapterBox\020T\022\031\n\025EReason_Add_ServerWar"
    "\020U\022\031\n\025EReason_Add_TurnTable\020V\022\032\n\026EReason"
    "_Add_ServerTeam\020W\022\031\n\025EReason_Add_HeroAwa"
    "ke\020X\022\024\n\020EReason_Add_Tomb\020Y\022\032\n\026EReason_Ad"
    "d_FuncReward\020Z\022\032\n\026EReason_Add_SecretHole"
    "\020[\022\030\n\024EReason_Add_SevenBuy\020\\\022\032\n\026EReason_"
    "Add_ArenaScore\020]\022\034\n\030EReason_Add_ReturnSy"
    "stem\020^\022\035\n\031EReason_Add_BuyPriceTimes\020_\022 \n"
    "\034EReason_Add_OpenBoxAstrology\020`\022\030\n\024EReas"
    "on_Add_SaleHero\020a\022\036\n\032EReason_Add_Astrolo"
    "gyLucky\020b\022\037\n\033EReason_Add_PlayerTerritory"
    "\020c\022\034\n\030EReason_Add_BatchResolve\020d\022\036\n\031ERea"
    "son_Add_ActivityBegin\020\310\001\022\032\n\025EReason_Add_"
    "Activity1\020\311\001\022\032\n\025EReason_Add_Activity2\020\312\001"
    "\022\032\n\025EReason_Add_Activity3\020\313\001\022\032\n\025EReason_"
    "Add_Activity4\020\314\001\022\032\n\025EReason_Add_Activity"
    "5\020\315\001\022\032\n\025EReason_Add_Activity6\020\316\001\022\032\n\025ERea"
    "son_Add_Activity7\020\317\001\022\032\n\025EReason_Add_Acti"
    "vity8\020\320\001\022\032\n\025EReason_Add_Activity9\020\321\001\022\033\n\026"
    "EReason_Add_Activity10\020\322\001\022\033\n\026EReason_Add"
    "_Activity11\020\323\001\022\033\n\026EReason_Add_Activity12"
    "\020\324\001\022\033\n\026EReason_Add_Activity13\020\325\001\022\033\n\026ERea"
    "son_Add_Activity14\020\326\001\022\033\n\026EReason_Add_Act"
    "ivity15\020\327\001\022\033\n\026EReason_Add_Activity16\020\330\001\022"
    "\033\n\026EReason_Add_Activity17\020\331\001\022\033\n\026EReason_"
    "Add_Activity18\020\332\001\022\033\n\026EReason_Add_Activit"
    "y19\020\333\001\022\033\n\026EReason_Add_Activity20\020\334\001\022\033\n\026E"
    "Reason_Add_Activity21\020\335\001\022\033\n\026EReason_Add_"
    "Activity22\020\336\001\022\033\n\026EReason_Add_Activity23\020"
    "\337\001\022\033\n\026EReason_Add_Activity24\020\340\001\022\033\n\026EReas"
    "on_Add_Activity25\020\341\001\022\033\n\026EReason_Add_Acti"
    "vity26\020\342\001\022\033\n\026EReason_Add_Activity27\020\343\001\022\033"
    "\n\026EReason_Add_Activity28\020\344\001\022\033\n\026EReason_A"
    "dd_Activity29\020\345\001\022\033\n\026EReason_Add_Activity"
    "30\020\346\001\022\033\n\026EReason_Add_Activity31\020\347\001\022\033\n\026ER"
    "eason_Add_Activity32\020\350\001\022\033\n\026EReason_Add_A"
    "ctivity33\020\351\001\022\033\n\026EReason_Add_Activity34\020\352"
    "\001\022\033\n\026EReason_Add_Activity35\020\353\001\022\033\n\026EReaso"
    "n_Add_Activity36\020\354\001\022\033\n\026EReason_Add_Activ"
    "ity37\020\355\001\022\033\n\026EReason_Add_Activity38\020\356\001\022\033\n"
    "\026EReason_Add_Activity39\020\357\001\022\033\n\026EReason_Ad"
    "d_Activity40\020\360\001\022\033\n\026EReason_Add_Activity4"
    "1\020\361\001\022\033\n\026EReason_Add_Activity42\020\362\001\022\033\n\026ERe"
    "ason_Add_Activity43\020\363\001\022\033\n\026EReason_Add_Ac"
    "tivity44\020\364\001\022\033\n\026EReason_Add_Activity45\020\365\001"
    "\022\033\n\026EReason_Add_Activity46\020\366\001\022\033\n\026EReason"
    "_Add_Activity47\020\367\001\022\033\n\026EReason_Add_Activi"
    "ty48\020\370\001\022\034\n\027EReason_Add_ActivityEnd\020\253\002\022 \n"
    "\033EReason_Add_SecretHoleElite\020\254\002\022\035\n\030EReas"
    "on_Add_SynWakeEquip\020\255\002\022\037\n\032EReason_Add_Up"
    "gradeDiagram\020\256\002\022\037\n\032EReason_Add_AttackExe"
    "rcise\020\257\002\022\035\n\030EReason_Add_OpenBoxGhost\020\260\002\022"
    "\037\n\032EReason_Add_AttackEpicBoss\020\261\002\022\032\n\025ERea"
    "son_Add_GuildCity\020\262\002\022\033\n\026EReason_Add_Seve"
    "ngifts\020\264\002\022\035\n\030EReason_Add_OnlineReward\020\265\002"
    "\022\030\n\023EReason_Add_AccCoin\020\266\002\022\034\n\027EReason_Ad"
    "d_MonthSignIn\020\267\002\022\031\n\024EReason_Add_Retrieve"
    "\020\271\002\022\034\n\027EReason_Add_RetrieveAll\020\272\002\022\036\n\031ERe"
    "ason_Add_ServerCompare\020\277\002\022\034\n\027EReason_Add"
    "_FarmHarvest\020\300\002\022\036\n\031EReason_Add_FarmHelpW"
    "ater\020\301\002\022\032\n\025EReason_Add_FarmThink\020\302\002\022\034\n\027E"
    "Reason_Add_FarmThinked\020\303\002\022\027\n\022EReason_Add"
    "_Shop21\020\351\002\022\027\n\022EReason_Add_Shop22\020\352\002\022\027\n\022E"
    "Reason_Add_Shop23\020\353\002\022\027\n\022EReason_Add_Shop"
    "24\020\354\002\022\027\n\022EReason_Add_Shop25\020\355\002\022\027\n\022EReaso"
    "n_Add_Shop26\020\356\002\022\027\n\022EReason_Add_Shop27\020\357\002"
    "\022\027\n\022EReason_Add_Shop28\020\360\002\022\027\n\022EReason_Add"
    "_Shop29\020\361\002\022\027\n\022EReason_Add_Shop30\020\362\002\022\027\n\022E"
    "Reason_Add_Shop31\020\363\002\022\027\n\022EReason_Add_Shop"
    "32\020\364\002\022\027\n\022EReason_Add_Shop33\020\365\002\022\027\n\022EReaso"
    "n_Add_Shop34\020\366\002\022\027\n\022EReason_Add_Shop35\020\367\002"
    "\022\027\n\022EReason_Add_Shop36\020\370\002\022\027\n\022EReason_Add"
    "_Shop37\020\371\002\022\027\n\022EReason_Add_Shop38\020\372\002\022\027\n\022E"
    "Reason_Add_Shop39\020\373\002\022\027\n\022EReason_Add_Shop"
    "40\020\374\002\022\030\n\023EReason_Add_ShopMax\020\217\003\022\026\n\021EReas"
    "on_Add_Robot\020\220\003\022\024\n\017EReason_Add_Max\020\347\007\022\030\n"
    "\023EReason_Reduce_None\020\350\007\022\037\n\032EReason_Reduc"
    "e_ForceNature\020\351\007\022!\n\034EReason_Reduce_OpenB"
    "oxCopper\020\352\007\022\"\n\035EReason_Reduce_OpenBoxDia"
    "mons\020\353\007\022\036\n\031EReason_Reduce_ChangeName\020\354\007\022"
    "\037\n\032EReason_Reduce_ChangePhoto\020\355\007\022!\n\034ERea"
    "son_Reduce_BuySkillPoint\020\356\007\022\034\n\027EReason_R"
    "educe_SaleItem\020\357\007\022\027\n\022EReason_Reduce_Map\020"
    "\360\007\022\037\n\032EReason_Reduce_ComposeItem\020\361\007\022\034\n\027E"
    "Reason_Reduce_UsedItem\020\362\007\022!\n\034EReason_Red"
    "uce_ResetMapTimes\020\363\007\022!\n\034EReason_Reduce_H"
    "eroEvolution\020\364\007\022\033\n\026EReason_Reduce_HeroEx"
    "p\020\365\007\022\035\n\030EReason_Reduce_HeroForce\020\366\007\022\036\n\031E"
    "Reason_Reduce_HeroNatrue\020\367\007\022\036\n\031EReason_R"
    "educe_EquipForce\020\370\007\022\037\n\032EReason_Reduce_Eq"
    "uipRefine\020\371\007\022\033\n\026EReason_Reduce_ShopBuy\020\372"
    "\007\022\037\n\032EReason_Reduce_ShopRefresh\020\373\007\022\031\n\024ER"
    "eason_Reduce_Arena\020\374\007\022\034\n\027EReason_Reduce_"
    "Activity\020\375\007\022\033\n\026EReason_Reduce_Resolve\020\376\007"
    "\022 \n\033EReason_Reduce_RechargeShop\020\377\007\022\035\n\030ER"
    "eason_Reduce_RebelArmy\020\200\010\022\031\n\024EReason_Red"
    "uce_Guild\020\201\010\022\037\n\032EReason_Reduce_GuildRitu"
    "al\020\202\010\022\037\n\032EReason_Reduce_BuyMapTimes\020\203\010\022\027"
    "\n\022EReason_Reduce_Rob\020\204\010\022!\n\034EReason_Reduc"
    "e_BuyPriceTimes\020\205\010\022\036\n\031EReason_Reduce_UpP"
    "osition\020\206\010\022\034\n\027EReason_Reduce_RaidTeam\020\207\010"
    "\022\033\n\026EReason_Reduce_HalfBuy\020\210\010\022\036\n\031EReason"
    "_Reduce_GuildSkill\020\211\010\022 \n\033EReason_Reduce_"
    "CrusadeReset\020\212\010\022\034\n\027EReason_Reduce_HandBo"
    "ok\020\213\010\022#\n\036EReason_Reduce_HeroDeification\020"
    "\214\010\022\031\n\024EReason_Reduce_Shop1\020\221\010\022\031\n\024EReason"
    "_Reduce_Shop2\020\222\010\022\031\n\024EReason_Reduce_Shop3"
    "\020\223\010\022\031\n\024EReason_Reduce_Shop4\020\224\010\022\031\n\024EReaso"
    "n_Reduce_Shop5\020\225\010\022\031\n\024EReason_Reduce_Shop"
    "6\020\226\010\022\031\n\024EReason_Reduce_Shop7\020\227\010\022\031\n\024EReas"
    "on_Reduce_Shop8\020\230\010\022\031\n\024EReason_Reduce_Sho"
    "p9\020\231\010\022\032\n\025EReason_Reduce_Shop10\020\232\010\022\032\n\025ERe"
    "ason_Reduce_Shop11\020\233\010\022\032\n\025EReason_Reduce_"
    "Shop12\020\234\010\022\032\n\025EReason_Reduce_Shop13\020\235\010\022\032\n"
    "\025EReason_Reduce_Shop14\020\236\010\022\032\n\025EReason_Red"
    "uce_Shop15\020\237\010\022\032\n\025EReason_Reduce_Shop16\020\240"
    "\010\022\032\n\025EReason_Reduce_Shop17\020\241\010\022\032\n\025EReason"
    "_Reduce_Shop18\020\242\010\022\032\n\025EReason_Reduce_Shop"
    "19\020\243\010\022\032\n\025EReason_Reduce_Shop20\020\244\010\022\035\n\030ERe"
    "ason_Reduce_ServerWar\020\245\010\022\035\n\030EReason_Redu"
    "ce_TurnTable\020\246\010\022\036\n\031EReason_Reduce_Secret"
    "Hole\020\247\010\022\026\n\021EReason_Reduce_GM\020\256\010\022\030\n\023EReas"
    "on_Reduce_Tomb\020\257\010\022\037\n\032EReason_Reduce_Hero"
    "UpWings\020\260\010\022\037\n\032EReason_Reduce_EquipEvolve"
    "\020\261\010\022\036\n\031EReason_Reduce_EquipAwake\020\262\010\022\034\n\027E"
    "Reason_Reduce_SevenBuy\020\263\010\022$\n\037EReason_Red"
    "uce_OpenBoxAstrology\020\264\010\022\034\n\027EReason_Reduc"
    "e_SaleHero\020\265\010\022\036\n\031EReason_Reduce_AddHeroE"
    "xp\020\266\010\022\"\n\035EReason_Reduce_TreasureStreng\020\267"
    "\010\022\"\n\035EReason_Reduce_TreasureRefine\020\270\010\022#\n"
    "\036EReason_Reduce_PlayerTerritory\020\271\010\022 \n\033ER"
    "eason_Reduce_BatchResolve\020\272\010\022\037\n\032EReason_"
    "Reduce_MonthSignIn\020\273\010\022$\n\037EReason_Reduce_"
    "OneKeyResetSweep\020\274\010\022!\n\034EReason_Reduce_Ac"
    "tivityBegin\020\260\t\022\035\n\030EReason_Reduce_Activit"
    "y1\020\261\t\022\035\n\030EReason_Reduce_Activity2\020\262\t\022\035\n\030"
    "EReason_Reduce_Activity3\020\263\t\022\035\n\030EReason_R"
    "educe_Activity4\020\264\t\022\035\n\030EReason_Reduce_Act"
    "ivity5\020\265\t\022\035\n\030EReason_Reduce_Activity6\020\266\t"
    "\022\035\n\030EReason_Reduce_Activity7\020\267\t\022\035\n\030EReas"
    "on_Reduce_Activity8\020\270\t\022\035\n\030EReason_Reduce"
    "_Activity9\020\271\t\022\036\n\031EReason_Reduce_Activity"
    "10\020\272\t\022\036\n\031EReason_Reduce_Activity11\020\273\t\022\036\n"
    "\031EReason_Reduce_Activity12\020\274\t\022\036\n\031EReason"
    "_Reduce_Activity13\020\275\t\022\036\n\031EReason_Reduce_"
    "Activity14\020\276\t\022\036\n\031EReason_Reduce_Activity"
    "15\020\277\t\022\036\n\031EReason_Reduce_Activity16\020\300\t\022\036\n"
    "\031EReason_Reduce_Activity17\020\301\t\022\036\n\031EReason"
    "_Reduce_Activity18\020\302\t\022\036\n\031EReason_Reduce_"
    "Activity19\020\303\t\022\036\n\031EReason_Reduce_Activity"
    "20\020\304\t\022\036\n\031EReason_Reduce_Activity21\020\305\t\022\036\n"
    "\031EReason_Reduce_Activity22\020\306\t\022\036\n\031EReason"
    "_Reduce_Activity23\020\307\t\022\036\n\031EReason_Reduce_"
    "Activity24\020\310\t\022\036\n\031EReason_Reduce_Activity"
    "25\020\311\t\022\036\n\031EReason_Reduce_Activity26\020\312\t\022\036\n"
    "\031EReason_Reduce_Activity27\020\313\t\022\036\n\031EReason"
    "_Reduce_Activity28\020\314\t\022\036\n\031EReason_Reduce_"
    "Activity29\020\315\t\022\036\n\031EReason_Reduce_Activity"
    "30\020\316\t\022\036\n\031EReason_Reduce_Activity31\020\317\t\022\036\n"
    "\031EReason_Reduce_Activity32\020\320\t\022\036\n\031EReason"
    "_Reduce_Activity33\020\321\t\022\036\n\031EReason_Reduce_"
    "Activity34\020\322\t\022\036\n\031EReason_Reduce_Activity"
    "35\020\323\t\022\036\n\031EReason_Reduce_Activity36\020\324\t\022\036\n"
    "\031EReason_Reduce_Activity37\020\325\t\022\036\n\031EReason"
    "_Reduce_Activity38\020\326\t\022\036\n\031EReason_Reduce_"
    "Activity39\020\327\t\022\036\n\031EReason_Reduce_Activity"
    "40\020\330\t\022\036\n\031EReason_Reduce_Activity41\020\331\t\022\036\n"
    "\031EReason_Reduce_Activity42\020\332\t\022\036\n\031EReason"
    "_Reduce_Activity43\020\333\t\022\036\n\031EReason_Reduce_"
    "Activity44\020\334\t\022\036\n\031EReason_Reduce_Activity"
    "45\020\335\t\022\036\n\031EReason_Reduce_Activity46\020\336\t\022\036\n"
    "\031EReason_Reduce_Activity47\020\337\t\022\036\n\031EReason"
    "_Reduce_Activity48\020\340\t\022\036\n\031EReason_Reduce_"
    "Activity49\020\341\t\022\037\n\032EReason_Reduce_Activity"
    "End\020\223\n\022$\n\037EReason_Reduce_UpgradeWakeLeve"
    "l\020\224\n\022 \n\033EReason_Reduce_SynWakeEquip\020\225\n\022\""
    "\n\035EReason_Reduce_UpgradeDiagram\020\226\n\022 \n\033ER"
    "eason_Reduce_OpenBoxGhost\020\227\n\022!\n\034EReason_"
    "Reduce_WearWakeEquip\020\230\n\022\'\n\"EReason_Reduc"
    "e_RefreshExerciseBoss\020\231\n\022\"\n\035EReason_Redu"
    "ce_AttackEpicBoss\020\232\n\022\035\n\030EReason_Reduce_G"
    "uildCity\020\233\n\022\034\n\027EReason_Reduce_Retrieve\020\235"
    "\n\022\037\n\032EReason_Reduce_RetrieveAll\020\274\n\022\036\n\031ER"
    "eason_Reduce_ChatPasswd\020\275\n\022\034\n\027EReason_Re"
    "duce_FarmRipe\020\276\n\022\037\n\032EReason_Reduce_FarmR"
    "ipeAll\020\277\n\022\036\n\031EReason_Reduce_FarmUpWell\020\300"
    "\n\022\"\n\035EReason_Reduce_ChangeNational\020\301\n\022#\n"
    "\036EReason_Reduce_FarmPlantGround\020\302\n\022#\n\036ER"
    "eason_Reduce_FarmOneKeyPlant\020\303\n\022%\n EReas"
    "on_Reduce_FarmReclaimGround\020\304\n\022\032\n\025EReaso"
    "n_Reduce_Shop21\020\321\n\022\032\n\025EReason_Reduce_Sho"
    "p22\020\322\n\022\032\n\025EReason_Reduce_Shop23\020\323\n\022\032\n\025ER"
    "eason_Reduce_Shop24\020\324\n\022\032\n\025EReason_Reduce"
    "_Shop25\020\325\n\022\032\n\025EReason_Reduce_Shop26\020\326\n\022\032"
    "\n\025EReason_Reduce_Shop27\020\327\n\022\032\n\025EReason_Re"
    "duce_Shop28\020\330\n\022\032\n\025EReason_Reduce_Shop29\020"
    "\331\n\022\032\n\025EReason_Reduce_Shop30\020\332\n\022\032\n\025EReaso"
    "n_Reduce_Shop31\020\333\n\022\032\n\025EReason_Reduce_Sho"
    "p32\020\334\n\022\032\n\025EReason_Reduce_Shop33\020\335\n\022\032\n\025ER"
    "eason_Reduce_Shop34\020\336\n\022\032\n\025EReason_Reduce"
    "_Shop35\020\337\n\022\032\n\025EReason_Reduce_Shop36\020\340\n\022\032"
    "\n\025EReason_Reduce_Shop37\020\341\n\022\032\n\025EReason_Re"
    "duce_Shop38\020\342\n\022\032\n\025EReason_Reduce_Shop39\020"
    "\343\n\022\032\n\025EReason_Reduce_Shop40\020\344\n\022\033\n\026EReaso"
    "n_Reduce_ShopMax\020\367\n\022\020\n\013EReason_Max\020\317\017*\353\002"
    "\n\013eNoticeType\022\024\n\020eNoticeType_None\020\000\022\034\n\030e"
    "NoticeType_EquipQuality\020\001\022\037\n\033eNoticeType"
    "_TreasureQuality\020\002\022\030\n\024eNoticeType_HeroSt"
    "ar\020\003\022\031\n\025eNoticeType_HeroForce\020\004\022\035\n\031eNoti"
    "ceType_HeroEvolution\020\005\022\035\n\031eNoticeType_Re"
    "belArmyBoss\020\006\022\030\n\024eNoticeType_Recharge\020\007\022"
    "\027\n\023eNoticeType_UseItem\020\010\022\033\n\027eNoticeType_"
    "CreateGuild\020\t\022\026\n\022eNoticeType_Custom\020\n\022\027\n"
    "\023eNoticeType_OpenBox\020\013\022\023\n\017eNoticeType_Ma"
    "x\020\014*\315\003\n\017eGameModuleType\022\030\n\024eGameModuleTy"
    "pe_None\020\000\022\034\n\030eGameModuleType_NomalMap\020\001\022"
    "\034\n\030eGameModuleType_EliteMap\020\002\022\035\n\031eGameMo"
    "duleType_SourceMap\020\003\022\031\n\025eGameModuleType_"
    "Arena\020\004\022\036\n\032eGameModuleType_Expedition\020\005\022"
    "\035\n\031eGameModuleType_RebelArmy\020\006\022\034\n\030eGameM"
    "oduleType_Treasure\020\007\022\034\n\030eGameModuleType_"
    "GuildWar\020\010\022\033\n\027eGameModuleType_EpicMap\020\016\022"
    "\032\n\026eGameModuleType_GodMap\020\017\022\036\n\032eGameModu"
    "leType_SecretHole\020\020\022\036\n\032eGameModuleType_S"
    "erverTeam\020\021\022\035\n\031eGameModuleType_LegendMap"
    "\020\022\022\027\n\023eGameModuleType_Max\020\023*I\n\teDropType"
    "\022\022\n\016eDropType_None\020\000\022\022\n\016eDropType_Drop\020\001"
    "\022\024\n\020eDropType_Common\020\002*\342\001\n\020EServerWarSta"
    "tus\022\031\n\025EServerWarStatus_None\020\000\022\035\n\031EServe"
    "rWarStatus_ScoreReg\020\001\022\035\n\031EServerWarStatu"
    "s_Scoreing\020\002\022\035\n\031EServerWarStatus_ScoreEn"
    "d\020\003\022\035\n\031EServerWarStatus_Fighting\020\004\022\035\n\031ES"
    "erverWarStatus_FightEnd\020\005\022\030\n\024EServerWarS"
    "tatus_Max\020\006*\222\001\n\014ECountryType\022\025\n\021ECountry"
    "Type_None\020\000\022\024\n\020ECountryType_Wei\020\001\022\024\n\020ECo"
    "untryType_Shu\020\002\022\023\n\017ECountryType_Wu\020\003\022\024\n\020"
    "ECountryType_Qun\020\004\022\024\n\020ECountryType_Max\020\005"
    "*\222\001\n\016ETombEventType\022\027\n\023ETombEventType_No"
    "ne\020\000\022\031\n\025ETombEventType_Source\020\001\022\031\n\025ETomb"
    "EventType_Player\020\002\022\031\n\025ETombEventType_Jig"
    "uan\020\003\022\026\n\022ETombEventType_Max\020\004*\274\002\n\021EServe"
    "rTeamOpType\022\032\n\026EServerTeamOpType_None\020\000\022"
    "\034\n\030EServerTeamOpType_Create\020\001\022\032\n\026EServer"
    "TeamOpType_Join\020\002\022\032\n\026EServerTeamOpType_Q"
    "uit\020\003\022\037\n\033EServerTeamOpType_InviteAll\020\004\022\035"
    "\n\031EServerTeamOpType_DoReady\020\005\022 \n\034EServer"
    "TeamOpType_BeginFight\020\006\022\032\n\026EServerTeamOp"
    "Type_Kick\020\007\022\034\n\030EServerTeamOpType_Online\020"
    "\010\022\031\n\025EServerTeamOpType_Max\020\t*\332\001\n\tELangua"
    "ge\022\022\n\016ELanguage_None\020\000\022\023\n\017ELanguage_zh_c"
    "n\020\001\022\023\n\017ELanguage_zh_tw\020\002\022\023\n\017ELanguage_en"
    "_us\020\003\022\023\n\017ELanguage_th_th\020\004\022\023\n\017ELanguage_"
    "vi_vn\020\005\022\023\n\017ELanguage_ja_jp\020\006\022\023\n\017ELanguag"
    "e_ko_kr\020\007\022\023\n\017ELanguage_zh_hk\020\010\022\021\n\rELangu"
    "age_max\020\t*\257\001\n\013EReturnType\022\024\n\020EReturnType"
    "_None\020\000\022\024\n\020EReturnType_Shop\020\001\022\023\n\017EReturn"
    "Type_Exp\020\002\022\027\n\023EReturnType_Welfare\020\003\022\031\n\025E"
    "ReturnType_Privilege\020\004\022\026\n\022EReturnType_Ch"
    "arge\020\005\022\023\n\017EReturnType_Max\020\006*\270\001\n\024EReturnP"
    "rivilegeType\022\035\n\031EReturnPrivilegeType_Non"
    "e\020\000\022\035\n\031EReturnPrivilegeType_Shop\020\001\022\"\n\036ER"
    "eturnPrivilegeType_SourceMap\020\002\022 \n\034ERetur"
    "nPrivilegeType_ItemBuy\020\003\022\034\n\030EReturnPrivi"
    "legeType_Max\020\n*a\n\017EServerRankType\022\030\n\024ESe"
    "rverRankType_None\020\000\022\033\n\027EServerRankType_D"
    "iagram\020\001\022\027\n\023EServerRankType_Max\020\002*\261\003\n\016EM"
    "oduleOldFlag\022\027\n\023EModuleOldFlag_None\020\000\022\032\n"
    "\026EModuleOldFlag_Progess\020\001\022\035\n\031EModuleOldF"
    "lag_MainHeroUp\020\002\022\035\n\031EModuleOldFlag_Coppe"
    "rHire\020\003\022\037\n\033EModuleOldFlag_DiamondsHire\020\004"
    "\022 \n\034EModuleOldFlag_ArenaDiamonds\020\005\022\032\n\026EM"
    "oduleOldFlag_EquipUp\020\006\022\037\n\033EModuleOldFlag"
    "_BattleEffect\020\007\022\030\n\024EModuleOldFlag_Wings\020"
    "\010\022\032\n\026EModuleOldFlag_MapBoss\020\t\022 \n\034EModule"
    "OldFlag_SevenDayRank5\020\n\022\035\n\031EModuleOldFla"
    "g_ClientSort\020\013\022\035\n\031EModuleOldFlag_ClientH"
    "ire\020\014\022\026\n\022EModuleOldFlag_Max\020\r*\247\001\n\016EPrivi"
    "legeCard\022\027\n\023EPrivilegeCard_None\020\000\022\026\n\022EPr"
    "ivilegeCard_Ice\020\001\022\031\n\025EPrivilegeCard_Purp"
    "le\020\002\022\031\n\025EPrivilegeCard_Yellow\020\003\022\026\n\022EPriv"
    "ilegeCard_All\020\004\022\026\n\022EPrivilegeCard_Max\020\005*"
    "\357\003\n\nEPrivilege\022\023\n\017EPrivilege_None\020\000\022\033\n\027E"
    "Privilege_SigninReward\020\001\022\035\n\031EPrivilege_E"
    "xploitsAddPer\020\002\022\035\n\031EPrivilege_ArenaExpAd"
    "dPer\020\003\022\033\n\027EPrivilege_MapExpAddPer\020\004\022\033\n\027E"
    "Privilege_RobExpAddPer\020\005\022\031\n\025EPrivilege_O"
    "fflineExp\020\006\022\035\n\031EPrivilege_FreeBackSource"
    "\020\007\022\036\n\032EPrivilege_ArenaCashAddPer\020\010\022\034\n\030EP"
    "rivilege_MapCashAddPer\020\t\022\034\n\030EPrivilege_R"
    "obCashAddPer\020\n\022\033\n\027EPrivilege_StrengEquip"
    "5\020\013\022\034\n\030EPrivilege_StrengEquip10\020\014\022\034\n\030EPr"
    "ivilege_StrengEquip20\020\r\022\035\n\031EPrivilege_Ra"
    "idCashAddPer\020\016\022\025\n\021EPrivilege_Battle\020\017\022\022\n"
    "\016EPrivilege_Max\020 *\360\001\n\021ServerCompareType\022"
    "\024\n\020CompareType_None\020\000\022\025\n\021CompareType_Lev"
    "el\020\001\022\027\n\023CompareType_MapStar\020\002\022\027\n\023Compare"
    "Type_Crusade\020\003\022\032\n\026CompareType_DiamonCost"
    "\020\004\022\030\n\024CompareType_Recharge\020\005\022\026\n\022CompareT"
    "ype_Effect\020\006\022\031\n\025CompareType_ArenaRank\020\007\022"
    "\023\n\017CompareType_Max\020\010*\222\001\n\017ECenterRankType"
    "\022\030\n\024ECenterRankType_None\020\000\022(\n$ECenterRan"
    "kType_RechargeScoreConsume\020\001\022\"\n\036ECenterR"
    "ankType_DiamondConsume\020\002\022\027\n\023ECenterRankT"
    "ype_Max\020\003*\256\001\n\016FarmNoticeType\022\027\n\023FarmNoti"
    "ceType_None\020\000\022%\n!FarmNoticeType_AddWater"
    "FromFriend\020\001\022 \n\034FarmNoticeType_ThankToFr"
    "iend\020\002\022\"\n\036FarmNoticeType_ThankFromFriend"
    "\020\003\022\026\n\022FarmNoticeType_Max\020\004*\203\001\n\020FarmNotic"
    "eStatus\022\031\n\025FarmNoticeStatus_None\020\000\022\032\n\026Fa"
    "rmNoticeStatus_Think\020\001\022\036\n\032FarmNoticeStat"
    "us_IsThinked\020\002\022\030\n\024FarmNoticeStatus_Max\020\003", 84600);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PacketDef.proto", &protobuf_RegisterTypes);
  NotFinQuest::default_instance_ = new NotFinQuest();
  DbQuest::default_instance_ = new DbQuest();
  CoinInfo::default_instance_ = new CoinInfo();
  ItemInfo::default_instance_ = new ItemInfo();
  SeedSource::default_instance_ = new SeedSource();
  DBGodEquip::default_instance_ = new DBGodEquip();
  DbBagInfo::default_instance_ = new DbBagInfo();
  DBEvaluation::default_instance_ = new DBEvaluation();
  DBEvaluationList::default_instance_ = new DBEvaluationList();
  DBChapterRewardList::default_instance_ = new DBChapterRewardList();
  DBHeroEquip::default_instance_ = new DBHeroEquip();
  DBEquipNew::default_instance_ = new DBEquipNew();
  DBEquipNewList::default_instance_ = new DBEquipNewList();
  DBHeroInfo::default_instance_ = new DBHeroInfo();
  DBHeroList::default_instance_ = new DBHeroList();
  DBEssenceItem::default_instance_ = new DBEssenceItem();
  DBEssenceList::default_instance_ = new DBEssenceList();
  ItemUseRestrict::default_instance_ = new ItemUseRestrict();
  DBShopGoods::default_instance_ = new DBShopGoods();
  DBGoodsList::default_instance_ = new DBGoodsList();
  DBShopList::default_instance_ = new DBShopList();
  DBShopRefresh::default_instance_ = new DBShopRefresh();
  DBShopRefreshList::default_instance_ = new DBShopRefreshList();
  DBFestivityInfo::default_instance_ = new DBFestivityInfo();
  DBFestivityList::default_instance_ = new DBFestivityList();
  ClientSource::default_instance_ = new ClientSource();
  DBMailInfo::default_instance_ = new DBMailInfo();
  DBArenaHero::default_instance_ = new DBArenaHero();
  DBArenaPlayer::default_instance_ = new DBArenaPlayer();
  DBArenaRank::default_instance_ = new DBArenaRank();
  DBArenaLog::default_instance_ = new DBArenaLog();
  DBArenaLogList::default_instance_ = new DBArenaLogList();
  DBFriendInfo::default_instance_ = new DBFriendInfo();
  DBFriendList::default_instance_ = new DBFriendList();
  ShopInfo::default_instance_ = new ShopInfo();
  GoodsData::default_instance_ = new GoodsData();
  GoodsDataList::default_instance_ = new GoodsDataList();
  ClientQuest::default_instance_ = new ClientQuest();
  TEvaluation::default_instance_ = new TEvaluation();
  HeroEquipInfo::default_instance_ = new HeroEquipInfo();
  HeroEquipNew::default_instance_ = new HeroEquipNew();
  Property::default_instance_ = new Property();
  WakeAttr::default_instance_ = new WakeAttr();
  Diagram::default_instance_ = new Diagram();
  DiagramChapter::default_instance_ = new DiagramChapter();
  DiagramChapterMap::default_instance_ = new DiagramChapterMap();
  DiagramMap::default_instance_ = new DiagramMap();
  GhostDetail::default_instance_ = new GhostDetail();
  Ghost::default_instance_ = new Ghost();
  GhostList::default_instance_ = new GhostList();
  EpicBoss::default_instance_ = new EpicBoss();
  EpicBossList::default_instance_ = new EpicBossList();
  OnlineRewards::default_instance_ = new OnlineRewards();
  TreeState::default_instance_ = new TreeState();
  RetrieveState::default_instance_ = new RetrieveState();
  PassWordState::default_instance_ = new PassWordState();
  ClientHeroInfo::default_instance_ = new ClientHeroInfo();
  ClientInstanceEvaluation::default_instance_ = new ClientInstanceEvaluation();
  ClientFestivityInfo::default_instance_ = new ClientFestivityInfo();
  OtherUserInfo::default_instance_ = new OtherUserInfo();
  OtherUserInfoClient::default_instance_ = new OtherUserInfoClient();
  DBPlayerActivity::default_instance_ = new DBPlayerActivity();
  DBPlayerActivityList::default_instance_ = new DBPlayerActivityList();
  ChapterMapBox::default_instance_ = new ChapterMapBox();
  DBChapterBox::default_instance_ = new DBChapterBox();
  DBChapterBoxList::default_instance_ = new DBChapterBoxList();
  ClientFriendInfo::default_instance_ = new ClientFriendInfo();
  ClientBattleHero::default_instance_ = new ClientBattleHero();
  GuildSkill::default_instance_ = new GuildSkill();
  ClientBattlePlayer::default_instance_ = new ClientBattlePlayer();
  ClientRaidTeamHeroInfo::default_instance_ = new ClientRaidTeamHeroInfo();
  ClientRaidTeamInfo::default_instance_ = new ClientRaidTeamInfo();
  TodayTime::default_instance_ = new TodayTime();
  SourceList::default_instance_ = new SourceList();
  ClientMonthCard::default_instance_ = new ClientMonthCard();
  ClientItemLimit::default_instance_ = new ClientItemLimit();
  LString::default_instance_ = new LString();
  IntList::default_instance_ = new IntList();
  ClientActivity::default_instance_ = new ClientActivity();
  HalfBuyElement::default_instance_ = new HalfBuyElement();
  HalfBuy::default_instance_ = new HalfBuy();
  AchieveElement::default_instance_ = new AchieveElement();
  Achieve::default_instance_ = new Achieve();
  ClientRank::default_instance_ = new ClientRank();
  ClientRankList::default_instance_ = new ClientRankList();
  ClientHeroRank::default_instance_ = new ClientHeroRank();
  ClientAchieve::default_instance_ = new ClientAchieve();
  ActionRecord::default_instance_ = new ActionRecord();
  GuildInfo::default_instance_ = new GuildInfo();
  ClientGuildInfo::default_instance_ = new ClientGuildInfo();
  ClientGuildMember::default_instance_ = new ClientGuildMember();
  ClientGuildRitual::default_instance_ = new ClientGuildRitual();
  ClientGuildTechnology::default_instance_ = new ClientGuildTechnology();
  ClientGuildState::default_instance_ = new ClientGuildState();
  ClientGuildWarMsg::default_instance_ = new ClientGuildWarMsg();
  ClientGuildWarEndMsg::default_instance_ = new ClientGuildWarEndMsg();
  MonthCardEle::default_instance_ = new MonthCardEle();
  DbMonthCard::default_instance_ = new DbMonthCard();
  PrizeInfo::default_instance_ = new PrizeInfo();
  PrizeInfoList::default_instance_ = new PrizeInfoList();
  GuildMapInfo::default_instance_ = new GuildMapInfo();
  GuildMapMonster::default_instance_ = new GuildMapMonster();
  GuildMapItem::default_instance_ = new GuildMapItem();
  GuildMapReward::default_instance_ = new GuildMapReward();
  DBGuildMap::default_instance_ = new DBGuildMap();
  GuildNewMapInfo::default_instance_ = new GuildNewMapInfo();
  GuildChapterMap::default_instance_ = new GuildChapterMap();
  GuildChapterInfo::default_instance_ = new GuildChapterInfo();
  GuildTerritoryEvent::default_instance_ = new GuildTerritoryEvent();
  GuildTerritoryEventUpdate::default_instance_ = new GuildTerritoryEventUpdate();
  GuildTerritoryChapter::default_instance_ = new GuildTerritoryChapter();
  GuildTerritoryInfo::default_instance_ = new GuildTerritoryInfo();
  GuildMemberTerritoryInfo::default_instance_ = new GuildMemberTerritoryInfo();
  PlayerTerritoryEvent::default_instance_ = new PlayerTerritoryEvent();
  PlayerTerritoryChapter::default_instance_ = new PlayerTerritoryChapter();
  TerritorySkill::default_instance_ = new TerritorySkill();
  PlayerTerritoryInfo::default_instance_ = new PlayerTerritoryInfo();
  FriendTerritoryInfo::default_instance_ = new FriendTerritoryInfo();
  ClientNoticeInfo::default_instance_ = new ClientNoticeInfo();
  DbTreasureInfo::default_instance_ = new DbTreasureInfo();
  DbDropEle::default_instance_ = new DbDropEle();
  DbDrop::default_instance_ = new DbDrop();
  RobotEffect::default_instance_ = new RobotEffect();
  ClientChargeShopConf::default_instance_ = new ClientChargeShopConf();
  ClientSevenDayRankEle::default_instance_ = new ClientSevenDayRankEle();
  ClientSevenDayRank::default_instance_ = new ClientSevenDayRank();
  DbNoticeEle::default_instance_ = new DbNoticeEle();
  OptGlobal::default_instance_ = new OptGlobal();
  ClientContinueCharge::default_instance_ = new ClientContinueCharge();
  DbHandBookEle::default_instance_ = new DbHandBookEle();
  DbHandBook::default_instance_ = new DbHandBook();
  ClientHandBook::default_instance_ = new ClientHandBook();
  PlayerTurntableData::default_instance_ = new PlayerTurntableData();
  GlobalGoodsConf::default_instance_ = new GlobalGoodsConf();
  ServerWarConf::default_instance_ = new ServerWarConf();
  STeamWinProperty::default_instance_ = new STeamWinProperty();
  ServerTeamConf::default_instance_ = new ServerTeamConf();
  ClientServerWarPlayer::default_instance_ = new ClientServerWarPlayer();
  TombImp::default_instance_ = new TombImp();
  ServerTeamBattle::default_instance_ = new ServerTeamBattle();
  ClientServerTeamPlayer::default_instance_ = new ClientServerTeamPlayer();
  ServerTeamPos::default_instance_ = new ServerTeamPos();
  ClientServerTeamFightTurn::default_instance_ = new ClientServerTeamFightTurn();
  ClientServerTeamBattleResult::default_instance_ = new ClientServerTeamBattleResult();
  SecretHole::default_instance_ = new SecretHole();
  DBSecretHole::default_instance_ = new DBSecretHole();
  AuctionInfo::default_instance_ = new AuctionInfo();
  AuctionConfig::default_instance_ = new AuctionConfig();
  AuctionRecords::default_instance_ = new AuctionRecords();
  AuctionRoleInfo::default_instance_ = new AuctionRoleInfo();
  AuctionRoleMap::default_instance_ = new AuctionRoleMap();
  AuctionSerialize::default_instance_ = new AuctionSerialize();
  ReturnTask::default_instance_ = new ReturnTask();
  DBReturnTask::default_instance_ = new DBReturnTask();
  RefineEquipImp::default_instance_ = new RefineEquipImp();
  PlayerRankData::default_instance_ = new PlayerRankData();
  ServerCompareInfo::default_instance_ = new ServerCompareInfo();
  ServerCompareGot::default_instance_ = new ServerCompareGot();
  CenterRankInfo::default_instance_ = new CenterRankInfo();
  SeedInfo::default_instance_ = new SeedInfo();
  GroundInfo::default_instance_ = new GroundInfo();
  FarmNoticeInfo::default_instance_ = new FarmNoticeInfo();
  FarmWell::default_instance_ = new FarmWell();
  FarmInfo::default_instance_ = new FarmInfo();
  MonthCardPrize::default_instance_ = new MonthCardPrize();
  FarmDB::default_instance_ = new FarmDB();
  SeedBag::default_instance_ = new SeedBag();
  NotFinQuest::default_instance_->InitAsDefaultInstance();
  DbQuest::default_instance_->InitAsDefaultInstance();
  CoinInfo::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  SeedSource::default_instance_->InitAsDefaultInstance();
  DBGodEquip::default_instance_->InitAsDefaultInstance();
  DbBagInfo::default_instance_->InitAsDefaultInstance();
  DBEvaluation::default_instance_->InitAsDefaultInstance();
  DBEvaluationList::default_instance_->InitAsDefaultInstance();
  DBChapterRewardList::default_instance_->InitAsDefaultInstance();
  DBHeroEquip::default_instance_->InitAsDefaultInstance();
  DBEquipNew::default_instance_->InitAsDefaultInstance();
  DBEquipNewList::default_instance_->InitAsDefaultInstance();
  DBHeroInfo::default_instance_->InitAsDefaultInstance();
  DBHeroList::default_instance_->InitAsDefaultInstance();
  DBEssenceItem::default_instance_->InitAsDefaultInstance();
  DBEssenceList::default_instance_->InitAsDefaultInstance();
  ItemUseRestrict::default_instance_->InitAsDefaultInstance();
  DBShopGoods::default_instance_->InitAsDefaultInstance();
  DBGoodsList::default_instance_->InitAsDefaultInstance();
  DBShopList::default_instance_->InitAsDefaultInstance();
  DBShopRefresh::default_instance_->InitAsDefaultInstance();
  DBShopRefreshList::default_instance_->InitAsDefaultInstance();
  DBFestivityInfo::default_instance_->InitAsDefaultInstance();
  DBFestivityList::default_instance_->InitAsDefaultInstance();
  ClientSource::default_instance_->InitAsDefaultInstance();
  DBMailInfo::default_instance_->InitAsDefaultInstance();
  DBArenaHero::default_instance_->InitAsDefaultInstance();
  DBArenaPlayer::default_instance_->InitAsDefaultInstance();
  DBArenaRank::default_instance_->InitAsDefaultInstance();
  DBArenaLog::default_instance_->InitAsDefaultInstance();
  DBArenaLogList::default_instance_->InitAsDefaultInstance();
  DBFriendInfo::default_instance_->InitAsDefaultInstance();
  DBFriendList::default_instance_->InitAsDefaultInstance();
  ShopInfo::default_instance_->InitAsDefaultInstance();
  GoodsData::default_instance_->InitAsDefaultInstance();
  GoodsDataList::default_instance_->InitAsDefaultInstance();
  ClientQuest::default_instance_->InitAsDefaultInstance();
  TEvaluation::default_instance_->InitAsDefaultInstance();
  HeroEquipInfo::default_instance_->InitAsDefaultInstance();
  HeroEquipNew::default_instance_->InitAsDefaultInstance();
  Property::default_instance_->InitAsDefaultInstance();
  WakeAttr::default_instance_->InitAsDefaultInstance();
  Diagram::default_instance_->InitAsDefaultInstance();
  DiagramChapter::default_instance_->InitAsDefaultInstance();
  DiagramChapterMap::default_instance_->InitAsDefaultInstance();
  DiagramMap::default_instance_->InitAsDefaultInstance();
  GhostDetail::default_instance_->InitAsDefaultInstance();
  Ghost::default_instance_->InitAsDefaultInstance();
  GhostList::default_instance_->InitAsDefaultInstance();
  EpicBoss::default_instance_->InitAsDefaultInstance();
  EpicBossList::default_instance_->InitAsDefaultInstance();
  OnlineRewards::default_instance_->InitAsDefaultInstance();
  TreeState::default_instance_->InitAsDefaultInstance();
  RetrieveState::default_instance_->InitAsDefaultInstance();
  PassWordState::default_instance_->InitAsDefaultInstance();
  ClientHeroInfo::default_instance_->InitAsDefaultInstance();
  ClientInstanceEvaluation::default_instance_->InitAsDefaultInstance();
  ClientFestivityInfo::default_instance_->InitAsDefaultInstance();
  OtherUserInfo::default_instance_->InitAsDefaultInstance();
  OtherUserInfoClient::default_instance_->InitAsDefaultInstance();
  DBPlayerActivity::default_instance_->InitAsDefaultInstance();
  DBPlayerActivityList::default_instance_->InitAsDefaultInstance();
  ChapterMapBox::default_instance_->InitAsDefaultInstance();
  DBChapterBox::default_instance_->InitAsDefaultInstance();
  DBChapterBoxList::default_instance_->InitAsDefaultInstance();
  ClientFriendInfo::default_instance_->InitAsDefaultInstance();
  ClientBattleHero::default_instance_->InitAsDefaultInstance();
  GuildSkill::default_instance_->InitAsDefaultInstance();
  ClientBattlePlayer::default_instance_->InitAsDefaultInstance();
  ClientRaidTeamHeroInfo::default_instance_->InitAsDefaultInstance();
  ClientRaidTeamInfo::default_instance_->InitAsDefaultInstance();
  TodayTime::default_instance_->InitAsDefaultInstance();
  SourceList::default_instance_->InitAsDefaultInstance();
  ClientMonthCard::default_instance_->InitAsDefaultInstance();
  ClientItemLimit::default_instance_->InitAsDefaultInstance();
  LString::default_instance_->InitAsDefaultInstance();
  IntList::default_instance_->InitAsDefaultInstance();
  ClientActivity::default_instance_->InitAsDefaultInstance();
  HalfBuyElement::default_instance_->InitAsDefaultInstance();
  HalfBuy::default_instance_->InitAsDefaultInstance();
  AchieveElement::default_instance_->InitAsDefaultInstance();
  Achieve::default_instance_->InitAsDefaultInstance();
  ClientRank::default_instance_->InitAsDefaultInstance();
  ClientRankList::default_instance_->InitAsDefaultInstance();
  ClientHeroRank::default_instance_->InitAsDefaultInstance();
  ClientAchieve::default_instance_->InitAsDefaultInstance();
  ActionRecord::default_instance_->InitAsDefaultInstance();
  GuildInfo::default_instance_->InitAsDefaultInstance();
  ClientGuildInfo::default_instance_->InitAsDefaultInstance();
  ClientGuildMember::default_instance_->InitAsDefaultInstance();
  ClientGuildRitual::default_instance_->InitAsDefaultInstance();
  ClientGuildTechnology::default_instance_->InitAsDefaultInstance();
  ClientGuildState::default_instance_->InitAsDefaultInstance();
  ClientGuildWarMsg::default_instance_->InitAsDefaultInstance();
  ClientGuildWarEndMsg::default_instance_->InitAsDefaultInstance();
  MonthCardEle::default_instance_->InitAsDefaultInstance();
  DbMonthCard::default_instance_->InitAsDefaultInstance();
  PrizeInfo::default_instance_->InitAsDefaultInstance();
  PrizeInfoList::default_instance_->InitAsDefaultInstance();
  GuildMapInfo::default_instance_->InitAsDefaultInstance();
  GuildMapMonster::default_instance_->InitAsDefaultInstance();
  GuildMapItem::default_instance_->InitAsDefaultInstance();
  GuildMapReward::default_instance_->InitAsDefaultInstance();
  DBGuildMap::default_instance_->InitAsDefaultInstance();
  GuildNewMapInfo::default_instance_->InitAsDefaultInstance();
  GuildChapterMap::default_instance_->InitAsDefaultInstance();
  GuildChapterInfo::default_instance_->InitAsDefaultInstance();
  GuildTerritoryEvent::default_instance_->InitAsDefaultInstance();
  GuildTerritoryEventUpdate::default_instance_->InitAsDefaultInstance();
  GuildTerritoryChapter::default_instance_->InitAsDefaultInstance();
  GuildTerritoryInfo::default_instance_->InitAsDefaultInstance();
  GuildMemberTerritoryInfo::default_instance_->InitAsDefaultInstance();
  PlayerTerritoryEvent::default_instance_->InitAsDefaultInstance();
  PlayerTerritoryChapter::default_instance_->InitAsDefaultInstance();
  TerritorySkill::default_instance_->InitAsDefaultInstance();
  PlayerTerritoryInfo::default_instance_->InitAsDefaultInstance();
  FriendTerritoryInfo::default_instance_->InitAsDefaultInstance();
  ClientNoticeInfo::default_instance_->InitAsDefaultInstance();
  DbTreasureInfo::default_instance_->InitAsDefaultInstance();
  DbDropEle::default_instance_->InitAsDefaultInstance();
  DbDrop::default_instance_->InitAsDefaultInstance();
  RobotEffect::default_instance_->InitAsDefaultInstance();
  ClientChargeShopConf::default_instance_->InitAsDefaultInstance();
  ClientSevenDayRankEle::default_instance_->InitAsDefaultInstance();
  ClientSevenDayRank::default_instance_->InitAsDefaultInstance();
  DbNoticeEle::default_instance_->InitAsDefaultInstance();
  OptGlobal::default_instance_->InitAsDefaultInstance();
  ClientContinueCharge::default_instance_->InitAsDefaultInstance();
  DbHandBookEle::default_instance_->InitAsDefaultInstance();
  DbHandBook::default_instance_->InitAsDefaultInstance();
  ClientHandBook::default_instance_->InitAsDefaultInstance();
  PlayerTurntableData::default_instance_->InitAsDefaultInstance();
  GlobalGoodsConf::default_instance_->InitAsDefaultInstance();
  ServerWarConf::default_instance_->InitAsDefaultInstance();
  STeamWinProperty::default_instance_->InitAsDefaultInstance();
  ServerTeamConf::default_instance_->InitAsDefaultInstance();
  ClientServerWarPlayer::default_instance_->InitAsDefaultInstance();
  TombImp::default_instance_->InitAsDefaultInstance();
  ServerTeamBattle::default_instance_->InitAsDefaultInstance();
  ClientServerTeamPlayer::default_instance_->InitAsDefaultInstance();
  ServerTeamPos::default_instance_->InitAsDefaultInstance();
  ClientServerTeamFightTurn::default_instance_->InitAsDefaultInstance();
  ClientServerTeamBattleResult::default_instance_->InitAsDefaultInstance();
  SecretHole::default_instance_->InitAsDefaultInstance();
  DBSecretHole::default_instance_->InitAsDefaultInstance();
  AuctionInfo::default_instance_->InitAsDefaultInstance();
  AuctionConfig::default_instance_->InitAsDefaultInstance();
  AuctionRecords::default_instance_->InitAsDefaultInstance();
  AuctionRoleInfo::default_instance_->InitAsDefaultInstance();
  AuctionRoleMap::default_instance_->InitAsDefaultInstance();
  AuctionSerialize::default_instance_->InitAsDefaultInstance();
  ReturnTask::default_instance_->InitAsDefaultInstance();
  DBReturnTask::default_instance_->InitAsDefaultInstance();
  RefineEquipImp::default_instance_->InitAsDefaultInstance();
  PlayerRankData::default_instance_->InitAsDefaultInstance();
  ServerCompareInfo::default_instance_->InitAsDefaultInstance();
  ServerCompareGot::default_instance_->InitAsDefaultInstance();
  CenterRankInfo::default_instance_->InitAsDefaultInstance();
  SeedInfo::default_instance_->InitAsDefaultInstance();
  GroundInfo::default_instance_->InitAsDefaultInstance();
  FarmNoticeInfo::default_instance_->InitAsDefaultInstance();
  FarmWell::default_instance_->InitAsDefaultInstance();
  FarmInfo::default_instance_->InitAsDefaultInstance();
  MonthCardPrize::default_instance_->InitAsDefaultInstance();
  FarmDB::default_instance_->InitAsDefaultInstance();
  SeedBag::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PacketDef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PacketDef_2eproto {
  StaticDescriptorInitializer_PacketDef_2eproto() {
    protobuf_AddDesc_PacketDef_2eproto();
  }
} static_descriptor_initializer_PacketDef_2eproto_;
const ::google::protobuf::EnumDescriptor* PacketDef_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketDef_descriptor_;
}
bool PacketDef_IsValid(int value) {
  switch(value) {
    case 100000:
    case 100001:
    case 100002:
    case 100005:
    case 100006:
    case 100007:
    case 100008:
    case 100009:
    case 100010:
    case 100011:
    case 100013:
    case 100014:
    case 100015:
    case 100016:
    case 100017:
    case 100018:
    case 100019:
    case 100020:
    case 100021:
    case 100022:
    case 100023:
    case 100024:
    case 100025:
    case 100026:
    case 100100:
    case 100101:
    case 100102:
    case 100103:
    case 100104:
    case 100105:
    case 100106:
    case 100107:
    case 100108:
    case 100109:
    case 100110:
    case 100111:
    case 100112:
    case 100113:
    case 100114:
    case 100115:
    case 100116:
    case 100200:
    case 100201:
    case 100202:
    case 100203:
    case 100204:
    case 100205:
    case 100206:
    case 100300:
    case 100301:
    case 100302:
    case 100303:
    case 100304:
    case 100500:
    case 100501:
    case 100502:
    case 100503:
    case 100504:
    case 100505:
    case 100506:
    case 100600:
    case 100601:
    case 100602:
    case 100608:
    case 100611:
    case 100613:
    case 100614:
    case 100615:
    case 100616:
    case 100617:
    case 100618:
    case 100620:
    case 100621:
    case 100622:
    case 100623:
    case 100624:
    case 100625:
    case 100626:
    case 100627:
    case 100631:
    case 100632:
    case 100633:
    case 100634:
    case 100635:
    case 100636:
    case 100637:
    case 100638:
    case 100639:
    case 100640:
    case 100641:
    case 100643:
    case 100650:
    case 100651:
    case 100652:
    case 100653:
    case 100660:
    case 100661:
    case 100666:
    case 100670:
    case 100680:
    case 100681:
    case 100682:
    case 100683:
    case 200000:
    case 200001:
    case 200002:
    case 200003:
    case 200004:
    case 200005:
    case 200006:
    case 200007:
    case 200008:
    case 200009:
    case 200010:
    case 200011:
    case 200012:
    case 200013:
    case 200014:
    case 200015:
    case 200016:
    case 200017:
    case 200018:
    case 200019:
    case 200020:
    case 200021:
    case 200098:
    case 200099:
    case 200100:
    case 200101:
    case 200102:
    case 200103:
    case 200104:
    case 200105:
    case 200106:
    case 200107:
    case 200108:
    case 200109:
    case 200110:
    case 200111:
    case 200112:
    case 200113:
    case 200200:
    case 200201:
    case 200202:
    case 200203:
    case 200204:
    case 200205:
    case 200206:
    case 200207:
    case 200208:
    case 200209:
    case 200210:
    case 200211:
    case 200220:
    case 200221:
    case 200230:
    case 200231:
    case 200300:
    case 200301:
    case 200302:
    case 200303:
    case 200304:
    case 200305:
    case 200306:
    case 200310:
    case 200320:
    case 200500:
    case 200501:
    case 200502:
    case 200503:
    case 200504:
    case 200505:
    case 200506:
    case 200507:
    case 200600:
    case 200601:
    case 200602:
    case 200603:
    case 200604:
    case 200605:
    case 200606:
    case 200608:
    case 200613:
    case 200614:
    case 200615:
    case 200616:
    case 200617:
    case 200620:
    case 200621:
    case 200622:
    case 200623:
    case 200624:
    case 200625:
    case 200626:
    case 200627:
    case 200628:
    case 200629:
    case 200630:
    case 200631:
    case 200632:
    case 200633:
    case 200634:
    case 200635:
    case 200636:
    case 200637:
    case 200638:
    case 200639:
    case 210000:
    case 210001:
    case 210002:
    case 210003:
    case 210004:
    case 210005:
    case 210006:
    case 210007:
    case 210008:
    case 210009:
    case 210011:
    case 210012:
    case 210013:
    case 210014:
    case 210015:
    case 210016:
    case 210017:
    case 210018:
    case 210019:
    case 210020:
    case 210021:
    case 210022:
    case 210023:
    case 210024:
    case 210025:
    case 210026:
    case 210027:
    case 210028:
    case 210029:
    case 210030:
    case 210031:
    case 210032:
    case 210033:
    case 210034:
    case 210035:
    case 210036:
    case 210040:
    case 210041:
    case 210042:
    case 210043:
    case 210044:
    case 210045:
    case 210046:
    case 210047:
    case 210048:
    case 210049:
    case 210050:
    case 210051:
    case 210052:
    case 210053:
    case 210054:
    case 210055:
    case 210056:
    case 210057:
    case 210059:
    case 210060:
    case 210061:
    case 210062:
    case 210063:
    case 210064:
    case 210065:
    case 210066:
    case 210067:
    case 210068:
    case 210069:
    case 210070:
    case 210071:
    case 210072:
    case 210073:
    case 210074:
    case 210080:
    case 210081:
    case 210082:
    case 210083:
    case 210084:
    case 210085:
    case 210086:
    case 210087:
    case 210088:
    case 210089:
    case 210090:
    case 210091:
    case 210092:
    case 210099:
    case 210100:
    case 210101:
    case 210102:
    case 210103:
    case 210104:
    case 210105:
    case 210106:
    case 210107:
    case 210108:
    case 210109:
    case 210110:
    case 210111:
    case 210112:
    case 210113:
    case 210114:
    case 210120:
    case 210121:
    case 210122:
    case 210123:
    case 210128:
    case 210129:
    case 210130:
    case 210131:
    case 210132:
    case 210133:
    case 210134:
    case 210135:
    case 210136:
    case 210137:
    case 210138:
    case 210139:
    case 210140:
    case 210141:
    case 210142:
    case 210143:
    case 210144:
    case 210150:
    case 210151:
    case 210152:
    case 210153:
    case 210154:
    case 210155:
    case 210156:
    case 210157:
    case 210158:
    case 210159:
    case 210160:
    case 210161:
    case 210162:
    case 210163:
    case 210164:
    case 210165:
    case 210166:
    case 210167:
    case 210168:
    case 210169:
    case 210171:
    case 210172:
    case 210173:
    case 210174:
    case 210175:
    case 210176:
    case 210177:
    case 210200:
    case 210201:
    case 210202:
    case 210203:
    case 210204:
    case 210205:
    case 210300:
    case 210301:
    case 210310:
    case 210311:
    case 210312:
    case 210313:
    case 210314:
    case 210315:
    case 210316:
    case 210317:
    case 210318:
    case 210320:
    case 210330:
    case 210331:
    case 210332:
    case 210333:
    case 210334:
    case 210350:
    case 210351:
    case 210352:
    case 210353:
    case 210354:
    case 210355:
    case 210356:
    case 210357:
    case 210358:
    case 210359:
    case 210360:
    case 210361:
    case 210362:
    case 210363:
    case 210364:
    case 210365:
    case 210366:
    case 210367:
    case 210368:
    case 210369:
    case 210370:
    case 210371:
    case 210372:
    case 210373:
    case 210374:
    case 210375:
    case 210376:
    case 210377:
    case 210378:
    case 210379:
    case 210380:
    case 210381:
    case 210382:
    case 210383:
    case 210384:
    case 210385:
    case 210386:
    case 210387:
    case 210388:
    case 210400:
    case 210401:
    case 210500:
    case 210501:
    case 210502:
    case 210503:
    case 210504:
    case 210505:
    case 210508:
    case 210509:
    case 210510:
    case 210511:
    case 210512:
    case 210513:
    case 210514:
    case 210515:
    case 210516:
    case 210517:
    case 210518:
    case 210519:
    case 210520:
    case 210521:
    case 210522:
    case 210523:
    case 210524:
    case 210525:
    case 210526:
    case 210527:
    case 210528:
    case 210529:
    case 210530:
    case 210531:
    case 210532:
    case 210534:
    case 210535:
    case 210536:
    case 210537:
    case 210538:
    case 210539:
    case 210540:
    case 210541:
    case 210542:
    case 210543:
    case 210544:
    case 210545:
    case 210546:
    case 210547:
    case 210548:
    case 210550:
    case 210551:
    case 210552:
    case 210560:
    case 210561:
    case 210562:
    case 210563:
    case 210570:
    case 210571:
    case 210580:
    case 210581:
    case 210582:
    case 210583:
    case 210584:
    case 210585:
    case 210586:
    case 210587:
    case 210588:
    case 210589:
    case 210590:
    case 210591:
    case 210592:
    case 210593:
    case 210594:
    case 210595:
    case 210596:
    case 210597:
    case 210598:
    case 210599:
    case 210600:
    case 210601:
    case 210602:
    case 210603:
    case 210604:
    case 210605:
    case 210606:
    case 210607:
    case 210608:
    case 210609:
    case 210610:
    case 210611:
    case 210612:
    case 210613:
    case 210614:
    case 210615:
    case 210616:
    case 210617:
    case 210618:
    case 210619:
    case 210620:
    case 210621:
    case 210622:
    case 210623:
    case 210624:
    case 210625:
    case 210626:
    case 210627:
    case 210628:
    case 210633:
    case 210634:
    case 210635:
    case 210636:
    case 210637:
    case 210638:
    case 210700:
    case 210704:
    case 210705:
    case 210706:
    case 210707:
    case 210708:
    case 210709:
    case 210710:
    case 210711:
    case 210717:
    case 210718:
    case 210719:
    case 210720:
    case 210721:
    case 210722:
    case 210723:
    case 210724:
    case 210725:
    case 210726:
    case 210727:
    case 210730:
    case 210731:
    case 210732:
    case 210733:
    case 210734:
    case 210735:
    case 210736:
    case 210737:
    case 210738:
    case 210739:
    case 210740:
    case 210741:
    case 210742:
    case 210743:
    case 210744:
    case 210745:
    case 210746:
    case 210747:
    case 210748:
    case 210749:
    case 210750:
    case 210751:
    case 210752:
    case 210753:
    case 210754:
    case 210755:
    case 210756:
    case 210757:
    case 210758:
    case 210759:
    case 210760:
    case 210761:
    case 210762:
    case 210763:
    case 210764:
    case 210765:
    case 210766:
    case 210767:
    case 210768:
    case 210769:
    case 210770:
    case 210771:
    case 210772:
    case 210773:
    case 210774:
    case 210775:
    case 210776:
    case 210777:
    case 210778:
    case 210779:
    case 220640:
    case 220641:
    case 220642:
    case 220643:
    case 220650:
    case 220651:
    case 220652:
    case 220653:
    case 220660:
    case 220661:
    case 220666:
    case 220670:
    case 300000:
    case 300001:
    case 300002:
    case 300003:
    case 300004:
    case 300005:
    case 300006:
    case 300007:
    case 300008:
    case 300009:
    case 300010:
    case 300012:
    case 300013:
    case 300014:
    case 300015:
    case 300016:
    case 300017:
    case 300018:
    case 300019:
    case 300020:
    case 300021:
    case 300022:
    case 300050:
    case 300051:
    case 300060:
    case 300061:
    case 300062:
    case 300070:
    case 300071:
    case 300072:
    case 300073:
    case 300074:
    case 300075:
    case 310335:
    case 310336:
    case 310337:
    case 350000:
    case 350001:
    case 350002:
    case 350003:
    case 350004:
    case 350005:
    case 350006:
    case 350007:
    case 350008:
    case 350009:
    case 350010:
    case 350011:
    case 350012:
    case 350013:
    case 350014:
    case 350015:
    case 350016:
    case 350050:
    case 350060:
    case 350070:
    case 350071:
    case 350080:
    case 350081:
    case 350082:
    case 350083:
    case 350085:
    case 350086:
    case 350087:
    case 350088:
    case 350089:
    case 350090:
    case 350091:
    case 350092:
    case 350093:
    case 350094:
    case 350095:
    case 350096:
    case 350097:
    case 360000:
    case 360001:
    case 360002:
    case 360003:
    case 360004:
    case 360005:
    case 360006:
    case 360007:
    case 380000:
    case 380001:
    case 390000:
    case 390001:
    case 400001:
    case 400002:
    case 400003:
    case 400004:
    case 400005:
    case 400006:
    case 400007:
    case 400008:
    case 500000:
    case 500001:
    case 500002:
    case 500003:
    case 500004:
    case 500005:
    case 500006:
    case 500007:
    case 500008:
    case 600001:
    case 600002:
    case 600003:
    case 600005:
    case 600006:
    case 600008:
    case 600009:
    case 700001:
    case 700002:
    case 700003:
    case 700004:
    case 700005:
    case 700006:
    case 700007:
    case 700008:
    case 700009:
    case 700010:
    case 700011:
    case 700012:
    case 700013:
    case 700014:
    case 700015:
    case 800000:
    case 800001:
    case 900000:
    case 900001:
    case 900002:
    case 900003:
    case 900004:
    case 900005:
    case 900006:
    case 900007:
    case 900008:
    case 900009:
    case 900010:
    case 900011:
    case 1234567:
    case 7654321:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatType_descriptor_;
}
bool ChatType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eItemUseRestrict_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eItemUseRestrict_descriptor_;
}
bool eItemUseRestrict_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RetrieveActivity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetrieveActivity_descriptor_;
}
bool RetrieveActivity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRefershType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRefershType_descriptor_;
}
bool eRefershType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SourceType_descriptor_;
}
bool SourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CoinType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoinType_descriptor_;
}
bool CoinType_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ShopType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopType_descriptor_;
}
bool ShopType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* emLobby2ClientErr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emLobby2ClientErr_descriptor_;
}
bool emLobby2ClientErr_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 50:
    case 51:
    case 52:
    case 55:
    case 56:
    case 57:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 91:
    case 92:
    case 93:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 150:
    case 155:
    case 156:
    case 157:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 210:
    case 211:
    case 212:
    case 213:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 240:
    case 241:
    case 242:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 270:
    case 271:
    case 272:
    case 300:
    case 301:
    case 320:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 364:
    case 365:
    case 366:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 400:
    case 401:
    case 403:
    case 404:
    case 405:
    case 407:
    case 408:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 450:
    case 451:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1010:
    case 1011:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EActTargetTimesType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EActTargetTimesType_descriptor_;
}
bool EActTargetTimesType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERankType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERankType_descriptor_;
}
bool ERankType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eActionType_descriptor_;
}
bool eActionType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eGuildJob_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eGuildJob_descriptor_;
}
bool eGuildJob_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RaidTeamOpt_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaidTeamOpt_descriptor_;
}
bool RaidTeamOpt_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RaidTeamNtf_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaidTeamNtf_descriptor_;
}
bool RaidTeamNtf_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RaidTeamStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaidTeamStatus_descriptor_;
}
bool RaidTeamStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eGuildMemberType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eGuildMemberType_descriptor_;
}
bool eGuildMemberType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eGuildStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eGuildStateType_descriptor_;
}
bool eGuildStateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ePrizeGet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ePrizeGet_descriptor_;
}
bool ePrizeGet_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildTerritoryEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildTerritoryEventType_descriptor_;
}
bool GuildTerritoryEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerTerritoryEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTerritoryEventType_descriptor_;
}
bool PlayerTerritoryEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eItemType_descriptor_;
}
bool eItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eUseItem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eUseItem_descriptor_;
}
bool eUseItem_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EReason_descriptor_;
}
bool EReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 80:
    case 81:
    case 82:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 308:
    case 309:
    case 310:
    case 311:
    case 313:
    case 314:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 399:
    case 400:
    case 999:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1212:
    case 1213:
    case 1214:
    case 1215:
    case 1216:
    case 1217:
    case 1218:
    case 1219:
    case 1220:
    case 1221:
    case 1222:
    case 1223:
    case 1224:
    case 1225:
    case 1226:
    case 1227:
    case 1228:
    case 1229:
    case 1230:
    case 1231:
    case 1232:
    case 1233:
    case 1234:
    case 1235:
    case 1236:
    case 1237:
    case 1238:
    case 1239:
    case 1240:
    case 1241:
    case 1242:
    case 1243:
    case 1244:
    case 1245:
    case 1246:
    case 1247:
    case 1248:
    case 1249:
    case 1299:
    case 1300:
    case 1301:
    case 1302:
    case 1303:
    case 1304:
    case 1305:
    case 1306:
    case 1307:
    case 1309:
    case 1340:
    case 1341:
    case 1342:
    case 1343:
    case 1344:
    case 1345:
    case 1346:
    case 1347:
    case 1348:
    case 1361:
    case 1362:
    case 1363:
    case 1364:
    case 1365:
    case 1366:
    case 1367:
    case 1368:
    case 1369:
    case 1370:
    case 1371:
    case 1372:
    case 1373:
    case 1374:
    case 1375:
    case 1376:
    case 1377:
    case 1378:
    case 1379:
    case 1380:
    case 1399:
    case 1999:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eNoticeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eNoticeType_descriptor_;
}
bool eNoticeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eGameModuleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eGameModuleType_descriptor_;
}
bool eGameModuleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eDropType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eDropType_descriptor_;
}
bool eDropType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EServerWarStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EServerWarStatus_descriptor_;
}
bool EServerWarStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECountryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECountryType_descriptor_;
}
bool ECountryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETombEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETombEventType_descriptor_;
}
bool ETombEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EServerTeamOpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EServerTeamOpType_descriptor_;
}
bool EServerTeamOpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELanguage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELanguage_descriptor_;
}
bool ELanguage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EReturnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EReturnType_descriptor_;
}
bool EReturnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EReturnPrivilegeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EReturnPrivilegeType_descriptor_;
}
bool EReturnPrivilegeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EServerRankType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EServerRankType_descriptor_;
}
bool EServerRankType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EModuleOldFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EModuleOldFlag_descriptor_;
}
bool EModuleOldFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPrivilegeCard_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPrivilegeCard_descriptor_;
}
bool EPrivilegeCard_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPrivilege_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPrivilege_descriptor_;
}
bool EPrivilege_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerCompareType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerCompareType_descriptor_;
}
bool ServerCompareType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECenterRankType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECenterRankType_descriptor_;
}
bool ECenterRankType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FarmNoticeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FarmNoticeType_descriptor_;
}
bool FarmNoticeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FarmNoticeStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FarmNoticeStatus_descriptor_;
}
bool FarmNoticeStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NotFinQuest::kQuestidFieldNumber;
const int NotFinQuest::kCompleteFieldNumber;
const int NotFinQuest::kTargetValueFieldNumber;
const int NotFinQuest::kShowFieldNumber;
const int NotFinQuest::kGotFieldNumber;
const int NotFinQuest::kCompleteTimeFieldNumber;
const int NotFinQuest::kTargetValue64FieldNumber;
#endif  // !_MSC_VER

NotFinQuest::NotFinQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.NotFinQuest)
}

void NotFinQuest::InitAsDefaultInstance() {
}

NotFinQuest::NotFinQuest(const NotFinQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.NotFinQuest)
}

void NotFinQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  complete_ = 0u;
  targetvalue_ = 0u;
  show_ = 0u;
  got_ = 0u;
  completetime_ = 0u;
  targetvalue64_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotFinQuest::~NotFinQuest() {
  // @@protoc_insertion_point(destructor:TgsProtocol.NotFinQuest)
  SharedDtor();
}

void NotFinQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotFinQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotFinQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotFinQuest_descriptor_;
}

const NotFinQuest& NotFinQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

NotFinQuest* NotFinQuest::default_instance_ = NULL;

NotFinQuest* NotFinQuest::New() const {
  return new NotFinQuest;
}

void NotFinQuest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotFinQuest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(questid_, targetvalue64_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotFinQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.NotFinQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 questid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_complete;
        break;
      }

      // required uint32 complete = 2;
      case 2: {
        if (tag == 16) {
         parse_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_)));
          set_has_complete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targetValue;
        break;
      }

      // required uint32 targetValue = 3;
      case 3: {
        if (tag == 24) {
         parse_targetValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetvalue_)));
          set_has_targetvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_show;
        break;
      }

      // optional uint32 show = 4;
      case 4: {
        if (tag == 32) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_got;
        break;
      }

      // optional uint32 got = 5;
      case 5: {
        if (tag == 40) {
         parse_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &got_)));
          set_has_got();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_completeTime;
        break;
      }

      // optional uint32 completeTime = 6;
      case 6: {
        if (tag == 48) {
         parse_completeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completetime_)));
          set_has_completetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_targetValue64;
        break;
      }

      // optional uint64 targetValue64 = 7;
      case 7: {
        if (tag == 56) {
         parse_targetValue64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetvalue64_)));
          set_has_targetvalue64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.NotFinQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.NotFinQuest)
  return false;
#undef DO_
}

void NotFinQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.NotFinQuest)
  // required uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // required uint32 complete = 2;
  if (has_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->complete(), output);
  }

  // required uint32 targetValue = 3;
  if (has_targetvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->targetvalue(), output);
  }

  // optional uint32 show = 4;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->show(), output);
  }

  // optional uint32 got = 5;
  if (has_got()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->got(), output);
  }

  // optional uint32 completeTime = 6;
  if (has_completetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->completetime(), output);
  }

  // optional uint64 targetValue64 = 7;
  if (has_targetvalue64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->targetvalue64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.NotFinQuest)
}

::google::protobuf::uint8* NotFinQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.NotFinQuest)
  // required uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // required uint32 complete = 2;
  if (has_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->complete(), target);
  }

  // required uint32 targetValue = 3;
  if (has_targetvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->targetvalue(), target);
  }

  // optional uint32 show = 4;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->show(), target);
  }

  // optional uint32 got = 5;
  if (has_got()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->got(), target);
  }

  // optional uint32 completeTime = 6;
  if (has_completetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->completetime(), target);
  }

  // optional uint64 targetValue64 = 7;
  if (has_targetvalue64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->targetvalue64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.NotFinQuest)
  return target;
}

int NotFinQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // required uint32 complete = 2;
    if (has_complete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->complete());
    }

    // required uint32 targetValue = 3;
    if (has_targetvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetvalue());
    }

    // optional uint32 show = 4;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show());
    }

    // optional uint32 got = 5;
    if (has_got()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->got());
    }

    // optional uint32 completeTime = 6;
    if (has_completetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completetime());
    }

    // optional uint64 targetValue64 = 7;
    if (has_targetvalue64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetvalue64());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotFinQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotFinQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotFinQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotFinQuest::MergeFrom(const NotFinQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_complete()) {
      set_complete(from.complete());
    }
    if (from.has_targetvalue()) {
      set_targetvalue(from.targetvalue());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_got()) {
      set_got(from.got());
    }
    if (from.has_completetime()) {
      set_completetime(from.completetime());
    }
    if (from.has_targetvalue64()) {
      set_targetvalue64(from.targetvalue64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotFinQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotFinQuest::CopyFrom(const NotFinQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotFinQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NotFinQuest::Swap(NotFinQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(complete_, other->complete_);
    std::swap(targetvalue_, other->targetvalue_);
    std::swap(show_, other->show_);
    std::swap(got_, other->got_);
    std::swap(completetime_, other->completetime_);
    std::swap(targetvalue64_, other->targetvalue64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotFinQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotFinQuest_descriptor_;
  metadata.reflection = NotFinQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbQuest::kCommitquestsFieldNumber;
const int DbQuest::kNotfinquestsFieldNumber;
#endif  // !_MSC_VER

DbQuest::DbQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbQuest)
}

void DbQuest::InitAsDefaultInstance() {
}

DbQuest::DbQuest(const DbQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbQuest)
}

void DbQuest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbQuest::~DbQuest() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbQuest)
  SharedDtor();
}

void DbQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbQuest_descriptor_;
}

const DbQuest& DbQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DbQuest* DbQuest::default_instance_ = NULL;

DbQuest* DbQuest::New() const {
  return new DbQuest;
}

void DbQuest::Clear() {
  commitquests_.Clear();
  notfinquests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 commitquests = 1;
      case 1: {
        if (tag == 8) {
         parse_commitquests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_commitquests())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_commitquests())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_commitquests;
        if (input->ExpectTag(18)) goto parse_notfinquests;
        break;
      }

      // repeated .TgsProtocol.NotFinQuest notfinquests = 2;
      case 2: {
        if (tag == 18) {
         parse_notfinquests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notfinquests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notfinquests;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbQuest)
  return false;
#undef DO_
}

void DbQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbQuest)
  // repeated uint32 commitquests = 1;
  for (int i = 0; i < this->commitquests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->commitquests(i), output);
  }

  // repeated .TgsProtocol.NotFinQuest notfinquests = 2;
  for (int i = 0; i < this->notfinquests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->notfinquests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbQuest)
}

::google::protobuf::uint8* DbQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbQuest)
  // repeated uint32 commitquests = 1;
  for (int i = 0; i < this->commitquests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->commitquests(i), target);
  }

  // repeated .TgsProtocol.NotFinQuest notfinquests = 2;
  for (int i = 0; i < this->notfinquests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->notfinquests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbQuest)
  return target;
}

int DbQuest::ByteSize() const {
  int total_size = 0;

  // repeated uint32 commitquests = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->commitquests_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->commitquests(i));
    }
    total_size += 1 * this->commitquests_size() + data_size;
  }

  // repeated .TgsProtocol.NotFinQuest notfinquests = 2;
  total_size += 1 * this->notfinquests_size();
  for (int i = 0; i < this->notfinquests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notfinquests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbQuest::MergeFrom(const DbQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  commitquests_.MergeFrom(from.commitquests_);
  notfinquests_.MergeFrom(from.notfinquests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbQuest::CopyFrom(const DbQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbQuest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->notfinquests())) return false;
  return true;
}

void DbQuest::Swap(DbQuest* other) {
  if (other != this) {
    commitquests_.Swap(&other->commitquests_);
    notfinquests_.Swap(&other->notfinquests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbQuest_descriptor_;
  metadata.reflection = DbQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoinInfo::kCoinTypeFieldNumber;
const int CoinInfo::kCoinNumFieldNumber;
#endif  // !_MSC_VER

CoinInfo::CoinInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.CoinInfo)
}

void CoinInfo::InitAsDefaultInstance() {
}

CoinInfo::CoinInfo(const CoinInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.CoinInfo)
}

void CoinInfo::SharedCtor() {
  _cached_size_ = 0;
  cointype_ = 0u;
  coinnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoinInfo::~CoinInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.CoinInfo)
  SharedDtor();
}

void CoinInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CoinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoinInfo_descriptor_;
}

const CoinInfo& CoinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

CoinInfo* CoinInfo::default_instance_ = NULL;

CoinInfo* CoinInfo::New() const {
  return new CoinInfo;
}

void CoinInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CoinInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cointype_, coinnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.CoinInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 coinType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cointype_)));
          set_has_cointype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coinNum;
        break;
      }

      // required uint32 coinNum = 2;
      case 2: {
        if (tag == 16) {
         parse_coinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinnum_)));
          set_has_coinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.CoinInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.CoinInfo)
  return false;
#undef DO_
}

void CoinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.CoinInfo)
  // required uint32 coinType = 1;
  if (has_cointype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cointype(), output);
  }

  // required uint32 coinNum = 2;
  if (has_coinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coinnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.CoinInfo)
}

::google::protobuf::uint8* CoinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.CoinInfo)
  // required uint32 coinType = 1;
  if (has_cointype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cointype(), target);
  }

  // required uint32 coinNum = 2;
  if (has_coinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coinnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.CoinInfo)
  return target;
}

int CoinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 coinType = 1;
    if (has_cointype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cointype());
    }

    // required uint32 coinNum = 2;
    if (has_coinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coinnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoinInfo::MergeFrom(const CoinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cointype()) {
      set_cointype(from.cointype());
    }
    if (from.has_coinnum()) {
      set_coinnum(from.coinnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinInfo::CopyFrom(const CoinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CoinInfo::Swap(CoinInfo* other) {
  if (other != this) {
    std::swap(cointype_, other->cointype_);
    std::swap(coinnum_, other->coinnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoinInfo_descriptor_;
  metadata.reflection = CoinInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kTemplateidFieldNumber;
const int ItemInfo::kTotalnumFieldNumber;
const int ItemInfo::kValue1FieldNumber;
const int ItemInfo::kValue2FieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ItemInfo)
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  templateid_ = 0u;
  totalnum_ = 0u;
  value1_ = 0u;
  value2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(templateid_, value2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 templateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalnum;
        break;
      }

      // required uint32 totalnum = 2;
      case 2: {
        if (tag == 16) {
         parse_totalnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value1;
        break;
      }

      // optional uint32 value1 = 3;
      case 3: {
        if (tag == 24) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value2;
        break;
      }

      // optional uint32 value2 = 4;
      case 4: {
        if (tag == 32) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ItemInfo)
  // required uint32 templateid = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // required uint32 totalnum = 2;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalnum(), output);
  }

  // optional uint32 value1 = 3;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value1(), output);
  }

  // optional uint32 value2 = 4;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ItemInfo)
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ItemInfo)
  // required uint32 templateid = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // required uint32 totalnum = 2;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalnum(), target);
  }

  // optional uint32 value1 = 3;
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value1(), target);
  }

  // optional uint32 value2 = 4;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ItemInfo)
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 templateid = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint32 totalnum = 2;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnum());
    }

    // optional uint32 value1 = 3;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value1());
    }

    // optional uint32 value2 = 4;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(totalnum_, other->totalnum_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeedSource::kSeedIdFieldNumber;
const int SeedSource::kTotalnumFieldNumber;
#endif  // !_MSC_VER

SeedSource::SeedSource()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.SeedSource)
}

void SeedSource::InitAsDefaultInstance() {
}

SeedSource::SeedSource(const SeedSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.SeedSource)
}

void SeedSource::SharedCtor() {
  _cached_size_ = 0;
  seedid_ = 0u;
  totalnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeedSource::~SeedSource() {
  // @@protoc_insertion_point(destructor:TgsProtocol.SeedSource)
  SharedDtor();
}

void SeedSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeedSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeedSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeedSource_descriptor_;
}

const SeedSource& SeedSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

SeedSource* SeedSource::default_instance_ = NULL;

SeedSource* SeedSource::New() const {
  return new SeedSource;
}

void SeedSource::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SeedSource*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seedid_, totalnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeedSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.SeedSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seedId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seedid_)));
          set_has_seedid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalnum;
        break;
      }

      // required uint32 totalnum = 2;
      case 2: {
        if (tag == 16) {
         parse_totalnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.SeedSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.SeedSource)
  return false;
#undef DO_
}

void SeedSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.SeedSource)
  // required uint32 seedId = 1;
  if (has_seedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seedid(), output);
  }

  // required uint32 totalnum = 2;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.SeedSource)
}

::google::protobuf::uint8* SeedSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.SeedSource)
  // required uint32 seedId = 1;
  if (has_seedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seedid(), target);
  }

  // required uint32 totalnum = 2;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.SeedSource)
  return target;
}

int SeedSource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seedId = 1;
    if (has_seedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seedid());
    }

    // required uint32 totalnum = 2;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeedSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeedSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeedSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeedSource::MergeFrom(const SeedSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seedid()) {
      set_seedid(from.seedid());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeedSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeedSource::CopyFrom(const SeedSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeedSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SeedSource::Swap(SeedSource* other) {
  if (other != this) {
    std::swap(seedid_, other->seedid_);
    std::swap(totalnum_, other->totalnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeedSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeedSource_descriptor_;
  metadata.reflection = SeedSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBGodEquip::kTemplateidFieldNumber;
const int DBGodEquip::kTotalnumFieldNumber;
#endif  // !_MSC_VER

DBGodEquip::DBGodEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBGodEquip)
}

void DBGodEquip::InitAsDefaultInstance() {
}

DBGodEquip::DBGodEquip(const DBGodEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBGodEquip)
}

void DBGodEquip::SharedCtor() {
  _cached_size_ = 0;
  templateid_ = 0u;
  totalnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBGodEquip::~DBGodEquip() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBGodEquip)
  SharedDtor();
}

void DBGodEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBGodEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBGodEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBGodEquip_descriptor_;
}

const DBGodEquip& DBGodEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBGodEquip* DBGodEquip::default_instance_ = NULL;

DBGodEquip* DBGodEquip::New() const {
  return new DBGodEquip;
}

void DBGodEquip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBGodEquip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(templateid_, totalnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBGodEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBGodEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 templateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalnum;
        break;
      }

      // required uint32 totalnum = 2;
      case 2: {
        if (tag == 16) {
         parse_totalnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBGodEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBGodEquip)
  return false;
#undef DO_
}

void DBGodEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBGodEquip)
  // required uint32 templateid = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // required uint32 totalnum = 2;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBGodEquip)
}

::google::protobuf::uint8* DBGodEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBGodEquip)
  // required uint32 templateid = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // required uint32 totalnum = 2;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBGodEquip)
  return target;
}

int DBGodEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 templateid = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint32 totalnum = 2;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBGodEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBGodEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBGodEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBGodEquip::MergeFrom(const DBGodEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBGodEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBGodEquip::CopyFrom(const DBGodEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGodEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DBGodEquip::Swap(DBGodEquip* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(totalnum_, other->totalnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBGodEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBGodEquip_descriptor_;
  metadata.reflection = DBGodEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbBagInfo::kPropFieldNumber;
#endif  // !_MSC_VER

DbBagInfo::DbBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbBagInfo)
}

void DbBagInfo::InitAsDefaultInstance() {
}

DbBagInfo::DbBagInfo(const DbBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbBagInfo)
}

void DbBagInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbBagInfo::~DbBagInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbBagInfo)
  SharedDtor();
}

void DbBagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbBagInfo_descriptor_;
}

const DbBagInfo& DbBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DbBagInfo* DbBagInfo::default_instance_ = NULL;

DbBagInfo* DbBagInfo::New() const {
  return new DbBagInfo;
}

void DbBagInfo::Clear() {
  prop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbBagInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.ItemInfo prop = 1;
      case 1: {
        if (tag == 10) {
         parse_prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_prop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbBagInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbBagInfo)
  return false;
#undef DO_
}

void DbBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbBagInfo)
  // repeated .TgsProtocol.ItemInfo prop = 1;
  for (int i = 0; i < this->prop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbBagInfo)
}

::google::protobuf::uint8* DbBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbBagInfo)
  // repeated .TgsProtocol.ItemInfo prop = 1;
  for (int i = 0; i < this->prop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbBagInfo)
  return target;
}

int DbBagInfo::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.ItemInfo prop = 1;
  total_size += 1 * this->prop_size();
  for (int i = 0; i < this->prop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbBagInfo::MergeFrom(const DbBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  prop_.MergeFrom(from.prop_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbBagInfo::CopyFrom(const DbBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbBagInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->prop())) return false;
  return true;
}

void DbBagInfo::Swap(DbBagInfo* other) {
  if (other != this) {
    prop_.Swap(&other->prop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbBagInfo_descriptor_;
  metadata.reflection = DbBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBEvaluation::kInstanceIdFieldNumber;
const int DBEvaluation::kEvaluationFieldNumber;
const int DBEvaluation::kChallengeTimesFieldNumber;
const int DBEvaluation::kResetTimesFieldNumber;
#endif  // !_MSC_VER

DBEvaluation::DBEvaluation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBEvaluation)
}

void DBEvaluation::InitAsDefaultInstance() {
}

DBEvaluation::DBEvaluation(const DBEvaluation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBEvaluation)
}

void DBEvaluation::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0u;
  evaluation_ = 0u;
  challengetimes_ = 0u;
  resettimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBEvaluation::~DBEvaluation() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBEvaluation)
  SharedDtor();
}

void DBEvaluation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBEvaluation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBEvaluation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBEvaluation_descriptor_;
}

const DBEvaluation& DBEvaluation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBEvaluation* DBEvaluation::default_instance_ = NULL;

DBEvaluation* DBEvaluation::New() const {
  return new DBEvaluation;
}

void DBEvaluation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBEvaluation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(instanceid_, resettimes_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBEvaluation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBEvaluation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instanceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_evaluation;
        break;
      }

      // required uint32 evaluation = 2;
      case 2: {
        if (tag == 16) {
         parse_evaluation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evaluation_)));
          set_has_evaluation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_challengeTimes;
        break;
      }

      // required uint32 challengeTimes = 3;
      case 3: {
        if (tag == 24) {
         parse_challengeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengetimes_)));
          set_has_challengetimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resetTimes;
        break;
      }

      // required uint32 resetTimes = 4;
      case 4: {
        if (tag == 32) {
         parse_resetTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettimes_)));
          set_has_resettimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBEvaluation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBEvaluation)
  return false;
#undef DO_
}

void DBEvaluation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBEvaluation)
  // required uint32 instanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instanceid(), output);
  }

  // required uint32 evaluation = 2;
  if (has_evaluation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->evaluation(), output);
  }

  // required uint32 challengeTimes = 3;
  if (has_challengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challengetimes(), output);
  }

  // required uint32 resetTimes = 4;
  if (has_resettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resettimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBEvaluation)
}

::google::protobuf::uint8* DBEvaluation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBEvaluation)
  // required uint32 instanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instanceid(), target);
  }

  // required uint32 evaluation = 2;
  if (has_evaluation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->evaluation(), target);
  }

  // required uint32 challengeTimes = 3;
  if (has_challengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challengetimes(), target);
  }

  // required uint32 resetTimes = 4;
  if (has_resettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resettimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBEvaluation)
  return target;
}

int DBEvaluation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceid());
    }

    // required uint32 evaluation = 2;
    if (has_evaluation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evaluation());
    }

    // required uint32 challengeTimes = 3;
    if (has_challengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengetimes());
    }

    // required uint32 resetTimes = 4;
    if (has_resettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBEvaluation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBEvaluation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBEvaluation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBEvaluation::MergeFrom(const DBEvaluation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_evaluation()) {
      set_evaluation(from.evaluation());
    }
    if (from.has_challengetimes()) {
      set_challengetimes(from.challengetimes());
    }
    if (from.has_resettimes()) {
      set_resettimes(from.resettimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBEvaluation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBEvaluation::CopyFrom(const DBEvaluation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBEvaluation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DBEvaluation::Swap(DBEvaluation* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(evaluation_, other->evaluation_);
    std::swap(challengetimes_, other->challengetimes_);
    std::swap(resettimes_, other->resettimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBEvaluation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBEvaluation_descriptor_;
  metadata.reflection = DBEvaluation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBEvaluationList::kEvaluationFieldNumber;
const int DBEvaluationList::kShareCountFieldNumber;
const int DBEvaluationList::kShareBuyFieldNumber;
#endif  // !_MSC_VER

DBEvaluationList::DBEvaluationList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBEvaluationList)
}

void DBEvaluationList::InitAsDefaultInstance() {
}

DBEvaluationList::DBEvaluationList(const DBEvaluationList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBEvaluationList)
}

void DBEvaluationList::SharedCtor() {
  _cached_size_ = 0;
  share_count_ = 0u;
  share_buy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBEvaluationList::~DBEvaluationList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBEvaluationList)
  SharedDtor();
}

void DBEvaluationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBEvaluationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBEvaluationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBEvaluationList_descriptor_;
}

const DBEvaluationList& DBEvaluationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBEvaluationList* DBEvaluationList::default_instance_ = NULL;

DBEvaluationList* DBEvaluationList::New() const {
  return new DBEvaluationList;
}

void DBEvaluationList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBEvaluationList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(share_count_, share_buy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  evaluation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBEvaluationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBEvaluationList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DBEvaluation evaluation = 1;
      case 1: {
        if (tag == 10) {
         parse_evaluation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_evaluation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_evaluation;
        if (input->ExpectTag(16)) goto parse_share_count;
        break;
      }

      // optional uint32 share_count = 2;
      case 2: {
        if (tag == 16) {
         parse_share_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &share_count_)));
          set_has_share_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_share_buy;
        break;
      }

      // optional uint32 share_buy = 3;
      case 3: {
        if (tag == 24) {
         parse_share_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &share_buy_)));
          set_has_share_buy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBEvaluationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBEvaluationList)
  return false;
#undef DO_
}

void DBEvaluationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBEvaluationList)
  // repeated .TgsProtocol.DBEvaluation evaluation = 1;
  for (int i = 0; i < this->evaluation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->evaluation(i), output);
  }

  // optional uint32 share_count = 2;
  if (has_share_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->share_count(), output);
  }

  // optional uint32 share_buy = 3;
  if (has_share_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->share_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBEvaluationList)
}

::google::protobuf::uint8* DBEvaluationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBEvaluationList)
  // repeated .TgsProtocol.DBEvaluation evaluation = 1;
  for (int i = 0; i < this->evaluation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->evaluation(i), target);
  }

  // optional uint32 share_count = 2;
  if (has_share_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->share_count(), target);
  }

  // optional uint32 share_buy = 3;
  if (has_share_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->share_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBEvaluationList)
  return target;
}

int DBEvaluationList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 share_count = 2;
    if (has_share_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->share_count());
    }

    // optional uint32 share_buy = 3;
    if (has_share_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->share_buy());
    }

  }
  // repeated .TgsProtocol.DBEvaluation evaluation = 1;
  total_size += 1 * this->evaluation_size();
  for (int i = 0; i < this->evaluation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->evaluation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBEvaluationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBEvaluationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBEvaluationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBEvaluationList::MergeFrom(const DBEvaluationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  evaluation_.MergeFrom(from.evaluation_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_share_count()) {
      set_share_count(from.share_count());
    }
    if (from.has_share_buy()) {
      set_share_buy(from.share_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBEvaluationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBEvaluationList::CopyFrom(const DBEvaluationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBEvaluationList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->evaluation())) return false;
  return true;
}

void DBEvaluationList::Swap(DBEvaluationList* other) {
  if (other != this) {
    evaluation_.Swap(&other->evaluation_);
    std::swap(share_count_, other->share_count_);
    std::swap(share_buy_, other->share_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBEvaluationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBEvaluationList_descriptor_;
  metadata.reflection = DBEvaluationList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBChapterRewardList::kChapterRewardFieldNumber;
#endif  // !_MSC_VER

DBChapterRewardList::DBChapterRewardList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBChapterRewardList)
}

void DBChapterRewardList::InitAsDefaultInstance() {
}

DBChapterRewardList::DBChapterRewardList(const DBChapterRewardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBChapterRewardList)
}

void DBChapterRewardList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBChapterRewardList::~DBChapterRewardList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBChapterRewardList)
  SharedDtor();
}

void DBChapterRewardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBChapterRewardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBChapterRewardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBChapterRewardList_descriptor_;
}

const DBChapterRewardList& DBChapterRewardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBChapterRewardList* DBChapterRewardList::default_instance_ = NULL;

DBChapterRewardList* DBChapterRewardList::New() const {
  return new DBChapterRewardList;
}

void DBChapterRewardList::Clear() {
  chapterreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBChapterRewardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBChapterRewardList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 chapterReward = 1;
      case 1: {
        if (tag == 8) {
         parse_chapterReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_chapterreward())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chapterreward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_chapterReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBChapterRewardList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBChapterRewardList)
  return false;
#undef DO_
}

void DBChapterRewardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBChapterRewardList)
  // repeated uint32 chapterReward = 1;
  for (int i = 0; i < this->chapterreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->chapterreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBChapterRewardList)
}

::google::protobuf::uint8* DBChapterRewardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBChapterRewardList)
  // repeated uint32 chapterReward = 1;
  for (int i = 0; i < this->chapterreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->chapterreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBChapterRewardList)
  return target;
}

int DBChapterRewardList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 chapterReward = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->chapterreward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chapterreward(i));
    }
    total_size += 1 * this->chapterreward_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBChapterRewardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBChapterRewardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBChapterRewardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBChapterRewardList::MergeFrom(const DBChapterRewardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapterreward_.MergeFrom(from.chapterreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBChapterRewardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBChapterRewardList::CopyFrom(const DBChapterRewardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBChapterRewardList::IsInitialized() const {

  return true;
}

void DBChapterRewardList::Swap(DBChapterRewardList* other) {
  if (other != this) {
    chapterreward_.Swap(&other->chapterreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBChapterRewardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBChapterRewardList_descriptor_;
  metadata.reflection = DBChapterRewardList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBHeroEquip::kTemplateIdFieldNumber;
const int DBHeroEquip::kStarFieldNumber;
const int DBHeroEquip::kAttrValFieldNumber;
const int DBHeroEquip::kScheduleValFieldNumber;
#endif  // !_MSC_VER

DBHeroEquip::DBHeroEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBHeroEquip)
}

void DBHeroEquip::InitAsDefaultInstance() {
}

DBHeroEquip::DBHeroEquip(const DBHeroEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBHeroEquip)
}

void DBHeroEquip::SharedCtor() {
  _cached_size_ = 0;
  templateid_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBHeroEquip::~DBHeroEquip() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBHeroEquip)
  SharedDtor();
}

void DBHeroEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBHeroEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBHeroEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBHeroEquip_descriptor_;
}

const DBHeroEquip& DBHeroEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBHeroEquip* DBHeroEquip::default_instance_ = NULL;

DBHeroEquip* DBHeroEquip::New() const {
  return new DBHeroEquip;
}

void DBHeroEquip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBHeroEquip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(templateid_, star_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attrval_.Clear();
  scheduleval_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBHeroEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBHeroEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 templateId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attrVal;
        break;
      }

      // repeated uint32 attrVal = 3;
      case 3: {
        if (tag == 24) {
         parse_attrVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_attrval())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attrval())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attrVal;
        if (input->ExpectTag(32)) goto parse_scheduleVal;
        break;
      }

      // repeated uint32 scheduleVal = 4;
      case 4: {
        if (tag == 32) {
         parse_scheduleVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_scheduleval())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_scheduleval())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_scheduleVal;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBHeroEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBHeroEquip)
  return false;
#undef DO_
}

void DBHeroEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBHeroEquip)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // repeated uint32 attrVal = 3;
  for (int i = 0; i < this->attrval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->attrval(i), output);
  }

  // repeated uint32 scheduleVal = 4;
  for (int i = 0; i < this->scheduleval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->scheduleval(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBHeroEquip)
}

::google::protobuf::uint8* DBHeroEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBHeroEquip)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // repeated uint32 attrVal = 3;
  for (int i = 0; i < this->attrval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->attrval(i), target);
  }

  // repeated uint32 scheduleVal = 4;
  for (int i = 0; i < this->scheduleval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->scheduleval(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBHeroEquip)
  return target;
}

int DBHeroEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 templateId = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  // repeated uint32 attrVal = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->attrval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attrval(i));
    }
    total_size += 1 * this->attrval_size() + data_size;
  }

  // repeated uint32 scheduleVal = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->scheduleval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->scheduleval(i));
    }
    total_size += 1 * this->scheduleval_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBHeroEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBHeroEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBHeroEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBHeroEquip::MergeFrom(const DBHeroEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrval_.MergeFrom(from.attrval_);
  scheduleval_.MergeFrom(from.scheduleval_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBHeroEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBHeroEquip::CopyFrom(const DBHeroEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBHeroEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DBHeroEquip::Swap(DBHeroEquip* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(star_, other->star_);
    attrval_.Swap(&other->attrval_);
    scheduleval_.Swap(&other->scheduleval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBHeroEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBHeroEquip_descriptor_;
  metadata.reflection = DBHeroEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBEquipNew::kTemplateIdFieldNumber;
const int DBEquipNew::kInstanceIdFieldNumber;
const int DBEquipNew::kStrengLevelFieldNumber;
const int DBEquipNew::kRefineLevelFieldNumber;
const int DBEquipNew::kStarLevelFieldNumber;
const int DBEquipNew::kStrengExpFieldNumber;
const int DBEquipNew::kRefineExpFieldNumber;
#endif  // !_MSC_VER

DBEquipNew::DBEquipNew()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBEquipNew)
}

void DBEquipNew::InitAsDefaultInstance() {
}

DBEquipNew::DBEquipNew(const DBEquipNew& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBEquipNew)
}

void DBEquipNew::SharedCtor() {
  _cached_size_ = 0;
  templateid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  strenglevel_ = 0u;
  refinelevel_ = 0u;
  starlevel_ = 0u;
  strengexp_ = 0u;
  refineexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBEquipNew::~DBEquipNew() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBEquipNew)
  SharedDtor();
}

void DBEquipNew::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBEquipNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBEquipNew::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBEquipNew_descriptor_;
}

const DBEquipNew& DBEquipNew::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBEquipNew* DBEquipNew::default_instance_ = NULL;

DBEquipNew* DBEquipNew::New() const {
  return new DBEquipNew;
}

void DBEquipNew::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBEquipNew*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(instanceid_, refineexp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBEquipNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBEquipNew)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 templateId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceId;
        break;
      }

      // required uint64 instanceId = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_strengLevel;
        break;
      }

      // required uint32 strengLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_strengLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strenglevel_)));
          set_has_strenglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_refineLevel;
        break;
      }

      // required uint32 refineLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_refineLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelevel_)));
          set_has_refinelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_starLevel;
        break;
      }

      // optional uint32 starLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_starLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlevel_)));
          set_has_starlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_strengExp;
        break;
      }

      // optional uint32 strengExp = 6;
      case 6: {
        if (tag == 48) {
         parse_strengExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strengexp_)));
          set_has_strengexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_refineExp;
        break;
      }

      // optional uint32 refineExp = 7;
      case 7: {
        if (tag == 56) {
         parse_refineExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refineexp_)));
          set_has_refineexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBEquipNew)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBEquipNew)
  return false;
#undef DO_
}

void DBEquipNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBEquipNew)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // required uint64 instanceId = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // required uint32 strengLevel = 3;
  if (has_strenglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->strenglevel(), output);
  }

  // required uint32 refineLevel = 4;
  if (has_refinelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->refinelevel(), output);
  }

  // optional uint32 starLevel = 5;
  if (has_starlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->starlevel(), output);
  }

  // optional uint32 strengExp = 6;
  if (has_strengexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->strengexp(), output);
  }

  // optional uint32 refineExp = 7;
  if (has_refineexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->refineexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBEquipNew)
}

::google::protobuf::uint8* DBEquipNew::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBEquipNew)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // required uint64 instanceId = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // required uint32 strengLevel = 3;
  if (has_strenglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->strenglevel(), target);
  }

  // required uint32 refineLevel = 4;
  if (has_refinelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->refinelevel(), target);
  }

  // optional uint32 starLevel = 5;
  if (has_starlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->starlevel(), target);
  }

  // optional uint32 strengExp = 6;
  if (has_strengexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->strengexp(), target);
  }

  // optional uint32 refineExp = 7;
  if (has_refineexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->refineexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBEquipNew)
  return target;
}

int DBEquipNew::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 templateId = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint64 instanceId = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // required uint32 strengLevel = 3;
    if (has_strenglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strenglevel());
    }

    // required uint32 refineLevel = 4;
    if (has_refinelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelevel());
    }

    // optional uint32 starLevel = 5;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlevel());
    }

    // optional uint32 strengExp = 6;
    if (has_strengexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strengexp());
    }

    // optional uint32 refineExp = 7;
    if (has_refineexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refineexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBEquipNew::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBEquipNew* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBEquipNew*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBEquipNew::MergeFrom(const DBEquipNew& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_strenglevel()) {
      set_strenglevel(from.strenglevel());
    }
    if (from.has_refinelevel()) {
      set_refinelevel(from.refinelevel());
    }
    if (from.has_starlevel()) {
      set_starlevel(from.starlevel());
    }
    if (from.has_strengexp()) {
      set_strengexp(from.strengexp());
    }
    if (from.has_refineexp()) {
      set_refineexp(from.refineexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBEquipNew::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBEquipNew::CopyFrom(const DBEquipNew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBEquipNew::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DBEquipNew::Swap(DBEquipNew* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(strenglevel_, other->strenglevel_);
    std::swap(refinelevel_, other->refinelevel_);
    std::swap(starlevel_, other->starlevel_);
    std::swap(strengexp_, other->strengexp_);
    std::swap(refineexp_, other->refineexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBEquipNew::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBEquipNew_descriptor_;
  metadata.reflection = DBEquipNew_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBEquipNewList::kEquipNewListFieldNumber;
#endif  // !_MSC_VER

DBEquipNewList::DBEquipNewList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBEquipNewList)
}

void DBEquipNewList::InitAsDefaultInstance() {
}

DBEquipNewList::DBEquipNewList(const DBEquipNewList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBEquipNewList)
}

void DBEquipNewList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBEquipNewList::~DBEquipNewList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBEquipNewList)
  SharedDtor();
}

void DBEquipNewList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBEquipNewList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBEquipNewList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBEquipNewList_descriptor_;
}

const DBEquipNewList& DBEquipNewList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBEquipNewList* DBEquipNewList::default_instance_ = NULL;

DBEquipNewList* DBEquipNewList::New() const {
  return new DBEquipNewList;
}

void DBEquipNewList::Clear() {
  equipnewlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBEquipNewList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBEquipNewList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DBEquipNew equipNewList = 1;
      case 1: {
        if (tag == 10) {
         parse_equipNewList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipnewlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equipNewList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBEquipNewList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBEquipNewList)
  return false;
#undef DO_
}

void DBEquipNewList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBEquipNewList)
  // repeated .TgsProtocol.DBEquipNew equipNewList = 1;
  for (int i = 0; i < this->equipnewlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipnewlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBEquipNewList)
}

::google::protobuf::uint8* DBEquipNewList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBEquipNewList)
  // repeated .TgsProtocol.DBEquipNew equipNewList = 1;
  for (int i = 0; i < this->equipnewlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipnewlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBEquipNewList)
  return target;
}

int DBEquipNewList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DBEquipNew equipNewList = 1;
  total_size += 1 * this->equipnewlist_size();
  for (int i = 0; i < this->equipnewlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipnewlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBEquipNewList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBEquipNewList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBEquipNewList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBEquipNewList::MergeFrom(const DBEquipNewList& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipnewlist_.MergeFrom(from.equipnewlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBEquipNewList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBEquipNewList::CopyFrom(const DBEquipNewList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBEquipNewList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->equipnewlist())) return false;
  return true;
}

void DBEquipNewList::Swap(DBEquipNewList* other) {
  if (other != this) {
    equipnewlist_.Swap(&other->equipnewlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBEquipNewList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBEquipNewList_descriptor_;
  metadata.reflection = DBEquipNewList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBHeroInfo::kTemplateIdFieldNumber;
const int DBHeroInfo::kInstanceIdFieldNumber;
const int DBHeroInfo::kLevelFieldNumber;
const int DBHeroInfo::kExpFieldNumber;
const int DBHeroInfo::kEvolutionLevelFieldNumber;
const int DBHeroInfo::kForceLevelFieldNumber;
const int DBHeroInfo::kEquipFieldNumber;
const int DBHeroInfo::kSkillFieldNumber;
const int DBHeroInfo::kHeroNameFieldNumber;
const int DBHeroInfo::kEquipNewFieldNumber;
const int DBHeroInfo::kFashionIdFieldNumber;
const int DBHeroInfo::kDeificationlevelFieldNumber;
const int DBHeroInfo::kWingslevelFieldNumber;
const int DBHeroInfo::kWingsrateFieldNumber;
const int DBHeroInfo::kSourcesFieldNumber;
const int DBHeroInfo::kWakeLevelFieldNumber;
const int DBHeroInfo::kWakeEquipsFieldNumber;
#endif  // !_MSC_VER

DBHeroInfo::DBHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBHeroInfo)
}

void DBHeroInfo::InitAsDefaultInstance() {
}

DBHeroInfo::DBHeroInfo(const DBHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBHeroInfo)
}

void DBHeroInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  templateid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  exp_ = 0u;
  evolutionlevel_ = 0u;
  forcelevel_ = 0u;
  heroname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fashionid_ = 0u;
  deificationlevel_ = 0u;
  wingslevel_ = 0u;
  wingsrate_ = 0u;
  wakelevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBHeroInfo::~DBHeroInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBHeroInfo)
  SharedDtor();
}

void DBHeroInfo::SharedDtor() {
  if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete heroname_;
  }
  if (this != default_instance_) {
  }
}

void DBHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBHeroInfo_descriptor_;
}

const DBHeroInfo& DBHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBHeroInfo* DBHeroInfo::default_instance_ = NULL;

DBHeroInfo* DBHeroInfo::New() const {
  return new DBHeroInfo;
}

void DBHeroInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBHeroInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(instanceid_, evolutionlevel_);
    forcelevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & 48384) {
    ZR_(deificationlevel_, wingslevel_);
    ZR_(wingsrate_, wakelevel_);
    if (has_heroname()) {
      if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        heroname_->clear();
      }
    }
    fashionid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equip_.Clear();
  skill_.Clear();
  equipnew_.Clear();
  sources_.Clear();
  wakeequips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBHeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 templateId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceId;
        break;
      }

      // required uint64 instanceId = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_evolutionLevel;
        break;
      }

      // required uint32 evolutionLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_evolutionLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutionlevel_)));
          set_has_evolutionlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_forceLevel;
        break;
      }

      // required uint32 forceLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_forceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcelevel_)));
          set_has_forcelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_equip;
        break;
      }

      // repeated .TgsProtocol.DBHeroEquip equip = 7;
      case 7: {
        if (tag == 58) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_equip;
        if (input->ExpectTag(64)) goto parse_skill;
        break;
      }

      // repeated uint32 skill = 8;
      case 8: {
        if (tag == 64) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_skill())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_skill;
        if (input->ExpectTag(74)) goto parse_heroName;
        break;
      }

      // optional bytes heroName = 9;
      case 9: {
        if (tag == 74) {
         parse_heroName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_heroname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_equipNew;
        break;
      }

      // repeated uint64 equipNew = 10;
      case 10: {
        if (tag == 80) {
         parse_equipNew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 80, input, this->mutable_equipnew())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_equipnew())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_equipNew;
        if (input->ExpectTag(88)) goto parse_fashionId;
        break;
      }

      // optional uint32 fashionId = 11;
      case 11: {
        if (tag == 88) {
         parse_fashionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionid_)));
          set_has_fashionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_deificationlevel;
        break;
      }

      // optional uint32 deificationlevel = 12;
      case 12: {
        if (tag == 96) {
         parse_deificationlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deificationlevel_)));
          set_has_deificationlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_wingslevel;
        break;
      }

      // optional uint32 wingslevel = 13;
      case 13: {
        if (tag == 104) {
         parse_wingslevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingslevel_)));
          set_has_wingslevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_wingsrate;
        break;
      }

      // optional uint32 wingsrate = 14;
      case 14: {
        if (tag == 112) {
         parse_wingsrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingsrate_)));
          set_has_wingsrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_sources;
        break;
      }

      // repeated .TgsProtocol.ClientSource sources = 15;
      case 15: {
        if (tag == 122) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_sources;
        if (input->ExpectTag(128)) goto parse_wakeLevel;
        break;
      }

      // optional uint32 wakeLevel = 16;
      case 16: {
        if (tag == 128) {
         parse_wakeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wakelevel_)));
          set_has_wakelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_wakeEquips;
        break;
      }

      // repeated uint32 wakeEquips = 17;
      case 17: {
        if (tag == 136) {
         parse_wakeEquips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_wakeequips())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wakeequips())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_wakeEquips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBHeroInfo)
  return false;
#undef DO_
}

void DBHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBHeroInfo)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // required uint64 instanceId = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // required uint32 evolutionLevel = 5;
  if (has_evolutionlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->evolutionlevel(), output);
  }

  // required uint32 forceLevel = 6;
  if (has_forcelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->forcelevel(), output);
  }

  // repeated .TgsProtocol.DBHeroEquip equip = 7;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equip(i), output);
  }

  // repeated uint32 skill = 8;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->skill(i), output);
  }

  // optional bytes heroName = 9;
  if (has_heroname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->heroname(), output);
  }

  // repeated uint64 equipNew = 10;
  for (int i = 0; i < this->equipnew_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      10, this->equipnew(i), output);
  }

  // optional uint32 fashionId = 11;
  if (has_fashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->fashionid(), output);
  }

  // optional uint32 deificationlevel = 12;
  if (has_deificationlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->deificationlevel(), output);
  }

  // optional uint32 wingslevel = 13;
  if (has_wingslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->wingslevel(), output);
  }

  // optional uint32 wingsrate = 14;
  if (has_wingsrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->wingsrate(), output);
  }

  // repeated .TgsProtocol.ClientSource sources = 15;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->sources(i), output);
  }

  // optional uint32 wakeLevel = 16;
  if (has_wakelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->wakelevel(), output);
  }

  // repeated uint32 wakeEquips = 17;
  for (int i = 0; i < this->wakeequips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->wakeequips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBHeroInfo)
}

::google::protobuf::uint8* DBHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBHeroInfo)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // required uint64 instanceId = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // required uint32 evolutionLevel = 5;
  if (has_evolutionlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->evolutionlevel(), target);
  }

  // required uint32 forceLevel = 6;
  if (has_forcelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->forcelevel(), target);
  }

  // repeated .TgsProtocol.DBHeroEquip equip = 7;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equip(i), target);
  }

  // repeated uint32 skill = 8;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->skill(i), target);
  }

  // optional bytes heroName = 9;
  if (has_heroname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->heroname(), target);
  }

  // repeated uint64 equipNew = 10;
  for (int i = 0; i < this->equipnew_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(10, this->equipnew(i), target);
  }

  // optional uint32 fashionId = 11;
  if (has_fashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->fashionid(), target);
  }

  // optional uint32 deificationlevel = 12;
  if (has_deificationlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->deificationlevel(), target);
  }

  // optional uint32 wingslevel = 13;
  if (has_wingslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->wingslevel(), target);
  }

  // optional uint32 wingsrate = 14;
  if (has_wingsrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->wingsrate(), target);
  }

  // repeated .TgsProtocol.ClientSource sources = 15;
  for (int i = 0; i < this->sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->sources(i), target);
  }

  // optional uint32 wakeLevel = 16;
  if (has_wakelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->wakelevel(), target);
  }

  // repeated uint32 wakeEquips = 17;
  for (int i = 0; i < this->wakeequips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->wakeequips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBHeroInfo)
  return target;
}

int DBHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 templateId = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint64 instanceId = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 evolutionLevel = 5;
    if (has_evolutionlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutionlevel());
    }

    // required uint32 forceLevel = 6;
    if (has_forcelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcelevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes heroName = 9;
    if (has_heroname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->heroname());
    }

    // optional uint32 fashionId = 11;
    if (has_fashionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionid());
    }

    // optional uint32 deificationlevel = 12;
    if (has_deificationlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deificationlevel());
    }

    // optional uint32 wingslevel = 13;
    if (has_wingslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingslevel());
    }

    // optional uint32 wingsrate = 14;
    if (has_wingsrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingsrate());
    }

    // optional uint32 wakeLevel = 16;
    if (has_wakelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wakelevel());
    }

  }
  // repeated .TgsProtocol.DBHeroEquip equip = 7;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated uint32 skill = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skill(i));
    }
    total_size += 1 * this->skill_size() + data_size;
  }

  // repeated uint64 equipNew = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipnew_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->equipnew(i));
    }
    total_size += 1 * this->equipnew_size() + data_size;
  }

  // repeated .TgsProtocol.ClientSource sources = 15;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }

  // repeated uint32 wakeEquips = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->wakeequips_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->wakeequips(i));
    }
    total_size += 2 * this->wakeequips_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBHeroInfo::MergeFrom(const DBHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  skill_.MergeFrom(from.skill_);
  equipnew_.MergeFrom(from.equipnew_);
  sources_.MergeFrom(from.sources_);
  wakeequips_.MergeFrom(from.wakeequips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_evolutionlevel()) {
      set_evolutionlevel(from.evolutionlevel());
    }
    if (from.has_forcelevel()) {
      set_forcelevel(from.forcelevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_heroname()) {
      set_heroname(from.heroname());
    }
    if (from.has_fashionid()) {
      set_fashionid(from.fashionid());
    }
    if (from.has_deificationlevel()) {
      set_deificationlevel(from.deificationlevel());
    }
    if (from.has_wingslevel()) {
      set_wingslevel(from.wingslevel());
    }
    if (from.has_wingsrate()) {
      set_wingsrate(from.wingsrate());
    }
    if (from.has_wakelevel()) {
      set_wakelevel(from.wakelevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBHeroInfo::CopyFrom(const DBHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBHeroInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->equip())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sources())) return false;
  return true;
}

void DBHeroInfo::Swap(DBHeroInfo* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(evolutionlevel_, other->evolutionlevel_);
    std::swap(forcelevel_, other->forcelevel_);
    equip_.Swap(&other->equip_);
    skill_.Swap(&other->skill_);
    std::swap(heroname_, other->heroname_);
    equipnew_.Swap(&other->equipnew_);
    std::swap(fashionid_, other->fashionid_);
    std::swap(deificationlevel_, other->deificationlevel_);
    std::swap(wingslevel_, other->wingslevel_);
    std::swap(wingsrate_, other->wingsrate_);
    sources_.Swap(&other->sources_);
    std::swap(wakelevel_, other->wakelevel_);
    wakeequips_.Swap(&other->wakeequips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBHeroInfo_descriptor_;
  metadata.reflection = DBHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBHeroList::kHeroListFieldNumber;
#endif  // !_MSC_VER

DBHeroList::DBHeroList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBHeroList)
}

void DBHeroList::InitAsDefaultInstance() {
}

DBHeroList::DBHeroList(const DBHeroList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBHeroList)
}

void DBHeroList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBHeroList::~DBHeroList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBHeroList)
  SharedDtor();
}

void DBHeroList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBHeroList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBHeroList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBHeroList_descriptor_;
}

const DBHeroList& DBHeroList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBHeroList* DBHeroList::default_instance_ = NULL;

DBHeroList* DBHeroList::New() const {
  return new DBHeroList;
}

void DBHeroList::Clear() {
  herolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBHeroList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBHeroList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DBHeroInfo heroList = 1;
      case 1: {
        if (tag == 10) {
         parse_heroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_heroList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBHeroList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBHeroList)
  return false;
#undef DO_
}

void DBHeroList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBHeroList)
  // repeated .TgsProtocol.DBHeroInfo heroList = 1;
  for (int i = 0; i < this->herolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->herolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBHeroList)
}

::google::protobuf::uint8* DBHeroList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBHeroList)
  // repeated .TgsProtocol.DBHeroInfo heroList = 1;
  for (int i = 0; i < this->herolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->herolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBHeroList)
  return target;
}

int DBHeroList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DBHeroInfo heroList = 1;
  total_size += 1 * this->herolist_size();
  for (int i = 0; i < this->herolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBHeroList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBHeroList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBHeroList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBHeroList::MergeFrom(const DBHeroList& from) {
  GOOGLE_CHECK_NE(&from, this);
  herolist_.MergeFrom(from.herolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBHeroList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBHeroList::CopyFrom(const DBHeroList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBHeroList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->herolist())) return false;
  return true;
}

void DBHeroList::Swap(DBHeroList* other) {
  if (other != this) {
    herolist_.Swap(&other->herolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBHeroList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBHeroList_descriptor_;
  metadata.reflection = DBHeroList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBEssenceItem::kTemplateIdFieldNumber;
const int DBEssenceItem::kItemValueFieldNumber;
const int DBEssenceItem::kNumFieldNumber;
#endif  // !_MSC_VER

DBEssenceItem::DBEssenceItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBEssenceItem)
}

void DBEssenceItem::InitAsDefaultInstance() {
}

DBEssenceItem::DBEssenceItem(const DBEssenceItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBEssenceItem)
}

void DBEssenceItem::SharedCtor() {
  _cached_size_ = 0;
  templateid_ = 0u;
  itemvalue_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBEssenceItem::~DBEssenceItem() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBEssenceItem)
  SharedDtor();
}

void DBEssenceItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBEssenceItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBEssenceItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBEssenceItem_descriptor_;
}

const DBEssenceItem& DBEssenceItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBEssenceItem* DBEssenceItem::default_instance_ = NULL;

DBEssenceItem* DBEssenceItem::New() const {
  return new DBEssenceItem;
}

void DBEssenceItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBEssenceItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(templateid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBEssenceItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBEssenceItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 templateId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemValue;
        break;
      }

      // required uint32 itemValue = 2;
      case 2: {
        if (tag == 16) {
         parse_itemValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemvalue_)));
          set_has_itemvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBEssenceItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBEssenceItem)
  return false;
#undef DO_
}

void DBEssenceItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBEssenceItem)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // required uint32 itemValue = 2;
  if (has_itemvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemvalue(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBEssenceItem)
}

::google::protobuf::uint8* DBEssenceItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBEssenceItem)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // required uint32 itemValue = 2;
  if (has_itemvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemvalue(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBEssenceItem)
  return target;
}

int DBEssenceItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 templateId = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint32 itemValue = 2;
    if (has_itemvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemvalue());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBEssenceItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBEssenceItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBEssenceItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBEssenceItem::MergeFrom(const DBEssenceItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_itemvalue()) {
      set_itemvalue(from.itemvalue());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBEssenceItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBEssenceItem::CopyFrom(const DBEssenceItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBEssenceItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DBEssenceItem::Swap(DBEssenceItem* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(itemvalue_, other->itemvalue_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBEssenceItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBEssenceItem_descriptor_;
  metadata.reflection = DBEssenceItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBEssenceList::kEssenceItemFieldNumber;
#endif  // !_MSC_VER

DBEssenceList::DBEssenceList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBEssenceList)
}

void DBEssenceList::InitAsDefaultInstance() {
}

DBEssenceList::DBEssenceList(const DBEssenceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBEssenceList)
}

void DBEssenceList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBEssenceList::~DBEssenceList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBEssenceList)
  SharedDtor();
}

void DBEssenceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBEssenceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBEssenceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBEssenceList_descriptor_;
}

const DBEssenceList& DBEssenceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBEssenceList* DBEssenceList::default_instance_ = NULL;

DBEssenceList* DBEssenceList::New() const {
  return new DBEssenceList;
}

void DBEssenceList::Clear() {
  essenceitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBEssenceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBEssenceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DBEssenceItem essenceItem = 1;
      case 1: {
        if (tag == 10) {
         parse_essenceItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_essenceitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_essenceItem;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBEssenceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBEssenceList)
  return false;
#undef DO_
}

void DBEssenceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBEssenceList)
  // repeated .TgsProtocol.DBEssenceItem essenceItem = 1;
  for (int i = 0; i < this->essenceitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->essenceitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBEssenceList)
}

::google::protobuf::uint8* DBEssenceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBEssenceList)
  // repeated .TgsProtocol.DBEssenceItem essenceItem = 1;
  for (int i = 0; i < this->essenceitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->essenceitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBEssenceList)
  return target;
}

int DBEssenceList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DBEssenceItem essenceItem = 1;
  total_size += 1 * this->essenceitem_size();
  for (int i = 0; i < this->essenceitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->essenceitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBEssenceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBEssenceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBEssenceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBEssenceList::MergeFrom(const DBEssenceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  essenceitem_.MergeFrom(from.essenceitem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBEssenceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBEssenceList::CopyFrom(const DBEssenceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBEssenceList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->essenceitem())) return false;
  return true;
}

void DBEssenceList::Swap(DBEssenceList* other) {
  if (other != this) {
    essenceitem_.Swap(&other->essenceitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBEssenceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBEssenceList_descriptor_;
  metadata.reflection = DBEssenceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemUseRestrict::kTypeFieldNumber;
const int ItemUseRestrict::kValueFieldNumber;
#endif  // !_MSC_VER

ItemUseRestrict::ItemUseRestrict()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ItemUseRestrict)
}

void ItemUseRestrict::InitAsDefaultInstance() {
}

ItemUseRestrict::ItemUseRestrict(const ItemUseRestrict& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ItemUseRestrict)
}

void ItemUseRestrict::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemUseRestrict::~ItemUseRestrict() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ItemUseRestrict)
  SharedDtor();
}

void ItemUseRestrict::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemUseRestrict::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemUseRestrict::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemUseRestrict_descriptor_;
}

const ItemUseRestrict& ItemUseRestrict::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ItemUseRestrict* ItemUseRestrict::default_instance_ = NULL;

ItemUseRestrict* ItemUseRestrict::New() const {
  return new ItemUseRestrict;
}

void ItemUseRestrict::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemUseRestrict*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemUseRestrict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ItemUseRestrict)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TgsProtocol.eItemUseRestrict type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::eItemUseRestrict_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::eItemUseRestrict >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ItemUseRestrict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ItemUseRestrict)
  return false;
#undef DO_
}

void ItemUseRestrict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ItemUseRestrict)
  // required .TgsProtocol.eItemUseRestrict type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ItemUseRestrict)
}

::google::protobuf::uint8* ItemUseRestrict::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ItemUseRestrict)
  // required .TgsProtocol.eItemUseRestrict type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ItemUseRestrict)
  return target;
}

int ItemUseRestrict::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TgsProtocol.eItemUseRestrict type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemUseRestrict::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemUseRestrict* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemUseRestrict*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemUseRestrict::MergeFrom(const ItemUseRestrict& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemUseRestrict::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemUseRestrict::CopyFrom(const ItemUseRestrict& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemUseRestrict::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemUseRestrict::Swap(ItemUseRestrict* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemUseRestrict::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemUseRestrict_descriptor_;
  metadata.reflection = ItemUseRestrict_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBShopGoods::kItemTypeFieldNumber;
const int DBShopGoods::kTemplateIdFieldNumber;
const int DBShopGoods::kSellValFieldNumber;
const int DBShopGoods::kPriceTypeFieldNumber;
const int DBShopGoods::kPARA1FieldNumber;
const int DBShopGoods::kPARA2FieldNumber;
const int DBShopGoods::kBSaleFieldNumber;
const int DBShopGoods::kGoodsidFieldNumber;
#endif  // !_MSC_VER

DBShopGoods::DBShopGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBShopGoods)
}

void DBShopGoods::InitAsDefaultInstance() {
}

DBShopGoods::DBShopGoods(const DBShopGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBShopGoods)
}

void DBShopGoods::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 0u;
  templateid_ = 0u;
  sellval_ = 0u;
  pricetype_ = 0u;
  para1_ = 0u;
  para2_ = 0u;
  bsale_ = false;
  goodsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBShopGoods::~DBShopGoods() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBShopGoods)
  SharedDtor();
}

void DBShopGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBShopGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBShopGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBShopGoods_descriptor_;
}

const DBShopGoods& DBShopGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBShopGoods* DBShopGoods::default_instance_ = NULL;

DBShopGoods* DBShopGoods::New() const {
  return new DBShopGoods;
}

void DBShopGoods::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBShopGoods*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(itemtype_, goodsid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBShopGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBShopGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_templateId;
        break;
      }

      // required uint32 templateId = 2;
      case 2: {
        if (tag == 16) {
         parse_templateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SellVal;
        break;
      }

      // required uint32 SellVal = 3;
      case 3: {
        if (tag == 24) {
         parse_SellVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sellval_)));
          set_has_sellval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PriceType;
        break;
      }

      // required uint32 PriceType = 4;
      case 4: {
        if (tag == 32) {
         parse_PriceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pricetype_)));
          set_has_pricetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_PARA1;
        break;
      }

      // required uint32 PARA1 = 5;
      case 5: {
        if (tag == 40) {
         parse_PARA1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para1_)));
          set_has_para1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_PARA2;
        break;
      }

      // required uint32 PARA2 = 6;
      case 6: {
        if (tag == 48) {
         parse_PARA2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para2_)));
          set_has_para2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bSale;
        break;
      }

      // required bool bSale = 7;
      case 7: {
        if (tag == 56) {
         parse_bSale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsale_)));
          set_has_bsale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_goodsid;
        break;
      }

      // optional uint32 goodsid = 8;
      case 8: {
        if (tag == 64) {
         parse_goodsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBShopGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBShopGoods)
  return false;
#undef DO_
}

void DBShopGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBShopGoods)
  // required uint32 itemType = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemtype(), output);
  }

  // required uint32 templateId = 2;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->templateid(), output);
  }

  // required uint32 SellVal = 3;
  if (has_sellval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sellval(), output);
  }

  // required uint32 PriceType = 4;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pricetype(), output);
  }

  // required uint32 PARA1 = 5;
  if (has_para1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->para1(), output);
  }

  // required uint32 PARA2 = 6;
  if (has_para2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->para2(), output);
  }

  // required bool bSale = 7;
  if (has_bsale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bsale(), output);
  }

  // optional uint32 goodsid = 8;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->goodsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBShopGoods)
}

::google::protobuf::uint8* DBShopGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBShopGoods)
  // required uint32 itemType = 1;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemtype(), target);
  }

  // required uint32 templateId = 2;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->templateid(), target);
  }

  // required uint32 SellVal = 3;
  if (has_sellval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sellval(), target);
  }

  // required uint32 PriceType = 4;
  if (has_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pricetype(), target);
  }

  // required uint32 PARA1 = 5;
  if (has_para1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->para1(), target);
  }

  // required uint32 PARA2 = 6;
  if (has_para2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->para2(), target);
  }

  // required bool bSale = 7;
  if (has_bsale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bsale(), target);
  }

  // optional uint32 goodsid = 8;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->goodsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBShopGoods)
  return target;
}

int DBShopGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemType = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtype());
    }

    // required uint32 templateId = 2;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint32 SellVal = 3;
    if (has_sellval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sellval());
    }

    // required uint32 PriceType = 4;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pricetype());
    }

    // required uint32 PARA1 = 5;
    if (has_para1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para1());
    }

    // required uint32 PARA2 = 6;
    if (has_para2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para2());
    }

    // required bool bSale = 7;
    if (has_bsale()) {
      total_size += 1 + 1;
    }

    // optional uint32 goodsid = 8;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBShopGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBShopGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBShopGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBShopGoods::MergeFrom(const DBShopGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_sellval()) {
      set_sellval(from.sellval());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_para1()) {
      set_para1(from.para1());
    }
    if (from.has_para2()) {
      set_para2(from.para2());
    }
    if (from.has_bsale()) {
      set_bsale(from.bsale());
    }
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBShopGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBShopGoods::CopyFrom(const DBShopGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBShopGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void DBShopGoods::Swap(DBShopGoods* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(templateid_, other->templateid_);
    std::swap(sellval_, other->sellval_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(para1_, other->para1_);
    std::swap(para2_, other->para2_);
    std::swap(bsale_, other->bsale_);
    std::swap(goodsid_, other->goodsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBShopGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBShopGoods_descriptor_;
  metadata.reflection = DBShopGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBGoodsList::kShopTypeFieldNumber;
const int DBGoodsList::kActivityTimeFieldNumber;
const int DBGoodsList::kLastRefreshTimeFieldNumber;
const int DBGoodsList::kGoodsListFieldNumber;
#endif  // !_MSC_VER

DBGoodsList::DBGoodsList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBGoodsList)
}

void DBGoodsList::InitAsDefaultInstance() {
}

DBGoodsList::DBGoodsList(const DBGoodsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBGoodsList)
}

void DBGoodsList::SharedCtor() {
  _cached_size_ = 0;
  shoptype_ = 0u;
  activitytime_ = 0u;
  lastrefreshtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBGoodsList::~DBGoodsList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBGoodsList)
  SharedDtor();
}

void DBGoodsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBGoodsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBGoodsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBGoodsList_descriptor_;
}

const DBGoodsList& DBGoodsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBGoodsList* DBGoodsList::default_instance_ = NULL;

DBGoodsList* DBGoodsList::New() const {
  return new DBGoodsList;
}

void DBGoodsList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBGoodsList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(shoptype_, activitytime_);
    lastrefreshtime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBGoodsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBGoodsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 shopType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoptype_)));
          set_has_shoptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activityTime;
        break;
      }

      // required uint32 activityTime = 2;
      case 2: {
        if (tag == 16) {
         parse_activityTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activitytime_)));
          set_has_activitytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lastRefreshTime;
        break;
      }

      // required uint32 lastRefreshTime = 3;
      case 3: {
        if (tag == 24) {
         parse_lastRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrefreshtime_)));
          set_has_lastrefreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_goodsList;
        break;
      }

      // repeated .TgsProtocol.DBShopGoods goodsList = 4;
      case 4: {
        if (tag == 34) {
         parse_goodsList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_goodsList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBGoodsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBGoodsList)
  return false;
#undef DO_
}

void DBGoodsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBGoodsList)
  // required uint32 shopType = 1;
  if (has_shoptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shoptype(), output);
  }

  // required uint32 activityTime = 2;
  if (has_activitytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activitytime(), output);
  }

  // required uint32 lastRefreshTime = 3;
  if (has_lastrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lastrefreshtime(), output);
  }

  // repeated .TgsProtocol.DBShopGoods goodsList = 4;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->goodslist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBGoodsList)
}

::google::protobuf::uint8* DBGoodsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBGoodsList)
  // required uint32 shopType = 1;
  if (has_shoptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shoptype(), target);
  }

  // required uint32 activityTime = 2;
  if (has_activitytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activitytime(), target);
  }

  // required uint32 lastRefreshTime = 3;
  if (has_lastrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lastrefreshtime(), target);
  }

  // repeated .TgsProtocol.DBShopGoods goodsList = 4;
  for (int i = 0; i < this->goodslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->goodslist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBGoodsList)
  return target;
}

int DBGoodsList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 shopType = 1;
    if (has_shoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoptype());
    }

    // required uint32 activityTime = 2;
    if (has_activitytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activitytime());
    }

    // required uint32 lastRefreshTime = 3;
    if (has_lastrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrefreshtime());
    }

  }
  // repeated .TgsProtocol.DBShopGoods goodsList = 4;
  total_size += 1 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBGoodsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBGoodsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBGoodsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBGoodsList::MergeFrom(const DBGoodsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shoptype()) {
      set_shoptype(from.shoptype());
    }
    if (from.has_activitytime()) {
      set_activitytime(from.activitytime());
    }
    if (from.has_lastrefreshtime()) {
      set_lastrefreshtime(from.lastrefreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBGoodsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBGoodsList::CopyFrom(const DBGoodsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGoodsList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->goodslist())) return false;
  return true;
}

void DBGoodsList::Swap(DBGoodsList* other) {
  if (other != this) {
    std::swap(shoptype_, other->shoptype_);
    std::swap(activitytime_, other->activitytime_);
    std::swap(lastrefreshtime_, other->lastrefreshtime_);
    goodslist_.Swap(&other->goodslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBGoodsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBGoodsList_descriptor_;
  metadata.reflection = DBGoodsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBShopList::kShopListFieldNumber;
#endif  // !_MSC_VER

DBShopList::DBShopList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBShopList)
}

void DBShopList::InitAsDefaultInstance() {
}

DBShopList::DBShopList(const DBShopList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBShopList)
}

void DBShopList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBShopList::~DBShopList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBShopList)
  SharedDtor();
}

void DBShopList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBShopList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBShopList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBShopList_descriptor_;
}

const DBShopList& DBShopList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBShopList* DBShopList::default_instance_ = NULL;

DBShopList* DBShopList::New() const {
  return new DBShopList;
}

void DBShopList::Clear() {
  shoplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBShopList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBShopList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DBGoodsList shopList = 1;
      case 1: {
        if (tag == 10) {
         parse_shopList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shoplist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_shopList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBShopList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBShopList)
  return false;
#undef DO_
}

void DBShopList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBShopList)
  // repeated .TgsProtocol.DBGoodsList shopList = 1;
  for (int i = 0; i < this->shoplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shoplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBShopList)
}

::google::protobuf::uint8* DBShopList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBShopList)
  // repeated .TgsProtocol.DBGoodsList shopList = 1;
  for (int i = 0; i < this->shoplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shoplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBShopList)
  return target;
}

int DBShopList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DBGoodsList shopList = 1;
  total_size += 1 * this->shoplist_size();
  for (int i = 0; i < this->shoplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBShopList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBShopList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBShopList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBShopList::MergeFrom(const DBShopList& from) {
  GOOGLE_CHECK_NE(&from, this);
  shoplist_.MergeFrom(from.shoplist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBShopList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBShopList::CopyFrom(const DBShopList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBShopList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->shoplist())) return false;
  return true;
}

void DBShopList::Swap(DBShopList* other) {
  if (other != this) {
    shoplist_.Swap(&other->shoplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBShopList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBShopList_descriptor_;
  metadata.reflection = DBShopList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBShopRefresh::kRefreshNumFieldNumber;
const int DBShopRefresh::kLastRefreshTimeFieldNumber;
#endif  // !_MSC_VER

DBShopRefresh::DBShopRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBShopRefresh)
}

void DBShopRefresh::InitAsDefaultInstance() {
}

DBShopRefresh::DBShopRefresh(const DBShopRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBShopRefresh)
}

void DBShopRefresh::SharedCtor() {
  _cached_size_ = 0;
  refreshnum_ = 0u;
  lastrefreshtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBShopRefresh::~DBShopRefresh() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBShopRefresh)
  SharedDtor();
}

void DBShopRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBShopRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBShopRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBShopRefresh_descriptor_;
}

const DBShopRefresh& DBShopRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBShopRefresh* DBShopRefresh::default_instance_ = NULL;

DBShopRefresh* DBShopRefresh::New() const {
  return new DBShopRefresh;
}

void DBShopRefresh::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBShopRefresh*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(refreshnum_, lastrefreshtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBShopRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBShopRefresh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RefreshNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshnum_)));
          set_has_refreshnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LastRefreshTime;
        break;
      }

      // required uint32 LastRefreshTime = 2;
      case 2: {
        if (tag == 16) {
         parse_LastRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrefreshtime_)));
          set_has_lastrefreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBShopRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBShopRefresh)
  return false;
#undef DO_
}

void DBShopRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBShopRefresh)
  // required uint32 RefreshNum = 1;
  if (has_refreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->refreshnum(), output);
  }

  // required uint32 LastRefreshTime = 2;
  if (has_lastrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lastrefreshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBShopRefresh)
}

::google::protobuf::uint8* DBShopRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBShopRefresh)
  // required uint32 RefreshNum = 1;
  if (has_refreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->refreshnum(), target);
  }

  // required uint32 LastRefreshTime = 2;
  if (has_lastrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lastrefreshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBShopRefresh)
  return target;
}

int DBShopRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RefreshNum = 1;
    if (has_refreshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshnum());
    }

    // required uint32 LastRefreshTime = 2;
    if (has_lastrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrefreshtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBShopRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBShopRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBShopRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBShopRefresh::MergeFrom(const DBShopRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refreshnum()) {
      set_refreshnum(from.refreshnum());
    }
    if (from.has_lastrefreshtime()) {
      set_lastrefreshtime(from.lastrefreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBShopRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBShopRefresh::CopyFrom(const DBShopRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBShopRefresh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DBShopRefresh::Swap(DBShopRefresh* other) {
  if (other != this) {
    std::swap(refreshnum_, other->refreshnum_);
    std::swap(lastrefreshtime_, other->lastrefreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBShopRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBShopRefresh_descriptor_;
  metadata.reflection = DBShopRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBShopRefreshList::kRefreshListFieldNumber;
#endif  // !_MSC_VER

DBShopRefreshList::DBShopRefreshList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBShopRefreshList)
}

void DBShopRefreshList::InitAsDefaultInstance() {
}

DBShopRefreshList::DBShopRefreshList(const DBShopRefreshList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBShopRefreshList)
}

void DBShopRefreshList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBShopRefreshList::~DBShopRefreshList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBShopRefreshList)
  SharedDtor();
}

void DBShopRefreshList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBShopRefreshList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBShopRefreshList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBShopRefreshList_descriptor_;
}

const DBShopRefreshList& DBShopRefreshList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBShopRefreshList* DBShopRefreshList::default_instance_ = NULL;

DBShopRefreshList* DBShopRefreshList::New() const {
  return new DBShopRefreshList;
}

void DBShopRefreshList::Clear() {
  refreshlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBShopRefreshList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBShopRefreshList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 RefreshList = 1;
      case 1: {
        if (tag == 8) {
         parse_RefreshList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_refreshlist())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_refreshlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_RefreshList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBShopRefreshList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBShopRefreshList)
  return false;
#undef DO_
}

void DBShopRefreshList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBShopRefreshList)
  // repeated uint32 RefreshList = 1;
  for (int i = 0; i < this->refreshlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->refreshlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBShopRefreshList)
}

::google::protobuf::uint8* DBShopRefreshList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBShopRefreshList)
  // repeated uint32 RefreshList = 1;
  for (int i = 0; i < this->refreshlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->refreshlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBShopRefreshList)
  return target;
}

int DBShopRefreshList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 RefreshList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->refreshlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->refreshlist(i));
    }
    total_size += 1 * this->refreshlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBShopRefreshList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBShopRefreshList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBShopRefreshList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBShopRefreshList::MergeFrom(const DBShopRefreshList& from) {
  GOOGLE_CHECK_NE(&from, this);
  refreshlist_.MergeFrom(from.refreshlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBShopRefreshList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBShopRefreshList::CopyFrom(const DBShopRefreshList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBShopRefreshList::IsInitialized() const {

  return true;
}

void DBShopRefreshList::Swap(DBShopRefreshList* other) {
  if (other != this) {
    refreshlist_.Swap(&other->refreshlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBShopRefreshList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBShopRefreshList_descriptor_;
  metadata.reflection = DBShopRefreshList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBFestivityInfo::kFestivityIdFieldNumber;
const int DBFestivityInfo::kEnterCountFieldNumber;
#endif  // !_MSC_VER

DBFestivityInfo::DBFestivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBFestivityInfo)
}

void DBFestivityInfo::InitAsDefaultInstance() {
}

DBFestivityInfo::DBFestivityInfo(const DBFestivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBFestivityInfo)
}

void DBFestivityInfo::SharedCtor() {
  _cached_size_ = 0;
  festivityid_ = 0u;
  entercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBFestivityInfo::~DBFestivityInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBFestivityInfo)
  SharedDtor();
}

void DBFestivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBFestivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBFestivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBFestivityInfo_descriptor_;
}

const DBFestivityInfo& DBFestivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBFestivityInfo* DBFestivityInfo::default_instance_ = NULL;

DBFestivityInfo* DBFestivityInfo::New() const {
  return new DBFestivityInfo;
}

void DBFestivityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBFestivityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(festivityid_, entercount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBFestivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBFestivityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 festivityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &festivityid_)));
          set_has_festivityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enterCount;
        break;
      }

      // required uint32 enterCount = 2;
      case 2: {
        if (tag == 16) {
         parse_enterCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entercount_)));
          set_has_entercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBFestivityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBFestivityInfo)
  return false;
#undef DO_
}

void DBFestivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBFestivityInfo)
  // required uint32 festivityId = 1;
  if (has_festivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->festivityid(), output);
  }

  // required uint32 enterCount = 2;
  if (has_entercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBFestivityInfo)
}

::google::protobuf::uint8* DBFestivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBFestivityInfo)
  // required uint32 festivityId = 1;
  if (has_festivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->festivityid(), target);
  }

  // required uint32 enterCount = 2;
  if (has_entercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBFestivityInfo)
  return target;
}

int DBFestivityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 festivityId = 1;
    if (has_festivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->festivityid());
    }

    // required uint32 enterCount = 2;
    if (has_entercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBFestivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBFestivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBFestivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBFestivityInfo::MergeFrom(const DBFestivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_festivityid()) {
      set_festivityid(from.festivityid());
    }
    if (from.has_entercount()) {
      set_entercount(from.entercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBFestivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBFestivityInfo::CopyFrom(const DBFestivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFestivityInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DBFestivityInfo::Swap(DBFestivityInfo* other) {
  if (other != this) {
    std::swap(festivityid_, other->festivityid_);
    std::swap(entercount_, other->entercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBFestivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBFestivityInfo_descriptor_;
  metadata.reflection = DBFestivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBFestivityList::kFestivityListFieldNumber;
#endif  // !_MSC_VER

DBFestivityList::DBFestivityList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBFestivityList)
}

void DBFestivityList::InitAsDefaultInstance() {
}

DBFestivityList::DBFestivityList(const DBFestivityList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBFestivityList)
}

void DBFestivityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBFestivityList::~DBFestivityList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBFestivityList)
  SharedDtor();
}

void DBFestivityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBFestivityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBFestivityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBFestivityList_descriptor_;
}

const DBFestivityList& DBFestivityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBFestivityList* DBFestivityList::default_instance_ = NULL;

DBFestivityList* DBFestivityList::New() const {
  return new DBFestivityList;
}

void DBFestivityList::Clear() {
  festivitylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBFestivityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBFestivityList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DBFestivityInfo FestivityList = 1;
      case 1: {
        if (tag == 10) {
         parse_FestivityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivitylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FestivityList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBFestivityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBFestivityList)
  return false;
#undef DO_
}

void DBFestivityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBFestivityList)
  // repeated .TgsProtocol.DBFestivityInfo FestivityList = 1;
  for (int i = 0; i < this->festivitylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivitylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBFestivityList)
}

::google::protobuf::uint8* DBFestivityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBFestivityList)
  // repeated .TgsProtocol.DBFestivityInfo FestivityList = 1;
  for (int i = 0; i < this->festivitylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivitylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBFestivityList)
  return target;
}

int DBFestivityList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DBFestivityInfo FestivityList = 1;
  total_size += 1 * this->festivitylist_size();
  for (int i = 0; i < this->festivitylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivitylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBFestivityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBFestivityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBFestivityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBFestivityList::MergeFrom(const DBFestivityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivitylist_.MergeFrom(from.festivitylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBFestivityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBFestivityList::CopyFrom(const DBFestivityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFestivityList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->festivitylist())) return false;
  return true;
}

void DBFestivityList::Swap(DBFestivityList* other) {
  if (other != this) {
    festivitylist_.Swap(&other->festivitylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBFestivityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBFestivityList_descriptor_;
  metadata.reflection = DBFestivityList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientSource::kSourceTypeFieldNumber;
const int ClientSource::kSourceIdFieldNumber;
const int ClientSource::kSourceNumFieldNumber;
#endif  // !_MSC_VER

ClientSource::ClientSource()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientSource)
}

void ClientSource::InitAsDefaultInstance() {
}

ClientSource::ClientSource(const ClientSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientSource)
}

void ClientSource::SharedCtor() {
  _cached_size_ = 0;
  sourcetype_ = 0u;
  sourceid_ = 0u;
  sourcenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientSource::~ClientSource() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientSource)
  SharedDtor();
}

void ClientSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientSource_descriptor_;
}

const ClientSource& ClientSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientSource* ClientSource::default_instance_ = NULL;

ClientSource* ClientSource::New() const {
  return new ClientSource;
}

void ClientSource::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientSource*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sourcetype_, sourcenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sourceType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcetype_)));
          set_has_sourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sourceId;
        break;
      }

      // required uint32 sourceId = 2;
      case 2: {
        if (tag == 16) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sourceNum;
        break;
      }

      // required uint32 sourceNum = 3;
      case 3: {
        if (tag == 24) {
         parse_sourceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcenum_)));
          set_has_sourcenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientSource)
  return false;
#undef DO_
}

void ClientSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientSource)
  // required uint32 sourceType = 1;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sourcetype(), output);
  }

  // required uint32 sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sourceid(), output);
  }

  // required uint32 sourceNum = 3;
  if (has_sourcenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sourcenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientSource)
}

::google::protobuf::uint8* ClientSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientSource)
  // required uint32 sourceType = 1;
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sourcetype(), target);
  }

  // required uint32 sourceId = 2;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sourceid(), target);
  }

  // required uint32 sourceNum = 3;
  if (has_sourcenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sourcenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientSource)
  return target;
}

int ClientSource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sourceType = 1;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcetype());
    }

    // required uint32 sourceId = 2;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // required uint32 sourceNum = 3;
    if (has_sourcenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientSource::MergeFrom(const ClientSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_sourcenum()) {
      set_sourcenum(from.sourcenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSource::CopyFrom(const ClientSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientSource::Swap(ClientSource* other) {
  if (other != this) {
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(sourcenum_, other->sourcenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientSource_descriptor_;
  metadata.reflection = ClientSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBMailInfo::kInstanceIdFieldNumber;
const int DBMailInfo::kTemplateIdFieldNumber;
const int DBMailInfo::kMailTypeFieldNumber;
const int DBMailInfo::kSubjectStrFieldNumber;
const int DBMailInfo::kContextStrFieldNumber;
const int DBMailInfo::kSenderStrFieldNumber;
const int DBMailInfo::kCreatetimeFieldNumber;
const int DBMailInfo::kBReadFieldNumber;
const int DBMailInfo::kAccessoryFieldNumber;
const int DBMailInfo::kOpTypeFieldNumber;
const int DBMailInfo::kSaveTimeFieldNumber;
const int DBMailInfo::kContextParamFieldNumber;
#endif  // !_MSC_VER

DBMailInfo::DBMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBMailInfo)
}

void DBMailInfo::InitAsDefaultInstance() {
}

DBMailInfo::DBMailInfo(const DBMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBMailInfo)
}

void DBMailInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instanceid_ = GOOGLE_ULONGLONG(0);
  templateid_ = 0u;
  mailtype_ = 0u;
  subjectstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contextstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = 0u;
  bread_ = false;
  optype_ = 0u;
  savetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBMailInfo::~DBMailInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBMailInfo)
  SharedDtor();
}

void DBMailInfo::SharedDtor() {
  if (subjectstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subjectstr_;
  }
  if (contextstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contextstr_;
  }
  if (senderstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete senderstr_;
  }
  if (this != default_instance_) {
  }
}

void DBMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBMailInfo_descriptor_;
}

const DBMailInfo& DBMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBMailInfo* DBMailInfo::default_instance_ = NULL;

DBMailInfo* DBMailInfo::New() const {
  return new DBMailInfo;
}

void DBMailInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBMailInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(instanceid_, mailtype_);
    ZR_(createtime_, bread_);
    if (has_subjectstr()) {
      if (subjectstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subjectstr_->clear();
      }
    }
    if (has_contextstr()) {
      if (contextstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contextstr_->clear();
      }
    }
    if (has_senderstr()) {
      if (senderstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        senderstr_->clear();
      }
    }
  }
  ZR_(optype_, savetime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  accessory_.Clear();
  contextparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBMailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 instanceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_templateId;
        break;
      }

      // required uint32 templateId = 2;
      case 2: {
        if (tag == 16) {
         parse_templateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mailType;
        break;
      }

      // required uint32 mailType = 3;
      case 3: {
        if (tag == 24) {
         parse_mailType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_subjectStr;
        break;
      }

      // required bytes subjectStr = 4;
      case 4: {
        if (tag == 34) {
         parse_subjectStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subjectstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_contextStr;
        break;
      }

      // required bytes contextStr = 5;
      case 5: {
        if (tag == 42) {
         parse_contextStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contextstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_senderStr;
        break;
      }

      // required bytes senderStr = 6;
      case 6: {
        if (tag == 50) {
         parse_senderStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_senderstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_createtime;
        break;
      }

      // required uint32 createtime = 7;
      case 7: {
        if (tag == 56) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bRead;
        break;
      }

      // required bool bRead = 8;
      case 8: {
        if (tag == 64) {
         parse_bRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bread_)));
          set_has_bread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_accessory;
        break;
      }

      // repeated .TgsProtocol.ClientSource accessory = 9;
      case 9: {
        if (tag == 74) {
         parse_accessory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accessory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_accessory;
        if (input->ExpectTag(80)) goto parse_opType;
        break;
      }

      // required uint32 opType = 10;
      case 10: {
        if (tag == 80) {
         parse_opType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_saveTime;
        break;
      }

      // required uint32 saveTime = 11;
      case 11: {
        if (tag == 88) {
         parse_saveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &savetime_)));
          set_has_savetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_contextParam;
        break;
      }

      // repeated bytes contextParam = 12;
      case 12: {
        if (tag == 98) {
         parse_contextParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_contextparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_contextParam;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBMailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBMailInfo)
  return false;
#undef DO_
}

void DBMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBMailInfo)
  // required uint64 instanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // required uint32 templateId = 2;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->templateid(), output);
  }

  // required uint32 mailType = 3;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mailtype(), output);
  }

  // required bytes subjectStr = 4;
  if (has_subjectstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->subjectstr(), output);
  }

  // required bytes contextStr = 5;
  if (has_contextstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->contextstr(), output);
  }

  // required bytes senderStr = 6;
  if (has_senderstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->senderstr(), output);
  }

  // required uint32 createtime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->createtime(), output);
  }

  // required bool bRead = 8;
  if (has_bread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bread(), output);
  }

  // repeated .TgsProtocol.ClientSource accessory = 9;
  for (int i = 0; i < this->accessory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->accessory(i), output);
  }

  // required uint32 opType = 10;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->optype(), output);
  }

  // required uint32 saveTime = 11;
  if (has_savetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->savetime(), output);
  }

  // repeated bytes contextParam = 12;
  for (int i = 0; i < this->contextparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->contextparam(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBMailInfo)
}

::google::protobuf::uint8* DBMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBMailInfo)
  // required uint64 instanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // required uint32 templateId = 2;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->templateid(), target);
  }

  // required uint32 mailType = 3;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mailtype(), target);
  }

  // required bytes subjectStr = 4;
  if (has_subjectstr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->subjectstr(), target);
  }

  // required bytes contextStr = 5;
  if (has_contextstr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->contextstr(), target);
  }

  // required bytes senderStr = 6;
  if (has_senderstr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->senderstr(), target);
  }

  // required uint32 createtime = 7;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->createtime(), target);
  }

  // required bool bRead = 8;
  if (has_bread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bread(), target);
  }

  // repeated .TgsProtocol.ClientSource accessory = 9;
  for (int i = 0; i < this->accessory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->accessory(i), target);
  }

  // required uint32 opType = 10;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->optype(), target);
  }

  // required uint32 saveTime = 11;
  if (has_savetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->savetime(), target);
  }

  // repeated bytes contextParam = 12;
  for (int i = 0; i < this->contextparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(12, this->contextparam(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBMailInfo)
  return target;
}

int DBMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 instanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // required uint32 templateId = 2;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint32 mailType = 3;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // required bytes subjectStr = 4;
    if (has_subjectstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subjectstr());
    }

    // required bytes contextStr = 5;
    if (has_contextstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contextstr());
    }

    // required bytes senderStr = 6;
    if (has_senderstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->senderstr());
    }

    // required uint32 createtime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // required bool bRead = 8;
    if (has_bread()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required uint32 opType = 10;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // required uint32 saveTime = 11;
    if (has_savetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->savetime());
    }

  }
  // repeated .TgsProtocol.ClientSource accessory = 9;
  total_size += 1 * this->accessory_size();
  for (int i = 0; i < this->accessory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accessory(i));
  }

  // repeated bytes contextParam = 12;
  total_size += 1 * this->contextparam_size();
  for (int i = 0; i < this->contextparam_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->contextparam(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBMailInfo::MergeFrom(const DBMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  accessory_.MergeFrom(from.accessory_);
  contextparam_.MergeFrom(from.contextparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_subjectstr()) {
      set_subjectstr(from.subjectstr());
    }
    if (from.has_contextstr()) {
      set_contextstr(from.contextstr());
    }
    if (from.has_senderstr()) {
      set_senderstr(from.senderstr());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_bread()) {
      set_bread(from.bread());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_savetime()) {
      set_savetime(from.savetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBMailInfo::CopyFrom(const DBMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000006ff) != 0x000006ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->accessory())) return false;
  return true;
}

void DBMailInfo::Swap(DBMailInfo* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(templateid_, other->templateid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(subjectstr_, other->subjectstr_);
    std::swap(contextstr_, other->contextstr_);
    std::swap(senderstr_, other->senderstr_);
    std::swap(createtime_, other->createtime_);
    std::swap(bread_, other->bread_);
    accessory_.Swap(&other->accessory_);
    std::swap(optype_, other->optype_);
    std::swap(savetime_, other->savetime_);
    contextparam_.Swap(&other->contextparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBMailInfo_descriptor_;
  metadata.reflection = DBMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBArenaHero::kTemplateIdFieldNumber;
const int DBArenaHero::kLevelFieldNumber;
const int DBArenaHero::kEvolutionLevelFieldNumber;
const int DBArenaHero::kForceLevelFieldNumber;
const int DBArenaHero::kEquipFieldNumber;
const int DBArenaHero::kSkillLevelFieldNumber;
const int DBArenaHero::kHeroNameFieldNumber;
const int DBArenaHero::kNewEquipFieldNumber;
#endif  // !_MSC_VER

DBArenaHero::DBArenaHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBArenaHero)
}

void DBArenaHero::InitAsDefaultInstance() {
}

DBArenaHero::DBArenaHero(const DBArenaHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBArenaHero)
}

void DBArenaHero::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  templateid_ = 0u;
  level_ = 0u;
  evolutionlevel_ = 0u;
  forcelevel_ = 0u;
  heroname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBArenaHero::~DBArenaHero() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBArenaHero)
  SharedDtor();
}

void DBArenaHero::SharedDtor() {
  if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete heroname_;
  }
  if (this != default_instance_) {
  }
}

void DBArenaHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBArenaHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBArenaHero_descriptor_;
}

const DBArenaHero& DBArenaHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBArenaHero* DBArenaHero::default_instance_ = NULL;

DBArenaHero* DBArenaHero::New() const {
  return new DBArenaHero;
}

void DBArenaHero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBArenaHero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 79) {
    ZR_(templateid_, forcelevel_);
    if (has_heroname()) {
      if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        heroname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equip_.Clear();
  skilllevel_.Clear();
  newequip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBArenaHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBArenaHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 templateId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_evolutionLevel;
        break;
      }

      // required uint32 evolutionLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_evolutionLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutionlevel_)));
          set_has_evolutionlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_forceLevel;
        break;
      }

      // required uint32 forceLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_forceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcelevel_)));
          set_has_forcelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equip;
        break;
      }

      // repeated .TgsProtocol.DBHeroEquip equip = 5;
      case 5: {
        if (tag == 42) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equip;
        if (input->ExpectTag(48)) goto parse_skillLevel;
        break;
      }

      // repeated uint32 skillLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_skilllevel())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skilllevel())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skillLevel;
        if (input->ExpectTag(58)) goto parse_heroName;
        break;
      }

      // optional bytes heroName = 7;
      case 7: {
        if (tag == 58) {
         parse_heroName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_heroname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_newEquip;
        break;
      }

      // repeated .TgsProtocol.DBEquipNew newEquip = 8;
      case 8: {
        if (tag == 66) {
         parse_newEquip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newequip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_newEquip;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBArenaHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBArenaHero)
  return false;
#undef DO_
}

void DBArenaHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBArenaHero)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 evolutionLevel = 3;
  if (has_evolutionlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->evolutionlevel(), output);
  }

  // required uint32 forceLevel = 4;
  if (has_forcelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->forcelevel(), output);
  }

  // repeated .TgsProtocol.DBHeroEquip equip = 5;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equip(i), output);
  }

  // repeated uint32 skillLevel = 6;
  for (int i = 0; i < this->skilllevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->skilllevel(i), output);
  }

  // optional bytes heroName = 7;
  if (has_heroname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->heroname(), output);
  }

  // repeated .TgsProtocol.DBEquipNew newEquip = 8;
  for (int i = 0; i < this->newequip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->newequip(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBArenaHero)
}

::google::protobuf::uint8* DBArenaHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBArenaHero)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 evolutionLevel = 3;
  if (has_evolutionlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->evolutionlevel(), target);
  }

  // required uint32 forceLevel = 4;
  if (has_forcelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->forcelevel(), target);
  }

  // repeated .TgsProtocol.DBHeroEquip equip = 5;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equip(i), target);
  }

  // repeated uint32 skillLevel = 6;
  for (int i = 0; i < this->skilllevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->skilllevel(i), target);
  }

  // optional bytes heroName = 7;
  if (has_heroname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->heroname(), target);
  }

  // repeated .TgsProtocol.DBEquipNew newEquip = 8;
  for (int i = 0; i < this->newequip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->newequip(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBArenaHero)
  return target;
}

int DBArenaHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 templateId = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 evolutionLevel = 3;
    if (has_evolutionlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutionlevel());
    }

    // required uint32 forceLevel = 4;
    if (has_forcelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcelevel());
    }

    // optional bytes heroName = 7;
    if (has_heroname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->heroname());
    }

  }
  // repeated .TgsProtocol.DBHeroEquip equip = 5;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated uint32 skillLevel = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skilllevel(i));
    }
    total_size += 1 * this->skilllevel_size() + data_size;
  }

  // repeated .TgsProtocol.DBEquipNew newEquip = 8;
  total_size += 1 * this->newequip_size();
  for (int i = 0; i < this->newequip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newequip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBArenaHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBArenaHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBArenaHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBArenaHero::MergeFrom(const DBArenaHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  skilllevel_.MergeFrom(from.skilllevel_);
  newequip_.MergeFrom(from.newequip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_evolutionlevel()) {
      set_evolutionlevel(from.evolutionlevel());
    }
    if (from.has_forcelevel()) {
      set_forcelevel(from.forcelevel());
    }
    if (from.has_heroname()) {
      set_heroname(from.heroname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBArenaHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBArenaHero::CopyFrom(const DBArenaHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBArenaHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->equip())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->newequip())) return false;
  return true;
}

void DBArenaHero::Swap(DBArenaHero* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(level_, other->level_);
    std::swap(evolutionlevel_, other->evolutionlevel_);
    std::swap(forcelevel_, other->forcelevel_);
    equip_.Swap(&other->equip_);
    skilllevel_.Swap(&other->skilllevel_);
    std::swap(heroname_, other->heroname_);
    newequip_.Swap(&other->newequip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBArenaHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBArenaHero_descriptor_;
  metadata.reflection = DBArenaHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBArenaPlayer::kRankFieldNumber;
const int DBArenaPlayer::kCharIDFieldNumber;
const int DBArenaPlayer::kPlayerNameFieldNumber;
const int DBArenaPlayer::kPlayerLevelFieldNumber;
const int DBArenaPlayer::kPlayerPhotoFieldNumber;
const int DBArenaPlayer::kVipLvlFieldNumber;
const int DBArenaPlayer::kEffectiveFieldNumber;
const int DBArenaPlayer::kTotalWinFieldNumber;
const int DBArenaPlayer::kArHeroListFieldNumber;
#endif  // !_MSC_VER

DBArenaPlayer::DBArenaPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBArenaPlayer)
}

void DBArenaPlayer::InitAsDefaultInstance() {
}

DBArenaPlayer::DBArenaPlayer(const DBArenaPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBArenaPlayer)
}

void DBArenaPlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rank_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerlevel_ = 0u;
  playerphoto_ = 0u;
  viplvl_ = 0u;
  effective_ = 0u;
  totalwin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBArenaPlayer::~DBArenaPlayer() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBArenaPlayer)
  SharedDtor();
}

void DBArenaPlayer::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void DBArenaPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBArenaPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBArenaPlayer_descriptor_;
}

const DBArenaPlayer& DBArenaPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBArenaPlayer* DBArenaPlayer::default_instance_ = NULL;

DBArenaPlayer* DBArenaPlayer::New() const {
  return new DBArenaPlayer;
}

void DBArenaPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBArenaPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, playerlevel_);
    ZR_(playerphoto_, totalwin_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arherolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBArenaPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBArenaPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // required uint64 charID = 2;
      case 2: {
        if (tag == 16) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // optional bytes playerName = 3;
      case 3: {
        if (tag == 26) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerLevel;
        break;
      }

      // required uint32 playerLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_playerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerlevel_)));
          set_has_playerlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_playerPhoto;
        break;
      }

      // required uint32 playerPhoto = 5;
      case 5: {
        if (tag == 40) {
         parse_playerPhoto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerphoto_)));
          set_has_playerphoto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vipLvl;
        break;
      }

      // required uint32 vipLvl = 6;
      case 6: {
        if (tag == 48) {
         parse_vipLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplvl_)));
          set_has_viplvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_effective;
        break;
      }

      // required uint32 effective = 7;
      case 7: {
        if (tag == 56) {
         parse_effective:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effective_)));
          set_has_effective();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_totalWin;
        break;
      }

      // required uint32 totalWin = 8;
      case 8: {
        if (tag == 64) {
         parse_totalWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalwin_)));
          set_has_totalwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_arHeroList;
        break;
      }

      // repeated .TgsProtocol.DBArenaHero arHeroList = 9;
      case 9: {
        if (tag == 74) {
         parse_arHeroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arherolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_arHeroList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBArenaPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBArenaPlayer)
  return false;
#undef DO_
}

void DBArenaPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBArenaPlayer)
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint64 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional bytes playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->playername(), output);
  }

  // required uint32 playerLevel = 4;
  if (has_playerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerlevel(), output);
  }

  // required uint32 playerPhoto = 5;
  if (has_playerphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->playerphoto(), output);
  }

  // required uint32 vipLvl = 6;
  if (has_viplvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplvl(), output);
  }

  // required uint32 effective = 7;
  if (has_effective()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->effective(), output);
  }

  // required uint32 totalWin = 8;
  if (has_totalwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->totalwin(), output);
  }

  // repeated .TgsProtocol.DBArenaHero arHeroList = 9;
  for (int i = 0; i < this->arherolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->arherolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBArenaPlayer)
}

::google::protobuf::uint8* DBArenaPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBArenaPlayer)
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint64 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional bytes playerName = 3;
  if (has_playername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->playername(), target);
  }

  // required uint32 playerLevel = 4;
  if (has_playerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerlevel(), target);
  }

  // required uint32 playerPhoto = 5;
  if (has_playerphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->playerphoto(), target);
  }

  // required uint32 vipLvl = 6;
  if (has_viplvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplvl(), target);
  }

  // required uint32 effective = 7;
  if (has_effective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->effective(), target);
  }

  // required uint32 totalWin = 8;
  if (has_totalwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->totalwin(), target);
  }

  // repeated .TgsProtocol.DBArenaHero arHeroList = 9;
  for (int i = 0; i < this->arherolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->arherolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBArenaPlayer)
  return target;
}

int DBArenaPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint64 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes playerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playername());
    }

    // required uint32 playerLevel = 4;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerlevel());
    }

    // required uint32 playerPhoto = 5;
    if (has_playerphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerphoto());
    }

    // required uint32 vipLvl = 6;
    if (has_viplvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplvl());
    }

    // required uint32 effective = 7;
    if (has_effective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effective());
    }

    // required uint32 totalWin = 8;
    if (has_totalwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalwin());
    }

  }
  // repeated .TgsProtocol.DBArenaHero arHeroList = 9;
  total_size += 1 * this->arherolist_size();
  for (int i = 0; i < this->arherolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arherolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBArenaPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBArenaPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBArenaPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBArenaPlayer::MergeFrom(const DBArenaPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  arherolist_.MergeFrom(from.arherolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerlevel()) {
      set_playerlevel(from.playerlevel());
    }
    if (from.has_playerphoto()) {
      set_playerphoto(from.playerphoto());
    }
    if (from.has_viplvl()) {
      set_viplvl(from.viplvl());
    }
    if (from.has_effective()) {
      set_effective(from.effective());
    }
    if (from.has_totalwin()) {
      set_totalwin(from.totalwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBArenaPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBArenaPlayer::CopyFrom(const DBArenaPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBArenaPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fb) != 0x000000fb) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->arherolist())) return false;
  return true;
}

void DBArenaPlayer::Swap(DBArenaPlayer* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(charid_, other->charid_);
    std::swap(playername_, other->playername_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(playerphoto_, other->playerphoto_);
    std::swap(viplvl_, other->viplvl_);
    std::swap(effective_, other->effective_);
    std::swap(totalwin_, other->totalwin_);
    arherolist_.Swap(&other->arherolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBArenaPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBArenaPlayer_descriptor_;
  metadata.reflection = DBArenaPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBArenaRank::kArenaPlayerListFieldNumber;
#endif  // !_MSC_VER

DBArenaRank::DBArenaRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBArenaRank)
}

void DBArenaRank::InitAsDefaultInstance() {
}

DBArenaRank::DBArenaRank(const DBArenaRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBArenaRank)
}

void DBArenaRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBArenaRank::~DBArenaRank() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBArenaRank)
  SharedDtor();
}

void DBArenaRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBArenaRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBArenaRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBArenaRank_descriptor_;
}

const DBArenaRank& DBArenaRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBArenaRank* DBArenaRank::default_instance_ = NULL;

DBArenaRank* DBArenaRank::New() const {
  return new DBArenaRank;
}

void DBArenaRank::Clear() {
  arenaplayerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBArenaRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBArenaRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DBArenaPlayer arenaPlayerList = 1;
      case 1: {
        if (tag == 10) {
         parse_arenaPlayerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenaplayerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_arenaPlayerList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBArenaRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBArenaRank)
  return false;
#undef DO_
}

void DBArenaRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBArenaRank)
  // repeated .TgsProtocol.DBArenaPlayer arenaPlayerList = 1;
  for (int i = 0; i < this->arenaplayerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arenaplayerlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBArenaRank)
}

::google::protobuf::uint8* DBArenaRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBArenaRank)
  // repeated .TgsProtocol.DBArenaPlayer arenaPlayerList = 1;
  for (int i = 0; i < this->arenaplayerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arenaplayerlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBArenaRank)
  return target;
}

int DBArenaRank::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DBArenaPlayer arenaPlayerList = 1;
  total_size += 1 * this->arenaplayerlist_size();
  for (int i = 0; i < this->arenaplayerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenaplayerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBArenaRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBArenaRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBArenaRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBArenaRank::MergeFrom(const DBArenaRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenaplayerlist_.MergeFrom(from.arenaplayerlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBArenaRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBArenaRank::CopyFrom(const DBArenaRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBArenaRank::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->arenaplayerlist())) return false;
  return true;
}

void DBArenaRank::Swap(DBArenaRank* other) {
  if (other != this) {
    arenaplayerlist_.Swap(&other->arenaplayerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBArenaRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBArenaRank_descriptor_;
  metadata.reflection = DBArenaRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBArenaLog::kTypeFieldNumber;
const int DBArenaLog::kCharIdFieldNumber;
const int DBArenaLog::kCharNameFieldNumber;
const int DBArenaLog::kCharLvlFieldNumber;
const int DBArenaLog::kCharPhotoFieldNumber;
const int DBArenaLog::kCharVipFieldNumber;
const int DBArenaLog::kBWinFieldNumber;
const int DBArenaLog::kNewRankFieldNumber;
const int DBArenaLog::kBRobotFieldNumber;
const int DBArenaLog::kCurTimeFieldNumber;
#endif  // !_MSC_VER

DBArenaLog::DBArenaLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBArenaLog)
}

void DBArenaLog::InitAsDefaultInstance() {
}

DBArenaLog::DBArenaLog(const DBArenaLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBArenaLog)
}

void DBArenaLog::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charlvl_ = 0u;
  charphoto_ = 0u;
  charvip_ = 0u;
  bwin_ = false;
  newrank_ = 0u;
  brobot_ = false;
  curtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBArenaLog::~DBArenaLog() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBArenaLog)
  SharedDtor();
}

void DBArenaLog::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void DBArenaLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBArenaLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBArenaLog_descriptor_;
}

const DBArenaLog& DBArenaLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBArenaLog* DBArenaLog::default_instance_ = NULL;

DBArenaLog* DBArenaLog::New() const {
  return new DBArenaLog;
}

void DBArenaLog::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBArenaLog*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, charlvl_);
    ZR_(charphoto_, bwin_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  ZR_(brobot_, curtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBArenaLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBArenaLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_charName;
        break;
      }

      // required bytes charName = 3;
      case 3: {
        if (tag == 26) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charLvl;
        break;
      }

      // required uint32 charLvl = 4;
      case 4: {
        if (tag == 32) {
         parse_charLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charlvl_)));
          set_has_charlvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charPhoto;
        break;
      }

      // required uint32 charPhoto = 5;
      case 5: {
        if (tag == 40) {
         parse_charPhoto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charphoto_)));
          set_has_charphoto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charVip;
        break;
      }

      // required uint32 charVip = 6;
      case 6: {
        if (tag == 48) {
         parse_charVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charvip_)));
          set_has_charvip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bWin;
        break;
      }

      // required bool bWin = 7;
      case 7: {
        if (tag == 56) {
         parse_bWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bwin_)));
          set_has_bwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_newRank;
        break;
      }

      // required uint32 newRank = 8;
      case 8: {
        if (tag == 64) {
         parse_newRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newrank_)));
          set_has_newrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bRobot;
        break;
      }

      // required bool bRobot = 9;
      case 9: {
        if (tag == 72) {
         parse_bRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brobot_)));
          set_has_brobot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_curTime;
        break;
      }

      // required uint32 curTime = 10;
      case 10: {
        if (tag == 80) {
         parse_curTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtime_)));
          set_has_curtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBArenaLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBArenaLog)
  return false;
#undef DO_
}

void DBArenaLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBArenaLog)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required bytes charName = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->charname(), output);
  }

  // required uint32 charLvl = 4;
  if (has_charlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charlvl(), output);
  }

  // required uint32 charPhoto = 5;
  if (has_charphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->charphoto(), output);
  }

  // required uint32 charVip = 6;
  if (has_charvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->charvip(), output);
  }

  // required bool bWin = 7;
  if (has_bwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bwin(), output);
  }

  // required uint32 newRank = 8;
  if (has_newrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->newrank(), output);
  }

  // required bool bRobot = 9;
  if (has_brobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->brobot(), output);
  }

  // required uint32 curTime = 10;
  if (has_curtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->curtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBArenaLog)
}

::google::protobuf::uint8* DBArenaLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBArenaLog)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required bytes charName = 3;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->charname(), target);
  }

  // required uint32 charLvl = 4;
  if (has_charlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charlvl(), target);
  }

  // required uint32 charPhoto = 5;
  if (has_charphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->charphoto(), target);
  }

  // required uint32 charVip = 6;
  if (has_charvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->charvip(), target);
  }

  // required bool bWin = 7;
  if (has_bwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bwin(), target);
  }

  // required uint32 newRank = 8;
  if (has_newrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->newrank(), target);
  }

  // required bool bRobot = 9;
  if (has_brobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->brobot(), target);
  }

  // required uint32 curTime = 10;
  if (has_curtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->curtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBArenaLog)
  return target;
}

int DBArenaLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bytes charName = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // required uint32 charLvl = 4;
    if (has_charlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charlvl());
    }

    // required uint32 charPhoto = 5;
    if (has_charphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charphoto());
    }

    // required uint32 charVip = 6;
    if (has_charvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charvip());
    }

    // required bool bWin = 7;
    if (has_bwin()) {
      total_size += 1 + 1;
    }

    // required uint32 newRank = 8;
    if (has_newrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newrank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool bRobot = 9;
    if (has_brobot()) {
      total_size += 1 + 1;
    }

    // required uint32 curTime = 10;
    if (has_curtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBArenaLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBArenaLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBArenaLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBArenaLog::MergeFrom(const DBArenaLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_charlvl()) {
      set_charlvl(from.charlvl());
    }
    if (from.has_charphoto()) {
      set_charphoto(from.charphoto());
    }
    if (from.has_charvip()) {
      set_charvip(from.charvip());
    }
    if (from.has_bwin()) {
      set_bwin(from.bwin());
    }
    if (from.has_newrank()) {
      set_newrank(from.newrank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_brobot()) {
      set_brobot(from.brobot());
    }
    if (from.has_curtime()) {
      set_curtime(from.curtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBArenaLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBArenaLog::CopyFrom(const DBArenaLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBArenaLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void DBArenaLog::Swap(DBArenaLog* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(charlvl_, other->charlvl_);
    std::swap(charphoto_, other->charphoto_);
    std::swap(charvip_, other->charvip_);
    std::swap(bwin_, other->bwin_);
    std::swap(newrank_, other->newrank_);
    std::swap(brobot_, other->brobot_);
    std::swap(curtime_, other->curtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBArenaLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBArenaLog_descriptor_;
  metadata.reflection = DBArenaLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBArenaLogList::kArenaLogFieldNumber;
#endif  // !_MSC_VER

DBArenaLogList::DBArenaLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBArenaLogList)
}

void DBArenaLogList::InitAsDefaultInstance() {
}

DBArenaLogList::DBArenaLogList(const DBArenaLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBArenaLogList)
}

void DBArenaLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBArenaLogList::~DBArenaLogList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBArenaLogList)
  SharedDtor();
}

void DBArenaLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBArenaLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBArenaLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBArenaLogList_descriptor_;
}

const DBArenaLogList& DBArenaLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBArenaLogList* DBArenaLogList::default_instance_ = NULL;

DBArenaLogList* DBArenaLogList::New() const {
  return new DBArenaLogList;
}

void DBArenaLogList::Clear() {
  arenalog_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBArenaLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBArenaLogList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DBArenaLog arenaLog = 1;
      case 1: {
        if (tag == 10) {
         parse_arenaLog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenalog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_arenaLog;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBArenaLogList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBArenaLogList)
  return false;
#undef DO_
}

void DBArenaLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBArenaLogList)
  // repeated .TgsProtocol.DBArenaLog arenaLog = 1;
  for (int i = 0; i < this->arenalog_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arenalog(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBArenaLogList)
}

::google::protobuf::uint8* DBArenaLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBArenaLogList)
  // repeated .TgsProtocol.DBArenaLog arenaLog = 1;
  for (int i = 0; i < this->arenalog_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arenalog(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBArenaLogList)
  return target;
}

int DBArenaLogList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DBArenaLog arenaLog = 1;
  total_size += 1 * this->arenalog_size();
  for (int i = 0; i < this->arenalog_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenalog(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBArenaLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBArenaLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBArenaLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBArenaLogList::MergeFrom(const DBArenaLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenalog_.MergeFrom(from.arenalog_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBArenaLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBArenaLogList::CopyFrom(const DBArenaLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBArenaLogList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->arenalog())) return false;
  return true;
}

void DBArenaLogList::Swap(DBArenaLogList* other) {
  if (other != this) {
    arenalog_.Swap(&other->arenalog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBArenaLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBArenaLogList_descriptor_;
  metadata.reflection = DBArenaLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBFriendInfo::kCharIdFieldNumber;
const int DBFriendInfo::kCharNameFieldNumber;
const int DBFriendInfo::kPhotoFieldNumber;
const int DBFriendInfo::kCharLevelFieldNumber;
const int DBFriendInfo::kEffectFieldNumber;
const int DBFriendInfo::kVipLevelFieldNumber;
const int DBFriendInfo::kGuildNameFieldNumber;
const int DBFriendInfo::kBSendFieldNumber;
const int DBFriendInfo::kReceiveFieldNumber;
const int DBFriendInfo::kLoginTimeFieldNumber;
const int DBFriendInfo::kEffect64FieldNumber;
#endif  // !_MSC_VER

DBFriendInfo::DBFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBFriendInfo)
}

void DBFriendInfo::InitAsDefaultInstance() {
}

DBFriendInfo::DBFriendInfo(const DBFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBFriendInfo)
}

void DBFriendInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_ = 0u;
  charlevel_ = 0u;
  effect_ = 0u;
  viplevel_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bsend_ = false;
  receive_ = 0u;
  logintime_ = 0u;
  effect64_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBFriendInfo::~DBFriendInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBFriendInfo)
  SharedDtor();
}

void DBFriendInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void DBFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBFriendInfo_descriptor_;
}

const DBFriendInfo& DBFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBFriendInfo* DBFriendInfo::default_instance_ = NULL;

DBFriendInfo* DBFriendInfo::New() const {
  return new DBFriendInfo;
}

void DBFriendInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBFriendInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(photo_, viplevel_);
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    bsend_ = false;
  }
  ZR_(receive_, logintime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBFriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charName;
        break;
      }

      // required bytes charName = 2;
      case 2: {
        if (tag == 18) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_photo;
        break;
      }

      // required uint32 photo = 3;
      case 3: {
        if (tag == 24) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charLevel;
        break;
      }

      // required uint32 charLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_charLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charlevel_)));
          set_has_charlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_effect;
        break;
      }

      // required uint32 effect = 5;
      case 5: {
        if (tag == 40) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vipLevel;
        break;
      }

      // required uint32 vipLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_guildName;
        break;
      }

      // required bytes guildName = 7;
      case 7: {
        if (tag == 58) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guildname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bSend;
        break;
      }

      // required bool bSend = 8;
      case 8: {
        if (tag == 64) {
         parse_bSend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsend_)));
          set_has_bsend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_receive;
        break;
      }

      // required uint32 receive = 9;
      case 9: {
        if (tag == 72) {
         parse_receive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receive_)));
          set_has_receive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_loginTime;
        break;
      }

      // required uint32 loginTime = 10;
      case 10: {
        if (tag == 80) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_effect64;
        break;
      }

      // optional uint64 effect64 = 11;
      case 11: {
        if (tag == 88) {
         parse_effect64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effect64_)));
          set_has_effect64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBFriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBFriendInfo)
  return false;
#undef DO_
}

void DBFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBFriendInfo)
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required bytes charName = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->charname(), output);
  }

  // required uint32 photo = 3;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->photo(), output);
  }

  // required uint32 charLevel = 4;
  if (has_charlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charlevel(), output);
  }

  // required uint32 effect = 5;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->effect(), output);
  }

  // required uint32 vipLevel = 6;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplevel(), output);
  }

  // required bytes guildName = 7;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->guildname(), output);
  }

  // required bool bSend = 8;
  if (has_bsend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bsend(), output);
  }

  // required uint32 receive = 9;
  if (has_receive()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->receive(), output);
  }

  // required uint32 loginTime = 10;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->logintime(), output);
  }

  // optional uint64 effect64 = 11;
  if (has_effect64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->effect64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBFriendInfo)
}

::google::protobuf::uint8* DBFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBFriendInfo)
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required bytes charName = 2;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->charname(), target);
  }

  // required uint32 photo = 3;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->photo(), target);
  }

  // required uint32 charLevel = 4;
  if (has_charlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charlevel(), target);
  }

  // required uint32 effect = 5;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->effect(), target);
  }

  // required uint32 vipLevel = 6;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplevel(), target);
  }

  // required bytes guildName = 7;
  if (has_guildname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->guildname(), target);
  }

  // required bool bSend = 8;
  if (has_bsend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bsend(), target);
  }

  // required uint32 receive = 9;
  if (has_receive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->receive(), target);
  }

  // required uint32 loginTime = 10;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->logintime(), target);
  }

  // optional uint64 effect64 = 11;
  if (has_effect64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->effect64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBFriendInfo)
  return target;
}

int DBFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bytes charName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // required uint32 photo = 3;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required uint32 charLevel = 4;
    if (has_charlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charlevel());
    }

    // required uint32 effect = 5;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect());
    }

    // required uint32 vipLevel = 6;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required bytes guildName = 7;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guildname());
    }

    // required bool bSend = 8;
    if (has_bsend()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 receive = 9;
    if (has_receive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receive());
    }

    // required uint32 loginTime = 10;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintime());
    }

    // optional uint64 effect64 = 11;
    if (has_effect64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->effect64());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBFriendInfo::MergeFrom(const DBFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_charlevel()) {
      set_charlevel(from.charlevel());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_bsend()) {
      set_bsend(from.bsend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_receive()) {
      set_receive(from.receive());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_effect64()) {
      set_effect64(from.effect64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBFriendInfo::CopyFrom(const DBFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void DBFriendInfo::Swap(DBFriendInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(photo_, other->photo_);
    std::swap(charlevel_, other->charlevel_);
    std::swap(effect_, other->effect_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(guildname_, other->guildname_);
    std::swap(bsend_, other->bsend_);
    std::swap(receive_, other->receive_);
    std::swap(logintime_, other->logintime_);
    std::swap(effect64_, other->effect64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBFriendInfo_descriptor_;
  metadata.reflection = DBFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBFriendList::kFriendListFieldNumber;
const int DBFriendList::kBlackListFieldNumber;
const int DBFriendList::kApplyListFieldNumber;
#endif  // !_MSC_VER

DBFriendList::DBFriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBFriendList)
}

void DBFriendList::InitAsDefaultInstance() {
}

DBFriendList::DBFriendList(const DBFriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBFriendList)
}

void DBFriendList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBFriendList::~DBFriendList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBFriendList)
  SharedDtor();
}

void DBFriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBFriendList_descriptor_;
}

const DBFriendList& DBFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBFriendList* DBFriendList::default_instance_ = NULL;

DBFriendList* DBFriendList::New() const {
  return new DBFriendList;
}

void DBFriendList::Clear() {
  friendlist_.Clear();
  blacklist_.Clear();
  applylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBFriendList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DBFriendInfo friendList = 1;
      case 1: {
        if (tag == 10) {
         parse_friendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_friendList;
        if (input->ExpectTag(18)) goto parse_blackList;
        break;
      }

      // repeated .TgsProtocol.DBFriendInfo blackList = 2;
      case 2: {
        if (tag == 18) {
         parse_blackList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blacklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blackList;
        if (input->ExpectTag(26)) goto parse_applyList;
        break;
      }

      // repeated .TgsProtocol.DBFriendInfo applyList = 3;
      case 3: {
        if (tag == 26) {
         parse_applyList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_applyList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBFriendList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBFriendList)
  return false;
#undef DO_
}

void DBFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBFriendList)
  // repeated .TgsProtocol.DBFriendInfo friendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendlist(i), output);
  }

  // repeated .TgsProtocol.DBFriendInfo blackList = 2;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blacklist(i), output);
  }

  // repeated .TgsProtocol.DBFriendInfo applyList = 3;
  for (int i = 0; i < this->applylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->applylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBFriendList)
}

::google::protobuf::uint8* DBFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBFriendList)
  // repeated .TgsProtocol.DBFriendInfo friendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendlist(i), target);
  }

  // repeated .TgsProtocol.DBFriendInfo blackList = 2;
  for (int i = 0; i < this->blacklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blacklist(i), target);
  }

  // repeated .TgsProtocol.DBFriendInfo applyList = 3;
  for (int i = 0; i < this->applylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->applylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBFriendList)
  return target;
}

int DBFriendList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DBFriendInfo friendList = 1;
  total_size += 1 * this->friendlist_size();
  for (int i = 0; i < this->friendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlist(i));
  }

  // repeated .TgsProtocol.DBFriendInfo blackList = 2;
  total_size += 1 * this->blacklist_size();
  for (int i = 0; i < this->blacklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blacklist(i));
  }

  // repeated .TgsProtocol.DBFriendInfo applyList = 3;
  total_size += 1 * this->applylist_size();
  for (int i = 0; i < this->applylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBFriendList::MergeFrom(const DBFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlist_.MergeFrom(from.friendlist_);
  blacklist_.MergeFrom(from.blacklist_);
  applylist_.MergeFrom(from.applylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBFriendList::CopyFrom(const DBFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFriendList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->friendlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->blacklist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->applylist())) return false;
  return true;
}

void DBFriendList::Swap(DBFriendList* other) {
  if (other != this) {
    friendlist_.Swap(&other->friendlist_);
    blacklist_.Swap(&other->blacklist_);
    applylist_.Swap(&other->applylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBFriendList_descriptor_;
  metadata.reflection = DBFriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopInfo::kGoodsidFieldNumber;
const int ShopInfo::kShoptypeFieldNumber;
const int ShopInfo::kBuytypeFieldNumber;
const int ShopInfo::kBuycontentidFieldNumber;
const int ShopInfo::kBuycountFieldNumber;
const int ShopInfo::kCosttypeFieldNumber;
const int ShopInfo::kCostcontentidFieldNumber;
const int ShopInfo::kCostcountFieldNumber;
const int ShopInfo::kCostcountoldFieldNumber;
const int ShopInfo::kStatusFieldNumber;
const int ShopInfo::kPlatformtypeFieldNumber;
const int ShopInfo::kLimitnumberFieldNumber;
const int ShopInfo::kLimittypeFieldNumber;
const int ShopInfo::kPrizefloatFieldNumber;
#endif  // !_MSC_VER

ShopInfo::ShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ShopInfo)
}

void ShopInfo::InitAsDefaultInstance() {
}

ShopInfo::ShopInfo(const ShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ShopInfo)
}

void ShopInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  goodsid_ = 0u;
  shoptype_ = 0u;
  buytype_ = 0u;
  buycontentid_ = 0u;
  buycount_ = 0u;
  costtype_ = 0u;
  costcontentid_ = 0u;
  costcount_ = 0u;
  costcountold_ = 0u;
  status_ = 0u;
  platformtype_ = 0u;
  limitnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limittype_ = 0u;
  prizefloat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopInfo::~ShopInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ShopInfo)
  SharedDtor();
}

void ShopInfo::SharedDtor() {
  if (limitnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete limitnumber_;
  }
  if (this != default_instance_) {
  }
}

void ShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopInfo_descriptor_;
}

const ShopInfo& ShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ShopInfo* ShopInfo::default_instance_ = NULL;

ShopInfo* ShopInfo::New() const {
  return new ShopInfo;
}

void ShopInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(goodsid_, costcount_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(costcountold_, status_);
    ZR_(platformtype_, prizefloat_);
    if (has_limitnumber()) {
      if (limitnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        limitnumber_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ShopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 goodsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shoptype;
        break;
      }

      // required uint32 shoptype = 2;
      case 2: {
        if (tag == 16) {
         parse_shoptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoptype_)));
          set_has_shoptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buytype;
        break;
      }

      // required uint32 buytype = 3;
      case 3: {
        if (tag == 24) {
         parse_buytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buytype_)));
          set_has_buytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buycontentid;
        break;
      }

      // required uint32 buycontentid = 4;
      case 4: {
        if (tag == 32) {
         parse_buycontentid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buycontentid_)));
          set_has_buycontentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_buycount;
        break;
      }

      // required uint32 buycount = 5;
      case 5: {
        if (tag == 40) {
         parse_buycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_costtype;
        break;
      }

      // required uint32 costtype = 6;
      case 6: {
        if (tag == 48) {
         parse_costtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costtype_)));
          set_has_costtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_costcontentid;
        break;
      }

      // required uint32 costcontentid = 7;
      case 7: {
        if (tag == 56) {
         parse_costcontentid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costcontentid_)));
          set_has_costcontentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_costcount;
        break;
      }

      // required uint32 costcount = 8;
      case 8: {
        if (tag == 64) {
         parse_costcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costcount_)));
          set_has_costcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_costcountold;
        break;
      }

      // required uint32 costcountold = 9;
      case 9: {
        if (tag == 72) {
         parse_costcountold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costcountold_)));
          set_has_costcountold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_status;
        break;
      }

      // required uint32 status = 10;
      case 10: {
        if (tag == 80) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_platformtype;
        break;
      }

      // required uint32 platformtype = 11;
      case 11: {
        if (tag == 88) {
         parse_platformtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platformtype_)));
          set_has_platformtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_limitnumber;
        break;
      }

      // required bytes limitnumber = 12;
      case 12: {
        if (tag == 98) {
         parse_limitnumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_limitnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_limittype;
        break;
      }

      // required uint32 limittype = 13;
      case 13: {
        if (tag == 104) {
         parse_limittype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limittype_)));
          set_has_limittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_prizefloat;
        break;
      }

      // required uint32 prizefloat = 14;
      case 14: {
        if (tag == 112) {
         parse_prizefloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizefloat_)));
          set_has_prizefloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ShopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ShopInfo)
  return false;
#undef DO_
}

void ShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ShopInfo)
  // required uint32 goodsid = 1;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goodsid(), output);
  }

  // required uint32 shoptype = 2;
  if (has_shoptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shoptype(), output);
  }

  // required uint32 buytype = 3;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buytype(), output);
  }

  // required uint32 buycontentid = 4;
  if (has_buycontentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buycontentid(), output);
  }

  // required uint32 buycount = 5;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buycount(), output);
  }

  // required uint32 costtype = 6;
  if (has_costtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->costtype(), output);
  }

  // required uint32 costcontentid = 7;
  if (has_costcontentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->costcontentid(), output);
  }

  // required uint32 costcount = 8;
  if (has_costcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->costcount(), output);
  }

  // required uint32 costcountold = 9;
  if (has_costcountold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->costcountold(), output);
  }

  // required uint32 status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->status(), output);
  }

  // required uint32 platformtype = 11;
  if (has_platformtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->platformtype(), output);
  }

  // required bytes limitnumber = 12;
  if (has_limitnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->limitnumber(), output);
  }

  // required uint32 limittype = 13;
  if (has_limittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->limittype(), output);
  }

  // required uint32 prizefloat = 14;
  if (has_prizefloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->prizefloat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ShopInfo)
}

::google::protobuf::uint8* ShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ShopInfo)
  // required uint32 goodsid = 1;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goodsid(), target);
  }

  // required uint32 shoptype = 2;
  if (has_shoptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shoptype(), target);
  }

  // required uint32 buytype = 3;
  if (has_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buytype(), target);
  }

  // required uint32 buycontentid = 4;
  if (has_buycontentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buycontentid(), target);
  }

  // required uint32 buycount = 5;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buycount(), target);
  }

  // required uint32 costtype = 6;
  if (has_costtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->costtype(), target);
  }

  // required uint32 costcontentid = 7;
  if (has_costcontentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->costcontentid(), target);
  }

  // required uint32 costcount = 8;
  if (has_costcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->costcount(), target);
  }

  // required uint32 costcountold = 9;
  if (has_costcountold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->costcountold(), target);
  }

  // required uint32 status = 10;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->status(), target);
  }

  // required uint32 platformtype = 11;
  if (has_platformtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->platformtype(), target);
  }

  // required bytes limitnumber = 12;
  if (has_limitnumber()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->limitnumber(), target);
  }

  // required uint32 limittype = 13;
  if (has_limittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->limittype(), target);
  }

  // required uint32 prizefloat = 14;
  if (has_prizefloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->prizefloat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ShopInfo)
  return target;
}

int ShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 goodsid = 1;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsid());
    }

    // required uint32 shoptype = 2;
    if (has_shoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoptype());
    }

    // required uint32 buytype = 3;
    if (has_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buytype());
    }

    // required uint32 buycontentid = 4;
    if (has_buycontentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buycontentid());
    }

    // required uint32 buycount = 5;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buycount());
    }

    // required uint32 costtype = 6;
    if (has_costtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costtype());
    }

    // required uint32 costcontentid = 7;
    if (has_costcontentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costcontentid());
    }

    // required uint32 costcount = 8;
    if (has_costcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 costcountold = 9;
    if (has_costcountold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costcountold());
    }

    // required uint32 status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 platformtype = 11;
    if (has_platformtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platformtype());
    }

    // required bytes limitnumber = 12;
    if (has_limitnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->limitnumber());
    }

    // required uint32 limittype = 13;
    if (has_limittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limittype());
    }

    // required uint32 prizefloat = 14;
    if (has_prizefloat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizefloat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopInfo::MergeFrom(const ShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_shoptype()) {
      set_shoptype(from.shoptype());
    }
    if (from.has_buytype()) {
      set_buytype(from.buytype());
    }
    if (from.has_buycontentid()) {
      set_buycontentid(from.buycontentid());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
    if (from.has_costtype()) {
      set_costtype(from.costtype());
    }
    if (from.has_costcontentid()) {
      set_costcontentid(from.costcontentid());
    }
    if (from.has_costcount()) {
      set_costcount(from.costcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_costcountold()) {
      set_costcountold(from.costcountold());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_platformtype()) {
      set_platformtype(from.platformtype());
    }
    if (from.has_limitnumber()) {
      set_limitnumber(from.limitnumber());
    }
    if (from.has_limittype()) {
      set_limittype(from.limittype());
    }
    if (from.has_prizefloat()) {
      set_prizefloat(from.prizefloat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopInfo::CopyFrom(const ShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void ShopInfo::Swap(ShopInfo* other) {
  if (other != this) {
    std::swap(goodsid_, other->goodsid_);
    std::swap(shoptype_, other->shoptype_);
    std::swap(buytype_, other->buytype_);
    std::swap(buycontentid_, other->buycontentid_);
    std::swap(buycount_, other->buycount_);
    std::swap(costtype_, other->costtype_);
    std::swap(costcontentid_, other->costcontentid_);
    std::swap(costcount_, other->costcount_);
    std::swap(costcountold_, other->costcountold_);
    std::swap(status_, other->status_);
    std::swap(platformtype_, other->platformtype_);
    std::swap(limitnumber_, other->limitnumber_);
    std::swap(limittype_, other->limittype_);
    std::swap(prizefloat_, other->prizefloat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopInfo_descriptor_;
  metadata.reflection = ShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsData::kGoodsidFieldNumber;
const int GoodsData::kAlreadyFieldNumber;
const int GoodsData::kFlushtimeFieldNumber;
#endif  // !_MSC_VER

GoodsData::GoodsData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GoodsData)
}

void GoodsData::InitAsDefaultInstance() {
}

GoodsData::GoodsData(const GoodsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GoodsData)
}

void GoodsData::SharedCtor() {
  _cached_size_ = 0;
  goodsid_ = 0u;
  already_ = 0u;
  flushtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsData::~GoodsData() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GoodsData)
  SharedDtor();
}

void GoodsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoodsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsData_descriptor_;
}

const GoodsData& GoodsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GoodsData* GoodsData::default_instance_ = NULL;

GoodsData* GoodsData::New() const {
  return new GoodsData;
}

void GoodsData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GoodsData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(goodsid_, flushtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GoodsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 goodsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_already;
        break;
      }

      // required uint32 already = 2;
      case 2: {
        if (tag == 16) {
         parse_already:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &already_)));
          set_has_already();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flushtime;
        break;
      }

      // required uint32 flushtime = 3;
      case 3: {
        if (tag == 24) {
         parse_flushtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flushtime_)));
          set_has_flushtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GoodsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GoodsData)
  return false;
#undef DO_
}

void GoodsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GoodsData)
  // required uint32 goodsid = 1;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goodsid(), output);
  }

  // required uint32 already = 2;
  if (has_already()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->already(), output);
  }

  // required uint32 flushtime = 3;
  if (has_flushtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flushtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GoodsData)
}

::google::protobuf::uint8* GoodsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GoodsData)
  // required uint32 goodsid = 1;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goodsid(), target);
  }

  // required uint32 already = 2;
  if (has_already()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->already(), target);
  }

  // required uint32 flushtime = 3;
  if (has_flushtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flushtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GoodsData)
  return target;
}

int GoodsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 goodsid = 1;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsid());
    }

    // required uint32 already = 2;
    if (has_already()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->already());
    }

    // required uint32 flushtime = 3;
    if (has_flushtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flushtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsData::MergeFrom(const GoodsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_already()) {
      set_already(from.already());
    }
    if (from.has_flushtime()) {
      set_flushtime(from.flushtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsData::CopyFrom(const GoodsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GoodsData::Swap(GoodsData* other) {
  if (other != this) {
    std::swap(goodsid_, other->goodsid_);
    std::swap(already_, other->already_);
    std::swap(flushtime_, other->flushtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsData_descriptor_;
  metadata.reflection = GoodsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsDataList::kGoodsdatalistFieldNumber;
#endif  // !_MSC_VER

GoodsDataList::GoodsDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GoodsDataList)
}

void GoodsDataList::InitAsDefaultInstance() {
}

GoodsDataList::GoodsDataList(const GoodsDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GoodsDataList)
}

void GoodsDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsDataList::~GoodsDataList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GoodsDataList)
  SharedDtor();
}

void GoodsDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoodsDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsDataList_descriptor_;
}

const GoodsDataList& GoodsDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GoodsDataList* GoodsDataList::default_instance_ = NULL;

GoodsDataList* GoodsDataList::New() const {
  return new GoodsDataList;
}

void GoodsDataList::Clear() {
  goodsdatalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GoodsDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.GoodsData goodsdatalist = 1;
      case 1: {
        if (tag == 10) {
         parse_goodsdatalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodsdatalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_goodsdatalist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GoodsDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GoodsDataList)
  return false;
#undef DO_
}

void GoodsDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GoodsDataList)
  // repeated .TgsProtocol.GoodsData goodsdatalist = 1;
  for (int i = 0; i < this->goodsdatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goodsdatalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GoodsDataList)
}

::google::protobuf::uint8* GoodsDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GoodsDataList)
  // repeated .TgsProtocol.GoodsData goodsdatalist = 1;
  for (int i = 0; i < this->goodsdatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goodsdatalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GoodsDataList)
  return target;
}

int GoodsDataList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.GoodsData goodsdatalist = 1;
  total_size += 1 * this->goodsdatalist_size();
  for (int i = 0; i < this->goodsdatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodsdatalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsDataList::MergeFrom(const GoodsDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodsdatalist_.MergeFrom(from.goodsdatalist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsDataList::CopyFrom(const GoodsDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsDataList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->goodsdatalist())) return false;
  return true;
}

void GoodsDataList::Swap(GoodsDataList* other) {
  if (other != this) {
    goodsdatalist_.Swap(&other->goodsdatalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsDataList_descriptor_;
  metadata.reflection = GoodsDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientQuest::kQuestidFieldNumber;
const int ClientQuest::kCompleteFieldNumber;
const int ClientQuest::kTargetValueFieldNumber;
const int ClientQuest::kIsShowFieldNumber;
const int ClientQuest::kIsGetFieldNumber;
const int ClientQuest::kCompleteTimeFieldNumber;
#endif  // !_MSC_VER

ClientQuest::ClientQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientQuest)
}

void ClientQuest::InitAsDefaultInstance() {
}

ClientQuest::ClientQuest(const ClientQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientQuest)
}

void ClientQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  complete_ = 0u;
  targetvalue_ = GOOGLE_ULONGLONG(0);
  isshow_ = 0u;
  isget_ = 0u;
  completetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientQuest::~ClientQuest() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientQuest)
  SharedDtor();
}

void ClientQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientQuest_descriptor_;
}

const ClientQuest& ClientQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientQuest* ClientQuest::default_instance_ = NULL;

ClientQuest* ClientQuest::New() const {
  return new ClientQuest;
}

void ClientQuest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientQuest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(questid_, completetime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 questid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_complete;
        break;
      }

      // required uint32 complete = 2;
      case 2: {
        if (tag == 16) {
         parse_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_)));
          set_has_complete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targetValue;
        break;
      }

      // required uint64 targetValue = 3;
      case 3: {
        if (tag == 24) {
         parse_targetValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetvalue_)));
          set_has_targetvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isShow;
        break;
      }

      // required uint32 isShow = 4;
      case 4: {
        if (tag == 32) {
         parse_isShow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isshow_)));
          set_has_isshow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isGet;
        break;
      }

      // optional uint32 isGet = 5;
      case 5: {
        if (tag == 40) {
         parse_isGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isget_)));
          set_has_isget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_completeTime;
        break;
      }

      // optional uint32 completeTime = 6;
      case 6: {
        if (tag == 48) {
         parse_completeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completetime_)));
          set_has_completetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientQuest)
  return false;
#undef DO_
}

void ClientQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientQuest)
  // required uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // required uint32 complete = 2;
  if (has_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->complete(), output);
  }

  // required uint64 targetValue = 3;
  if (has_targetvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->targetvalue(), output);
  }

  // required uint32 isShow = 4;
  if (has_isshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isshow(), output);
  }

  // optional uint32 isGet = 5;
  if (has_isget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isget(), output);
  }

  // optional uint32 completeTime = 6;
  if (has_completetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->completetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientQuest)
}

::google::protobuf::uint8* ClientQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientQuest)
  // required uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // required uint32 complete = 2;
  if (has_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->complete(), target);
  }

  // required uint64 targetValue = 3;
  if (has_targetvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->targetvalue(), target);
  }

  // required uint32 isShow = 4;
  if (has_isshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isshow(), target);
  }

  // optional uint32 isGet = 5;
  if (has_isget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isget(), target);
  }

  // optional uint32 completeTime = 6;
  if (has_completetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->completetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientQuest)
  return target;
}

int ClientQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // required uint32 complete = 2;
    if (has_complete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->complete());
    }

    // required uint64 targetValue = 3;
    if (has_targetvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetvalue());
    }

    // required uint32 isShow = 4;
    if (has_isshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isshow());
    }

    // optional uint32 isGet = 5;
    if (has_isget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isget());
    }

    // optional uint32 completeTime = 6;
    if (has_completetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientQuest::MergeFrom(const ClientQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_complete()) {
      set_complete(from.complete());
    }
    if (from.has_targetvalue()) {
      set_targetvalue(from.targetvalue());
    }
    if (from.has_isshow()) {
      set_isshow(from.isshow());
    }
    if (from.has_isget()) {
      set_isget(from.isget());
    }
    if (from.has_completetime()) {
      set_completetime(from.completetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientQuest::CopyFrom(const ClientQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClientQuest::Swap(ClientQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(complete_, other->complete_);
    std::swap(targetvalue_, other->targetvalue_);
    std::swap(isshow_, other->isshow_);
    std::swap(isget_, other->isget_);
    std::swap(completetime_, other->completetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientQuest_descriptor_;
  metadata.reflection = ClientQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEvaluation::kInstanceIdFieldNumber;
const int TEvaluation::kEvaluationFieldNumber;
#endif  // !_MSC_VER

TEvaluation::TEvaluation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.TEvaluation)
}

void TEvaluation::InitAsDefaultInstance() {
}

TEvaluation::TEvaluation(const TEvaluation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.TEvaluation)
}

void TEvaluation::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0u;
  evaluation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEvaluation::~TEvaluation() {
  // @@protoc_insertion_point(destructor:TgsProtocol.TEvaluation)
  SharedDtor();
}

void TEvaluation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEvaluation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEvaluation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEvaluation_descriptor_;
}

const TEvaluation& TEvaluation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

TEvaluation* TEvaluation::default_instance_ = NULL;

TEvaluation* TEvaluation::New() const {
  return new TEvaluation;
}

void TEvaluation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TEvaluation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(instanceid_, evaluation_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEvaluation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.TEvaluation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instanceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_evaluation;
        break;
      }

      // required uint32 evaluation = 2;
      case 2: {
        if (tag == 16) {
         parse_evaluation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evaluation_)));
          set_has_evaluation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.TEvaluation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.TEvaluation)
  return false;
#undef DO_
}

void TEvaluation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.TEvaluation)
  // required uint32 instanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instanceid(), output);
  }

  // required uint32 evaluation = 2;
  if (has_evaluation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->evaluation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.TEvaluation)
}

::google::protobuf::uint8* TEvaluation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.TEvaluation)
  // required uint32 instanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instanceid(), target);
  }

  // required uint32 evaluation = 2;
  if (has_evaluation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->evaluation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.TEvaluation)
  return target;
}

int TEvaluation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceid());
    }

    // required uint32 evaluation = 2;
    if (has_evaluation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evaluation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEvaluation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEvaluation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEvaluation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEvaluation::MergeFrom(const TEvaluation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_evaluation()) {
      set_evaluation(from.evaluation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEvaluation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEvaluation::CopyFrom(const TEvaluation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEvaluation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TEvaluation::Swap(TEvaluation* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(evaluation_, other->evaluation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEvaluation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEvaluation_descriptor_;
  metadata.reflection = TEvaluation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroEquipInfo::kTemplateIdFieldNumber;
const int HeroEquipInfo::kStarFieldNumber;
const int HeroEquipInfo::kAttrValFieldNumber;
const int HeroEquipInfo::kScheduleValFieldNumber;
#endif  // !_MSC_VER

HeroEquipInfo::HeroEquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.HeroEquipInfo)
}

void HeroEquipInfo::InitAsDefaultInstance() {
}

HeroEquipInfo::HeroEquipInfo(const HeroEquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.HeroEquipInfo)
}

void HeroEquipInfo::SharedCtor() {
  _cached_size_ = 0;
  templateid_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroEquipInfo::~HeroEquipInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.HeroEquipInfo)
  SharedDtor();
}

void HeroEquipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroEquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroEquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroEquipInfo_descriptor_;
}

const HeroEquipInfo& HeroEquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

HeroEquipInfo* HeroEquipInfo::default_instance_ = NULL;

HeroEquipInfo* HeroEquipInfo::New() const {
  return new HeroEquipInfo;
}

void HeroEquipInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeroEquipInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(templateid_, star_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attrval_.Clear();
  scheduleval_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroEquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.HeroEquipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 templateId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attrVal;
        break;
      }

      // repeated uint32 attrVal = 3;
      case 3: {
        if (tag == 24) {
         parse_attrVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_attrval())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attrval())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attrVal;
        if (input->ExpectTag(32)) goto parse_scheduleVal;
        break;
      }

      // repeated uint32 scheduleVal = 4;
      case 4: {
        if (tag == 32) {
         parse_scheduleVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_scheduleval())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_scheduleval())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_scheduleVal;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.HeroEquipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.HeroEquipInfo)
  return false;
#undef DO_
}

void HeroEquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.HeroEquipInfo)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // repeated uint32 attrVal = 3;
  for (int i = 0; i < this->attrval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->attrval(i), output);
  }

  // repeated uint32 scheduleVal = 4;
  for (int i = 0; i < this->scheduleval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->scheduleval(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.HeroEquipInfo)
}

::google::protobuf::uint8* HeroEquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.HeroEquipInfo)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // repeated uint32 attrVal = 3;
  for (int i = 0; i < this->attrval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->attrval(i), target);
  }

  // repeated uint32 scheduleVal = 4;
  for (int i = 0; i < this->scheduleval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->scheduleval(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.HeroEquipInfo)
  return target;
}

int HeroEquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 templateId = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  // repeated uint32 attrVal = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->attrval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attrval(i));
    }
    total_size += 1 * this->attrval_size() + data_size;
  }

  // repeated uint32 scheduleVal = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->scheduleval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->scheduleval(i));
    }
    total_size += 1 * this->scheduleval_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroEquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroEquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroEquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroEquipInfo::MergeFrom(const HeroEquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrval_.MergeFrom(from.attrval_);
  scheduleval_.MergeFrom(from.scheduleval_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroEquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroEquipInfo::CopyFrom(const HeroEquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroEquipInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeroEquipInfo::Swap(HeroEquipInfo* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(star_, other->star_);
    attrval_.Swap(&other->attrval_);
    scheduleval_.Swap(&other->scheduleval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroEquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroEquipInfo_descriptor_;
  metadata.reflection = HeroEquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroEquipNew::kTemplateIdFieldNumber;
const int HeroEquipNew::kInstanceIdFieldNumber;
const int HeroEquipNew::kStrengLevelFieldNumber;
const int HeroEquipNew::kRefineLevelFieldNumber;
const int HeroEquipNew::kStarLevelFieldNumber;
const int HeroEquipNew::kStrengExpFieldNumber;
const int HeroEquipNew::kRefineExpFieldNumber;
#endif  // !_MSC_VER

HeroEquipNew::HeroEquipNew()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.HeroEquipNew)
}

void HeroEquipNew::InitAsDefaultInstance() {
}

HeroEquipNew::HeroEquipNew(const HeroEquipNew& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.HeroEquipNew)
}

void HeroEquipNew::SharedCtor() {
  _cached_size_ = 0;
  templateid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  strenglevel_ = 0u;
  refinelevel_ = 0u;
  starlevel_ = 0u;
  strengexp_ = 0u;
  refineexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroEquipNew::~HeroEquipNew() {
  // @@protoc_insertion_point(destructor:TgsProtocol.HeroEquipNew)
  SharedDtor();
}

void HeroEquipNew::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroEquipNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroEquipNew::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroEquipNew_descriptor_;
}

const HeroEquipNew& HeroEquipNew::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

HeroEquipNew* HeroEquipNew::default_instance_ = NULL;

HeroEquipNew* HeroEquipNew::New() const {
  return new HeroEquipNew;
}

void HeroEquipNew::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeroEquipNew*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(instanceid_, refineexp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroEquipNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.HeroEquipNew)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 templateId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceId;
        break;
      }

      // required uint64 instanceId = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_strengLevel;
        break;
      }

      // required uint32 strengLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_strengLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strenglevel_)));
          set_has_strenglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_refineLevel;
        break;
      }

      // required uint32 refineLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_refineLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelevel_)));
          set_has_refinelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_starLevel;
        break;
      }

      // optional uint32 starLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_starLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlevel_)));
          set_has_starlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_strengExp;
        break;
      }

      // optional uint32 strengExp = 6;
      case 6: {
        if (tag == 48) {
         parse_strengExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strengexp_)));
          set_has_strengexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_refineExp;
        break;
      }

      // optional uint32 refineExp = 7;
      case 7: {
        if (tag == 56) {
         parse_refineExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refineexp_)));
          set_has_refineexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.HeroEquipNew)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.HeroEquipNew)
  return false;
#undef DO_
}

void HeroEquipNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.HeroEquipNew)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // required uint64 instanceId = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // required uint32 strengLevel = 3;
  if (has_strenglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->strenglevel(), output);
  }

  // required uint32 refineLevel = 4;
  if (has_refinelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->refinelevel(), output);
  }

  // optional uint32 starLevel = 5;
  if (has_starlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->starlevel(), output);
  }

  // optional uint32 strengExp = 6;
  if (has_strengexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->strengexp(), output);
  }

  // optional uint32 refineExp = 7;
  if (has_refineexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->refineexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.HeroEquipNew)
}

::google::protobuf::uint8* HeroEquipNew::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.HeroEquipNew)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // required uint64 instanceId = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // required uint32 strengLevel = 3;
  if (has_strenglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->strenglevel(), target);
  }

  // required uint32 refineLevel = 4;
  if (has_refinelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->refinelevel(), target);
  }

  // optional uint32 starLevel = 5;
  if (has_starlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->starlevel(), target);
  }

  // optional uint32 strengExp = 6;
  if (has_strengexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->strengexp(), target);
  }

  // optional uint32 refineExp = 7;
  if (has_refineexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->refineexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.HeroEquipNew)
  return target;
}

int HeroEquipNew::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 templateId = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint64 instanceId = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // required uint32 strengLevel = 3;
    if (has_strenglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strenglevel());
    }

    // required uint32 refineLevel = 4;
    if (has_refinelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelevel());
    }

    // optional uint32 starLevel = 5;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlevel());
    }

    // optional uint32 strengExp = 6;
    if (has_strengexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strengexp());
    }

    // optional uint32 refineExp = 7;
    if (has_refineexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refineexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroEquipNew::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroEquipNew* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroEquipNew*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroEquipNew::MergeFrom(const HeroEquipNew& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_strenglevel()) {
      set_strenglevel(from.strenglevel());
    }
    if (from.has_refinelevel()) {
      set_refinelevel(from.refinelevel());
    }
    if (from.has_starlevel()) {
      set_starlevel(from.starlevel());
    }
    if (from.has_strengexp()) {
      set_strengexp(from.strengexp());
    }
    if (from.has_refineexp()) {
      set_refineexp(from.refineexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroEquipNew::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroEquipNew::CopyFrom(const HeroEquipNew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroEquipNew::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void HeroEquipNew::Swap(HeroEquipNew* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(strenglevel_, other->strenglevel_);
    std::swap(refinelevel_, other->refinelevel_);
    std::swap(starlevel_, other->starlevel_);
    std::swap(strengexp_, other->strengexp_);
    std::swap(refineexp_, other->refineexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroEquipNew::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroEquipNew_descriptor_;
  metadata.reflection = HeroEquipNew_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Property::kIndexFieldNumber;
const int Property::kBaseFieldNumber;
const int Property::kPerFieldNumber;
#endif  // !_MSC_VER

Property::Property()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Property)
}

void Property::InitAsDefaultInstance() {
}

Property::Property(const Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Property)
}

void Property::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  base_ = 0;
  per_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Property)
  SharedDtor();
}

void Property::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}

const Property& Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

Property* Property::default_instance_ = NULL;

Property* Property::New() const {
  return new Property;
}

void Property::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Property*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, per_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Property)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_base;
        break;
      }

      // optional float base = 2;
      case 2: {
        if (tag == 21) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_per;
        break;
      }

      // optional float per = 3;
      case 3: {
        if (tag == 29) {
         parse_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &per_)));
          set_has_per();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Property)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Property)
  return false;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Property)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional float base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->base(), output);
  }

  // optional float per = 3;
  if (has_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->per(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Property)
}

::google::protobuf::uint8* Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Property)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional float base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->base(), target);
  }

  // optional float per = 3;
  if (has_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->per(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Property)
  return target;
}

int Property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional float base = 2;
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float per = 3;
    if (has_per()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_per()) {
      set_per(from.per());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Property::Swap(Property* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(base_, other->base_);
    std::swap(per_, other->per_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Property_descriptor_;
  metadata.reflection = Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WakeAttr::kPropFieldNumber;
#endif  // !_MSC_VER

WakeAttr::WakeAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.WakeAttr)
}

void WakeAttr::InitAsDefaultInstance() {
}

WakeAttr::WakeAttr(const WakeAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.WakeAttr)
}

void WakeAttr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WakeAttr::~WakeAttr() {
  // @@protoc_insertion_point(destructor:TgsProtocol.WakeAttr)
  SharedDtor();
}

void WakeAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WakeAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WakeAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WakeAttr_descriptor_;
}

const WakeAttr& WakeAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

WakeAttr* WakeAttr::default_instance_ = NULL;

WakeAttr* WakeAttr::New() const {
  return new WakeAttr;
}

void WakeAttr::Clear() {
  prop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WakeAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.WakeAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.Property prop = 1;
      case 1: {
        if (tag == 10) {
         parse_prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_prop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.WakeAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.WakeAttr)
  return false;
#undef DO_
}

void WakeAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.WakeAttr)
  // repeated .TgsProtocol.Property prop = 1;
  for (int i = 0; i < this->prop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.WakeAttr)
}

::google::protobuf::uint8* WakeAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.WakeAttr)
  // repeated .TgsProtocol.Property prop = 1;
  for (int i = 0; i < this->prop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.WakeAttr)
  return target;
}

int WakeAttr::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.Property prop = 1;
  total_size += 1 * this->prop_size();
  for (int i = 0; i < this->prop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WakeAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WakeAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WakeAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WakeAttr::MergeFrom(const WakeAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  prop_.MergeFrom(from.prop_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WakeAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WakeAttr::CopyFrom(const WakeAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WakeAttr::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->prop())) return false;
  return true;
}

void WakeAttr::Swap(WakeAttr* other) {
  if (other != this) {
    prop_.Swap(&other->prop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WakeAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WakeAttr_descriptor_;
  metadata.reflection = WakeAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Diagram::kIdFieldNumber;
const int Diagram::kLevelFieldNumber;
#endif  // !_MSC_VER

Diagram::Diagram()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Diagram)
}

void Diagram::InitAsDefaultInstance() {
}

Diagram::Diagram(const Diagram& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Diagram)
}

void Diagram::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Diagram::~Diagram() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Diagram)
  SharedDtor();
}

void Diagram::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Diagram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Diagram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Diagram_descriptor_;
}

const Diagram& Diagram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

Diagram* Diagram::default_instance_ = NULL;

Diagram* Diagram::New() const {
  return new Diagram;
}

void Diagram::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Diagram*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Diagram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Diagram)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Diagram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Diagram)
  return false;
#undef DO_
}

void Diagram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Diagram)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Diagram)
}

::google::protobuf::uint8* Diagram::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Diagram)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Diagram)
  return target;
}

int Diagram::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Diagram::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Diagram* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Diagram*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Diagram::MergeFrom(const Diagram& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Diagram::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagram::CopyFrom(const Diagram& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagram::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Diagram::Swap(Diagram* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Diagram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Diagram_descriptor_;
  metadata.reflection = Diagram_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiagramChapter::kIdFieldNumber;
const int DiagramChapter::kNumFieldNumber;
#endif  // !_MSC_VER

DiagramChapter::DiagramChapter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DiagramChapter)
}

void DiagramChapter::InitAsDefaultInstance() {
}

DiagramChapter::DiagramChapter(const DiagramChapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DiagramChapter)
}

void DiagramChapter::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiagramChapter::~DiagramChapter() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DiagramChapter)
  SharedDtor();
}

void DiagramChapter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiagramChapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiagramChapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiagramChapter_descriptor_;
}

const DiagramChapter& DiagramChapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DiagramChapter* DiagramChapter::default_instance_ = NULL;

DiagramChapter* DiagramChapter::New() const {
  return new DiagramChapter;
}

void DiagramChapter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DiagramChapter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiagramChapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DiagramChapter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DiagramChapter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DiagramChapter)
  return false;
#undef DO_
}

void DiagramChapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DiagramChapter)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DiagramChapter)
}

::google::protobuf::uint8* DiagramChapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DiagramChapter)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DiagramChapter)
  return target;
}

int DiagramChapter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiagramChapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiagramChapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiagramChapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiagramChapter::MergeFrom(const DiagramChapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiagramChapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagramChapter::CopyFrom(const DiagramChapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagramChapter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DiagramChapter::Swap(DiagramChapter* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiagramChapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiagramChapter_descriptor_;
  metadata.reflection = DiagramChapter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiagramChapterMap::kIdFieldNumber;
const int DiagramChapterMap::kDiagramFieldNumber;
#endif  // !_MSC_VER

DiagramChapterMap::DiagramChapterMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DiagramChapterMap)
}

void DiagramChapterMap::InitAsDefaultInstance() {
}

DiagramChapterMap::DiagramChapterMap(const DiagramChapterMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DiagramChapterMap)
}

void DiagramChapterMap::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiagramChapterMap::~DiagramChapterMap() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DiagramChapterMap)
  SharedDtor();
}

void DiagramChapterMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiagramChapterMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiagramChapterMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiagramChapterMap_descriptor_;
}

const DiagramChapterMap& DiagramChapterMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DiagramChapterMap* DiagramChapterMap::default_instance_ = NULL;

DiagramChapterMap* DiagramChapterMap::New() const {
  return new DiagramChapterMap;
}

void DiagramChapterMap::Clear() {
  id_ = 0u;
  diagram_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiagramChapterMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DiagramChapterMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_diagram;
        break;
      }

      // repeated .TgsProtocol.Diagram diagram = 2;
      case 2: {
        if (tag == 18) {
         parse_diagram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_diagram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_diagram;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DiagramChapterMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DiagramChapterMap)
  return false;
#undef DO_
}

void DiagramChapterMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DiagramChapterMap)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .TgsProtocol.Diagram diagram = 2;
  for (int i = 0; i < this->diagram_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->diagram(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DiagramChapterMap)
}

::google::protobuf::uint8* DiagramChapterMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DiagramChapterMap)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .TgsProtocol.Diagram diagram = 2;
  for (int i = 0; i < this->diagram_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->diagram(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DiagramChapterMap)
  return target;
}

int DiagramChapterMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .TgsProtocol.Diagram diagram = 2;
  total_size += 1 * this->diagram_size();
  for (int i = 0; i < this->diagram_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->diagram(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiagramChapterMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiagramChapterMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiagramChapterMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiagramChapterMap::MergeFrom(const DiagramChapterMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  diagram_.MergeFrom(from.diagram_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiagramChapterMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagramChapterMap::CopyFrom(const DiagramChapterMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagramChapterMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->diagram())) return false;
  return true;
}

void DiagramChapterMap::Swap(DiagramChapterMap* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    diagram_.Swap(&other->diagram_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiagramChapterMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiagramChapterMap_descriptor_;
  metadata.reflection = DiagramChapterMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiagramMap::kDiagramChapterMapFieldNumber;
#endif  // !_MSC_VER

DiagramMap::DiagramMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DiagramMap)
}

void DiagramMap::InitAsDefaultInstance() {
}

DiagramMap::DiagramMap(const DiagramMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DiagramMap)
}

void DiagramMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiagramMap::~DiagramMap() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DiagramMap)
  SharedDtor();
}

void DiagramMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiagramMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiagramMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiagramMap_descriptor_;
}

const DiagramMap& DiagramMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DiagramMap* DiagramMap::default_instance_ = NULL;

DiagramMap* DiagramMap::New() const {
  return new DiagramMap;
}

void DiagramMap::Clear() {
  diagramchaptermap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiagramMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DiagramMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DiagramChapterMap diagramChapterMap = 1;
      case 1: {
        if (tag == 10) {
         parse_diagramChapterMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_diagramchaptermap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_diagramChapterMap;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DiagramMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DiagramMap)
  return false;
#undef DO_
}

void DiagramMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DiagramMap)
  // repeated .TgsProtocol.DiagramChapterMap diagramChapterMap = 1;
  for (int i = 0; i < this->diagramchaptermap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->diagramchaptermap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DiagramMap)
}

::google::protobuf::uint8* DiagramMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DiagramMap)
  // repeated .TgsProtocol.DiagramChapterMap diagramChapterMap = 1;
  for (int i = 0; i < this->diagramchaptermap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->diagramchaptermap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DiagramMap)
  return target;
}

int DiagramMap::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DiagramChapterMap diagramChapterMap = 1;
  total_size += 1 * this->diagramchaptermap_size();
  for (int i = 0; i < this->diagramchaptermap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->diagramchaptermap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiagramMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiagramMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiagramMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiagramMap::MergeFrom(const DiagramMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  diagramchaptermap_.MergeFrom(from.diagramchaptermap_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiagramMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagramMap::CopyFrom(const DiagramMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagramMap::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->diagramchaptermap())) return false;
  return true;
}

void DiagramMap::Swap(DiagramMap* other) {
  if (other != this) {
    diagramchaptermap_.Swap(&other->diagramchaptermap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiagramMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiagramMap_descriptor_;
  metadata.reflection = DiagramMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GhostDetail::kIdFieldNumber;
const int GhostDetail::kActiveIdFieldNumber;
#endif  // !_MSC_VER

GhostDetail::GhostDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GhostDetail)
}

void GhostDetail::InitAsDefaultInstance() {
}

GhostDetail::GhostDetail(const GhostDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GhostDetail)
}

void GhostDetail::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GhostDetail::~GhostDetail() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GhostDetail)
  SharedDtor();
}

void GhostDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GhostDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GhostDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GhostDetail_descriptor_;
}

const GhostDetail& GhostDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GhostDetail* GhostDetail::default_instance_ = NULL;

GhostDetail* GhostDetail::New() const {
  return new GhostDetail;
}

void GhostDetail::Clear() {
  id_ = 0u;
  activeid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GhostDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GhostDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activeId;
        break;
      }

      // repeated uint32 activeId = 2;
      case 2: {
        if (tag == 16) {
         parse_activeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_activeid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activeid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activeId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GhostDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GhostDetail)
  return false;
#undef DO_
}

void GhostDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GhostDetail)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 activeId = 2;
  for (int i = 0; i < this->activeid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->activeid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GhostDetail)
}

::google::protobuf::uint8* GhostDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GhostDetail)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 activeId = 2;
  for (int i = 0; i < this->activeid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->activeid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GhostDetail)
  return target;
}

int GhostDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated uint32 activeId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->activeid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activeid(i));
    }
    total_size += 1 * this->activeid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GhostDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GhostDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GhostDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GhostDetail::MergeFrom(const GhostDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  activeid_.MergeFrom(from.activeid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GhostDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostDetail::CopyFrom(const GhostDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GhostDetail::Swap(GhostDetail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    activeid_.Swap(&other->activeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GhostDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GhostDetail_descriptor_;
  metadata.reflection = GhostDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ghost::kIdFieldNumber;
const int Ghost::kActiveIdFieldNumber;
#endif  // !_MSC_VER

Ghost::Ghost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Ghost)
}

void Ghost::InitAsDefaultInstance() {
}

Ghost::Ghost(const Ghost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Ghost)
}

void Ghost::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ghost::~Ghost() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Ghost)
  SharedDtor();
}

void Ghost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ghost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ghost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ghost_descriptor_;
}

const Ghost& Ghost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

Ghost* Ghost::default_instance_ = NULL;

Ghost* Ghost::New() const {
  return new Ghost;
}

void Ghost::Clear() {
  id_ = 0u;
  activeid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ghost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Ghost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activeId;
        break;
      }

      // repeated uint32 activeId = 2;
      case 2: {
        if (tag == 16) {
         parse_activeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_activeid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activeid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activeId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Ghost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Ghost)
  return false;
#undef DO_
}

void Ghost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Ghost)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 activeId = 2;
  for (int i = 0; i < this->activeid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->activeid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Ghost)
}

::google::protobuf::uint8* Ghost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Ghost)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 activeId = 2;
  for (int i = 0; i < this->activeid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->activeid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Ghost)
  return target;
}

int Ghost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated uint32 activeId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->activeid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activeid(i));
    }
    total_size += 1 * this->activeid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ghost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ghost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ghost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ghost::MergeFrom(const Ghost& from) {
  GOOGLE_CHECK_NE(&from, this);
  activeid_.MergeFrom(from.activeid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ghost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ghost::CopyFrom(const Ghost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ghost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ghost::Swap(Ghost* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    activeid_.Swap(&other->activeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ghost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ghost_descriptor_;
  metadata.reflection = Ghost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GhostList::kGhostListFieldNumber;
#endif  // !_MSC_VER

GhostList::GhostList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GhostList)
}

void GhostList::InitAsDefaultInstance() {
}

GhostList::GhostList(const GhostList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GhostList)
}

void GhostList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GhostList::~GhostList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GhostList)
  SharedDtor();
}

void GhostList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GhostList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GhostList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GhostList_descriptor_;
}

const GhostList& GhostList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GhostList* GhostList::default_instance_ = NULL;

GhostList* GhostList::New() const {
  return new GhostList;
}

void GhostList::Clear() {
  ghostlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GhostList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GhostList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.GhostDetail ghostList = 1;
      case 1: {
        if (tag == 10) {
         parse_ghostList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ghostlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ghostList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GhostList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GhostList)
  return false;
#undef DO_
}

void GhostList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GhostList)
  // repeated .TgsProtocol.GhostDetail ghostList = 1;
  for (int i = 0; i < this->ghostlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ghostlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GhostList)
}

::google::protobuf::uint8* GhostList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GhostList)
  // repeated .TgsProtocol.GhostDetail ghostList = 1;
  for (int i = 0; i < this->ghostlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ghostlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GhostList)
  return target;
}

int GhostList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.GhostDetail ghostList = 1;
  total_size += 1 * this->ghostlist_size();
  for (int i = 0; i < this->ghostlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ghostlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GhostList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GhostList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GhostList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GhostList::MergeFrom(const GhostList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ghostlist_.MergeFrom(from.ghostlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GhostList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostList::CopyFrom(const GhostList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ghostlist())) return false;
  return true;
}

void GhostList::Swap(GhostList* other) {
  if (other != this) {
    ghostlist_.Swap(&other->ghostlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GhostList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GhostList_descriptor_;
  metadata.reflection = GhostList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EpicBoss::kChapterIdFieldNumber;
const int EpicBoss::kMapIdFieldNumber;
const int EpicBoss::kStateFieldNumber;
#endif  // !_MSC_VER

EpicBoss::EpicBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.EpicBoss)
}

void EpicBoss::InitAsDefaultInstance() {
}

EpicBoss::EpicBoss(const EpicBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.EpicBoss)
}

void EpicBoss::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0u;
  mapid_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EpicBoss::~EpicBoss() {
  // @@protoc_insertion_point(destructor:TgsProtocol.EpicBoss)
  SharedDtor();
}

void EpicBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EpicBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EpicBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EpicBoss_descriptor_;
}

const EpicBoss& EpicBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

EpicBoss* EpicBoss::default_instance_ = NULL;

EpicBoss* EpicBoss::New() const {
  return new EpicBoss;
}

void EpicBoss::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EpicBoss*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chapterid_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EpicBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.EpicBoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 chapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapId;
        break;
      }

      // required uint32 mapId = 2;
      case 2: {
        if (tag == 16) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.EpicBoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.EpicBoss)
  return false;
#undef DO_
}

void EpicBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.EpicBoss)
  // required uint32 chapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapterid(), output);
  }

  // required uint32 mapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // required uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.EpicBoss)
}

::google::protobuf::uint8* EpicBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.EpicBoss)
  // required uint32 chapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapterid(), target);
  }

  // required uint32 mapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // required uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.EpicBoss)
  return target;
}

int EpicBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 chapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapterid());
    }

    // required uint32 mapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EpicBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EpicBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EpicBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EpicBoss::MergeFrom(const EpicBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EpicBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpicBoss::CopyFrom(const EpicBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpicBoss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EpicBoss::Swap(EpicBoss* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(mapid_, other->mapid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EpicBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EpicBoss_descriptor_;
  metadata.reflection = EpicBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EpicBossList::kListFieldNumber;
#endif  // !_MSC_VER

EpicBossList::EpicBossList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.EpicBossList)
}

void EpicBossList::InitAsDefaultInstance() {
}

EpicBossList::EpicBossList(const EpicBossList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.EpicBossList)
}

void EpicBossList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EpicBossList::~EpicBossList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.EpicBossList)
  SharedDtor();
}

void EpicBossList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EpicBossList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EpicBossList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EpicBossList_descriptor_;
}

const EpicBossList& EpicBossList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

EpicBossList* EpicBossList::default_instance_ = NULL;

EpicBossList* EpicBossList::New() const {
  return new EpicBossList;
}

void EpicBossList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EpicBossList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.EpicBossList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.EpicBoss list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.EpicBossList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.EpicBossList)
  return false;
#undef DO_
}

void EpicBossList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.EpicBossList)
  // repeated .TgsProtocol.EpicBoss list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.EpicBossList)
}

::google::protobuf::uint8* EpicBossList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.EpicBossList)
  // repeated .TgsProtocol.EpicBoss list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.EpicBossList)
  return target;
}

int EpicBossList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.EpicBoss list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EpicBossList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EpicBossList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EpicBossList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EpicBossList::MergeFrom(const EpicBossList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EpicBossList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpicBossList::CopyFrom(const EpicBossList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpicBossList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void EpicBossList::Swap(EpicBossList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EpicBossList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EpicBossList_descriptor_;
  metadata.reflection = EpicBossList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineRewards::kOnlinetimeFieldNumber;
const int OnlineRewards::kSourcesFieldNumber;
#endif  // !_MSC_VER

OnlineRewards::OnlineRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.OnlineRewards)
}

void OnlineRewards::InitAsDefaultInstance() {
}

OnlineRewards::OnlineRewards(const OnlineRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.OnlineRewards)
}

void OnlineRewards::SharedCtor() {
  _cached_size_ = 0;
  onlinetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineRewards::~OnlineRewards() {
  // @@protoc_insertion_point(destructor:TgsProtocol.OnlineRewards)
  SharedDtor();
}

void OnlineRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineRewards_descriptor_;
}

const OnlineRewards& OnlineRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

OnlineRewards* OnlineRewards::default_instance_ = NULL;

OnlineRewards* OnlineRewards::New() const {
  return new OnlineRewards;
}

void OnlineRewards::Clear() {
  onlinetime_ = 0u;
  sources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.OnlineRewards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 onlinetime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sources;
        break;
      }

      // repeated .TgsProtocol.ClientSource sources = 2;
      case 2: {
        if (tag == 18) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sources;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.OnlineRewards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.OnlineRewards)
  return false;
#undef DO_
}

void OnlineRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.OnlineRewards)
  // optional uint32 onlinetime = 1;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->onlinetime(), output);
  }

  // repeated .TgsProtocol.ClientSource sources = 2;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sources(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.OnlineRewards)
}

::google::protobuf::uint8* OnlineRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.OnlineRewards)
  // optional uint32 onlinetime = 1;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->onlinetime(), target);
  }

  // repeated .TgsProtocol.ClientSource sources = 2;
  for (int i = 0; i < this->sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sources(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.OnlineRewards)
  return target;
}

int OnlineRewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 onlinetime = 1;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }

  }
  // repeated .TgsProtocol.ClientSource sources = 2;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineRewards::MergeFrom(const OnlineRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  sources_.MergeFrom(from.sources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineRewards::CopyFrom(const OnlineRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineRewards::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->sources())) return false;
  return true;
}

void OnlineRewards::Swap(OnlineRewards* other) {
  if (other != this) {
    std::swap(onlinetime_, other->onlinetime_);
    sources_.Swap(&other->sources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineRewards_descriptor_;
  metadata.reflection = OnlineRewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreeState::kLevelFieldNumber;
const int TreeState::kAcctimeFieldNumber;
const int TreeState::kSourcesFieldNumber;
#endif  // !_MSC_VER

TreeState::TreeState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.TreeState)
}

void TreeState::InitAsDefaultInstance() {
}

TreeState::TreeState(const TreeState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.TreeState)
}

void TreeState::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  acctime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeState::~TreeState() {
  // @@protoc_insertion_point(destructor:TgsProtocol.TreeState)
  SharedDtor();
}

void TreeState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreeState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeState_descriptor_;
}

const TreeState& TreeState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

TreeState* TreeState::default_instance_ = NULL;

TreeState* TreeState::New() const {
  return new TreeState;
}

void TreeState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TreeState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, acctime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  sources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.TreeState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_acctime;
        break;
      }

      // required uint32 acctime = 2;
      case 2: {
        if (tag == 16) {
         parse_acctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acctime_)));
          set_has_acctime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sources;
        break;
      }

      // repeated .TgsProtocol.ClientSource sources = 3;
      case 3: {
        if (tag == 26) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sources;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.TreeState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.TreeState)
  return false;
#undef DO_
}

void TreeState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.TreeState)
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint32 acctime = 2;
  if (has_acctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->acctime(), output);
  }

  // repeated .TgsProtocol.ClientSource sources = 3;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sources(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.TreeState)
}

::google::protobuf::uint8* TreeState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.TreeState)
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required uint32 acctime = 2;
  if (has_acctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->acctime(), target);
  }

  // repeated .TgsProtocol.ClientSource sources = 3;
  for (int i = 0; i < this->sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sources(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.TreeState)
  return target;
}

int TreeState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 acctime = 2;
    if (has_acctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acctime());
    }

  }
  // repeated .TgsProtocol.ClientSource sources = 3;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeState::MergeFrom(const TreeState& from) {
  GOOGLE_CHECK_NE(&from, this);
  sources_.MergeFrom(from.sources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_acctime()) {
      set_acctime(from.acctime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeState::CopyFrom(const TreeState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->sources())) return false;
  return true;
}

void TreeState::Swap(TreeState* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(acctime_, other->acctime_);
    sources_.Swap(&other->sources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeState_descriptor_;
  metadata.reflection = TreeState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetrieveState::kRetrieveActivityFieldNumber;
const int RetrieveState::kStateFieldNumber;
#endif  // !_MSC_VER

RetrieveState::RetrieveState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.RetrieveState)
}

void RetrieveState::InitAsDefaultInstance() {
}

RetrieveState::RetrieveState(const RetrieveState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.RetrieveState)
}

void RetrieveState::SharedCtor() {
  _cached_size_ = 0;
  retrieveactivity_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetrieveState::~RetrieveState() {
  // @@protoc_insertion_point(destructor:TgsProtocol.RetrieveState)
  SharedDtor();
}

void RetrieveState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetrieveState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetrieveState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetrieveState_descriptor_;
}

const RetrieveState& RetrieveState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

RetrieveState* RetrieveState::default_instance_ = NULL;

RetrieveState* RetrieveState::New() const {
  return new RetrieveState;
}

void RetrieveState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RetrieveState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(retrieveactivity_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetrieveState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.RetrieveState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retrieveActivity = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retrieveactivity_)));
          set_has_retrieveactivity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.RetrieveState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.RetrieveState)
  return false;
#undef DO_
}

void RetrieveState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.RetrieveState)
  // required uint32 retrieveActivity = 1;
  if (has_retrieveactivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retrieveactivity(), output);
  }

  // required uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.RetrieveState)
}

::google::protobuf::uint8* RetrieveState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.RetrieveState)
  // required uint32 retrieveActivity = 1;
  if (has_retrieveactivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retrieveactivity(), target);
  }

  // required uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.RetrieveState)
  return target;
}

int RetrieveState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retrieveActivity = 1;
    if (has_retrieveactivity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retrieveactivity());
    }

    // required uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetrieveState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetrieveState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetrieveState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetrieveState::MergeFrom(const RetrieveState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retrieveactivity()) {
      set_retrieveactivity(from.retrieveactivity());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetrieveState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetrieveState::CopyFrom(const RetrieveState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RetrieveState::Swap(RetrieveState* other) {
  if (other != this) {
    std::swap(retrieveactivity_, other->retrieveactivity_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetrieveState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetrieveState_descriptor_;
  metadata.reflection = RetrieveState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassWordState::kIdFieldNumber;
const int PassWordState::kStateFieldNumber;
#endif  // !_MSC_VER

PassWordState::PassWordState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.PassWordState)
}

void PassWordState::InitAsDefaultInstance() {
}

PassWordState::PassWordState(const PassWordState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.PassWordState)
}

void PassWordState::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassWordState::~PassWordState() {
  // @@protoc_insertion_point(destructor:TgsProtocol.PassWordState)
  SharedDtor();
}

void PassWordState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassWordState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassWordState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassWordState_descriptor_;
}

const PassWordState& PassWordState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

PassWordState* PassWordState::default_instance_ = NULL;

PassWordState* PassWordState::New() const {
  return new PassWordState;
}

void PassWordState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PassWordState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassWordState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.PassWordState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.PassWordState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.PassWordState)
  return false;
#undef DO_
}

void PassWordState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.PassWordState)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.PassWordState)
}

::google::protobuf::uint8* PassWordState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.PassWordState)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.PassWordState)
  return target;
}

int PassWordState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassWordState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassWordState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassWordState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassWordState::MergeFrom(const PassWordState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassWordState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassWordState::CopyFrom(const PassWordState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassWordState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PassWordState::Swap(PassWordState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassWordState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassWordState_descriptor_;
  metadata.reflection = PassWordState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientHeroInfo::kTemplateIdFieldNumber;
const int ClientHeroInfo::kInstanceIdFieldNumber;
const int ClientHeroInfo::kLevelFieldNumber;
const int ClientHeroInfo::kExpFieldNumber;
const int ClientHeroInfo::kEvolutionLevelFieldNumber;
const int ClientHeroInfo::kForceLevelFieldNumber;
const int ClientHeroInfo::kEquipFieldNumber;
const int ClientHeroInfo::kSkillLevelFieldNumber;
const int ClientHeroInfo::kHeroNameFieldNumber;
const int ClientHeroInfo::kEquipNewFieldNumber;
const int ClientHeroInfo::kFashionIdFieldNumber;
const int ClientHeroInfo::kComboSkillFieldNumber;
const int ClientHeroInfo::kFateIdFieldNumber;
const int ClientHeroInfo::kEquipNewListFieldNumber;
const int ClientHeroInfo::kDeificationlevelFieldNumber;
const int ClientHeroInfo::kWingslevelFieldNumber;
const int ClientHeroInfo::kWingsrateFieldNumber;
const int ClientHeroInfo::kSourcesFieldNumber;
const int ClientHeroInfo::kWakeEquipsFieldNumber;
const int ClientHeroInfo::kWakeLevelFieldNumber;
const int ClientHeroInfo::kPropertyFieldNumber;
#endif  // !_MSC_VER

ClientHeroInfo::ClientHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientHeroInfo)
}

void ClientHeroInfo::InitAsDefaultInstance() {
  property_ = const_cast< ::TgsProtocol::WakeAttr*>(&::TgsProtocol::WakeAttr::default_instance());
}

ClientHeroInfo::ClientHeroInfo(const ClientHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientHeroInfo)
}

void ClientHeroInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  templateid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  exp_ = 0u;
  evolutionlevel_ = 0u;
  forcelevel_ = 0u;
  heroname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fashionid_ = 0u;
  deificationlevel_ = 0u;
  wingslevel_ = 0u;
  wingsrate_ = 0u;
  wakelevel_ = 0u;
  property_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientHeroInfo::~ClientHeroInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientHeroInfo)
  SharedDtor();
}

void ClientHeroInfo::SharedDtor() {
  if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete heroname_;
  }
  if (this != default_instance_) {
    delete property_;
  }
}

void ClientHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientHeroInfo_descriptor_;
}

const ClientHeroInfo& ClientHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientHeroInfo* ClientHeroInfo::default_instance_ = NULL;

ClientHeroInfo* ClientHeroInfo::New() const {
  return new ClientHeroInfo;
}

void ClientHeroInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientHeroInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(instanceid_, evolutionlevel_);
    forcelevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & 50432) {
    ZR_(deificationlevel_, wingslevel_);
    if (has_heroname()) {
      if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        heroname_->clear();
      }
    }
    fashionid_ = 0u;
  }
  if (_has_bits_[16 / 32] & 1638400) {
    ZR_(wingsrate_, wakelevel_);
    if (has_property()) {
      if (property_ != NULL) property_->::TgsProtocol::WakeAttr::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equip_.Clear();
  skilllevel_.Clear();
  equipnew_.Clear();
  comboskill_.Clear();
  fateid_.Clear();
  equipnewlist_.Clear();
  sources_.Clear();
  wakeequips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientHeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 templateId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceId;
        break;
      }

      // required uint64 instanceId = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_evolutionLevel;
        break;
      }

      // required uint32 evolutionLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_evolutionLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutionlevel_)));
          set_has_evolutionlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_forceLevel;
        break;
      }

      // required uint32 forceLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_forceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcelevel_)));
          set_has_forcelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_equip;
        break;
      }

      // repeated .TgsProtocol.HeroEquipInfo equip = 7;
      case 7: {
        if (tag == 58) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_equip;
        if (input->ExpectTag(64)) goto parse_skillLevel;
        break;
      }

      // repeated uint32 skillLevel = 8;
      case 8: {
        if (tag == 64) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_skilllevel())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skilllevel())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_skillLevel;
        if (input->ExpectTag(74)) goto parse_heroName;
        break;
      }

      // optional bytes heroName = 9;
      case 9: {
        if (tag == 74) {
         parse_heroName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_heroname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_equipNew;
        break;
      }

      // repeated uint64 equipNew = 10;
      case 10: {
        if (tag == 80) {
         parse_equipNew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 80, input, this->mutable_equipnew())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_equipnew())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_equipNew;
        if (input->ExpectTag(88)) goto parse_fashionId;
        break;
      }

      // optional uint32 fashionId = 11;
      case 11: {
        if (tag == 88) {
         parse_fashionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionid_)));
          set_has_fashionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_comboSkill;
        break;
      }

      // repeated uint32 comboSkill = 12;
      case 12: {
        if (tag == 96) {
         parse_comboSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_comboskill())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_comboskill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_comboSkill;
        if (input->ExpectTag(104)) goto parse_fateId;
        break;
      }

      // repeated uint32 fateId = 13;
      case 13: {
        if (tag == 104) {
         parse_fateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_fateid())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fateid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_fateId;
        if (input->ExpectTag(114)) goto parse_equipNewList;
        break;
      }

      // repeated .TgsProtocol.HeroEquipNew equipNewList = 14;
      case 14: {
        if (tag == 114) {
         parse_equipNewList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipnewlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_equipNewList;
        if (input->ExpectTag(120)) goto parse_deificationlevel;
        break;
      }

      // optional uint32 deificationlevel = 15;
      case 15: {
        if (tag == 120) {
         parse_deificationlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deificationlevel_)));
          set_has_deificationlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_wingslevel;
        break;
      }

      // optional uint32 wingslevel = 16;
      case 16: {
        if (tag == 128) {
         parse_wingslevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingslevel_)));
          set_has_wingslevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_wingsrate;
        break;
      }

      // optional uint32 wingsrate = 17;
      case 17: {
        if (tag == 136) {
         parse_wingsrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingsrate_)));
          set_has_wingsrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_sources;
        break;
      }

      // repeated .TgsProtocol.ClientSource sources = 18;
      case 18: {
        if (tag == 146) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_sources;
        if (input->ExpectTag(152)) goto parse_wakeEquips;
        break;
      }

      // repeated uint32 wakeEquips = 19;
      case 19: {
        if (tag == 152) {
         parse_wakeEquips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_wakeequips())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wakeequips())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_wakeEquips;
        if (input->ExpectTag(160)) goto parse_wakeLevel;
        break;
      }

      // optional uint32 wakeLevel = 20;
      case 20: {
        if (tag == 160) {
         parse_wakeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wakelevel_)));
          set_has_wakelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_property;
        break;
      }

      // optional .TgsProtocol.WakeAttr property = 21;
      case 21: {
        if (tag == 170) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientHeroInfo)
  return false;
#undef DO_
}

void ClientHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientHeroInfo)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // required uint64 instanceId = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // required uint32 evolutionLevel = 5;
  if (has_evolutionlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->evolutionlevel(), output);
  }

  // required uint32 forceLevel = 6;
  if (has_forcelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->forcelevel(), output);
  }

  // repeated .TgsProtocol.HeroEquipInfo equip = 7;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equip(i), output);
  }

  // repeated uint32 skillLevel = 8;
  for (int i = 0; i < this->skilllevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->skilllevel(i), output);
  }

  // optional bytes heroName = 9;
  if (has_heroname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->heroname(), output);
  }

  // repeated uint64 equipNew = 10;
  for (int i = 0; i < this->equipnew_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      10, this->equipnew(i), output);
  }

  // optional uint32 fashionId = 11;
  if (has_fashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->fashionid(), output);
  }

  // repeated uint32 comboSkill = 12;
  for (int i = 0; i < this->comboskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->comboskill(i), output);
  }

  // repeated uint32 fateId = 13;
  for (int i = 0; i < this->fateid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->fateid(i), output);
  }

  // repeated .TgsProtocol.HeroEquipNew equipNewList = 14;
  for (int i = 0; i < this->equipnewlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->equipnewlist(i), output);
  }

  // optional uint32 deificationlevel = 15;
  if (has_deificationlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->deificationlevel(), output);
  }

  // optional uint32 wingslevel = 16;
  if (has_wingslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->wingslevel(), output);
  }

  // optional uint32 wingsrate = 17;
  if (has_wingsrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->wingsrate(), output);
  }

  // repeated .TgsProtocol.ClientSource sources = 18;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->sources(i), output);
  }

  // repeated uint32 wakeEquips = 19;
  for (int i = 0; i < this->wakeequips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->wakeequips(i), output);
  }

  // optional uint32 wakeLevel = 20;
  if (has_wakelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->wakelevel(), output);
  }

  // optional .TgsProtocol.WakeAttr property = 21;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->property(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientHeroInfo)
}

::google::protobuf::uint8* ClientHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientHeroInfo)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // required uint64 instanceId = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // required uint32 evolutionLevel = 5;
  if (has_evolutionlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->evolutionlevel(), target);
  }

  // required uint32 forceLevel = 6;
  if (has_forcelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->forcelevel(), target);
  }

  // repeated .TgsProtocol.HeroEquipInfo equip = 7;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equip(i), target);
  }

  // repeated uint32 skillLevel = 8;
  for (int i = 0; i < this->skilllevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->skilllevel(i), target);
  }

  // optional bytes heroName = 9;
  if (has_heroname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->heroname(), target);
  }

  // repeated uint64 equipNew = 10;
  for (int i = 0; i < this->equipnew_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(10, this->equipnew(i), target);
  }

  // optional uint32 fashionId = 11;
  if (has_fashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->fashionid(), target);
  }

  // repeated uint32 comboSkill = 12;
  for (int i = 0; i < this->comboskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->comboskill(i), target);
  }

  // repeated uint32 fateId = 13;
  for (int i = 0; i < this->fateid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->fateid(i), target);
  }

  // repeated .TgsProtocol.HeroEquipNew equipNewList = 14;
  for (int i = 0; i < this->equipnewlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->equipnewlist(i), target);
  }

  // optional uint32 deificationlevel = 15;
  if (has_deificationlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->deificationlevel(), target);
  }

  // optional uint32 wingslevel = 16;
  if (has_wingslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->wingslevel(), target);
  }

  // optional uint32 wingsrate = 17;
  if (has_wingsrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->wingsrate(), target);
  }

  // repeated .TgsProtocol.ClientSource sources = 18;
  for (int i = 0; i < this->sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->sources(i), target);
  }

  // repeated uint32 wakeEquips = 19;
  for (int i = 0; i < this->wakeequips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(19, this->wakeequips(i), target);
  }

  // optional uint32 wakeLevel = 20;
  if (has_wakelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->wakelevel(), target);
  }

  // optional .TgsProtocol.WakeAttr property = 21;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->property(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientHeroInfo)
  return target;
}

int ClientHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 templateId = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint64 instanceId = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 evolutionLevel = 5;
    if (has_evolutionlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutionlevel());
    }

    // required uint32 forceLevel = 6;
    if (has_forcelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcelevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes heroName = 9;
    if (has_heroname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->heroname());
    }

    // optional uint32 fashionId = 11;
    if (has_fashionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionid());
    }

    // optional uint32 deificationlevel = 15;
    if (has_deificationlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deificationlevel());
    }

    // optional uint32 wingslevel = 16;
    if (has_wingslevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingslevel());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 wingsrate = 17;
    if (has_wingsrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingsrate());
    }

    // optional uint32 wakeLevel = 20;
    if (has_wakelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wakelevel());
    }

    // optional .TgsProtocol.WakeAttr property = 21;
    if (has_property()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property());
    }

  }
  // repeated .TgsProtocol.HeroEquipInfo equip = 7;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated uint32 skillLevel = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skilllevel(i));
    }
    total_size += 1 * this->skilllevel_size() + data_size;
  }

  // repeated uint64 equipNew = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipnew_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->equipnew(i));
    }
    total_size += 1 * this->equipnew_size() + data_size;
  }

  // repeated uint32 comboSkill = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->comboskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->comboskill(i));
    }
    total_size += 1 * this->comboskill_size() + data_size;
  }

  // repeated uint32 fateId = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->fateid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fateid(i));
    }
    total_size += 1 * this->fateid_size() + data_size;
  }

  // repeated .TgsProtocol.HeroEquipNew equipNewList = 14;
  total_size += 1 * this->equipnewlist_size();
  for (int i = 0; i < this->equipnewlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipnewlist(i));
  }

  // repeated .TgsProtocol.ClientSource sources = 18;
  total_size += 2 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }

  // repeated uint32 wakeEquips = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->wakeequips_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->wakeequips(i));
    }
    total_size += 2 * this->wakeequips_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientHeroInfo::MergeFrom(const ClientHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  skilllevel_.MergeFrom(from.skilllevel_);
  equipnew_.MergeFrom(from.equipnew_);
  comboskill_.MergeFrom(from.comboskill_);
  fateid_.MergeFrom(from.fateid_);
  equipnewlist_.MergeFrom(from.equipnewlist_);
  sources_.MergeFrom(from.sources_);
  wakeequips_.MergeFrom(from.wakeequips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_evolutionlevel()) {
      set_evolutionlevel(from.evolutionlevel());
    }
    if (from.has_forcelevel()) {
      set_forcelevel(from.forcelevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_heroname()) {
      set_heroname(from.heroname());
    }
    if (from.has_fashionid()) {
      set_fashionid(from.fashionid());
    }
    if (from.has_deificationlevel()) {
      set_deificationlevel(from.deificationlevel());
    }
    if (from.has_wingslevel()) {
      set_wingslevel(from.wingslevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wingsrate()) {
      set_wingsrate(from.wingsrate());
    }
    if (from.has_wakelevel()) {
      set_wakelevel(from.wakelevel());
    }
    if (from.has_property()) {
      mutable_property()->::TgsProtocol::WakeAttr::MergeFrom(from.property());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientHeroInfo::CopyFrom(const ClientHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHeroInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->equip())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equipnewlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sources())) return false;
  if (has_property()) {
    if (!this->property().IsInitialized()) return false;
  }
  return true;
}

void ClientHeroInfo::Swap(ClientHeroInfo* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(evolutionlevel_, other->evolutionlevel_);
    std::swap(forcelevel_, other->forcelevel_);
    equip_.Swap(&other->equip_);
    skilllevel_.Swap(&other->skilllevel_);
    std::swap(heroname_, other->heroname_);
    equipnew_.Swap(&other->equipnew_);
    std::swap(fashionid_, other->fashionid_);
    comboskill_.Swap(&other->comboskill_);
    fateid_.Swap(&other->fateid_);
    equipnewlist_.Swap(&other->equipnewlist_);
    std::swap(deificationlevel_, other->deificationlevel_);
    std::swap(wingslevel_, other->wingslevel_);
    std::swap(wingsrate_, other->wingsrate_);
    sources_.Swap(&other->sources_);
    wakeequips_.Swap(&other->wakeequips_);
    std::swap(wakelevel_, other->wakelevel_);
    std::swap(property_, other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientHeroInfo_descriptor_;
  metadata.reflection = ClientHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientInstanceEvaluation::kInstanceIdFieldNumber;
const int ClientInstanceEvaluation::kEvaluationFieldNumber;
const int ClientInstanceEvaluation::kChallengeTimesFieldNumber;
const int ClientInstanceEvaluation::kResetTimesFieldNumber;
#endif  // !_MSC_VER

ClientInstanceEvaluation::ClientInstanceEvaluation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientInstanceEvaluation)
}

void ClientInstanceEvaluation::InitAsDefaultInstance() {
}

ClientInstanceEvaluation::ClientInstanceEvaluation(const ClientInstanceEvaluation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientInstanceEvaluation)
}

void ClientInstanceEvaluation::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0u;
  evaluation_ = 0u;
  challengetimes_ = 0u;
  resettimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientInstanceEvaluation::~ClientInstanceEvaluation() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientInstanceEvaluation)
  SharedDtor();
}

void ClientInstanceEvaluation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientInstanceEvaluation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientInstanceEvaluation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientInstanceEvaluation_descriptor_;
}

const ClientInstanceEvaluation& ClientInstanceEvaluation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientInstanceEvaluation* ClientInstanceEvaluation::default_instance_ = NULL;

ClientInstanceEvaluation* ClientInstanceEvaluation::New() const {
  return new ClientInstanceEvaluation;
}

void ClientInstanceEvaluation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientInstanceEvaluation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(instanceid_, resettimes_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientInstanceEvaluation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientInstanceEvaluation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instanceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_evaluation;
        break;
      }

      // required uint32 evaluation = 2;
      case 2: {
        if (tag == 16) {
         parse_evaluation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evaluation_)));
          set_has_evaluation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_challengeTimes;
        break;
      }

      // required uint32 challengeTimes = 3;
      case 3: {
        if (tag == 24) {
         parse_challengeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengetimes_)));
          set_has_challengetimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resetTimes;
        break;
      }

      // required uint32 resetTimes = 4;
      case 4: {
        if (tag == 32) {
         parse_resetTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettimes_)));
          set_has_resettimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientInstanceEvaluation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientInstanceEvaluation)
  return false;
#undef DO_
}

void ClientInstanceEvaluation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientInstanceEvaluation)
  // required uint32 instanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instanceid(), output);
  }

  // required uint32 evaluation = 2;
  if (has_evaluation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->evaluation(), output);
  }

  // required uint32 challengeTimes = 3;
  if (has_challengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challengetimes(), output);
  }

  // required uint32 resetTimes = 4;
  if (has_resettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resettimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientInstanceEvaluation)
}

::google::protobuf::uint8* ClientInstanceEvaluation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientInstanceEvaluation)
  // required uint32 instanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instanceid(), target);
  }

  // required uint32 evaluation = 2;
  if (has_evaluation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->evaluation(), target);
  }

  // required uint32 challengeTimes = 3;
  if (has_challengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challengetimes(), target);
  }

  // required uint32 resetTimes = 4;
  if (has_resettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resettimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientInstanceEvaluation)
  return target;
}

int ClientInstanceEvaluation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceid());
    }

    // required uint32 evaluation = 2;
    if (has_evaluation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evaluation());
    }

    // required uint32 challengeTimes = 3;
    if (has_challengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengetimes());
    }

    // required uint32 resetTimes = 4;
    if (has_resettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientInstanceEvaluation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientInstanceEvaluation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientInstanceEvaluation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientInstanceEvaluation::MergeFrom(const ClientInstanceEvaluation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_evaluation()) {
      set_evaluation(from.evaluation());
    }
    if (from.has_challengetimes()) {
      set_challengetimes(from.challengetimes());
    }
    if (from.has_resettimes()) {
      set_resettimes(from.resettimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientInstanceEvaluation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInstanceEvaluation::CopyFrom(const ClientInstanceEvaluation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInstanceEvaluation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClientInstanceEvaluation::Swap(ClientInstanceEvaluation* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(evaluation_, other->evaluation_);
    std::swap(challengetimes_, other->challengetimes_);
    std::swap(resettimes_, other->resettimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientInstanceEvaluation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientInstanceEvaluation_descriptor_;
  metadata.reflection = ClientInstanceEvaluation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientFestivityInfo::kFestivityIdFieldNumber;
const int ClientFestivityInfo::kEnterCountFieldNumber;
#endif  // !_MSC_VER

ClientFestivityInfo::ClientFestivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientFestivityInfo)
}

void ClientFestivityInfo::InitAsDefaultInstance() {
}

ClientFestivityInfo::ClientFestivityInfo(const ClientFestivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientFestivityInfo)
}

void ClientFestivityInfo::SharedCtor() {
  _cached_size_ = 0;
  festivityid_ = 0u;
  entercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientFestivityInfo::~ClientFestivityInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientFestivityInfo)
  SharedDtor();
}

void ClientFestivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientFestivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientFestivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientFestivityInfo_descriptor_;
}

const ClientFestivityInfo& ClientFestivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientFestivityInfo* ClientFestivityInfo::default_instance_ = NULL;

ClientFestivityInfo* ClientFestivityInfo::New() const {
  return new ClientFestivityInfo;
}

void ClientFestivityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientFestivityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(festivityid_, entercount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientFestivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientFestivityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 festivityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &festivityid_)));
          set_has_festivityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enterCount;
        break;
      }

      // required uint32 enterCount = 2;
      case 2: {
        if (tag == 16) {
         parse_enterCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entercount_)));
          set_has_entercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientFestivityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientFestivityInfo)
  return false;
#undef DO_
}

void ClientFestivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientFestivityInfo)
  // required uint32 festivityId = 1;
  if (has_festivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->festivityid(), output);
  }

  // required uint32 enterCount = 2;
  if (has_entercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientFestivityInfo)
}

::google::protobuf::uint8* ClientFestivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientFestivityInfo)
  // required uint32 festivityId = 1;
  if (has_festivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->festivityid(), target);
  }

  // required uint32 enterCount = 2;
  if (has_entercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientFestivityInfo)
  return target;
}

int ClientFestivityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 festivityId = 1;
    if (has_festivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->festivityid());
    }

    // required uint32 enterCount = 2;
    if (has_entercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientFestivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientFestivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientFestivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientFestivityInfo::MergeFrom(const ClientFestivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_festivityid()) {
      set_festivityid(from.festivityid());
    }
    if (from.has_entercount()) {
      set_entercount(from.entercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientFestivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientFestivityInfo::CopyFrom(const ClientFestivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientFestivityInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientFestivityInfo::Swap(ClientFestivityInfo* other) {
  if (other != this) {
    std::swap(festivityid_, other->festivityid_);
    std::swap(entercount_, other->entercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientFestivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientFestivityInfo_descriptor_;
  metadata.reflection = ClientFestivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherUserInfo::kCharIdFieldNumber;
const int OtherUserInfo::kCharNameFieldNumber;
const int OtherUserInfo::kCashFieldNumber;
const int OtherUserInfo::kGoldFieldNumber;
const int OtherUserInfo::kLevelFieldNumber;
const int OtherUserInfo::kExpFieldNumber;
const int OtherUserInfo::kCurStaminaFieldNumber;
const int OtherUserInfo::kMaxStaminaFieldNumber;
const int OtherUserInfo::kCreateTimeFieldNumber;
const int OtherUserInfo::kOfflineTimeFieldNumber;
const int OtherUserInfo::kUpdateStaminaTimeFieldNumber;
const int OtherUserInfo::kBitFlagFieldNumber;
const int OtherUserInfo::kQuestFieldNumber;
const int OtherUserInfo::kEvaluationFieldNumber;
const int OtherUserInfo::kVipExpFieldNumber;
const int OtherUserInfo::kVipLevelFieldNumber;
const int OtherUserInfo::kFormationFieldNumber;
const int OtherUserInfo::kHeroListFieldNumber;
const int OtherUserInfo::kGenderFieldNumber;
const int OtherUserInfo::kPhotoFieldNumber;
const int OtherUserInfo::kEssenceItemFieldNumber;
const int OtherUserInfo::kRefreshPriceFieldNumber;
const int OtherUserInfo::kFestivityFieldNumber;
const int OtherUserInfo::kLockChatEndTimeFieldNumber;
const int OtherUserInfo::kDayChatTimesFieldNumber;
const int OtherUserInfo::kSkillPointFieldNumber;
const int OtherUserInfo::kUpdateSkillPointTimeFieldNumber;
const int OtherUserInfo::kEnergyFieldNumber;
const int OtherUserInfo::kUpdateEnergyTimeFieldNumber;
const int OtherUserInfo::kEquipNewFieldNumber;
const int OtherUserInfo::kArenaFormationFieldNumber;
#endif  // !_MSC_VER

OtherUserInfo::OtherUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.OtherUserInfo)
}

void OtherUserInfo::InitAsDefaultInstance() {
  quest_ = const_cast< ::TgsProtocol::DbQuest*>(&::TgsProtocol::DbQuest::default_instance());
  evaluation_ = const_cast< ::TgsProtocol::DBEvaluationList*>(&::TgsProtocol::DBEvaluationList::default_instance());
  herolist_ = const_cast< ::TgsProtocol::DBHeroList*>(&::TgsProtocol::DBHeroList::default_instance());
  essenceitem_ = const_cast< ::TgsProtocol::DBEssenceList*>(&::TgsProtocol::DBEssenceList::default_instance());
  festivity_ = const_cast< ::TgsProtocol::DBFestivityList*>(&::TgsProtocol::DBFestivityList::default_instance());
  equipnew_ = const_cast< ::TgsProtocol::DBEquipNewList*>(&::TgsProtocol::DBEquipNewList::default_instance());
}

OtherUserInfo::OtherUserInfo(const OtherUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.OtherUserInfo)
}

void OtherUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cash_ = 0u;
  gold_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  curstamina_ = 0u;
  maxstamina_ = 0u;
  createtime_ = 0u;
  offlinetime_ = 0u;
  updatestaminatime_ = 0u;
  bitflag_ = 0u;
  quest_ = NULL;
  evaluation_ = NULL;
  vipexp_ = 0u;
  viplevel_ = 0u;
  herolist_ = NULL;
  gender_ = 0u;
  photo_ = 0u;
  essenceitem_ = NULL;
  festivity_ = NULL;
  lockchatendtime_ = 0u;
  daychattimes_ = 0u;
  skillpoint_ = 0u;
  updateskillpointtime_ = 0u;
  energy_ = 0u;
  updateenergytime_ = 0u;
  equipnew_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherUserInfo::~OtherUserInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.OtherUserInfo)
  SharedDtor();
}

void OtherUserInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
    delete quest_;
    delete evaluation_;
    delete herolist_;
    delete essenceitem_;
    delete festivity_;
    delete equipnew_;
  }
}

void OtherUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherUserInfo_descriptor_;
}

const OtherUserInfo& OtherUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

OtherUserInfo* OtherUserInfo::default_instance_ = NULL;

OtherUserInfo* OtherUserInfo::New() const {
  return new OtherUserInfo;
}

void OtherUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OtherUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cash_, maxstamina_);
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(createtime_, bitflag_);
    ZR_(vipexp_, viplevel_);
    if (has_quest()) {
      if (quest_ != NULL) quest_->::TgsProtocol::DbQuest::Clear();
    }
    if (has_evaluation()) {
      if (evaluation_ != NULL) evaluation_->::TgsProtocol::DBEvaluationList::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 14548992) {
    ZR_(gender_, photo_);
    if (has_herolist()) {
      if (herolist_ != NULL) herolist_->::TgsProtocol::DBHeroList::Clear();
    }
    if (has_essenceitem()) {
      if (essenceitem_ != NULL) essenceitem_->::TgsProtocol::DBEssenceList::Clear();
    }
    if (has_festivity()) {
      if (festivity_ != NULL) festivity_->::TgsProtocol::DBFestivityList::Clear();
    }
    lockchatendtime_ = 0u;
  }
  if (_has_bits_[24 / 32] & 1056964608) {
    ZR_(daychattimes_, updateenergytime_);
    if (has_equipnew()) {
      if (equipnew_ != NULL) equipnew_->::TgsProtocol::DBEquipNewList::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  formation_.Clear();
  refreshprice_.Clear();
  arenaformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.OtherUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charName;
        break;
      }

      // optional bytes charName = 4;
      case 4: {
        if (tag == 34) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cash;
        break;
      }

      // optional uint32 cash = 5;
      case 5: {
        if (tag == 40) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 6;
      case 6: {
        if (tag == 48) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 8;
      case 8: {
        if (tag == 64) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_curStamina;
        break;
      }

      // optional uint32 curStamina = 9;
      case 9: {
        if (tag == 72) {
         parse_curStamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstamina_)));
          set_has_curstamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxStamina;
        break;
      }

      // optional uint32 maxStamina = 10;
      case 10: {
        if (tag == 80) {
         parse_maxStamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxstamina_)));
          set_has_maxstamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_createTime;
        break;
      }

      // optional uint32 createTime = 11;
      case 11: {
        if (tag == 88) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_offlineTime;
        break;
      }

      // optional uint32 offlineTime = 12;
      case 12: {
        if (tag == 96) {
         parse_offlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_updateStaminaTime;
        break;
      }

      // optional uint32 updateStaminaTime = 13;
      case 13: {
        if (tag == 104) {
         parse_updateStaminaTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatestaminatime_)));
          set_has_updatestaminatime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_bitFlag;
        break;
      }

      // optional uint32 bitFlag = 14;
      case 14: {
        if (tag == 112) {
         parse_bitFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitflag_)));
          set_has_bitflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_quest;
        break;
      }

      // optional .TgsProtocol.DbQuest quest = 15;
      case 15: {
        if (tag == 122) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_evaluation;
        break;
      }

      // optional .TgsProtocol.DBEvaluationList evaluation = 16;
      case 16: {
        if (tag == 130) {
         parse_evaluation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_evaluation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_vipExp;
        break;
      }

      // optional uint32 vipExp = 18;
      case 18: {
        if (tag == 144) {
         parse_vipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_vipLevel;
        break;
      }

      // optional uint32 vipLevel = 19;
      case 19: {
        if (tag == 152) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_formation;
        break;
      }

      // repeated uint32 formation = 20;
      case 20: {
        if (tag == 160) {
         parse_formation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_formation())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_formation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_formation;
        if (input->ExpectTag(178)) goto parse_heroList;
        break;
      }

      // optional .TgsProtocol.DBHeroList heroList = 22;
      case 22: {
        if (tag == 178) {
         parse_heroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 23;
      case 23: {
        if (tag == 184) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_photo;
        break;
      }

      // optional uint32 photo = 24;
      case 24: {
        if (tag == 192) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_essenceItem;
        break;
      }

      // optional .TgsProtocol.DBEssenceList essenceItem = 25;
      case 25: {
        if (tag == 202) {
         parse_essenceItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_essenceitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_RefreshPrice;
        break;
      }

      // repeated uint32 RefreshPrice = 26;
      case 26: {
        if (tag == 208) {
         parse_RefreshPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208, input, this->mutable_refreshprice())));
        } else if (tag == 210) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_refreshprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_RefreshPrice;
        if (input->ExpectTag(218)) goto parse_festivity;
        break;
      }

      // optional .TgsProtocol.DBFestivityList festivity = 27;
      case 27: {
        if (tag == 218) {
         parse_festivity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_festivity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_lockChatEndTime;
        break;
      }

      // optional uint32 lockChatEndTime = 28;
      case 28: {
        if (tag == 224) {
         parse_lockChatEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lockchatendtime_)));
          set_has_lockchatendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_dayChatTimes;
        break;
      }

      // optional uint32 dayChatTimes = 29;
      case 29: {
        if (tag == 232) {
         parse_dayChatTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daychattimes_)));
          set_has_daychattimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_skillPoint;
        break;
      }

      // optional uint32 skillPoint = 30;
      case 30: {
        if (tag == 240) {
         parse_skillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_updateSkillPointTime;
        break;
      }

      // optional uint32 updateSkillPointTime = 31;
      case 31: {
        if (tag == 248) {
         parse_updateSkillPointTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateskillpointtime_)));
          set_has_updateskillpointtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_energy;
        break;
      }

      // optional uint32 energy = 32;
      case 32: {
        if (tag == 256) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_updateEnergyTime;
        break;
      }

      // optional uint32 updateEnergyTime = 33;
      case 33: {
        if (tag == 264) {
         parse_updateEnergyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateenergytime_)));
          set_has_updateenergytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_equipNew;
        break;
      }

      // optional .TgsProtocol.DBEquipNewList equipNew = 34;
      case 34: {
        if (tag == 274) {
         parse_equipNew:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipnew()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_arenaFormation;
        break;
      }

      // repeated uint32 arenaFormation = 35;
      case 35: {
        if (tag == 280) {
         parse_arenaFormation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 280, input, this->mutable_arenaformation())));
        } else if (tag == 282) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arenaformation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_arenaFormation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.OtherUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.OtherUserInfo)
  return false;
#undef DO_
}

void OtherUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.OtherUserInfo)
  // required uint64 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes charName = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->charname(), output);
  }

  // optional uint32 cash = 5;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cash(), output);
  }

  // optional uint32 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gold(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->exp(), output);
  }

  // optional uint32 curStamina = 9;
  if (has_curstamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curstamina(), output);
  }

  // optional uint32 maxStamina = 10;
  if (has_maxstamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxstamina(), output);
  }

  // optional uint32 createTime = 11;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->createtime(), output);
  }

  // optional uint32 offlineTime = 12;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->offlinetime(), output);
  }

  // optional uint32 updateStaminaTime = 13;
  if (has_updatestaminatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->updatestaminatime(), output);
  }

  // optional uint32 bitFlag = 14;
  if (has_bitflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->bitflag(), output);
  }

  // optional .TgsProtocol.DbQuest quest = 15;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->quest(), output);
  }

  // optional .TgsProtocol.DBEvaluationList evaluation = 16;
  if (has_evaluation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->evaluation(), output);
  }

  // optional uint32 vipExp = 18;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->vipexp(), output);
  }

  // optional uint32 vipLevel = 19;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->viplevel(), output);
  }

  // repeated uint32 formation = 20;
  for (int i = 0; i < this->formation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->formation(i), output);
  }

  // optional .TgsProtocol.DBHeroList heroList = 22;
  if (has_herolist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->herolist(), output);
  }

  // optional uint32 gender = 23;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gender(), output);
  }

  // optional uint32 photo = 24;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->photo(), output);
  }

  // optional .TgsProtocol.DBEssenceList essenceItem = 25;
  if (has_essenceitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->essenceitem(), output);
  }

  // repeated uint32 RefreshPrice = 26;
  for (int i = 0; i < this->refreshprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->refreshprice(i), output);
  }

  // optional .TgsProtocol.DBFestivityList festivity = 27;
  if (has_festivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->festivity(), output);
  }

  // optional uint32 lockChatEndTime = 28;
  if (has_lockchatendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->lockchatendtime(), output);
  }

  // optional uint32 dayChatTimes = 29;
  if (has_daychattimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->daychattimes(), output);
  }

  // optional uint32 skillPoint = 30;
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->skillpoint(), output);
  }

  // optional uint32 updateSkillPointTime = 31;
  if (has_updateskillpointtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->updateskillpointtime(), output);
  }

  // optional uint32 energy = 32;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->energy(), output);
  }

  // optional uint32 updateEnergyTime = 33;
  if (has_updateenergytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->updateenergytime(), output);
  }

  // optional .TgsProtocol.DBEquipNewList equipNew = 34;
  if (has_equipnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->equipnew(), output);
  }

  // repeated uint32 arenaFormation = 35;
  for (int i = 0; i < this->arenaformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      35, this->arenaformation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.OtherUserInfo)
}

::google::protobuf::uint8* OtherUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.OtherUserInfo)
  // required uint64 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes charName = 4;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->charname(), target);
  }

  // optional uint32 cash = 5;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cash(), target);
  }

  // optional uint32 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gold(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->exp(), target);
  }

  // optional uint32 curStamina = 9;
  if (has_curstamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curstamina(), target);
  }

  // optional uint32 maxStamina = 10;
  if (has_maxstamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxstamina(), target);
  }

  // optional uint32 createTime = 11;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->createtime(), target);
  }

  // optional uint32 offlineTime = 12;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->offlinetime(), target);
  }

  // optional uint32 updateStaminaTime = 13;
  if (has_updatestaminatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->updatestaminatime(), target);
  }

  // optional uint32 bitFlag = 14;
  if (has_bitflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->bitflag(), target);
  }

  // optional .TgsProtocol.DbQuest quest = 15;
  if (has_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->quest(), target);
  }

  // optional .TgsProtocol.DBEvaluationList evaluation = 16;
  if (has_evaluation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->evaluation(), target);
  }

  // optional uint32 vipExp = 18;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->vipexp(), target);
  }

  // optional uint32 vipLevel = 19;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->viplevel(), target);
  }

  // repeated uint32 formation = 20;
  for (int i = 0; i < this->formation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->formation(i), target);
  }

  // optional .TgsProtocol.DBHeroList heroList = 22;
  if (has_herolist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->herolist(), target);
  }

  // optional uint32 gender = 23;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gender(), target);
  }

  // optional uint32 photo = 24;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->photo(), target);
  }

  // optional .TgsProtocol.DBEssenceList essenceItem = 25;
  if (has_essenceitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->essenceitem(), target);
  }

  // repeated uint32 RefreshPrice = 26;
  for (int i = 0; i < this->refreshprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(26, this->refreshprice(i), target);
  }

  // optional .TgsProtocol.DBFestivityList festivity = 27;
  if (has_festivity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->festivity(), target);
  }

  // optional uint32 lockChatEndTime = 28;
  if (has_lockchatendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->lockchatendtime(), target);
  }

  // optional uint32 dayChatTimes = 29;
  if (has_daychattimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->daychattimes(), target);
  }

  // optional uint32 skillPoint = 30;
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->skillpoint(), target);
  }

  // optional uint32 updateSkillPointTime = 31;
  if (has_updateskillpointtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->updateskillpointtime(), target);
  }

  // optional uint32 energy = 32;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->energy(), target);
  }

  // optional uint32 updateEnergyTime = 33;
  if (has_updateenergytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->updateenergytime(), target);
  }

  // optional .TgsProtocol.DBEquipNewList equipNew = 34;
  if (has_equipnew()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->equipnew(), target);
  }

  // repeated uint32 arenaFormation = 35;
  for (int i = 0; i < this->arenaformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(35, this->arenaformation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.OtherUserInfo)
  return target;
}

int OtherUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes charName = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // optional uint32 cash = 5;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // optional uint32 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 curStamina = 9;
    if (has_curstamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstamina());
    }

    // optional uint32 maxStamina = 10;
    if (has_maxstamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxstamina());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 createTime = 11;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional uint32 offlineTime = 12;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offlinetime());
    }

    // optional uint32 updateStaminaTime = 13;
    if (has_updatestaminatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatestaminatime());
    }

    // optional uint32 bitFlag = 14;
    if (has_bitflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitflag());
    }

    // optional .TgsProtocol.DbQuest quest = 15;
    if (has_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest());
    }

    // optional .TgsProtocol.DBEvaluationList evaluation = 16;
    if (has_evaluation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->evaluation());
    }

    // optional uint32 vipExp = 18;
    if (has_vipexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipexp());
    }

    // optional uint32 vipLevel = 19;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .TgsProtocol.DBHeroList heroList = 22;
    if (has_herolist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herolist());
    }

    // optional uint32 gender = 23;
    if (has_gender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 photo = 24;
    if (has_photo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // optional .TgsProtocol.DBEssenceList essenceItem = 25;
    if (has_essenceitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->essenceitem());
    }

    // optional .TgsProtocol.DBFestivityList festivity = 27;
    if (has_festivity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->festivity());
    }

    // optional uint32 lockChatEndTime = 28;
    if (has_lockchatendtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lockchatendtime());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 dayChatTimes = 29;
    if (has_daychattimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daychattimes());
    }

    // optional uint32 skillPoint = 30;
    if (has_skillpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpoint());
    }

    // optional uint32 updateSkillPointTime = 31;
    if (has_updateskillpointtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updateskillpointtime());
    }

    // optional uint32 energy = 32;
    if (has_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy());
    }

    // optional uint32 updateEnergyTime = 33;
    if (has_updateenergytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updateenergytime());
    }

    // optional .TgsProtocol.DBEquipNewList equipNew = 34;
    if (has_equipnew()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipnew());
    }

  }
  // repeated uint32 formation = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->formation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->formation(i));
    }
    total_size += 2 * this->formation_size() + data_size;
  }

  // repeated uint32 RefreshPrice = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->refreshprice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->refreshprice(i));
    }
    total_size += 2 * this->refreshprice_size() + data_size;
  }

  // repeated uint32 arenaFormation = 35;
  {
    int data_size = 0;
    for (int i = 0; i < this->arenaformation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arenaformation(i));
    }
    total_size += 2 * this->arenaformation_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherUserInfo::MergeFrom(const OtherUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  formation_.MergeFrom(from.formation_);
  refreshprice_.MergeFrom(from.refreshprice_);
  arenaformation_.MergeFrom(from.arenaformation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_curstamina()) {
      set_curstamina(from.curstamina());
    }
    if (from.has_maxstamina()) {
      set_maxstamina(from.maxstamina());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_updatestaminatime()) {
      set_updatestaminatime(from.updatestaminatime());
    }
    if (from.has_bitflag()) {
      set_bitflag(from.bitflag());
    }
    if (from.has_quest()) {
      mutable_quest()->::TgsProtocol::DbQuest::MergeFrom(from.quest());
    }
    if (from.has_evaluation()) {
      mutable_evaluation()->::TgsProtocol::DBEvaluationList::MergeFrom(from.evaluation());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_herolist()) {
      mutable_herolist()->::TgsProtocol::DBHeroList::MergeFrom(from.herolist());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_essenceitem()) {
      mutable_essenceitem()->::TgsProtocol::DBEssenceList::MergeFrom(from.essenceitem());
    }
    if (from.has_festivity()) {
      mutable_festivity()->::TgsProtocol::DBFestivityList::MergeFrom(from.festivity());
    }
    if (from.has_lockchatendtime()) {
      set_lockchatendtime(from.lockchatendtime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_daychattimes()) {
      set_daychattimes(from.daychattimes());
    }
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
    if (from.has_updateskillpointtime()) {
      set_updateskillpointtime(from.updateskillpointtime());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_updateenergytime()) {
      set_updateenergytime(from.updateenergytime());
    }
    if (from.has_equipnew()) {
      mutable_equipnew()->::TgsProtocol::DBEquipNewList::MergeFrom(from.equipnew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherUserInfo::CopyFrom(const OtherUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_quest()) {
    if (!this->quest().IsInitialized()) return false;
  }
  if (has_evaluation()) {
    if (!this->evaluation().IsInitialized()) return false;
  }
  if (has_herolist()) {
    if (!this->herolist().IsInitialized()) return false;
  }
  if (has_essenceitem()) {
    if (!this->essenceitem().IsInitialized()) return false;
  }
  if (has_festivity()) {
    if (!this->festivity().IsInitialized()) return false;
  }
  if (has_equipnew()) {
    if (!this->equipnew().IsInitialized()) return false;
  }
  return true;
}

void OtherUserInfo::Swap(OtherUserInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(cash_, other->cash_);
    std::swap(gold_, other->gold_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(curstamina_, other->curstamina_);
    std::swap(maxstamina_, other->maxstamina_);
    std::swap(createtime_, other->createtime_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(updatestaminatime_, other->updatestaminatime_);
    std::swap(bitflag_, other->bitflag_);
    std::swap(quest_, other->quest_);
    std::swap(evaluation_, other->evaluation_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(viplevel_, other->viplevel_);
    formation_.Swap(&other->formation_);
    std::swap(herolist_, other->herolist_);
    std::swap(gender_, other->gender_);
    std::swap(photo_, other->photo_);
    std::swap(essenceitem_, other->essenceitem_);
    refreshprice_.Swap(&other->refreshprice_);
    std::swap(festivity_, other->festivity_);
    std::swap(lockchatendtime_, other->lockchatendtime_);
    std::swap(daychattimes_, other->daychattimes_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(updateskillpointtime_, other->updateskillpointtime_);
    std::swap(energy_, other->energy_);
    std::swap(updateenergytime_, other->updateenergytime_);
    std::swap(equipnew_, other->equipnew_);
    arenaformation_.Swap(&other->arenaformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherUserInfo_descriptor_;
  metadata.reflection = OtherUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherUserInfoClient::kCharIdFieldNumber;
const int OtherUserInfoClient::kCharNameFieldNumber;
const int OtherUserInfoClient::kCharExpFieldNumber;
const int OtherUserInfoClient::kCharlevelFieldNumber;
const int OtherUserInfoClient::kVipExpFieldNumber;
const int OtherUserInfoClient::kVipLevelFieldNumber;
const int OtherUserInfoClient::kCashFieldNumber;
const int OtherUserInfoClient::kGoldFieldNumber;
const int OtherUserInfoClient::kCurStaminaFieldNumber;
const int OtherUserInfoClient::kRecoveryTimeFieldNumber;
const int OtherUserInfoClient::kFormationFieldNumber;
const int OtherUserInfoClient::kHeroBagFieldNumber;
const int OtherUserInfoClient::kGenderFieldNumber;
const int OtherUserInfoClient::kPhotoFieldNumber;
const int OtherUserInfoClient::kBitFlagFieldNumber;
const int OtherUserInfoClient::kInstanceEvaluationFieldNumber;
const int OtherUserInfoClient::kRefreshPriceFieldNumber;
const int OtherUserInfoClient::kFestivityInfoFieldNumber;
const int OtherUserInfoClient::kServerTimeFieldNumber;
const int OtherUserInfoClient::kSkillPointFieldNumber;
const int OtherUserInfoClient::kEnergyFieldNumber;
const int OtherUserInfoClient::kEnergyReTimeFieldNumber;
const int OtherUserInfoClient::kEquipNewBagFieldNumber;
const int OtherUserInfoClient::kHeroRaiseFieldNumber;
#endif  // !_MSC_VER

OtherUserInfoClient::OtherUserInfoClient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.OtherUserInfoClient)
}

void OtherUserInfoClient::InitAsDefaultInstance() {
}

OtherUserInfoClient::OtherUserInfoClient(const OtherUserInfoClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.OtherUserInfoClient)
}

void OtherUserInfoClient::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charexp_ = 0u;
  charlevel_ = 0u;
  vipexp_ = 0u;
  viplevel_ = 0u;
  cash_ = 0u;
  gold_ = 0u;
  curstamina_ = 0u;
  recoverytime_ = 0u;
  gender_ = 0u;
  photo_ = 0u;
  bitflag_ = 0u;
  servertime_ = 0u;
  skillpoint_ = 0u;
  energy_ = 0u;
  energyretime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherUserInfoClient::~OtherUserInfoClient() {
  // @@protoc_insertion_point(destructor:TgsProtocol.OtherUserInfoClient)
  SharedDtor();
}

void OtherUserInfoClient::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void OtherUserInfoClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherUserInfoClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherUserInfoClient_descriptor_;
}

const OtherUserInfoClient& OtherUserInfoClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

OtherUserInfoClient* OtherUserInfoClient::default_instance_ = NULL;

OtherUserInfoClient* OtherUserInfoClient::New() const {
  return new OtherUserInfoClient;
}

void OtherUserInfoClient::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OtherUserInfoClient*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charexp_, gold_);
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 29440) {
    ZR_(curstamina_, recoverytime_);
    ZR_(gender_, photo_);
    bitflag_ = 0u;
  }
  if (_has_bits_[16 / 32] & 3932160) {
    ZR_(skillpoint_, energy_);
    servertime_ = 0u;
    energyretime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  formation_.Clear();
  herobag_.Clear();
  instanceevaluation_.Clear();
  refreshprice_.Clear();
  festivityinfo_.Clear();
  equipnewbag_.Clear();
  heroraise_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherUserInfoClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.OtherUserInfoClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charName;
        break;
      }

      // required bytes charName = 2;
      case 2: {
        if (tag == 18) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charExp;
        break;
      }

      // required uint32 charExp = 3;
      case 3: {
        if (tag == 24) {
         parse_charExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charexp_)));
          set_has_charexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charlevel;
        break;
      }

      // required uint32 charlevel = 4;
      case 4: {
        if (tag == 32) {
         parse_charlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charlevel_)));
          set_has_charlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vipExp;
        break;
      }

      // required uint32 vipExp = 5;
      case 5: {
        if (tag == 40) {
         parse_vipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vipLevel;
        break;
      }

      // required uint32 vipLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cash;
        break;
      }

      // required uint32 cash = 7;
      case 7: {
        if (tag == 56) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gold;
        break;
      }

      // required uint32 gold = 8;
      case 8: {
        if (tag == 64) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_curStamina;
        break;
      }

      // required uint32 curStamina = 9;
      case 9: {
        if (tag == 72) {
         parse_curStamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstamina_)));
          set_has_curstamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_recoveryTime;
        break;
      }

      // required uint32 recoveryTime = 10;
      case 10: {
        if (tag == 80) {
         parse_recoveryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recoverytime_)));
          set_has_recoverytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_formation;
        break;
      }

      // repeated uint32 formation = 11;
      case 11: {
        if (tag == 88) {
         parse_formation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_formation())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_formation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_formation;
        if (input->ExpectTag(114)) goto parse_heroBag;
        break;
      }

      // repeated .TgsProtocol.ClientHeroInfo heroBag = 14;
      case 14: {
        if (tag == 114) {
         parse_heroBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herobag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_heroBag;
        if (input->ExpectTag(120)) goto parse_gender;
        break;
      }

      // required uint32 gender = 15;
      case 15: {
        if (tag == 120) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_photo;
        break;
      }

      // required uint32 photo = 16;
      case 16: {
        if (tag == 128) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_bitFlag;
        break;
      }

      // required uint32 bitFlag = 17;
      case 17: {
        if (tag == 136) {
         parse_bitFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitflag_)));
          set_has_bitflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_instanceEvaluation;
        break;
      }

      // repeated .TgsProtocol.ClientInstanceEvaluation instanceEvaluation = 18;
      case 18: {
        if (tag == 146) {
         parse_instanceEvaluation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instanceevaluation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_instanceEvaluation;
        if (input->ExpectTag(152)) goto parse_RefreshPrice;
        break;
      }

      // repeated uint32 RefreshPrice = 19;
      case 19: {
        if (tag == 152) {
         parse_RefreshPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_refreshprice())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_refreshprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_RefreshPrice;
        if (input->ExpectTag(162)) goto parse_festivityInfo;
        break;
      }

      // repeated .TgsProtocol.ClientFestivityInfo festivityInfo = 20;
      case 20: {
        if (tag == 162) {
         parse_festivityInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivityinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_festivityInfo;
        if (input->ExpectTag(192)) goto parse_serverTime;
        break;
      }

      // required uint32 serverTime = 24;
      case 24: {
        if (tag == 192) {
         parse_serverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_skillPoint;
        break;
      }

      // required uint32 skillPoint = 25;
      case 25: {
        if (tag == 200) {
         parse_skillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_energy;
        break;
      }

      // required uint32 energy = 27;
      case 27: {
        if (tag == 216) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_energyReTime;
        break;
      }

      // required uint32 energyReTime = 28;
      case 28: {
        if (tag == 224) {
         parse_energyReTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energyretime_)));
          set_has_energyretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_equipNewBag;
        break;
      }

      // repeated .TgsProtocol.HeroEquipNew equipNewBag = 29;
      case 29: {
        if (tag == 234) {
         parse_equipNewBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipnewbag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_equipNewBag;
        if (input->ExpectTag(240)) goto parse_heroRaise;
        break;
      }

      // repeated uint32 heroRaise = 30;
      case 30: {
        if (tag == 240) {
         parse_heroRaise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 240, input, this->mutable_heroraise())));
        } else if (tag == 242) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroraise())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_heroRaise;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.OtherUserInfoClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.OtherUserInfoClient)
  return false;
#undef DO_
}

void OtherUserInfoClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.OtherUserInfoClient)
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required bytes charName = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->charname(), output);
  }

  // required uint32 charExp = 3;
  if (has_charexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charexp(), output);
  }

  // required uint32 charlevel = 4;
  if (has_charlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charlevel(), output);
  }

  // required uint32 vipExp = 5;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vipexp(), output);
  }

  // required uint32 vipLevel = 6;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplevel(), output);
  }

  // required uint32 cash = 7;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cash(), output);
  }

  // required uint32 gold = 8;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gold(), output);
  }

  // required uint32 curStamina = 9;
  if (has_curstamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curstamina(), output);
  }

  // required uint32 recoveryTime = 10;
  if (has_recoverytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->recoverytime(), output);
  }

  // repeated uint32 formation = 11;
  for (int i = 0; i < this->formation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->formation(i), output);
  }

  // repeated .TgsProtocol.ClientHeroInfo heroBag = 14;
  for (int i = 0; i < this->herobag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->herobag(i), output);
  }

  // required uint32 gender = 15;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->gender(), output);
  }

  // required uint32 photo = 16;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->photo(), output);
  }

  // required uint32 bitFlag = 17;
  if (has_bitflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->bitflag(), output);
  }

  // repeated .TgsProtocol.ClientInstanceEvaluation instanceEvaluation = 18;
  for (int i = 0; i < this->instanceevaluation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->instanceevaluation(i), output);
  }

  // repeated uint32 RefreshPrice = 19;
  for (int i = 0; i < this->refreshprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->refreshprice(i), output);
  }

  // repeated .TgsProtocol.ClientFestivityInfo festivityInfo = 20;
  for (int i = 0; i < this->festivityinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->festivityinfo(i), output);
  }

  // required uint32 serverTime = 24;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->servertime(), output);
  }

  // required uint32 skillPoint = 25;
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->skillpoint(), output);
  }

  // required uint32 energy = 27;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->energy(), output);
  }

  // required uint32 energyReTime = 28;
  if (has_energyretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->energyretime(), output);
  }

  // repeated .TgsProtocol.HeroEquipNew equipNewBag = 29;
  for (int i = 0; i < this->equipnewbag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->equipnewbag(i), output);
  }

  // repeated uint32 heroRaise = 30;
  for (int i = 0; i < this->heroraise_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      30, this->heroraise(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.OtherUserInfoClient)
}

::google::protobuf::uint8* OtherUserInfoClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.OtherUserInfoClient)
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required bytes charName = 2;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->charname(), target);
  }

  // required uint32 charExp = 3;
  if (has_charexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charexp(), target);
  }

  // required uint32 charlevel = 4;
  if (has_charlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charlevel(), target);
  }

  // required uint32 vipExp = 5;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vipexp(), target);
  }

  // required uint32 vipLevel = 6;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplevel(), target);
  }

  // required uint32 cash = 7;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cash(), target);
  }

  // required uint32 gold = 8;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gold(), target);
  }

  // required uint32 curStamina = 9;
  if (has_curstamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curstamina(), target);
  }

  // required uint32 recoveryTime = 10;
  if (has_recoverytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->recoverytime(), target);
  }

  // repeated uint32 formation = 11;
  for (int i = 0; i < this->formation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->formation(i), target);
  }

  // repeated .TgsProtocol.ClientHeroInfo heroBag = 14;
  for (int i = 0; i < this->herobag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->herobag(i), target);
  }

  // required uint32 gender = 15;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->gender(), target);
  }

  // required uint32 photo = 16;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->photo(), target);
  }

  // required uint32 bitFlag = 17;
  if (has_bitflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->bitflag(), target);
  }

  // repeated .TgsProtocol.ClientInstanceEvaluation instanceEvaluation = 18;
  for (int i = 0; i < this->instanceevaluation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->instanceevaluation(i), target);
  }

  // repeated uint32 RefreshPrice = 19;
  for (int i = 0; i < this->refreshprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(19, this->refreshprice(i), target);
  }

  // repeated .TgsProtocol.ClientFestivityInfo festivityInfo = 20;
  for (int i = 0; i < this->festivityinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->festivityinfo(i), target);
  }

  // required uint32 serverTime = 24;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->servertime(), target);
  }

  // required uint32 skillPoint = 25;
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->skillpoint(), target);
  }

  // required uint32 energy = 27;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->energy(), target);
  }

  // required uint32 energyReTime = 28;
  if (has_energyretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->energyretime(), target);
  }

  // repeated .TgsProtocol.HeroEquipNew equipNewBag = 29;
  for (int i = 0; i < this->equipnewbag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->equipnewbag(i), target);
  }

  // repeated uint32 heroRaise = 30;
  for (int i = 0; i < this->heroraise_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(30, this->heroraise(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.OtherUserInfoClient)
  return target;
}

int OtherUserInfoClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bytes charName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // required uint32 charExp = 3;
    if (has_charexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charexp());
    }

    // required uint32 charlevel = 4;
    if (has_charlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charlevel());
    }

    // required uint32 vipExp = 5;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipexp());
    }

    // required uint32 vipLevel = 6;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required uint32 cash = 7;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 gold = 8;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 curStamina = 9;
    if (has_curstamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstamina());
    }

    // required uint32 recoveryTime = 10;
    if (has_recoverytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recoverytime());
    }

    // required uint32 gender = 15;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // required uint32 photo = 16;
    if (has_photo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required uint32 bitFlag = 17;
    if (has_bitflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitflag());
    }

  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // required uint32 serverTime = 24;
    if (has_servertime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertime());
    }

    // required uint32 skillPoint = 25;
    if (has_skillpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpoint());
    }

    // required uint32 energy = 27;
    if (has_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy());
    }

    // required uint32 energyReTime = 28;
    if (has_energyretime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energyretime());
    }

  }
  // repeated uint32 formation = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->formation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->formation(i));
    }
    total_size += 1 * this->formation_size() + data_size;
  }

  // repeated .TgsProtocol.ClientHeroInfo heroBag = 14;
  total_size += 1 * this->herobag_size();
  for (int i = 0; i < this->herobag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herobag(i));
  }

  // repeated .TgsProtocol.ClientInstanceEvaluation instanceEvaluation = 18;
  total_size += 2 * this->instanceevaluation_size();
  for (int i = 0; i < this->instanceevaluation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instanceevaluation(i));
  }

  // repeated uint32 RefreshPrice = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->refreshprice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->refreshprice(i));
    }
    total_size += 2 * this->refreshprice_size() + data_size;
  }

  // repeated .TgsProtocol.ClientFestivityInfo festivityInfo = 20;
  total_size += 2 * this->festivityinfo_size();
  for (int i = 0; i < this->festivityinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivityinfo(i));
  }

  // repeated .TgsProtocol.HeroEquipNew equipNewBag = 29;
  total_size += 2 * this->equipnewbag_size();
  for (int i = 0; i < this->equipnewbag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipnewbag(i));
  }

  // repeated uint32 heroRaise = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroraise_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroraise(i));
    }
    total_size += 2 * this->heroraise_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherUserInfoClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherUserInfoClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherUserInfoClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherUserInfoClient::MergeFrom(const OtherUserInfoClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  formation_.MergeFrom(from.formation_);
  herobag_.MergeFrom(from.herobag_);
  instanceevaluation_.MergeFrom(from.instanceevaluation_);
  refreshprice_.MergeFrom(from.refreshprice_);
  festivityinfo_.MergeFrom(from.festivityinfo_);
  equipnewbag_.MergeFrom(from.equipnewbag_);
  heroraise_.MergeFrom(from.heroraise_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_charexp()) {
      set_charexp(from.charexp());
    }
    if (from.has_charlevel()) {
      set_charlevel(from.charlevel());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curstamina()) {
      set_curstamina(from.curstamina());
    }
    if (from.has_recoverytime()) {
      set_recoverytime(from.recoverytime());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_bitflag()) {
      set_bitflag(from.bitflag());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_energyretime()) {
      set_energyretime(from.energyretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherUserInfoClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherUserInfoClient::CopyFrom(const OtherUserInfoClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherUserInfoClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x003c73ff) != 0x003c73ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->herobag())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->instanceevaluation())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->festivityinfo())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equipnewbag())) return false;
  return true;
}

void OtherUserInfoClient::Swap(OtherUserInfoClient* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(charexp_, other->charexp_);
    std::swap(charlevel_, other->charlevel_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(cash_, other->cash_);
    std::swap(gold_, other->gold_);
    std::swap(curstamina_, other->curstamina_);
    std::swap(recoverytime_, other->recoverytime_);
    formation_.Swap(&other->formation_);
    herobag_.Swap(&other->herobag_);
    std::swap(gender_, other->gender_);
    std::swap(photo_, other->photo_);
    std::swap(bitflag_, other->bitflag_);
    instanceevaluation_.Swap(&other->instanceevaluation_);
    refreshprice_.Swap(&other->refreshprice_);
    festivityinfo_.Swap(&other->festivityinfo_);
    std::swap(servertime_, other->servertime_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(energy_, other->energy_);
    std::swap(energyretime_, other->energyretime_);
    equipnewbag_.Swap(&other->equipnewbag_);
    heroraise_.Swap(&other->heroraise_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherUserInfoClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherUserInfoClient_descriptor_;
  metadata.reflection = OtherUserInfoClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBPlayerActivity::kIdFieldNumber;
const int DBPlayerActivity::kValueFieldNumber;
const int DBPlayerActivity::kGotFieldNumber;
const int DBPlayerActivity::kUpdateTimeFieldNumber;
const int DBPlayerActivity::kDoneValueFieldNumber;
#endif  // !_MSC_VER

DBPlayerActivity::DBPlayerActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBPlayerActivity)
}

void DBPlayerActivity::InitAsDefaultInstance() {
}

DBPlayerActivity::DBPlayerActivity(const DBPlayerActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBPlayerActivity)
}

void DBPlayerActivity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBPlayerActivity::~DBPlayerActivity() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBPlayerActivity)
  SharedDtor();
}

void DBPlayerActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBPlayerActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBPlayerActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBPlayerActivity_descriptor_;
}

const DBPlayerActivity& DBPlayerActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBPlayerActivity* DBPlayerActivity::default_instance_ = NULL;

DBPlayerActivity* DBPlayerActivity::New() const {
  return new DBPlayerActivity;
}

void DBPlayerActivity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBPlayerActivity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(id_, value_);
    update_time_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  got_.Clear();
  donevalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBPlayerActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBPlayerActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_got;
        break;
      }

      // repeated uint32 got = 3;
      case 3: {
        if (tag == 24) {
         parse_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_got())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_got())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_got;
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // optional uint32 update_time = 4;
      case 4: {
        if (tag == 32) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_doneValue;
        break;
      }

      // repeated uint32 doneValue = 5;
      case 5: {
        if (tag == 40) {
         parse_doneValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_donevalue())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_donevalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_doneValue;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBPlayerActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBPlayerActivity)
  return false;
#undef DO_
}

void DBPlayerActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBPlayerActivity)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // repeated uint32 got = 3;
  for (int i = 0; i < this->got_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->got(i), output);
  }

  // optional uint32 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_time(), output);
  }

  // repeated uint32 doneValue = 5;
  for (int i = 0; i < this->donevalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->donevalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBPlayerActivity)
}

::google::protobuf::uint8* DBPlayerActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBPlayerActivity)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // repeated uint32 got = 3;
  for (int i = 0; i < this->got_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->got(i), target);
  }

  // optional uint32 update_time = 4;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->update_time(), target);
  }

  // repeated uint32 doneValue = 5;
  for (int i = 0; i < this->donevalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->donevalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBPlayerActivity)
  return target;
}

int DBPlayerActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  // repeated uint32 got = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->got_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->got(i));
    }
    total_size += 1 * this->got_size() + data_size;
  }

  // repeated uint32 doneValue = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->donevalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->donevalue(i));
    }
    total_size += 1 * this->donevalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBPlayerActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBPlayerActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBPlayerActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBPlayerActivity::MergeFrom(const DBPlayerActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  got_.MergeFrom(from.got_);
  donevalue_.MergeFrom(from.donevalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBPlayerActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBPlayerActivity::CopyFrom(const DBPlayerActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPlayerActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DBPlayerActivity::Swap(DBPlayerActivity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    got_.Swap(&other->got_);
    std::swap(update_time_, other->update_time_);
    donevalue_.Swap(&other->donevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBPlayerActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBPlayerActivity_descriptor_;
  metadata.reflection = DBPlayerActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBPlayerActivityList::kActFieldNumber;
#endif  // !_MSC_VER

DBPlayerActivityList::DBPlayerActivityList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBPlayerActivityList)
}

void DBPlayerActivityList::InitAsDefaultInstance() {
}

DBPlayerActivityList::DBPlayerActivityList(const DBPlayerActivityList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBPlayerActivityList)
}

void DBPlayerActivityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBPlayerActivityList::~DBPlayerActivityList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBPlayerActivityList)
  SharedDtor();
}

void DBPlayerActivityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBPlayerActivityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBPlayerActivityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBPlayerActivityList_descriptor_;
}

const DBPlayerActivityList& DBPlayerActivityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBPlayerActivityList* DBPlayerActivityList::default_instance_ = NULL;

DBPlayerActivityList* DBPlayerActivityList::New() const {
  return new DBPlayerActivityList;
}

void DBPlayerActivityList::Clear() {
  act_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBPlayerActivityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBPlayerActivityList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DBPlayerActivity act = 1;
      case 1: {
        if (tag == 10) {
         parse_act:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_act()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_act;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBPlayerActivityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBPlayerActivityList)
  return false;
#undef DO_
}

void DBPlayerActivityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBPlayerActivityList)
  // repeated .TgsProtocol.DBPlayerActivity act = 1;
  for (int i = 0; i < this->act_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->act(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBPlayerActivityList)
}

::google::protobuf::uint8* DBPlayerActivityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBPlayerActivityList)
  // repeated .TgsProtocol.DBPlayerActivity act = 1;
  for (int i = 0; i < this->act_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->act(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBPlayerActivityList)
  return target;
}

int DBPlayerActivityList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DBPlayerActivity act = 1;
  total_size += 1 * this->act_size();
  for (int i = 0; i < this->act_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->act(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBPlayerActivityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBPlayerActivityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBPlayerActivityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBPlayerActivityList::MergeFrom(const DBPlayerActivityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  act_.MergeFrom(from.act_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBPlayerActivityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBPlayerActivityList::CopyFrom(const DBPlayerActivityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPlayerActivityList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->act())) return false;
  return true;
}

void DBPlayerActivityList::Swap(DBPlayerActivityList* other) {
  if (other != this) {
    act_.Swap(&other->act_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBPlayerActivityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBPlayerActivityList_descriptor_;
  metadata.reflection = DBPlayerActivityList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChapterMapBox::kMaptypeFieldNumber;
const int ChapterMapBox::kGotFieldNumber;
#endif  // !_MSC_VER

ChapterMapBox::ChapterMapBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ChapterMapBox)
}

void ChapterMapBox::InitAsDefaultInstance() {
}

ChapterMapBox::ChapterMapBox(const ChapterMapBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ChapterMapBox)
}

void ChapterMapBox::SharedCtor() {
  _cached_size_ = 0;
  maptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChapterMapBox::~ChapterMapBox() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ChapterMapBox)
  SharedDtor();
}

void ChapterMapBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChapterMapBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChapterMapBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChapterMapBox_descriptor_;
}

const ChapterMapBox& ChapterMapBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ChapterMapBox* ChapterMapBox::default_instance_ = NULL;

ChapterMapBox* ChapterMapBox::New() const {
  return new ChapterMapBox;
}

void ChapterMapBox::Clear() {
  maptype_ = 0u;
  got_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChapterMapBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ChapterMapBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 maptype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maptype_)));
          set_has_maptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_got;
        break;
      }

      // repeated bool got = 2;
      case 2: {
        if (tag == 16) {
         parse_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_got())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_got())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_got;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ChapterMapBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ChapterMapBox)
  return false;
#undef DO_
}

void ChapterMapBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ChapterMapBox)
  // required uint32 maptype = 1;
  if (has_maptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maptype(), output);
  }

  // repeated bool got = 2;
  for (int i = 0; i < this->got_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->got(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ChapterMapBox)
}

::google::protobuf::uint8* ChapterMapBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ChapterMapBox)
  // required uint32 maptype = 1;
  if (has_maptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maptype(), target);
  }

  // repeated bool got = 2;
  for (int i = 0; i < this->got_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->got(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ChapterMapBox)
  return target;
}

int ChapterMapBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 maptype = 1;
    if (has_maptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maptype());
    }

  }
  // repeated bool got = 2;
  {
    int data_size = 0;
    data_size = 1 * this->got_size();
    total_size += 1 * this->got_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChapterMapBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChapterMapBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChapterMapBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChapterMapBox::MergeFrom(const ChapterMapBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  got_.MergeFrom(from.got_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maptype()) {
      set_maptype(from.maptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChapterMapBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChapterMapBox::CopyFrom(const ChapterMapBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterMapBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChapterMapBox::Swap(ChapterMapBox* other) {
  if (other != this) {
    std::swap(maptype_, other->maptype_);
    got_.Swap(&other->got_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChapterMapBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChapterMapBox_descriptor_;
  metadata.reflection = ChapterMapBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBChapterBox::kIdFieldNumber;
const int DBChapterBox::kGotFieldNumber;
const int DBChapterBox::kEliteGotFieldNumber;
const int DBChapterBox::kEpicGotFieldNumber;
const int DBChapterBox::kLegendGotFieldNumber;
const int DBChapterBox::kMapboxFieldNumber;
#endif  // !_MSC_VER

DBChapterBox::DBChapterBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBChapterBox)
}

void DBChapterBox::InitAsDefaultInstance() {
}

DBChapterBox::DBChapterBox(const DBChapterBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBChapterBox)
}

void DBChapterBox::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBChapterBox::~DBChapterBox() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBChapterBox)
  SharedDtor();
}

void DBChapterBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBChapterBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBChapterBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBChapterBox_descriptor_;
}

const DBChapterBox& DBChapterBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBChapterBox* DBChapterBox::default_instance_ = NULL;

DBChapterBox* DBChapterBox::New() const {
  return new DBChapterBox;
}

void DBChapterBox::Clear() {
  id_ = 0u;
  got_.Clear();
  elite_got_.Clear();
  epic_got_.Clear();
  legend_got_.Clear();
  mapbox_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBChapterBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBChapterBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_got;
        break;
      }

      // repeated uint32 got = 2;
      case 2: {
        if (tag == 16) {
         parse_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_got())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_got())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_got;
        if (input->ExpectTag(24)) goto parse_elite_got;
        break;
      }

      // repeated uint32 elite_got = 3;
      case 3: {
        if (tag == 24) {
         parse_elite_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_elite_got())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_elite_got())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_elite_got;
        if (input->ExpectTag(32)) goto parse_epic_got;
        break;
      }

      // repeated uint32 epic_got = 4;
      case 4: {
        if (tag == 32) {
         parse_epic_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_epic_got())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_epic_got())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_epic_got;
        if (input->ExpectTag(40)) goto parse_legend_got;
        break;
      }

      // repeated uint32 legend_got = 5;
      case 5: {
        if (tag == 40) {
         parse_legend_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_legend_got())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_legend_got())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_legend_got;
        if (input->ExpectTag(50)) goto parse_mapbox;
        break;
      }

      // repeated .TgsProtocol.ChapterMapBox mapbox = 6;
      case 6: {
        if (tag == 50) {
         parse_mapbox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mapbox;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBChapterBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBChapterBox)
  return false;
#undef DO_
}

void DBChapterBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBChapterBox)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 got = 2;
  for (int i = 0; i < this->got_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->got(i), output);
  }

  // repeated uint32 elite_got = 3;
  for (int i = 0; i < this->elite_got_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->elite_got(i), output);
  }

  // repeated uint32 epic_got = 4;
  for (int i = 0; i < this->epic_got_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->epic_got(i), output);
  }

  // repeated uint32 legend_got = 5;
  for (int i = 0; i < this->legend_got_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->legend_got(i), output);
  }

  // repeated .TgsProtocol.ChapterMapBox mapbox = 6;
  for (int i = 0; i < this->mapbox_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mapbox(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBChapterBox)
}

::google::protobuf::uint8* DBChapterBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBChapterBox)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 got = 2;
  for (int i = 0; i < this->got_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->got(i), target);
  }

  // repeated uint32 elite_got = 3;
  for (int i = 0; i < this->elite_got_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->elite_got(i), target);
  }

  // repeated uint32 epic_got = 4;
  for (int i = 0; i < this->epic_got_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->epic_got(i), target);
  }

  // repeated uint32 legend_got = 5;
  for (int i = 0; i < this->legend_got_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->legend_got(i), target);
  }

  // repeated .TgsProtocol.ChapterMapBox mapbox = 6;
  for (int i = 0; i < this->mapbox_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mapbox(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBChapterBox)
  return target;
}

int DBChapterBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated uint32 got = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->got_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->got(i));
    }
    total_size += 1 * this->got_size() + data_size;
  }

  // repeated uint32 elite_got = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->elite_got_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->elite_got(i));
    }
    total_size += 1 * this->elite_got_size() + data_size;
  }

  // repeated uint32 epic_got = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->epic_got_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->epic_got(i));
    }
    total_size += 1 * this->epic_got_size() + data_size;
  }

  // repeated uint32 legend_got = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->legend_got_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->legend_got(i));
    }
    total_size += 1 * this->legend_got_size() + data_size;
  }

  // repeated .TgsProtocol.ChapterMapBox mapbox = 6;
  total_size += 1 * this->mapbox_size();
  for (int i = 0; i < this->mapbox_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapbox(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBChapterBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBChapterBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBChapterBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBChapterBox::MergeFrom(const DBChapterBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  got_.MergeFrom(from.got_);
  elite_got_.MergeFrom(from.elite_got_);
  epic_got_.MergeFrom(from.epic_got_);
  legend_got_.MergeFrom(from.legend_got_);
  mapbox_.MergeFrom(from.mapbox_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBChapterBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBChapterBox::CopyFrom(const DBChapterBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBChapterBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->mapbox())) return false;
  return true;
}

void DBChapterBox::Swap(DBChapterBox* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    got_.Swap(&other->got_);
    elite_got_.Swap(&other->elite_got_);
    epic_got_.Swap(&other->epic_got_);
    legend_got_.Swap(&other->legend_got_);
    mapbox_.Swap(&other->mapbox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBChapterBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBChapterBox_descriptor_;
  metadata.reflection = DBChapterBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBChapterBoxList::kItemsFieldNumber;
#endif  // !_MSC_VER

DBChapterBoxList::DBChapterBoxList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBChapterBoxList)
}

void DBChapterBoxList::InitAsDefaultInstance() {
}

DBChapterBoxList::DBChapterBoxList(const DBChapterBoxList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBChapterBoxList)
}

void DBChapterBoxList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBChapterBoxList::~DBChapterBoxList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBChapterBoxList)
  SharedDtor();
}

void DBChapterBoxList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBChapterBoxList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBChapterBoxList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBChapterBoxList_descriptor_;
}

const DBChapterBoxList& DBChapterBoxList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBChapterBoxList* DBChapterBoxList::default_instance_ = NULL;

DBChapterBoxList* DBChapterBoxList::New() const {
  return new DBChapterBoxList;
}

void DBChapterBoxList::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBChapterBoxList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBChapterBoxList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DBChapterBox items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBChapterBoxList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBChapterBoxList)
  return false;
#undef DO_
}

void DBChapterBoxList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBChapterBoxList)
  // repeated .TgsProtocol.DBChapterBox items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBChapterBoxList)
}

::google::protobuf::uint8* DBChapterBoxList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBChapterBoxList)
  // repeated .TgsProtocol.DBChapterBox items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBChapterBoxList)
  return target;
}

int DBChapterBoxList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DBChapterBox items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBChapterBoxList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBChapterBoxList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBChapterBoxList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBChapterBoxList::MergeFrom(const DBChapterBoxList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBChapterBoxList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBChapterBoxList::CopyFrom(const DBChapterBoxList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBChapterBoxList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void DBChapterBoxList::Swap(DBChapterBoxList* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBChapterBoxList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBChapterBoxList_descriptor_;
  metadata.reflection = DBChapterBoxList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientFriendInfo::kCharIdFieldNumber;
const int ClientFriendInfo::kCharNameFieldNumber;
const int ClientFriendInfo::kPhotoFieldNumber;
const int ClientFriendInfo::kCharLevelFieldNumber;
const int ClientFriendInfo::kEffectFieldNumber;
const int ClientFriendInfo::kVipLevelFieldNumber;
const int ClientFriendInfo::kGuildNameFieldNumber;
const int ClientFriendInfo::kBSendFieldNumber;
const int ClientFriendInfo::kReceiveFieldNumber;
const int ClientFriendInfo::kLoginTimeFieldNumber;
const int ClientFriendInfo::kEffect64FieldNumber;
const int ClientFriendInfo::kNationalIdFieldNumber;
#endif  // !_MSC_VER

ClientFriendInfo::ClientFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientFriendInfo)
}

void ClientFriendInfo::InitAsDefaultInstance() {
}

ClientFriendInfo::ClientFriendInfo(const ClientFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientFriendInfo)
}

void ClientFriendInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_ = 0u;
  charlevel_ = 0u;
  effect_ = 0u;
  viplevel_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bsend_ = false;
  receive_ = 0u;
  logintime_ = 0u;
  effect64_ = GOOGLE_ULONGLONG(0);
  nationalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientFriendInfo::~ClientFriendInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientFriendInfo)
  SharedDtor();
}

void ClientFriendInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void ClientFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientFriendInfo_descriptor_;
}

const ClientFriendInfo& ClientFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientFriendInfo* ClientFriendInfo::default_instance_ = NULL;

ClientFriendInfo* ClientFriendInfo::New() const {
  return new ClientFriendInfo;
}

void ClientFriendInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientFriendInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(photo_, viplevel_);
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    bsend_ = false;
  }
  ZR_(receive_, nationalid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientFriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charName;
        break;
      }

      // required bytes charName = 2;
      case 2: {
        if (tag == 18) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_photo;
        break;
      }

      // required uint32 photo = 3;
      case 3: {
        if (tag == 24) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charLevel;
        break;
      }

      // required uint32 charLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_charLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charlevel_)));
          set_has_charlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_effect;
        break;
      }

      // required uint32 effect = 5;
      case 5: {
        if (tag == 40) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vipLevel;
        break;
      }

      // required uint32 vipLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_guildName;
        break;
      }

      // required bytes guildName = 7;
      case 7: {
        if (tag == 58) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guildname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bSend;
        break;
      }

      // required bool bSend = 8;
      case 8: {
        if (tag == 64) {
         parse_bSend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsend_)));
          set_has_bsend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_receive;
        break;
      }

      // required uint32 receive = 9;
      case 9: {
        if (tag == 72) {
         parse_receive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receive_)));
          set_has_receive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_loginTime;
        break;
      }

      // required uint32 loginTime = 10;
      case 10: {
        if (tag == 80) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_effect64;
        break;
      }

      // optional uint64 effect64 = 11;
      case 11: {
        if (tag == 88) {
         parse_effect64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effect64_)));
          set_has_effect64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_nationalId;
        break;
      }

      // optional uint32 nationalId = 12;
      case 12: {
        if (tag == 96) {
         parse_nationalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nationalid_)));
          set_has_nationalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientFriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientFriendInfo)
  return false;
#undef DO_
}

void ClientFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientFriendInfo)
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required bytes charName = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->charname(), output);
  }

  // required uint32 photo = 3;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->photo(), output);
  }

  // required uint32 charLevel = 4;
  if (has_charlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charlevel(), output);
  }

  // required uint32 effect = 5;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->effect(), output);
  }

  // required uint32 vipLevel = 6;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplevel(), output);
  }

  // required bytes guildName = 7;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->guildname(), output);
  }

  // required bool bSend = 8;
  if (has_bsend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bsend(), output);
  }

  // required uint32 receive = 9;
  if (has_receive()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->receive(), output);
  }

  // required uint32 loginTime = 10;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->logintime(), output);
  }

  // optional uint64 effect64 = 11;
  if (has_effect64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->effect64(), output);
  }

  // optional uint32 nationalId = 12;
  if (has_nationalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->nationalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientFriendInfo)
}

::google::protobuf::uint8* ClientFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientFriendInfo)
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required bytes charName = 2;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->charname(), target);
  }

  // required uint32 photo = 3;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->photo(), target);
  }

  // required uint32 charLevel = 4;
  if (has_charlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charlevel(), target);
  }

  // required uint32 effect = 5;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->effect(), target);
  }

  // required uint32 vipLevel = 6;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplevel(), target);
  }

  // required bytes guildName = 7;
  if (has_guildname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->guildname(), target);
  }

  // required bool bSend = 8;
  if (has_bsend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bsend(), target);
  }

  // required uint32 receive = 9;
  if (has_receive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->receive(), target);
  }

  // required uint32 loginTime = 10;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->logintime(), target);
  }

  // optional uint64 effect64 = 11;
  if (has_effect64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->effect64(), target);
  }

  // optional uint32 nationalId = 12;
  if (has_nationalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->nationalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientFriendInfo)
  return target;
}

int ClientFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bytes charName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // required uint32 photo = 3;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required uint32 charLevel = 4;
    if (has_charlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charlevel());
    }

    // required uint32 effect = 5;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect());
    }

    // required uint32 vipLevel = 6;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required bytes guildName = 7;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guildname());
    }

    // required bool bSend = 8;
    if (has_bsend()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 receive = 9;
    if (has_receive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receive());
    }

    // required uint32 loginTime = 10;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintime());
    }

    // optional uint64 effect64 = 11;
    if (has_effect64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->effect64());
    }

    // optional uint32 nationalId = 12;
    if (has_nationalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nationalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientFriendInfo::MergeFrom(const ClientFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_charlevel()) {
      set_charlevel(from.charlevel());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_bsend()) {
      set_bsend(from.bsend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_receive()) {
      set_receive(from.receive());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_effect64()) {
      set_effect64(from.effect64());
    }
    if (from.has_nationalid()) {
      set_nationalid(from.nationalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientFriendInfo::CopyFrom(const ClientFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void ClientFriendInfo::Swap(ClientFriendInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(photo_, other->photo_);
    std::swap(charlevel_, other->charlevel_);
    std::swap(effect_, other->effect_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(guildname_, other->guildname_);
    std::swap(bsend_, other->bsend_);
    std::swap(receive_, other->receive_);
    std::swap(logintime_, other->logintime_);
    std::swap(effect64_, other->effect64_);
    std::swap(nationalid_, other->nationalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientFriendInfo_descriptor_;
  metadata.reflection = ClientFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientBattleHero::kTemplateIdFieldNumber;
const int ClientBattleHero::kLevelFieldNumber;
const int ClientBattleHero::kEvolutionLevelFieldNumber;
const int ClientBattleHero::kForceLevelFieldNumber;
const int ClientBattleHero::kEquipFieldNumber;
const int ClientBattleHero::kSkillLevelFieldNumber;
const int ClientBattleHero::kHeroNameFieldNumber;
const int ClientBattleHero::kEquipNewFieldNumber;
const int ClientBattleHero::kIsFashionFieldNumber;
const int ClientBattleHero::kPostionFieldNumber;
const int ClientBattleHero::kEffectFieldNumber;
const int ClientBattleHero::kDeificationlevelFieldNumber;
const int ClientBattleHero::kWingslevelFieldNumber;
const int ClientBattleHero::kAttrFieldNumber;
const int ClientBattleHero::kWakeLevelFieldNumber;
const int ClientBattleHero::kWakeEquipsFieldNumber;
const int ClientBattleHero::kPropertyFieldNumber;
const int ClientBattleHero::kEffect64FieldNumber;
#endif  // !_MSC_VER

ClientBattleHero::ClientBattleHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientBattleHero)
}

void ClientBattleHero::InitAsDefaultInstance() {
  property_ = const_cast< ::TgsProtocol::WakeAttr*>(&::TgsProtocol::WakeAttr::default_instance());
}

ClientBattleHero::ClientBattleHero(const ClientBattleHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientBattleHero)
}

void ClientBattleHero::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  templateid_ = 0u;
  level_ = 0u;
  evolutionlevel_ = 0u;
  forcelevel_ = 0u;
  heroname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isfashion_ = 0u;
  postion_ = 0u;
  effect_ = 0u;
  deificationlevel_ = 0u;
  wingslevel_ = 0u;
  attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wakelevel_ = 0u;
  property_ = NULL;
  effect64_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBattleHero::~ClientBattleHero() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientBattleHero)
  SharedDtor();
}

void ClientBattleHero::SharedDtor() {
  if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete heroname_;
  }
  if (attr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attr_;
  }
  if (this != default_instance_) {
    delete property_;
  }
}

void ClientBattleHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientBattleHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientBattleHero_descriptor_;
}

const ClientBattleHero& ClientBattleHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientBattleHero* ClientBattleHero::default_instance_ = NULL;

ClientBattleHero* ClientBattleHero::New() const {
  return new ClientBattleHero;
}

void ClientBattleHero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBattleHero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 79) {
    ZR_(templateid_, forcelevel_);
    if (has_heroname()) {
      if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        heroname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(isfashion_, deificationlevel_);
    ZR_(wingslevel_, wakelevel_);
    if (has_attr()) {
      if (attr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attr_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_property()) {
      if (property_ != NULL) property_->::TgsProtocol::WakeAttr::Clear();
    }
    effect64_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equip_.Clear();
  skilllevel_.Clear();
  equipnew_.Clear();
  wakeequips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientBattleHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientBattleHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 templateId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_evolutionLevel;
        break;
      }

      // required uint32 evolutionLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_evolutionLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutionlevel_)));
          set_has_evolutionlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_forceLevel;
        break;
      }

      // required uint32 forceLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_forceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcelevel_)));
          set_has_forcelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equip;
        break;
      }

      // repeated .TgsProtocol.HeroEquipInfo equip = 5;
      case 5: {
        if (tag == 42) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equip;
        if (input->ExpectTag(48)) goto parse_skillLevel;
        break;
      }

      // repeated uint32 skillLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_skilllevel())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skilllevel())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skillLevel;
        if (input->ExpectTag(58)) goto parse_heroName;
        break;
      }

      // optional bytes heroName = 7;
      case 7: {
        if (tag == 58) {
         parse_heroName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_heroname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_equipNew;
        break;
      }

      // repeated .TgsProtocol.HeroEquipNew equipNew = 8;
      case 8: {
        if (tag == 66) {
         parse_equipNew:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipnew()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_equipNew;
        if (input->ExpectTag(72)) goto parse_isFashion;
        break;
      }

      // optional uint32 isFashion = 9;
      case 9: {
        if (tag == 72) {
         parse_isFashion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfashion_)));
          set_has_isfashion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_postion;
        break;
      }

      // optional uint32 postion = 10;
      case 10: {
        if (tag == 80) {
         parse_postion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &postion_)));
          set_has_postion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_effect;
        break;
      }

      // required uint32 effect = 11;
      case 11: {
        if (tag == 88) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_deificationlevel;
        break;
      }

      // optional uint32 deificationlevel = 12;
      case 12: {
        if (tag == 96) {
         parse_deificationlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deificationlevel_)));
          set_has_deificationlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_wingslevel;
        break;
      }

      // optional uint32 wingslevel = 13;
      case 13: {
        if (tag == 104) {
         parse_wingslevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingslevel_)));
          set_has_wingslevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_attr;
        break;
      }

      // optional string attr = 14;
      case 14: {
        if (tag == 114) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attr().data(), this->attr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "attr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_wakeLevel;
        break;
      }

      // optional uint32 wakeLevel = 15;
      case 15: {
        if (tag == 120) {
         parse_wakeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wakelevel_)));
          set_has_wakelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_wakeEquips;
        break;
      }

      // repeated uint32 wakeEquips = 16;
      case 16: {
        if (tag == 128) {
         parse_wakeEquips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_wakeequips())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wakeequips())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_wakeEquips;
        if (input->ExpectTag(138)) goto parse_property;
        break;
      }

      // optional .TgsProtocol.WakeAttr property = 17;
      case 17: {
        if (tag == 138) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_effect64;
        break;
      }

      // optional uint64 effect64 = 18;
      case 18: {
        if (tag == 144) {
         parse_effect64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effect64_)));
          set_has_effect64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientBattleHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientBattleHero)
  return false;
#undef DO_
}

void ClientBattleHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientBattleHero)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->templateid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 evolutionLevel = 3;
  if (has_evolutionlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->evolutionlevel(), output);
  }

  // required uint32 forceLevel = 4;
  if (has_forcelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->forcelevel(), output);
  }

  // repeated .TgsProtocol.HeroEquipInfo equip = 5;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equip(i), output);
  }

  // repeated uint32 skillLevel = 6;
  for (int i = 0; i < this->skilllevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->skilllevel(i), output);
  }

  // optional bytes heroName = 7;
  if (has_heroname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->heroname(), output);
  }

  // repeated .TgsProtocol.HeroEquipNew equipNew = 8;
  for (int i = 0; i < this->equipnew_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equipnew(i), output);
  }

  // optional uint32 isFashion = 9;
  if (has_isfashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->isfashion(), output);
  }

  // optional uint32 postion = 10;
  if (has_postion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->postion(), output);
  }

  // required uint32 effect = 11;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->effect(), output);
  }

  // optional uint32 deificationlevel = 12;
  if (has_deificationlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->deificationlevel(), output);
  }

  // optional uint32 wingslevel = 13;
  if (has_wingslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->wingslevel(), output);
  }

  // optional string attr = 14;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attr().data(), this->attr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->attr(), output);
  }

  // optional uint32 wakeLevel = 15;
  if (has_wakelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->wakelevel(), output);
  }

  // repeated uint32 wakeEquips = 16;
  for (int i = 0; i < this->wakeequips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->wakeequips(i), output);
  }

  // optional .TgsProtocol.WakeAttr property = 17;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->property(), output);
  }

  // optional uint64 effect64 = 18;
  if (has_effect64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->effect64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientBattleHero)
}

::google::protobuf::uint8* ClientBattleHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientBattleHero)
  // required uint32 templateId = 1;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->templateid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 evolutionLevel = 3;
  if (has_evolutionlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->evolutionlevel(), target);
  }

  // required uint32 forceLevel = 4;
  if (has_forcelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->forcelevel(), target);
  }

  // repeated .TgsProtocol.HeroEquipInfo equip = 5;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equip(i), target);
  }

  // repeated uint32 skillLevel = 6;
  for (int i = 0; i < this->skilllevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->skilllevel(i), target);
  }

  // optional bytes heroName = 7;
  if (has_heroname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->heroname(), target);
  }

  // repeated .TgsProtocol.HeroEquipNew equipNew = 8;
  for (int i = 0; i < this->equipnew_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equipnew(i), target);
  }

  // optional uint32 isFashion = 9;
  if (has_isfashion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->isfashion(), target);
  }

  // optional uint32 postion = 10;
  if (has_postion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->postion(), target);
  }

  // required uint32 effect = 11;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->effect(), target);
  }

  // optional uint32 deificationlevel = 12;
  if (has_deificationlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->deificationlevel(), target);
  }

  // optional uint32 wingslevel = 13;
  if (has_wingslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->wingslevel(), target);
  }

  // optional string attr = 14;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attr().data(), this->attr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->attr(), target);
  }

  // optional uint32 wakeLevel = 15;
  if (has_wakelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->wakelevel(), target);
  }

  // repeated uint32 wakeEquips = 16;
  for (int i = 0; i < this->wakeequips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->wakeequips(i), target);
  }

  // optional .TgsProtocol.WakeAttr property = 17;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->property(), target);
  }

  // optional uint64 effect64 = 18;
  if (has_effect64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->effect64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientBattleHero)
  return target;
}

int ClientBattleHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 templateId = 1;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 evolutionLevel = 3;
    if (has_evolutionlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutionlevel());
    }

    // required uint32 forceLevel = 4;
    if (has_forcelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcelevel());
    }

    // optional bytes heroName = 7;
    if (has_heroname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->heroname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 isFashion = 9;
    if (has_isfashion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfashion());
    }

    // optional uint32 postion = 10;
    if (has_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->postion());
    }

    // required uint32 effect = 11;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect());
    }

    // optional uint32 deificationlevel = 12;
    if (has_deificationlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deificationlevel());
    }

    // optional uint32 wingslevel = 13;
    if (has_wingslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingslevel());
    }

    // optional string attr = 14;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attr());
    }

    // optional uint32 wakeLevel = 15;
    if (has_wakelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wakelevel());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TgsProtocol.WakeAttr property = 17;
    if (has_property()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property());
    }

    // optional uint64 effect64 = 18;
    if (has_effect64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->effect64());
    }

  }
  // repeated .TgsProtocol.HeroEquipInfo equip = 5;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated uint32 skillLevel = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skilllevel(i));
    }
    total_size += 1 * this->skilllevel_size() + data_size;
  }

  // repeated .TgsProtocol.HeroEquipNew equipNew = 8;
  total_size += 1 * this->equipnew_size();
  for (int i = 0; i < this->equipnew_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipnew(i));
  }

  // repeated uint32 wakeEquips = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->wakeequips_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->wakeequips(i));
    }
    total_size += 2 * this->wakeequips_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBattleHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientBattleHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientBattleHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientBattleHero::MergeFrom(const ClientBattleHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  skilllevel_.MergeFrom(from.skilllevel_);
  equipnew_.MergeFrom(from.equipnew_);
  wakeequips_.MergeFrom(from.wakeequips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_evolutionlevel()) {
      set_evolutionlevel(from.evolutionlevel());
    }
    if (from.has_forcelevel()) {
      set_forcelevel(from.forcelevel());
    }
    if (from.has_heroname()) {
      set_heroname(from.heroname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isfashion()) {
      set_isfashion(from.isfashion());
    }
    if (from.has_postion()) {
      set_postion(from.postion());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_deificationlevel()) {
      set_deificationlevel(from.deificationlevel());
    }
    if (from.has_wingslevel()) {
      set_wingslevel(from.wingslevel());
    }
    if (from.has_attr()) {
      set_attr(from.attr());
    }
    if (from.has_wakelevel()) {
      set_wakelevel(from.wakelevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_property()) {
      mutable_property()->::TgsProtocol::WakeAttr::MergeFrom(from.property());
    }
    if (from.has_effect64()) {
      set_effect64(from.effect64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientBattleHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBattleHero::CopyFrom(const ClientBattleHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBattleHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000040f) != 0x0000040f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->equip())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equipnew())) return false;
  if (has_property()) {
    if (!this->property().IsInitialized()) return false;
  }
  return true;
}

void ClientBattleHero::Swap(ClientBattleHero* other) {
  if (other != this) {
    std::swap(templateid_, other->templateid_);
    std::swap(level_, other->level_);
    std::swap(evolutionlevel_, other->evolutionlevel_);
    std::swap(forcelevel_, other->forcelevel_);
    equip_.Swap(&other->equip_);
    skilllevel_.Swap(&other->skilllevel_);
    std::swap(heroname_, other->heroname_);
    equipnew_.Swap(&other->equipnew_);
    std::swap(isfashion_, other->isfashion_);
    std::swap(postion_, other->postion_);
    std::swap(effect_, other->effect_);
    std::swap(deificationlevel_, other->deificationlevel_);
    std::swap(wingslevel_, other->wingslevel_);
    std::swap(attr_, other->attr_);
    std::swap(wakelevel_, other->wakelevel_);
    wakeequips_.Swap(&other->wakeequips_);
    std::swap(property_, other->property_);
    std::swap(effect64_, other->effect64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientBattleHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientBattleHero_descriptor_;
  metadata.reflection = ClientBattleHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildSkill::kIdFieldNumber;
const int GuildSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

GuildSkill::GuildSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildSkill)
}

void GuildSkill::InitAsDefaultInstance() {
}

GuildSkill::GuildSkill(const GuildSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildSkill)
}

void GuildSkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildSkill::~GuildSkill() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildSkill)
  SharedDtor();
}

void GuildSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildSkill_descriptor_;
}

const GuildSkill& GuildSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildSkill* GuildSkill::default_instance_ = NULL;

GuildSkill* GuildSkill::New() const {
  return new GuildSkill;
}

void GuildSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildSkill)
  return false;
#undef DO_
}

void GuildSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildSkill)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildSkill)
}

::google::protobuf::uint8* GuildSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildSkill)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildSkill)
  return target;
}

int GuildSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildSkill::MergeFrom(const GuildSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildSkill::CopyFrom(const GuildSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuildSkill::Swap(GuildSkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildSkill_descriptor_;
  metadata.reflection = GuildSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientBattlePlayer::kCharIdFieldNumber;
const int ClientBattlePlayer::kCharNameFieldNumber;
const int ClientBattlePlayer::kCharLevelFieldNumber;
const int ClientBattlePlayer::kPhotoFieldNumber;
const int ClientBattlePlayer::kEffectFieldNumber;
const int ClientBattlePlayer::kVipLevelFieldNumber;
const int ClientBattlePlayer::kPositionFieldNumber;
const int ClientBattlePlayer::kIsRobotFieldNumber;
const int ClientBattlePlayer::kGuildJobFieldNumber;
const int ClientBattlePlayer::kOnlineFieldNumber;
const int ClientBattlePlayer::kHeroFieldNumber;
const int ClientBattlePlayer::kAssistHeroFieldNumber;
const int ClientBattlePlayer::kGuildSkillFieldNumber;
const int ClientBattlePlayer::kServerIdFieldNumber;
const int ClientBattlePlayer::kServerNameFieldNumber;
const int ClientBattlePlayer::kHandbookFieldNumber;
const int ClientBattlePlayer::kFashionHeroFieldNumber;
const int ClientBattlePlayer::kGuildNameFieldNumber;
const int ClientBattlePlayer::kSteamwinFieldNumber;
const int ClientBattlePlayer::kSecretholeBuffFieldNumber;
const int ClientBattlePlayer::kCheeridFieldNumber;
const int ClientBattlePlayer::kActiveTitleIdFieldNumber;
const int ClientBattlePlayer::kPrivilegeFieldNumber;
const int ClientBattlePlayer::kEffect64FieldNumber;
const int ClientBattlePlayer::kNationalIdFieldNumber;
#endif  // !_MSC_VER

ClientBattlePlayer::ClientBattlePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientBattlePlayer)
}

void ClientBattlePlayer::InitAsDefaultInstance() {
}

ClientBattlePlayer::ClientBattlePlayer(const ClientBattlePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientBattlePlayer)
}

void ClientBattlePlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charlevel_ = 0u;
  photo_ = 0u;
  effect_ = 0u;
  viplevel_ = 0u;
  position_ = 0u;
  isrobot_ = 0u;
  guild_job_ = 0u;
  online_ = false;
  server_id_ = 0u;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamwin_ = 0u;
  cheerid_ = 0u;
  effect64_ = GOOGLE_ULONGLONG(0);
  nationalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBattlePlayer::~ClientBattlePlayer() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientBattlePlayer)
  SharedDtor();
}

void ClientBattlePlayer::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_name_;
  }
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void ClientBattlePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientBattlePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientBattlePlayer_descriptor_;
}

const ClientBattlePlayer& ClientBattlePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientBattlePlayer* ClientBattlePlayer::default_instance_ = NULL;

ClientBattlePlayer* ClientBattlePlayer::New() const {
  return new ClientBattlePlayer;
}

void ClientBattlePlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBattlePlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charlevel_, isrobot_);
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 25344) {
    ZR_(guild_job_, online_);
    server_id_ = 0u;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 9830400) {
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
    steamwin_ = 0u;
    cheerid_ = 0u;
    effect64_ = GOOGLE_ULONGLONG(0);
  }
  nationalid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  hero_.Clear();
  assist_hero_.Clear();
  guild_skill_.Clear();
  handbook_.Clear();
  fashionhero_.Clear();
  secrethole_buff_.Clear();
  activetitleid_.Clear();
  privilege_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientBattlePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientBattlePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charName;
        break;
      }

      // required string charName = 2;
      case 2: {
        if (tag == 18) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charLevel;
        break;
      }

      // required uint32 charLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_charLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charlevel_)));
          set_has_charlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_photo;
        break;
      }

      // required uint32 photo = 4;
      case 4: {
        if (tag == 32) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_effect;
        break;
      }

      // required uint32 effect = 5;
      case 5: {
        if (tag == 40) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vipLevel;
        break;
      }

      // required uint32 vipLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_position;
        break;
      }

      // required uint32 position = 7;
      case 7: {
        if (tag == 56) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_isRobot;
        break;
      }

      // required uint32 isRobot = 8;
      case 8: {
        if (tag == 64) {
         parse_isRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_guild_job;
        break;
      }

      // optional uint32 guild_job = 9;
      case 9: {
        if (tag == 72) {
         parse_guild_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_job_)));
          set_has_guild_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_online;
        break;
      }

      // optional bool online = 10;
      case 10: {
        if (tag == 80) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_hero;
        break;
      }

      // repeated .TgsProtocol.ClientBattleHero hero = 11;
      case 11: {
        if (tag == 90) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_hero;
        if (input->ExpectTag(98)) goto parse_assist_hero;
        break;
      }

      // repeated .TgsProtocol.ClientBattleHero assist_hero = 12;
      case 12: {
        if (tag == 98) {
         parse_assist_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assist_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_assist_hero;
        if (input->ExpectTag(106)) goto parse_guild_skill;
        break;
      }

      // repeated .TgsProtocol.GuildSkill guild_skill = 13;
      case 13: {
        if (tag == 106) {
         parse_guild_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guild_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_guild_skill;
        if (input->ExpectTag(112)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 14;
      case 14: {
        if (tag == 112) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_server_name;
        break;
      }

      // optional string server_name = 15;
      case 15: {
        if (tag == 122) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_handbook;
        break;
      }

      // repeated .TgsProtocol.ClientHandBook handbook = 16;
      case 16: {
        if (tag == 130) {
         parse_handbook:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_handbook()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_handbook;
        if (input->ExpectTag(136)) goto parse_fashionHero;
        break;
      }

      // repeated uint32 fashionHero = 17;
      case 17: {
        if (tag == 136) {
         parse_fashionHero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_fashionhero())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fashionhero())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_fashionHero;
        if (input->ExpectTag(146)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 18;
      case 18: {
        if (tag == 146) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_steamwin;
        break;
      }

      // optional uint32 steamwin = 19;
      case 19: {
        if (tag == 152) {
         parse_steamwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamwin_)));
          set_has_steamwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_secrethole_buff;
        break;
      }

      // repeated uint32 secrethole_buff = 20;
      case 20: {
        if (tag == 160) {
         parse_secrethole_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_secrethole_buff())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_secrethole_buff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_secrethole_buff;
        if (input->ExpectTag(168)) goto parse_cheerid;
        break;
      }

      // optional uint32 cheerid = 21;
      case 21: {
        if (tag == 168) {
         parse_cheerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheerid_)));
          set_has_cheerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_activeTitleId;
        break;
      }

      // repeated uint32 activeTitleId = 22;
      case 22: {
        if (tag == 176) {
         parse_activeTitleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_activetitleid())));
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activetitleid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_activeTitleId;
        if (input->ExpectTag(184)) goto parse_privilege;
        break;
      }

      // repeated bool privilege = 23;
      case 23: {
        if (tag == 184) {
         parse_privilege:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 184, input, this->mutable_privilege())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_privilege())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_privilege;
        if (input->ExpectTag(192)) goto parse_effect64;
        break;
      }

      // optional uint64 effect64 = 24;
      case 24: {
        if (tag == 192) {
         parse_effect64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effect64_)));
          set_has_effect64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_nationalId;
        break;
      }

      // optional uint32 nationalId = 25;
      case 25: {
        if (tag == 200) {
         parse_nationalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nationalid_)));
          set_has_nationalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientBattlePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientBattlePlayer)
  return false;
#undef DO_
}

void ClientBattlePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientBattlePlayer)
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required string charName = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->charname(), output);
  }

  // required uint32 charLevel = 3;
  if (has_charlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charlevel(), output);
  }

  // required uint32 photo = 4;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->photo(), output);
  }

  // required uint32 effect = 5;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->effect(), output);
  }

  // required uint32 vipLevel = 6;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplevel(), output);
  }

  // required uint32 position = 7;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->position(), output);
  }

  // required uint32 isRobot = 8;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->isrobot(), output);
  }

  // optional uint32 guild_job = 9;
  if (has_guild_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->guild_job(), output);
  }

  // optional bool online = 10;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->online(), output);
  }

  // repeated .TgsProtocol.ClientBattleHero hero = 11;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->hero(i), output);
  }

  // repeated .TgsProtocol.ClientBattleHero assist_hero = 12;
  for (int i = 0; i < this->assist_hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->assist_hero(i), output);
  }

  // repeated .TgsProtocol.GuildSkill guild_skill = 13;
  for (int i = 0; i < this->guild_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->guild_skill(i), output);
  }

  // optional uint32 server_id = 14;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->server_id(), output);
  }

  // optional string server_name = 15;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->server_name(), output);
  }

  // repeated .TgsProtocol.ClientHandBook handbook = 16;
  for (int i = 0; i < this->handbook_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->handbook(i), output);
  }

  // repeated uint32 fashionHero = 17;
  for (int i = 0; i < this->fashionhero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->fashionhero(i), output);
  }

  // optional string guild_name = 18;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->guild_name(), output);
  }

  // optional uint32 steamwin = 19;
  if (has_steamwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->steamwin(), output);
  }

  // repeated uint32 secrethole_buff = 20;
  for (int i = 0; i < this->secrethole_buff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->secrethole_buff(i), output);
  }

  // optional uint32 cheerid = 21;
  if (has_cheerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->cheerid(), output);
  }

  // repeated uint32 activeTitleId = 22;
  for (int i = 0; i < this->activetitleid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->activetitleid(i), output);
  }

  // repeated bool privilege = 23;
  for (int i = 0; i < this->privilege_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      23, this->privilege(i), output);
  }

  // optional uint64 effect64 = 24;
  if (has_effect64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->effect64(), output);
  }

  // optional uint32 nationalId = 25;
  if (has_nationalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->nationalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientBattlePlayer)
}

::google::protobuf::uint8* ClientBattlePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientBattlePlayer)
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required string charName = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // required uint32 charLevel = 3;
  if (has_charlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charlevel(), target);
  }

  // required uint32 photo = 4;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->photo(), target);
  }

  // required uint32 effect = 5;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->effect(), target);
  }

  // required uint32 vipLevel = 6;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplevel(), target);
  }

  // required uint32 position = 7;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->position(), target);
  }

  // required uint32 isRobot = 8;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->isrobot(), target);
  }

  // optional uint32 guild_job = 9;
  if (has_guild_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->guild_job(), target);
  }

  // optional bool online = 10;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->online(), target);
  }

  // repeated .TgsProtocol.ClientBattleHero hero = 11;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->hero(i), target);
  }

  // repeated .TgsProtocol.ClientBattleHero assist_hero = 12;
  for (int i = 0; i < this->assist_hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->assist_hero(i), target);
  }

  // repeated .TgsProtocol.GuildSkill guild_skill = 13;
  for (int i = 0; i < this->guild_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->guild_skill(i), target);
  }

  // optional uint32 server_id = 14;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->server_id(), target);
  }

  // optional string server_name = 15;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->server_name(), target);
  }

  // repeated .TgsProtocol.ClientHandBook handbook = 16;
  for (int i = 0; i < this->handbook_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->handbook(i), target);
  }

  // repeated uint32 fashionHero = 17;
  for (int i = 0; i < this->fashionhero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->fashionhero(i), target);
  }

  // optional string guild_name = 18;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->guild_name(), target);
  }

  // optional uint32 steamwin = 19;
  if (has_steamwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->steamwin(), target);
  }

  // repeated uint32 secrethole_buff = 20;
  for (int i = 0; i < this->secrethole_buff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->secrethole_buff(i), target);
  }

  // optional uint32 cheerid = 21;
  if (has_cheerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->cheerid(), target);
  }

  // repeated uint32 activeTitleId = 22;
  for (int i = 0; i < this->activetitleid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->activetitleid(i), target);
  }

  // repeated bool privilege = 23;
  for (int i = 0; i < this->privilege_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(23, this->privilege(i), target);
  }

  // optional uint64 effect64 = 24;
  if (has_effect64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->effect64(), target);
  }

  // optional uint32 nationalId = 25;
  if (has_nationalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->nationalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientBattlePlayer)
  return target;
}

int ClientBattlePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string charName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required uint32 charLevel = 3;
    if (has_charlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charlevel());
    }

    // required uint32 photo = 4;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required uint32 effect = 5;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect());
    }

    // required uint32 vipLevel = 6;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required uint32 position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // required uint32 isRobot = 8;
    if (has_isrobot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isrobot());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 guild_job = 9;
    if (has_guild_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_job());
    }

    // optional bool online = 10;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional uint32 server_id = 14;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional string server_name = 15;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional string guild_name = 18;
    if (has_guild_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional uint32 steamwin = 19;
    if (has_steamwin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamwin());
    }

    // optional uint32 cheerid = 21;
    if (has_cheerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheerid());
    }

    // optional uint64 effect64 = 24;
    if (has_effect64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->effect64());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 nationalId = 25;
    if (has_nationalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nationalid());
    }

  }
  // repeated .TgsProtocol.ClientBattleHero hero = 11;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }

  // repeated .TgsProtocol.ClientBattleHero assist_hero = 12;
  total_size += 1 * this->assist_hero_size();
  for (int i = 0; i < this->assist_hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assist_hero(i));
  }

  // repeated .TgsProtocol.GuildSkill guild_skill = 13;
  total_size += 1 * this->guild_skill_size();
  for (int i = 0; i < this->guild_skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild_skill(i));
  }

  // repeated .TgsProtocol.ClientHandBook handbook = 16;
  total_size += 2 * this->handbook_size();
  for (int i = 0; i < this->handbook_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->handbook(i));
  }

  // repeated uint32 fashionHero = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->fashionhero_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fashionhero(i));
    }
    total_size += 2 * this->fashionhero_size() + data_size;
  }

  // repeated uint32 secrethole_buff = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->secrethole_buff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->secrethole_buff(i));
    }
    total_size += 2 * this->secrethole_buff_size() + data_size;
  }

  // repeated uint32 activeTitleId = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->activetitleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activetitleid(i));
    }
    total_size += 2 * this->activetitleid_size() + data_size;
  }

  // repeated bool privilege = 23;
  {
    int data_size = 0;
    data_size = 1 * this->privilege_size();
    total_size += 2 * this->privilege_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBattlePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientBattlePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientBattlePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientBattlePlayer::MergeFrom(const ClientBattlePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  assist_hero_.MergeFrom(from.assist_hero_);
  guild_skill_.MergeFrom(from.guild_skill_);
  handbook_.MergeFrom(from.handbook_);
  fashionhero_.MergeFrom(from.fashionhero_);
  secrethole_buff_.MergeFrom(from.secrethole_buff_);
  activetitleid_.MergeFrom(from.activetitleid_);
  privilege_.MergeFrom(from.privilege_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_charlevel()) {
      set_charlevel(from.charlevel());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guild_job()) {
      set_guild_job(from.guild_job());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_steamwin()) {
      set_steamwin(from.steamwin());
    }
    if (from.has_cheerid()) {
      set_cheerid(from.cheerid());
    }
    if (from.has_effect64()) {
      set_effect64(from.effect64());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_nationalid()) {
      set_nationalid(from.nationalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientBattlePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBattlePlayer::CopyFrom(const ClientBattlePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBattlePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hero())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->assist_hero())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->guild_skill())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->handbook())) return false;
  return true;
}

void ClientBattlePlayer::Swap(ClientBattlePlayer* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(charlevel_, other->charlevel_);
    std::swap(photo_, other->photo_);
    std::swap(effect_, other->effect_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(position_, other->position_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(guild_job_, other->guild_job_);
    std::swap(online_, other->online_);
    hero_.Swap(&other->hero_);
    assist_hero_.Swap(&other->assist_hero_);
    guild_skill_.Swap(&other->guild_skill_);
    std::swap(server_id_, other->server_id_);
    std::swap(server_name_, other->server_name_);
    handbook_.Swap(&other->handbook_);
    fashionhero_.Swap(&other->fashionhero_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(steamwin_, other->steamwin_);
    secrethole_buff_.Swap(&other->secrethole_buff_);
    std::swap(cheerid_, other->cheerid_);
    activetitleid_.Swap(&other->activetitleid_);
    privilege_.Swap(&other->privilege_);
    std::swap(effect64_, other->effect64_);
    std::swap(nationalid_, other->nationalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientBattlePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientBattlePlayer_descriptor_;
  metadata.reflection = ClientBattlePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRaidTeamHeroInfo::kHeroIndexFieldNumber;
const int ClientRaidTeamHeroInfo::kIsFashionFieldNumber;
const int ClientRaidTeamHeroInfo::kEvolutionLevelFieldNumber;
const int ClientRaidTeamHeroInfo::kForceLevelFieldNumber;
const int ClientRaidTeamHeroInfo::kPositionFieldNumber;
const int ClientRaidTeamHeroInfo::kDeificationlevelFieldNumber;
const int ClientRaidTeamHeroInfo::kWingslevelFieldNumber;
#endif  // !_MSC_VER

ClientRaidTeamHeroInfo::ClientRaidTeamHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientRaidTeamHeroInfo)
}

void ClientRaidTeamHeroInfo::InitAsDefaultInstance() {
}

ClientRaidTeamHeroInfo::ClientRaidTeamHeroInfo(const ClientRaidTeamHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientRaidTeamHeroInfo)
}

void ClientRaidTeamHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  heroindex_ = 0u;
  isfashion_ = 0u;
  evolutionlevel_ = 0u;
  forcelevel_ = 0u;
  position_ = 0u;
  deificationlevel_ = 0u;
  wingslevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRaidTeamHeroInfo::~ClientRaidTeamHeroInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientRaidTeamHeroInfo)
  SharedDtor();
}

void ClientRaidTeamHeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientRaidTeamHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRaidTeamHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRaidTeamHeroInfo_descriptor_;
}

const ClientRaidTeamHeroInfo& ClientRaidTeamHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientRaidTeamHeroInfo* ClientRaidTeamHeroInfo::default_instance_ = NULL;

ClientRaidTeamHeroInfo* ClientRaidTeamHeroInfo::New() const {
  return new ClientRaidTeamHeroInfo;
}

void ClientRaidTeamHeroInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientRaidTeamHeroInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(heroindex_, wingslevel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRaidTeamHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientRaidTeamHeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroindex_)));
          set_has_heroindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isFashion;
        break;
      }

      // required uint32 isFashion = 2;
      case 2: {
        if (tag == 16) {
         parse_isFashion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfashion_)));
          set_has_isfashion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_evolutionLevel;
        break;
      }

      // required uint32 evolutionLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_evolutionLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutionlevel_)));
          set_has_evolutionlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_forceLevel;
        break;
      }

      // required uint32 forceLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_forceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcelevel_)));
          set_has_forcelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_position;
        break;
      }

      // required uint32 position = 5;
      case 5: {
        if (tag == 40) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deificationlevel;
        break;
      }

      // optional uint32 deificationlevel = 6;
      case 6: {
        if (tag == 48) {
         parse_deificationlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deificationlevel_)));
          set_has_deificationlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_wingslevel;
        break;
      }

      // optional uint32 wingslevel = 7;
      case 7: {
        if (tag == 56) {
         parse_wingslevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingslevel_)));
          set_has_wingslevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientRaidTeamHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientRaidTeamHeroInfo)
  return false;
#undef DO_
}

void ClientRaidTeamHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientRaidTeamHeroInfo)
  // required uint32 heroIndex = 1;
  if (has_heroindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroindex(), output);
  }

  // required uint32 isFashion = 2;
  if (has_isfashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isfashion(), output);
  }

  // required uint32 evolutionLevel = 3;
  if (has_evolutionlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->evolutionlevel(), output);
  }

  // required uint32 forceLevel = 4;
  if (has_forcelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->forcelevel(), output);
  }

  // required uint32 position = 5;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->position(), output);
  }

  // optional uint32 deificationlevel = 6;
  if (has_deificationlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deificationlevel(), output);
  }

  // optional uint32 wingslevel = 7;
  if (has_wingslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->wingslevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientRaidTeamHeroInfo)
}

::google::protobuf::uint8* ClientRaidTeamHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientRaidTeamHeroInfo)
  // required uint32 heroIndex = 1;
  if (has_heroindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroindex(), target);
  }

  // required uint32 isFashion = 2;
  if (has_isfashion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isfashion(), target);
  }

  // required uint32 evolutionLevel = 3;
  if (has_evolutionlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->evolutionlevel(), target);
  }

  // required uint32 forceLevel = 4;
  if (has_forcelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->forcelevel(), target);
  }

  // required uint32 position = 5;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->position(), target);
  }

  // optional uint32 deificationlevel = 6;
  if (has_deificationlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deificationlevel(), target);
  }

  // optional uint32 wingslevel = 7;
  if (has_wingslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->wingslevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientRaidTeamHeroInfo)
  return target;
}

int ClientRaidTeamHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroIndex = 1;
    if (has_heroindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroindex());
    }

    // required uint32 isFashion = 2;
    if (has_isfashion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfashion());
    }

    // required uint32 evolutionLevel = 3;
    if (has_evolutionlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutionlevel());
    }

    // required uint32 forceLevel = 4;
    if (has_forcelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcelevel());
    }

    // required uint32 position = 5;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint32 deificationlevel = 6;
    if (has_deificationlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deificationlevel());
    }

    // optional uint32 wingslevel = 7;
    if (has_wingslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingslevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRaidTeamHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRaidTeamHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRaidTeamHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRaidTeamHeroInfo::MergeFrom(const ClientRaidTeamHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroindex()) {
      set_heroindex(from.heroindex());
    }
    if (from.has_isfashion()) {
      set_isfashion(from.isfashion());
    }
    if (from.has_evolutionlevel()) {
      set_evolutionlevel(from.evolutionlevel());
    }
    if (from.has_forcelevel()) {
      set_forcelevel(from.forcelevel());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_deificationlevel()) {
      set_deificationlevel(from.deificationlevel());
    }
    if (from.has_wingslevel()) {
      set_wingslevel(from.wingslevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRaidTeamHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRaidTeamHeroInfo::CopyFrom(const ClientRaidTeamHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRaidTeamHeroInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ClientRaidTeamHeroInfo::Swap(ClientRaidTeamHeroInfo* other) {
  if (other != this) {
    std::swap(heroindex_, other->heroindex_);
    std::swap(isfashion_, other->isfashion_);
    std::swap(evolutionlevel_, other->evolutionlevel_);
    std::swap(forcelevel_, other->forcelevel_);
    std::swap(position_, other->position_);
    std::swap(deificationlevel_, other->deificationlevel_);
    std::swap(wingslevel_, other->wingslevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRaidTeamHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRaidTeamHeroInfo_descriptor_;
  metadata.reflection = ClientRaidTeamHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRaidTeamInfo::kCharIdFieldNumber;
const int ClientRaidTeamInfo::kCharNameFieldNumber;
const int ClientRaidTeamInfo::kPhotoFieldNumber;
const int ClientRaidTeamInfo::kCharLevelFieldNumber;
const int ClientRaidTeamInfo::kEffectFieldNumber;
const int ClientRaidTeamInfo::kVipLevelFieldNumber;
const int ClientRaidTeamInfo::kGuildNameFieldNumber;
const int ClientRaidTeamInfo::kBSendFieldNumber;
const int ClientRaidTeamInfo::kReceiveFieldNumber;
const int ClientRaidTeamInfo::kLoginTimeFieldNumber;
const int ClientRaidTeamInfo::kHeroFieldNumber;
const int ClientRaidTeamInfo::kNationalIdFieldNumber;
#endif  // !_MSC_VER

ClientRaidTeamInfo::ClientRaidTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientRaidTeamInfo)
}

void ClientRaidTeamInfo::InitAsDefaultInstance() {
}

ClientRaidTeamInfo::ClientRaidTeamInfo(const ClientRaidTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientRaidTeamInfo)
}

void ClientRaidTeamInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_ = 0u;
  charlevel_ = 0u;
  effect_ = GOOGLE_ULONGLONG(0);
  viplevel_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bsend_ = false;
  receive_ = 0u;
  logintime_ = 0u;
  nationalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRaidTeamInfo::~ClientRaidTeamInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientRaidTeamInfo)
  SharedDtor();
}

void ClientRaidTeamInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void ClientRaidTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRaidTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRaidTeamInfo_descriptor_;
}

const ClientRaidTeamInfo& ClientRaidTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientRaidTeamInfo* ClientRaidTeamInfo::default_instance_ = NULL;

ClientRaidTeamInfo* ClientRaidTeamInfo::New() const {
  return new ClientRaidTeamInfo;
}

void ClientRaidTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientRaidTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(photo_, effect_);
    ZR_(viplevel_, bsend_);
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 2816) {
    ZR_(receive_, logintime_);
    nationalid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRaidTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientRaidTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charName;
        break;
      }

      // required bytes charName = 2;
      case 2: {
        if (tag == 18) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_photo;
        break;
      }

      // required uint32 photo = 3;
      case 3: {
        if (tag == 24) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charLevel;
        break;
      }

      // required uint32 charLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_charLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charlevel_)));
          set_has_charlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_effect;
        break;
      }

      // required uint64 effect = 5;
      case 5: {
        if (tag == 40) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vipLevel;
        break;
      }

      // required uint32 vipLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_guildName;
        break;
      }

      // required bytes guildName = 7;
      case 7: {
        if (tag == 58) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guildname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bSend;
        break;
      }

      // required bool bSend = 8;
      case 8: {
        if (tag == 64) {
         parse_bSend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsend_)));
          set_has_bsend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_receive;
        break;
      }

      // required uint32 receive = 9;
      case 9: {
        if (tag == 72) {
         parse_receive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receive_)));
          set_has_receive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_loginTime;
        break;
      }

      // required uint32 loginTime = 10;
      case 10: {
        if (tag == 80) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_hero;
        break;
      }

      // repeated .TgsProtocol.ClientRaidTeamHeroInfo hero = 11;
      case 11: {
        if (tag == 90) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_hero;
        if (input->ExpectTag(96)) goto parse_nationalId;
        break;
      }

      // optional uint32 nationalId = 12;
      case 12: {
        if (tag == 96) {
         parse_nationalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nationalid_)));
          set_has_nationalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientRaidTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientRaidTeamInfo)
  return false;
#undef DO_
}

void ClientRaidTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientRaidTeamInfo)
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required bytes charName = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->charname(), output);
  }

  // required uint32 photo = 3;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->photo(), output);
  }

  // required uint32 charLevel = 4;
  if (has_charlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charlevel(), output);
  }

  // required uint64 effect = 5;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->effect(), output);
  }

  // required uint32 vipLevel = 6;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplevel(), output);
  }

  // required bytes guildName = 7;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->guildname(), output);
  }

  // required bool bSend = 8;
  if (has_bsend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bsend(), output);
  }

  // required uint32 receive = 9;
  if (has_receive()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->receive(), output);
  }

  // required uint32 loginTime = 10;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->logintime(), output);
  }

  // repeated .TgsProtocol.ClientRaidTeamHeroInfo hero = 11;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->hero(i), output);
  }

  // optional uint32 nationalId = 12;
  if (has_nationalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->nationalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientRaidTeamInfo)
}

::google::protobuf::uint8* ClientRaidTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientRaidTeamInfo)
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required bytes charName = 2;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->charname(), target);
  }

  // required uint32 photo = 3;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->photo(), target);
  }

  // required uint32 charLevel = 4;
  if (has_charlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charlevel(), target);
  }

  // required uint64 effect = 5;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->effect(), target);
  }

  // required uint32 vipLevel = 6;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplevel(), target);
  }

  // required bytes guildName = 7;
  if (has_guildname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->guildname(), target);
  }

  // required bool bSend = 8;
  if (has_bsend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bsend(), target);
  }

  // required uint32 receive = 9;
  if (has_receive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->receive(), target);
  }

  // required uint32 loginTime = 10;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->logintime(), target);
  }

  // repeated .TgsProtocol.ClientRaidTeamHeroInfo hero = 11;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->hero(i), target);
  }

  // optional uint32 nationalId = 12;
  if (has_nationalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->nationalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientRaidTeamInfo)
  return target;
}

int ClientRaidTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bytes charName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // required uint32 photo = 3;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required uint32 charLevel = 4;
    if (has_charlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charlevel());
    }

    // required uint64 effect = 5;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->effect());
    }

    // required uint32 vipLevel = 6;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required bytes guildName = 7;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guildname());
    }

    // required bool bSend = 8;
    if (has_bsend()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 receive = 9;
    if (has_receive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receive());
    }

    // required uint32 loginTime = 10;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintime());
    }

    // optional uint32 nationalId = 12;
    if (has_nationalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nationalid());
    }

  }
  // repeated .TgsProtocol.ClientRaidTeamHeroInfo hero = 11;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRaidTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRaidTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRaidTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRaidTeamInfo::MergeFrom(const ClientRaidTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_charlevel()) {
      set_charlevel(from.charlevel());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_bsend()) {
      set_bsend(from.bsend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_receive()) {
      set_receive(from.receive());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_nationalid()) {
      set_nationalid(from.nationalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRaidTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRaidTeamInfo::CopyFrom(const ClientRaidTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRaidTeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hero())) return false;
  return true;
}

void ClientRaidTeamInfo::Swap(ClientRaidTeamInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(photo_, other->photo_);
    std::swap(charlevel_, other->charlevel_);
    std::swap(effect_, other->effect_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(guildname_, other->guildname_);
    std::swap(bsend_, other->bsend_);
    std::swap(receive_, other->receive_);
    std::swap(logintime_, other->logintime_);
    hero_.Swap(&other->hero_);
    std::swap(nationalid_, other->nationalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRaidTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRaidTeamInfo_descriptor_;
  metadata.reflection = ClientRaidTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TodayTime::kBeginTimeFieldNumber;
const int TodayTime::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TodayTime::TodayTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.TodayTime)
}

void TodayTime::InitAsDefaultInstance() {
}

TodayTime::TodayTime(const TodayTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.TodayTime)
}

void TodayTime::SharedCtor() {
  _cached_size_ = 0;
  begintime_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TodayTime::~TodayTime() {
  // @@protoc_insertion_point(destructor:TgsProtocol.TodayTime)
  SharedDtor();
}

void TodayTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TodayTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TodayTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TodayTime_descriptor_;
}

const TodayTime& TodayTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

TodayTime* TodayTime::default_instance_ = NULL;

TodayTime* TodayTime::New() const {
  return new TodayTime;
}

void TodayTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TodayTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(begintime_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TodayTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.TodayTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 beginTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // required uint32 endTime = 2;
      case 2: {
        if (tag == 16) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.TodayTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.TodayTime)
  return false;
#undef DO_
}

void TodayTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.TodayTime)
  // required uint32 beginTime = 1;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->begintime(), output);
  }

  // required uint32 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.TodayTime)
}

::google::protobuf::uint8* TodayTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.TodayTime)
  // required uint32 beginTime = 1;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->begintime(), target);
  }

  // required uint32 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.TodayTime)
  return target;
}

int TodayTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 beginTime = 1;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // required uint32 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TodayTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TodayTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TodayTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TodayTime::MergeFrom(const TodayTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TodayTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TodayTime::CopyFrom(const TodayTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodayTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TodayTime::Swap(TodayTime* other) {
  if (other != this) {
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TodayTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TodayTime_descriptor_;
  metadata.reflection = TodayTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SourceList::kSourceFieldNumber;
#endif  // !_MSC_VER

SourceList::SourceList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.SourceList)
}

void SourceList::InitAsDefaultInstance() {
}

SourceList::SourceList(const SourceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.SourceList)
}

void SourceList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SourceList::~SourceList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.SourceList)
  SharedDtor();
}

void SourceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SourceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SourceList_descriptor_;
}

const SourceList& SourceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

SourceList* SourceList::default_instance_ = NULL;

SourceList* SourceList::New() const {
  return new SourceList;
}

void SourceList::Clear() {
  source_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SourceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.SourceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.ClientSource source = 1;
      case 1: {
        if (tag == 10) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_source;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.SourceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.SourceList)
  return false;
#undef DO_
}

void SourceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.SourceList)
  // repeated .TgsProtocol.ClientSource source = 1;
  for (int i = 0; i < this->source_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->source(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.SourceList)
}

::google::protobuf::uint8* SourceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.SourceList)
  // repeated .TgsProtocol.ClientSource source = 1;
  for (int i = 0; i < this->source_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->source(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.SourceList)
  return target;
}

int SourceList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.ClientSource source = 1;
  total_size += 1 * this->source_size();
  for (int i = 0; i < this->source_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->source(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SourceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SourceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SourceList::MergeFrom(const SourceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  source_.MergeFrom(from.source_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SourceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceList::CopyFrom(const SourceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->source())) return false;
  return true;
}

void SourceList::Swap(SourceList* other) {
  if (other != this) {
    source_.Swap(&other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SourceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SourceList_descriptor_;
  metadata.reflection = SourceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientMonthCard::kIndexFieldNumber;
const int ClientMonthCard::kStartTimeFieldNumber;
const int ClientMonthCard::kGetTimeFieldNumber;
#endif  // !_MSC_VER

ClientMonthCard::ClientMonthCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientMonthCard)
}

void ClientMonthCard::InitAsDefaultInstance() {
}

ClientMonthCard::ClientMonthCard(const ClientMonthCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientMonthCard)
}

void ClientMonthCard::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  starttime_ = 0u;
  gettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMonthCard::~ClientMonthCard() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientMonthCard)
  SharedDtor();
}

void ClientMonthCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientMonthCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMonthCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMonthCard_descriptor_;
}

const ClientMonthCard& ClientMonthCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientMonthCard* ClientMonthCard::default_instance_ = NULL;

ClientMonthCard* ClientMonthCard::New() const {
  return new ClientMonthCard;
}

void ClientMonthCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientMonthCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, gettime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMonthCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientMonthCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startTime;
        break;
      }

      // required uint32 startTime = 2;
      case 2: {
        if (tag == 16) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_getTime;
        break;
      }

      // required uint32 getTime = 3;
      case 3: {
        if (tag == 24) {
         parse_getTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gettime_)));
          set_has_gettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientMonthCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientMonthCard)
  return false;
#undef DO_
}

void ClientMonthCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientMonthCard)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starttime(), output);
  }

  // required uint32 getTime = 3;
  if (has_gettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientMonthCard)
}

::google::protobuf::uint8* ClientMonthCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientMonthCard)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 startTime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starttime(), target);
  }

  // required uint32 getTime = 3;
  if (has_gettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientMonthCard)
  return target;
}

int ClientMonthCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 startTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 getTime = 3;
    if (has_gettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMonthCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMonthCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMonthCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMonthCard::MergeFrom(const ClientMonthCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_gettime()) {
      set_gettime(from.gettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMonthCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMonthCard::CopyFrom(const ClientMonthCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMonthCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientMonthCard::Swap(ClientMonthCard* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(starttime_, other->starttime_);
    std::swap(gettime_, other->gettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMonthCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMonthCard_descriptor_;
  metadata.reflection = ClientMonthCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientItemLimit::kIdFieldNumber;
const int ClientItemLimit::kLimitFieldNumber;
const int ClientItemLimit::kGotFieldNumber;
#endif  // !_MSC_VER

ClientItemLimit::ClientItemLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientItemLimit)
}

void ClientItemLimit::InitAsDefaultInstance() {
}

ClientItemLimit::ClientItemLimit(const ClientItemLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientItemLimit)
}

void ClientItemLimit::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  limit_ = 0u;
  got_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientItemLimit::~ClientItemLimit() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientItemLimit)
  SharedDtor();
}

void ClientItemLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientItemLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientItemLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientItemLimit_descriptor_;
}

const ClientItemLimit& ClientItemLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientItemLimit* ClientItemLimit::default_instance_ = NULL;

ClientItemLimit* ClientItemLimit::New() const {
  return new ClientItemLimit;
}

void ClientItemLimit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientItemLimit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, got_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientItemLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientItemLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // required uint32 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_got;
        break;
      }

      // required uint32 got = 3;
      case 3: {
        if (tag == 24) {
         parse_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &got_)));
          set_has_got();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientItemLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientItemLimit)
  return false;
#undef DO_
}

void ClientItemLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientItemLimit)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // required uint32 got = 3;
  if (has_got()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->got(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientItemLimit)
}

::google::protobuf::uint8* ClientItemLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientItemLimit)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // required uint32 got = 3;
  if (has_got()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->got(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientItemLimit)
  return target;
}

int ClientItemLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // required uint32 got = 3;
    if (has_got()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->got());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientItemLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientItemLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientItemLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientItemLimit::MergeFrom(const ClientItemLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_got()) {
      set_got(from.got());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientItemLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientItemLimit::CopyFrom(const ClientItemLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientItemLimit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientItemLimit::Swap(ClientItemLimit* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(limit_, other->limit_);
    std::swap(got_, other->got_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientItemLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientItemLimit_descriptor_;
  metadata.reflection = ClientItemLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LString::kStrFieldNumber;
const int LString::kTypeFieldNumber;
#endif  // !_MSC_VER

LString::LString()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LString)
}

void LString::InitAsDefaultInstance() {
}

LString::LString(const LString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LString)
}

void LString::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LString::~LString() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LString)
  SharedDtor();
}

void LString::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void LString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LString_descriptor_;
}

const LString& LString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

LString* LString::default_instance_ = NULL;

LString* LString::New() const {
  return new LString;
}

void LString::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LString)
  return false;
#undef DO_
}

void LString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LString)
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LString)
}

::google::protobuf::uint8* LString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LString)
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LString)
  return target;
}

int LString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LString::MergeFrom(const LString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LString::CopyFrom(const LString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LString::Swap(LString* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LString_descriptor_;
  metadata.reflection = LString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntList::kValueFieldNumber;
#endif  // !_MSC_VER

IntList::IntList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.IntList)
}

void IntList::InitAsDefaultInstance() {
}

IntList::IntList(const IntList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.IntList)
}

void IntList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntList::~IntList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.IntList)
  SharedDtor();
}

void IntList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntList_descriptor_;
}

const IntList& IntList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

IntList* IntList::default_instance_ = NULL;

IntList* IntList::New() const {
  return new IntList;
}

void IntList::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.IntList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 value = 1;
      case 1: {
        if (tag == 8) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_value())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.IntList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.IntList)
  return false;
#undef DO_
}

void IntList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.IntList)
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.IntList)
}

::google::protobuf::uint8* IntList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.IntList)
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.IntList)
  return target;
}

int IntList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntList::MergeFrom(const IntList& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntList::CopyFrom(const IntList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntList::IsInitialized() const {

  return true;
}

void IntList::Swap(IntList* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntList_descriptor_;
  metadata.reflection = IntList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientActivity::kIdFieldNumber;
const int ClientActivity::kClosedFieldNumber;
const int ClientActivity::kOpentypeFieldNumber;
const int ClientActivity::kActypeFieldNumber;
const int ClientActivity::kShowBeginTimeFieldNumber;
const int ClientActivity::kShowEndTimeFieldNumber;
const int ClientActivity::kBeginTimeFieldNumber;
const int ClientActivity::kEndTimeFieldNumber;
const int ClientActivity::kPlayerLevFieldNumber;
const int ClientActivity::kNameFieldNumber;
const int ClientActivity::kDescFieldNumber;
const int ClientActivity::kTodayTimesFieldNumber;
const int ClientActivity::kValuesFieldNumber;
const int ClientActivity::kRewardsFieldNumber;
const int ClientActivity::kRewardGotFieldNumber;
const int ClientActivity::kValueFieldNumber;
const int ClientActivity::kChildDescFieldNumber;
const int ClientActivity::kShareValuesFieldNumber;
const int ClientActivity::kValues2FieldNumber;
const int ClientActivity::kShareTexFieldNumber;
const int ClientActivity::kIconFieldNumber;
const int ClientActivity::kActivetimeFieldNumber;
const int ClientActivity::kCountdownFieldNumber;
const int ClientActivity::kCardFieldNumber;
const int ClientActivity::kSequenceFieldNumber;
const int ClientActivity::kGlobalItemLimitFieldNumber;
const int ClientActivity::kPlayerItemLimitFieldNumber;
const int ClientActivity::kGetTimesFieldNumber;
const int ClientActivity::kEveryValuesFieldNumber;
const int ClientActivity::kEveryDoneValuesFieldNumber;
const int ClientActivity::kNameLFieldNumber;
const int ClientActivity::kDescLFieldNumber;
const int ClientActivity::kChildDescLFieldNumber;
const int ClientActivity::kIntNumberFieldNumber;
const int ClientActivity::kIntNumberListFieldNumber;
const int ClientActivity::kMailidFieldNumber;
const int ClientActivity::kChild2DescLFieldNumber;
const int ClientActivity::kIconIndexFieldNumber;
const int ClientActivity::kExpandFieldNumber;
#endif  // !_MSC_VER

ClientActivity::ClientActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientActivity)
}

void ClientActivity::InitAsDefaultInstance() {
  name_l_ = const_cast< ::TgsProtocol::LString*>(&::TgsProtocol::LString::default_instance());
  desc_l_ = const_cast< ::TgsProtocol::LString*>(&::TgsProtocol::LString::default_instance());
}

ClientActivity::ClientActivity(const ClientActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientActivity)
}

void ClientActivity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  closed_ = 0u;
  opentype_ = 0u;
  actype_ = 0u;
  showbegintime_ = 0u;
  showendtime_ = 0u;
  begintime_ = 0u;
  endtime_ = 0u;
  playerlev_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0u;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetime_ = 0u;
  countdown_ = 0u;
  sequence_ = 0u;
  name_l_ = NULL;
  desc_l_ = NULL;
  iconindex_ = 0u;
  expand_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientActivity::~ClientActivity() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientActivity)
  SharedDtor();
}

void ClientActivity::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (this != default_instance_) {
    delete name_l_;
    delete desc_l_;
  }
}

void ClientActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientActivity_descriptor_;
}

const ClientActivity& ClientActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientActivity* ClientActivity::default_instance_ = NULL;

ClientActivity* ClientActivity::New() const {
  return new ClientActivity;
}

void ClientActivity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientActivity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, endtime_);
  }
  if (_has_bits_[8 / 32] & 34560) {
    ZR_(playerlev_, value_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 7340032) {
    ZR_(activetime_, countdown_);
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 3238002688) {
    sequence_ = 0u;
    if (has_name_l()) {
      if (name_l_ != NULL) name_l_->::TgsProtocol::LString::Clear();
    }
    if (has_desc_l()) {
      if (desc_l_ != NULL) desc_l_->::TgsProtocol::LString::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 96) {
    iconindex_ = 0u;
    expand_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  todaytimes_.Clear();
  values_.Clear();
  rewards_.Clear();
  rewardgot_.Clear();
  childdesc_.Clear();
  sharevalues_.Clear();
  values2_.Clear();
  sharetex_.Clear();
  card_.Clear();
  globalitemlimit_.Clear();
  playeritemlimit_.Clear();
  gettimes_.Clear();
  everyvalues_.Clear();
  everydonevalues_.Clear();
  childdesc_l_.Clear();
  intnumber_.Clear();
  intnumberlist_.Clear();
  mailid_.Clear();
  child2desc_l_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_closed;
        break;
      }

      // optional uint32 closed = 2;
      case 2: {
        if (tag == 16) {
         parse_closed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closed_)));
          set_has_closed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opentype;
        break;
      }

      // optional uint32 opentype = 3;
      case 3: {
        if (tag == 24) {
         parse_opentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opentype_)));
          set_has_opentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_actype;
        break;
      }

      // optional uint32 actype = 4;
      case 4: {
        if (tag == 32) {
         parse_actype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actype_)));
          set_has_actype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_showBeginTime;
        break;
      }

      // optional uint32 showBeginTime = 5;
      case 5: {
        if (tag == 40) {
         parse_showBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showbegintime_)));
          set_has_showbegintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_showEndTime;
        break;
      }

      // optional uint32 showEndTime = 6;
      case 6: {
        if (tag == 48) {
         parse_showEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showendtime_)));
          set_has_showendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_beginTime;
        break;
      }

      // optional uint32 beginTime = 7;
      case 7: {
        if (tag == 56) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_endTime;
        break;
      }

      // optional uint32 endTime = 8;
      case 8: {
        if (tag == 64) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_playerLev;
        break;
      }

      // optional uint32 playerLev = 9;
      case 9: {
        if (tag == 72) {
         parse_playerLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerlev_)));
          set_has_playerlev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_name;
        break;
      }

      // optional string name = 10;
      case 10: {
        if (tag == 82) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_desc;
        break;
      }

      // optional string desc = 11;
      case 11: {
        if (tag == 90) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_todayTimes;
        break;
      }

      // repeated .TgsProtocol.TodayTime todayTimes = 12;
      case 12: {
        if (tag == 98) {
         parse_todayTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_todaytimes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_todayTimes;
        if (input->ExpectTag(104)) goto parse_values;
        break;
      }

      // repeated uint32 values = 13;
      case 13: {
        if (tag == 104) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_values())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_values;
        if (input->ExpectTag(114)) goto parse_rewards;
        break;
      }

      // repeated .TgsProtocol.SourceList rewards = 14;
      case 14: {
        if (tag == 114) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_rewards;
        if (input->ExpectTag(120)) goto parse_rewardGot;
        break;
      }

      // repeated uint32 rewardGot = 15;
      case 15: {
        if (tag == 120) {
         parse_rewardGot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_rewardgot())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardgot())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_rewardGot;
        if (input->ExpectTag(128)) goto parse_value;
        break;
      }

      // optional uint32 value = 16;
      case 16: {
        if (tag == 128) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_childDesc;
        break;
      }

      // repeated string childDesc = 17;
      case 17: {
        if (tag == 138) {
         parse_childDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_childdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->childdesc(this->childdesc_size() - 1).data(),
            this->childdesc(this->childdesc_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "childdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_childDesc;
        if (input->ExpectTag(144)) goto parse_shareValues;
        break;
      }

      // repeated uint32 shareValues = 18;
      case 18: {
        if (tag == 144) {
         parse_shareValues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_sharevalues())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sharevalues())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_shareValues;
        if (input->ExpectTag(154)) goto parse_values2;
        break;
      }

      // repeated .TgsProtocol.SourceList values2 = 19;
      case 19: {
        if (tag == 154) {
         parse_values2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_values2;
        if (input->ExpectTag(162)) goto parse_shareTex;
        break;
      }

      // repeated string shareTex = 20;
      case 20: {
        if (tag == 162) {
         parse_shareTex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sharetex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sharetex(this->sharetex_size() - 1).data(),
            this->sharetex(this->sharetex_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sharetex");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_shareTex;
        if (input->ExpectTag(170)) goto parse_icon;
        break;
      }

      // optional string icon = 21;
      case 21: {
        if (tag == 170) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_activetime;
        break;
      }

      // optional uint32 activetime = 22;
      case 22: {
        if (tag == 176) {
         parse_activetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activetime_)));
          set_has_activetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_countdown;
        break;
      }

      // optional uint32 countdown = 23;
      case 23: {
        if (tag == 184) {
         parse_countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_card;
        break;
      }

      // repeated .TgsProtocol.ClientMonthCard card = 24;
      case 24: {
        if (tag == 194) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_card;
        if (input->ExpectTag(200)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 25;
      case 25: {
        if (tag == 200) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_globalItemLimit;
        break;
      }

      // repeated .TgsProtocol.ClientItemLimit globalItemLimit = 26;
      case 26: {
        if (tag == 210) {
         parse_globalItemLimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_globalitemlimit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_globalItemLimit;
        if (input->ExpectTag(218)) goto parse_playerItemLimit;
        break;
      }

      // repeated .TgsProtocol.ClientItemLimit playerItemLimit = 27;
      case 27: {
        if (tag == 218) {
         parse_playerItemLimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playeritemlimit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_playerItemLimit;
        if (input->ExpectTag(224)) goto parse_getTimes;
        break;
      }

      // repeated uint32 getTimes = 28;
      case 28: {
        if (tag == 224) {
         parse_getTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 224, input, this->mutable_gettimes())));
        } else if (tag == 226) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gettimes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_getTimes;
        if (input->ExpectTag(232)) goto parse_everyValues;
        break;
      }

      // repeated uint32 everyValues = 29;
      case 29: {
        if (tag == 232) {
         parse_everyValues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 232, input, this->mutable_everyvalues())));
        } else if (tag == 234) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_everyvalues())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_everyValues;
        if (input->ExpectTag(240)) goto parse_everyDoneValues;
        break;
      }

      // repeated uint32 everyDoneValues = 30;
      case 30: {
        if (tag == 240) {
         parse_everyDoneValues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 240, input, this->mutable_everydonevalues())));
        } else if (tag == 242) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_everydonevalues())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_everyDoneValues;
        if (input->ExpectTag(250)) goto parse_name_l;
        break;
      }

      // optional .TgsProtocol.LString name_l = 31;
      case 31: {
        if (tag == 250) {
         parse_name_l:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name_l()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_desc_l;
        break;
      }

      // optional .TgsProtocol.LString desc_l = 32;
      case 32: {
        if (tag == 258) {
         parse_desc_l:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desc_l()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_childDesc_l;
        break;
      }

      // repeated .TgsProtocol.LString childDesc_l = 33;
      case 33: {
        if (tag == 266) {
         parse_childDesc_l:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_childdesc_l()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_childDesc_l;
        if (input->ExpectTag(272)) goto parse_intNumber;
        break;
      }

      // repeated uint32 intNumber = 34;
      case 34: {
        if (tag == 272) {
         parse_intNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 272, input, this->mutable_intnumber())));
        } else if (tag == 274) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_intnumber())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_intNumber;
        if (input->ExpectTag(282)) goto parse_intNumberList;
        break;
      }

      // repeated .TgsProtocol.IntList intNumberList = 35;
      case 35: {
        if (tag == 282) {
         parse_intNumberList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intnumberlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_intNumberList;
        if (input->ExpectTag(288)) goto parse_mailid;
        break;
      }

      // repeated uint32 mailid = 36;
      case 36: {
        if (tag == 288) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 288, input, this->mutable_mailid())));
        } else if (tag == 290) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mailid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_mailid;
        if (input->ExpectTag(298)) goto parse_child2Desc_l;
        break;
      }

      // repeated .TgsProtocol.LString child2Desc_l = 37;
      case 37: {
        if (tag == 298) {
         parse_child2Desc_l:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child2desc_l()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_child2Desc_l;
        if (input->ExpectTag(304)) goto parse_iconIndex;
        break;
      }

      // optional uint32 iconIndex = 38;
      case 38: {
        if (tag == 304) {
         parse_iconIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iconindex_)));
          set_has_iconindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_expand;
        break;
      }

      // optional uint32 expand = 39;
      case 39: {
        if (tag == 312) {
         parse_expand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expand_)));
          set_has_expand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientActivity)
  return false;
#undef DO_
}

void ClientActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientActivity)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 closed = 2;
  if (has_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->closed(), output);
  }

  // optional uint32 opentype = 3;
  if (has_opentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opentype(), output);
  }

  // optional uint32 actype = 4;
  if (has_actype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->actype(), output);
  }

  // optional uint32 showBeginTime = 5;
  if (has_showbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->showbegintime(), output);
  }

  // optional uint32 showEndTime = 6;
  if (has_showendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->showendtime(), output);
  }

  // optional uint32 beginTime = 7;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->begintime(), output);
  }

  // optional uint32 endTime = 8;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->endtime(), output);
  }

  // optional uint32 playerLev = 9;
  if (has_playerlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->playerlev(), output);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional string desc = 11;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->desc(), output);
  }

  // repeated .TgsProtocol.TodayTime todayTimes = 12;
  for (int i = 0; i < this->todaytimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->todaytimes(i), output);
  }

  // repeated uint32 values = 13;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->values(i), output);
  }

  // repeated .TgsProtocol.SourceList rewards = 14;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->rewards(i), output);
  }

  // repeated uint32 rewardGot = 15;
  for (int i = 0; i < this->rewardgot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->rewardgot(i), output);
  }

  // optional uint32 value = 16;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->value(), output);
  }

  // repeated string childDesc = 17;
  for (int i = 0; i < this->childdesc_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->childdesc(i).data(), this->childdesc(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "childdesc");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->childdesc(i), output);
  }

  // repeated uint32 shareValues = 18;
  for (int i = 0; i < this->sharevalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->sharevalues(i), output);
  }

  // repeated .TgsProtocol.SourceList values2 = 19;
  for (int i = 0; i < this->values2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->values2(i), output);
  }

  // repeated string shareTex = 20;
  for (int i = 0; i < this->sharetex_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->sharetex(i).data(), this->sharetex(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "sharetex");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->sharetex(i), output);
  }

  // optional string icon = 21;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->icon(), output);
  }

  // optional uint32 activetime = 22;
  if (has_activetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->activetime(), output);
  }

  // optional uint32 countdown = 23;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->countdown(), output);
  }

  // repeated .TgsProtocol.ClientMonthCard card = 24;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->card(i), output);
  }

  // optional uint32 sequence = 25;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->sequence(), output);
  }

  // repeated .TgsProtocol.ClientItemLimit globalItemLimit = 26;
  for (int i = 0; i < this->globalitemlimit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->globalitemlimit(i), output);
  }

  // repeated .TgsProtocol.ClientItemLimit playerItemLimit = 27;
  for (int i = 0; i < this->playeritemlimit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->playeritemlimit(i), output);
  }

  // repeated uint32 getTimes = 28;
  for (int i = 0; i < this->gettimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      28, this->gettimes(i), output);
  }

  // repeated uint32 everyValues = 29;
  for (int i = 0; i < this->everyvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      29, this->everyvalues(i), output);
  }

  // repeated uint32 everyDoneValues = 30;
  for (int i = 0; i < this->everydonevalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      30, this->everydonevalues(i), output);
  }

  // optional .TgsProtocol.LString name_l = 31;
  if (has_name_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->name_l(), output);
  }

  // optional .TgsProtocol.LString desc_l = 32;
  if (has_desc_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->desc_l(), output);
  }

  // repeated .TgsProtocol.LString childDesc_l = 33;
  for (int i = 0; i < this->childdesc_l_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->childdesc_l(i), output);
  }

  // repeated uint32 intNumber = 34;
  for (int i = 0; i < this->intnumber_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      34, this->intnumber(i), output);
  }

  // repeated .TgsProtocol.IntList intNumberList = 35;
  for (int i = 0; i < this->intnumberlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->intnumberlist(i), output);
  }

  // repeated uint32 mailid = 36;
  for (int i = 0; i < this->mailid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      36, this->mailid(i), output);
  }

  // repeated .TgsProtocol.LString child2Desc_l = 37;
  for (int i = 0; i < this->child2desc_l_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->child2desc_l(i), output);
  }

  // optional uint32 iconIndex = 38;
  if (has_iconindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->iconindex(), output);
  }

  // optional uint32 expand = 39;
  if (has_expand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->expand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientActivity)
}

::google::protobuf::uint8* ClientActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientActivity)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 closed = 2;
  if (has_closed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->closed(), target);
  }

  // optional uint32 opentype = 3;
  if (has_opentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opentype(), target);
  }

  // optional uint32 actype = 4;
  if (has_actype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->actype(), target);
  }

  // optional uint32 showBeginTime = 5;
  if (has_showbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->showbegintime(), target);
  }

  // optional uint32 showEndTime = 6;
  if (has_showendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->showendtime(), target);
  }

  // optional uint32 beginTime = 7;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->begintime(), target);
  }

  // optional uint32 endTime = 8;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->endtime(), target);
  }

  // optional uint32 playerLev = 9;
  if (has_playerlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->playerlev(), target);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string desc = 11;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->desc(), target);
  }

  // repeated .TgsProtocol.TodayTime todayTimes = 12;
  for (int i = 0; i < this->todaytimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->todaytimes(i), target);
  }

  // repeated uint32 values = 13;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->values(i), target);
  }

  // repeated .TgsProtocol.SourceList rewards = 14;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->rewards(i), target);
  }

  // repeated uint32 rewardGot = 15;
  for (int i = 0; i < this->rewardgot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->rewardgot(i), target);
  }

  // optional uint32 value = 16;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->value(), target);
  }

  // repeated string childDesc = 17;
  for (int i = 0; i < this->childdesc_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->childdesc(i).data(), this->childdesc(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "childdesc");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->childdesc(i), target);
  }

  // repeated uint32 shareValues = 18;
  for (int i = 0; i < this->sharevalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->sharevalues(i), target);
  }

  // repeated .TgsProtocol.SourceList values2 = 19;
  for (int i = 0; i < this->values2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->values2(i), target);
  }

  // repeated string shareTex = 20;
  for (int i = 0; i < this->sharetex_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sharetex(i).data(), this->sharetex(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sharetex");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->sharetex(i), target);
  }

  // optional string icon = 21;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->icon(), target);
  }

  // optional uint32 activetime = 22;
  if (has_activetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->activetime(), target);
  }

  // optional uint32 countdown = 23;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->countdown(), target);
  }

  // repeated .TgsProtocol.ClientMonthCard card = 24;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->card(i), target);
  }

  // optional uint32 sequence = 25;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->sequence(), target);
  }

  // repeated .TgsProtocol.ClientItemLimit globalItemLimit = 26;
  for (int i = 0; i < this->globalitemlimit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->globalitemlimit(i), target);
  }

  // repeated .TgsProtocol.ClientItemLimit playerItemLimit = 27;
  for (int i = 0; i < this->playeritemlimit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->playeritemlimit(i), target);
  }

  // repeated uint32 getTimes = 28;
  for (int i = 0; i < this->gettimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(28, this->gettimes(i), target);
  }

  // repeated uint32 everyValues = 29;
  for (int i = 0; i < this->everyvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(29, this->everyvalues(i), target);
  }

  // repeated uint32 everyDoneValues = 30;
  for (int i = 0; i < this->everydonevalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(30, this->everydonevalues(i), target);
  }

  // optional .TgsProtocol.LString name_l = 31;
  if (has_name_l()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->name_l(), target);
  }

  // optional .TgsProtocol.LString desc_l = 32;
  if (has_desc_l()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->desc_l(), target);
  }

  // repeated .TgsProtocol.LString childDesc_l = 33;
  for (int i = 0; i < this->childdesc_l_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->childdesc_l(i), target);
  }

  // repeated uint32 intNumber = 34;
  for (int i = 0; i < this->intnumber_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(34, this->intnumber(i), target);
  }

  // repeated .TgsProtocol.IntList intNumberList = 35;
  for (int i = 0; i < this->intnumberlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->intnumberlist(i), target);
  }

  // repeated uint32 mailid = 36;
  for (int i = 0; i < this->mailid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(36, this->mailid(i), target);
  }

  // repeated .TgsProtocol.LString child2Desc_l = 37;
  for (int i = 0; i < this->child2desc_l_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->child2desc_l(i), target);
  }

  // optional uint32 iconIndex = 38;
  if (has_iconindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->iconindex(), target);
  }

  // optional uint32 expand = 39;
  if (has_expand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->expand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientActivity)
  return target;
}

int ClientActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 closed = 2;
    if (has_closed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->closed());
    }

    // optional uint32 opentype = 3;
    if (has_opentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opentype());
    }

    // optional uint32 actype = 4;
    if (has_actype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actype());
    }

    // optional uint32 showBeginTime = 5;
    if (has_showbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showbegintime());
    }

    // optional uint32 showEndTime = 6;
    if (has_showendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showendtime());
    }

    // optional uint32 beginTime = 7;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // optional uint32 endTime = 8;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 playerLev = 9;
    if (has_playerlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerlev());
    }

    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 11;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 value = 16;
    if (has_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (_has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    // optional string icon = 21;
    if (has_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional uint32 activetime = 22;
    if (has_activetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activetime());
    }

    // optional uint32 countdown = 23;
    if (has_countdown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countdown());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 sequence = 25;
    if (has_sequence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional .TgsProtocol.LString name_l = 31;
    if (has_name_l()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name_l());
    }

    // optional .TgsProtocol.LString desc_l = 32;
    if (has_desc_l()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->desc_l());
    }

  }
  if (_has_bits_[37 / 32] & (0xffu << (37 % 32))) {
    // optional uint32 iconIndex = 38;
    if (has_iconindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iconindex());
    }

    // optional uint32 expand = 39;
    if (has_expand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expand());
    }

  }
  // repeated .TgsProtocol.TodayTime todayTimes = 12;
  total_size += 1 * this->todaytimes_size();
  for (int i = 0; i < this->todaytimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->todaytimes(i));
  }

  // repeated uint32 values = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  // repeated .TgsProtocol.SourceList rewards = 14;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  // repeated uint32 rewardGot = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardgot_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardgot(i));
    }
    total_size += 1 * this->rewardgot_size() + data_size;
  }

  // repeated string childDesc = 17;
  total_size += 2 * this->childdesc_size();
  for (int i = 0; i < this->childdesc_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->childdesc(i));
  }

  // repeated uint32 shareValues = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->sharevalues_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sharevalues(i));
    }
    total_size += 2 * this->sharevalues_size() + data_size;
  }

  // repeated .TgsProtocol.SourceList values2 = 19;
  total_size += 2 * this->values2_size();
  for (int i = 0; i < this->values2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values2(i));
  }

  // repeated string shareTex = 20;
  total_size += 2 * this->sharetex_size();
  for (int i = 0; i < this->sharetex_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sharetex(i));
  }

  // repeated .TgsProtocol.ClientMonthCard card = 24;
  total_size += 2 * this->card_size();
  for (int i = 0; i < this->card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card(i));
  }

  // repeated .TgsProtocol.ClientItemLimit globalItemLimit = 26;
  total_size += 2 * this->globalitemlimit_size();
  for (int i = 0; i < this->globalitemlimit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->globalitemlimit(i));
  }

  // repeated .TgsProtocol.ClientItemLimit playerItemLimit = 27;
  total_size += 2 * this->playeritemlimit_size();
  for (int i = 0; i < this->playeritemlimit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playeritemlimit(i));
  }

  // repeated uint32 getTimes = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->gettimes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gettimes(i));
    }
    total_size += 2 * this->gettimes_size() + data_size;
  }

  // repeated uint32 everyValues = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->everyvalues_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->everyvalues(i));
    }
    total_size += 2 * this->everyvalues_size() + data_size;
  }

  // repeated uint32 everyDoneValues = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->everydonevalues_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->everydonevalues(i));
    }
    total_size += 2 * this->everydonevalues_size() + data_size;
  }

  // repeated .TgsProtocol.LString childDesc_l = 33;
  total_size += 2 * this->childdesc_l_size();
  for (int i = 0; i < this->childdesc_l_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->childdesc_l(i));
  }

  // repeated uint32 intNumber = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->intnumber_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->intnumber(i));
    }
    total_size += 2 * this->intnumber_size() + data_size;
  }

  // repeated .TgsProtocol.IntList intNumberList = 35;
  total_size += 2 * this->intnumberlist_size();
  for (int i = 0; i < this->intnumberlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intnumberlist(i));
  }

  // repeated uint32 mailid = 36;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mailid(i));
    }
    total_size += 2 * this->mailid_size() + data_size;
  }

  // repeated .TgsProtocol.LString child2Desc_l = 37;
  total_size += 2 * this->child2desc_l_size();
  for (int i = 0; i < this->child2desc_l_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child2desc_l(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientActivity::MergeFrom(const ClientActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  todaytimes_.MergeFrom(from.todaytimes_);
  values_.MergeFrom(from.values_);
  rewards_.MergeFrom(from.rewards_);
  rewardgot_.MergeFrom(from.rewardgot_);
  childdesc_.MergeFrom(from.childdesc_);
  sharevalues_.MergeFrom(from.sharevalues_);
  values2_.MergeFrom(from.values2_);
  sharetex_.MergeFrom(from.sharetex_);
  card_.MergeFrom(from.card_);
  globalitemlimit_.MergeFrom(from.globalitemlimit_);
  playeritemlimit_.MergeFrom(from.playeritemlimit_);
  gettimes_.MergeFrom(from.gettimes_);
  everyvalues_.MergeFrom(from.everyvalues_);
  everydonevalues_.MergeFrom(from.everydonevalues_);
  childdesc_l_.MergeFrom(from.childdesc_l_);
  intnumber_.MergeFrom(from.intnumber_);
  intnumberlist_.MergeFrom(from.intnumberlist_);
  mailid_.MergeFrom(from.mailid_);
  child2desc_l_.MergeFrom(from.child2desc_l_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_closed()) {
      set_closed(from.closed());
    }
    if (from.has_opentype()) {
      set_opentype(from.opentype());
    }
    if (from.has_actype()) {
      set_actype(from.actype());
    }
    if (from.has_showbegintime()) {
      set_showbegintime(from.showbegintime());
    }
    if (from.has_showendtime()) {
      set_showendtime(from.showendtime());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerlev()) {
      set_playerlev(from.playerlev());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_activetime()) {
      set_activetime(from.activetime());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_name_l()) {
      mutable_name_l()->::TgsProtocol::LString::MergeFrom(from.name_l());
    }
    if (from.has_desc_l()) {
      mutable_desc_l()->::TgsProtocol::LString::MergeFrom(from.desc_l());
    }
  }
  if (from._has_bits_[37 / 32] & (0xffu << (37 % 32))) {
    if (from.has_iconindex()) {
      set_iconindex(from.iconindex());
    }
    if (from.has_expand()) {
      set_expand(from.expand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientActivity::CopyFrom(const ClientActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->todaytimes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->values2())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->card())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->globalitemlimit())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->playeritemlimit())) return false;
  if (has_name_l()) {
    if (!this->name_l().IsInitialized()) return false;
  }
  if (has_desc_l()) {
    if (!this->desc_l().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->childdesc_l())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->child2desc_l())) return false;
  return true;
}

void ClientActivity::Swap(ClientActivity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(closed_, other->closed_);
    std::swap(opentype_, other->opentype_);
    std::swap(actype_, other->actype_);
    std::swap(showbegintime_, other->showbegintime_);
    std::swap(showendtime_, other->showendtime_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(playerlev_, other->playerlev_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    todaytimes_.Swap(&other->todaytimes_);
    values_.Swap(&other->values_);
    rewards_.Swap(&other->rewards_);
    rewardgot_.Swap(&other->rewardgot_);
    std::swap(value_, other->value_);
    childdesc_.Swap(&other->childdesc_);
    sharevalues_.Swap(&other->sharevalues_);
    values2_.Swap(&other->values2_);
    sharetex_.Swap(&other->sharetex_);
    std::swap(icon_, other->icon_);
    std::swap(activetime_, other->activetime_);
    std::swap(countdown_, other->countdown_);
    card_.Swap(&other->card_);
    std::swap(sequence_, other->sequence_);
    globalitemlimit_.Swap(&other->globalitemlimit_);
    playeritemlimit_.Swap(&other->playeritemlimit_);
    gettimes_.Swap(&other->gettimes_);
    everyvalues_.Swap(&other->everyvalues_);
    everydonevalues_.Swap(&other->everydonevalues_);
    std::swap(name_l_, other->name_l_);
    std::swap(desc_l_, other->desc_l_);
    childdesc_l_.Swap(&other->childdesc_l_);
    intnumber_.Swap(&other->intnumber_);
    intnumberlist_.Swap(&other->intnumberlist_);
    mailid_.Swap(&other->mailid_);
    child2desc_l_.Swap(&other->child2desc_l_);
    std::swap(iconindex_, other->iconindex_);
    std::swap(expand_, other->expand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientActivity_descriptor_;
  metadata.reflection = ClientActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HalfBuyElement::kIndexFieldNumber;
const int HalfBuyElement::kNumberFieldNumber;
#endif  // !_MSC_VER

HalfBuyElement::HalfBuyElement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.HalfBuyElement)
}

void HalfBuyElement::InitAsDefaultInstance() {
}

HalfBuyElement::HalfBuyElement(const HalfBuyElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.HalfBuyElement)
}

void HalfBuyElement::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HalfBuyElement::~HalfBuyElement() {
  // @@protoc_insertion_point(destructor:TgsProtocol.HalfBuyElement)
  SharedDtor();
}

void HalfBuyElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HalfBuyElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HalfBuyElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HalfBuyElement_descriptor_;
}

const HalfBuyElement& HalfBuyElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

HalfBuyElement* HalfBuyElement::default_instance_ = NULL;

HalfBuyElement* HalfBuyElement::New() const {
  return new HalfBuyElement;
}

void HalfBuyElement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HalfBuyElement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, number_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HalfBuyElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.HalfBuyElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // required uint32 number = 2;
      case 2: {
        if (tag == 16) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.HalfBuyElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.HalfBuyElement)
  return false;
#undef DO_
}

void HalfBuyElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.HalfBuyElement)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.HalfBuyElement)
}

::google::protobuf::uint8* HalfBuyElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.HalfBuyElement)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.HalfBuyElement)
  return target;
}

int HalfBuyElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HalfBuyElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HalfBuyElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HalfBuyElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HalfBuyElement::MergeFrom(const HalfBuyElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HalfBuyElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HalfBuyElement::CopyFrom(const HalfBuyElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HalfBuyElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HalfBuyElement::Swap(HalfBuyElement* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HalfBuyElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HalfBuyElement_descriptor_;
  metadata.reflection = HalfBuyElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HalfBuy::kHalfBuyEleFieldNumber;
#endif  // !_MSC_VER

HalfBuy::HalfBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.HalfBuy)
}

void HalfBuy::InitAsDefaultInstance() {
}

HalfBuy::HalfBuy(const HalfBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.HalfBuy)
}

void HalfBuy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HalfBuy::~HalfBuy() {
  // @@protoc_insertion_point(destructor:TgsProtocol.HalfBuy)
  SharedDtor();
}

void HalfBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HalfBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HalfBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HalfBuy_descriptor_;
}

const HalfBuy& HalfBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

HalfBuy* HalfBuy::default_instance_ = NULL;

HalfBuy* HalfBuy::New() const {
  return new HalfBuy;
}

void HalfBuy::Clear() {
  halfbuyele_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HalfBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.HalfBuy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.HalfBuyElement halfBuyEle = 1;
      case 1: {
        if (tag == 10) {
         parse_halfBuyEle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_halfbuyele()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_halfBuyEle;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.HalfBuy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.HalfBuy)
  return false;
#undef DO_
}

void HalfBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.HalfBuy)
  // repeated .TgsProtocol.HalfBuyElement halfBuyEle = 1;
  for (int i = 0; i < this->halfbuyele_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->halfbuyele(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.HalfBuy)
}

::google::protobuf::uint8* HalfBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.HalfBuy)
  // repeated .TgsProtocol.HalfBuyElement halfBuyEle = 1;
  for (int i = 0; i < this->halfbuyele_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->halfbuyele(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.HalfBuy)
  return target;
}

int HalfBuy::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.HalfBuyElement halfBuyEle = 1;
  total_size += 1 * this->halfbuyele_size();
  for (int i = 0; i < this->halfbuyele_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->halfbuyele(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HalfBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HalfBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HalfBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HalfBuy::MergeFrom(const HalfBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  halfbuyele_.MergeFrom(from.halfbuyele_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HalfBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HalfBuy::CopyFrom(const HalfBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HalfBuy::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->halfbuyele())) return false;
  return true;
}

void HalfBuy::Swap(HalfBuy* other) {
  if (other != this) {
    halfbuyele_.Swap(&other->halfbuyele_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HalfBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HalfBuy_descriptor_;
  metadata.reflection = HalfBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchieveElement::kIdFieldNumber;
const int AchieveElement::kCharidFieldNumber;
const int AchieveElement::kGotFieldNumber;
#endif  // !_MSC_VER

AchieveElement::AchieveElement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.AchieveElement)
}

void AchieveElement::InitAsDefaultInstance() {
}

AchieveElement::AchieveElement(const AchieveElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.AchieveElement)
}

void AchieveElement::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  got_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchieveElement::~AchieveElement() {
  // @@protoc_insertion_point(destructor:TgsProtocol.AchieveElement)
  SharedDtor();
}

void AchieveElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchieveElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchieveElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveElement_descriptor_;
}

const AchieveElement& AchieveElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

AchieveElement* AchieveElement::default_instance_ = NULL;

AchieveElement* AchieveElement::New() const {
  return new AchieveElement;
}

void AchieveElement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AchieveElement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charid_, got_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchieveElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.AchieveElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_got;
        break;
      }

      // optional uint32 got = 3;
      case 3: {
        if (tag == 24) {
         parse_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &got_)));
          set_has_got();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.AchieveElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.AchieveElement)
  return false;
#undef DO_
}

void AchieveElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.AchieveElement)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional uint32 got = 3;
  if (has_got()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->got(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.AchieveElement)
}

::google::protobuf::uint8* AchieveElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.AchieveElement)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional uint32 got = 3;
  if (has_got()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->got(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.AchieveElement)
  return target;
}

int AchieveElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 got = 3;
    if (has_got()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->got());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchieveElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchieveElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchieveElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchieveElement::MergeFrom(const AchieveElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_got()) {
      set_got(from.got());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchieveElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchieveElement::CopyFrom(const AchieveElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchieveElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AchieveElement::Swap(AchieveElement* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(charid_, other->charid_);
    std::swap(got_, other->got_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchieveElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchieveElement_descriptor_;
  metadata.reflection = AchieveElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Achieve::kAchievesFieldNumber;
#endif  // !_MSC_VER

Achieve::Achieve()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.Achieve)
}

void Achieve::InitAsDefaultInstance() {
}

Achieve::Achieve(const Achieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.Achieve)
}

void Achieve::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achieve::~Achieve() {
  // @@protoc_insertion_point(destructor:TgsProtocol.Achieve)
  SharedDtor();
}

void Achieve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achieve_descriptor_;
}

const Achieve& Achieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

Achieve* Achieve::default_instance_ = NULL;

Achieve* Achieve::New() const {
  return new Achieve;
}

void Achieve::Clear() {
  achieves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.Achieve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.AchieveElement achieves = 1;
      case 1: {
        if (tag == 10) {
         parse_achieves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achieves()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_achieves;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.Achieve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.Achieve)
  return false;
#undef DO_
}

void Achieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.Achieve)
  // repeated .TgsProtocol.AchieveElement achieves = 1;
  for (int i = 0; i < this->achieves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achieves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.Achieve)
}

::google::protobuf::uint8* Achieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.Achieve)
  // repeated .TgsProtocol.AchieveElement achieves = 1;
  for (int i = 0; i < this->achieves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achieves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.Achieve)
  return target;
}

int Achieve::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.AchieveElement achieves = 1;
  total_size += 1 * this->achieves_size();
  for (int i = 0; i < this->achieves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achieves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achieve::MergeFrom(const Achieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieves_.MergeFrom(from.achieves_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achieve::CopyFrom(const Achieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achieve::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->achieves())) return false;
  return true;
}

void Achieve::Swap(Achieve* other) {
  if (other != this) {
    achieves_.Swap(&other->achieves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achieve_descriptor_;
  metadata.reflection = Achieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRank::kTypeFieldNumber;
const int ClientRank::kRankFieldNumber;
const int ClientRank::kCharidFieldNumber;
const int ClientRank::kPlayerLevFieldNumber;
const int ClientRank::kVipLevFieldNumber;
const int ClientRank::kPlayerNameFieldNumber;
const int ClientRank::kPlayerGuildFieldNumber;
const int ClientRank::kValueFieldNumber;
const int ClientRank::kTemplateIdFieldNumber;
const int ClientRank::kInstanceIdFieldNumber;
const int ClientRank::kInstanceValueFieldNumber;
const int ClientRank::kEffectFieldNumber;
const int ClientRank::kPhotoFieldNumber;
const int ClientRank::kNationalIdFieldNumber;
#endif  // !_MSC_VER

ClientRank::ClientRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientRank)
}

void ClientRank::InitAsDefaultInstance() {
}

ClientRank::ClientRank(const ClientRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientRank)
}

void ClientRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  rank_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  playerlev_ = 0u;
  viplev_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerguild_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_ULONGLONG(0);
  templateid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  instancevalue_ = 0u;
  effect_ = GOOGLE_ULONGLONG(0);
  photo_ = 0u;
  nationalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRank::~ClientRank() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientRank)
  SharedDtor();
}

void ClientRank::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playerguild_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playerguild_;
  }
  if (this != default_instance_) {
  }
}

void ClientRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRank_descriptor_;
}

const ClientRank& ClientRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientRank* ClientRank::default_instance_ = NULL;

ClientRank* ClientRank::New() const {
  return new ClientRank;
}

void ClientRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, viplev_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
    if (has_playerguild()) {
      if (playerguild_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playerguild_->clear();
      }
    }
    value_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(instanceid_, nationalid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TgsProtocol.ERankType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::ERankType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::ERankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required uint32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerLev;
        break;
      }

      // required uint32 playerLev = 4;
      case 4: {
        if (tag == 32) {
         parse_playerLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerlev_)));
          set_has_playerlev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vipLev;
        break;
      }

      // required uint32 vipLev = 5;
      case 5: {
        if (tag == 40) {
         parse_vipLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplev_)));
          set_has_viplev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_playerName;
        break;
      }

      // required string playerName = 6;
      case 6: {
        if (tag == 50) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_playerGuild;
        break;
      }

      // optional string playerGuild = 7;
      case 7: {
        if (tag == 58) {
         parse_playerGuild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerguild()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerguild().data(), this->playerguild().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playerguild");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_value;
        break;
      }

      // required uint64 value = 8;
      case 8: {
        if (tag == 64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_templateId;
        break;
      }

      // optional uint32 templateId = 9;
      case 9: {
        if (tag == 72) {
         parse_templateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_instanceId;
        break;
      }

      // optional uint64 instanceId = 10;
      case 10: {
        if (tag == 80) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_instanceValue;
        break;
      }

      // optional uint32 instanceValue = 11;
      case 11: {
        if (tag == 88) {
         parse_instanceValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instancevalue_)));
          set_has_instancevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_effect;
        break;
      }

      // required uint64 effect = 12;
      case 12: {
        if (tag == 96) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_photo;
        break;
      }

      // required uint32 photo = 13;
      case 13: {
        if (tag == 104) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_nationalId;
        break;
      }

      // optional uint32 nationalId = 14;
      case 14: {
        if (tag == 112) {
         parse_nationalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nationalid_)));
          set_has_nationalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientRank)
  return false;
#undef DO_
}

void ClientRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientRank)
  // required .TgsProtocol.ERankType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint32 playerLev = 4;
  if (has_playerlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerlev(), output);
  }

  // required uint32 vipLev = 5;
  if (has_viplev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplev(), output);
  }

  // required string playerName = 6;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->playername(), output);
  }

  // optional string playerGuild = 7;
  if (has_playerguild()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerguild().data(), this->playerguild().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playerguild");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->playerguild(), output);
  }

  // required uint64 value = 8;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->value(), output);
  }

  // optional uint32 templateId = 9;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->templateid(), output);
  }

  // optional uint64 instanceId = 10;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->instanceid(), output);
  }

  // optional uint32 instanceValue = 11;
  if (has_instancevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->instancevalue(), output);
  }

  // required uint64 effect = 12;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->effect(), output);
  }

  // required uint32 photo = 13;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->photo(), output);
  }

  // optional uint32 nationalId = 14;
  if (has_nationalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->nationalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientRank)
}

::google::protobuf::uint8* ClientRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientRank)
  // required .TgsProtocol.ERankType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint32 playerLev = 4;
  if (has_playerlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerlev(), target);
  }

  // required uint32 vipLev = 5;
  if (has_viplev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->viplev(), target);
  }

  // required string playerName = 6;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playername(), target);
  }

  // optional string playerGuild = 7;
  if (has_playerguild()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerguild().data(), this->playerguild().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playerguild");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->playerguild(), target);
  }

  // required uint64 value = 8;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->value(), target);
  }

  // optional uint32 templateId = 9;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->templateid(), target);
  }

  // optional uint64 instanceId = 10;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->instanceid(), target);
  }

  // optional uint32 instanceValue = 11;
  if (has_instancevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->instancevalue(), target);
  }

  // required uint64 effect = 12;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->effect(), target);
  }

  // required uint32 photo = 13;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->photo(), target);
  }

  // optional uint32 nationalId = 14;
  if (has_nationalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->nationalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientRank)
  return target;
}

int ClientRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TgsProtocol.ERankType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 playerLev = 4;
    if (has_playerlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerlev());
    }

    // required uint32 vipLev = 5;
    if (has_viplev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplev());
    }

    // required string playerName = 6;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional string playerGuild = 7;
    if (has_playerguild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerguild());
    }

    // required uint64 value = 8;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 templateId = 9;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // optional uint64 instanceId = 10;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 instanceValue = 11;
    if (has_instancevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instancevalue());
    }

    // required uint64 effect = 12;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->effect());
    }

    // required uint32 photo = 13;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // optional uint32 nationalId = 14;
    if (has_nationalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nationalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRank::MergeFrom(const ClientRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_playerlev()) {
      set_playerlev(from.playerlev());
    }
    if (from.has_viplev()) {
      set_viplev(from.viplev());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerguild()) {
      set_playerguild(from.playerguild());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_instancevalue()) {
      set_instancevalue(from.instancevalue());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_nationalid()) {
      set_nationalid(from.nationalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRank::CopyFrom(const ClientRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x000018bf) != 0x000018bf) return false;

  return true;
}

void ClientRank::Swap(ClientRank* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(rank_, other->rank_);
    std::swap(charid_, other->charid_);
    std::swap(playerlev_, other->playerlev_);
    std::swap(viplev_, other->viplev_);
    std::swap(playername_, other->playername_);
    std::swap(playerguild_, other->playerguild_);
    std::swap(value_, other->value_);
    std::swap(templateid_, other->templateid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(instancevalue_, other->instancevalue_);
    std::swap(effect_, other->effect_);
    std::swap(photo_, other->photo_);
    std::swap(nationalid_, other->nationalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRank_descriptor_;
  metadata.reflection = ClientRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRankList::kTypeFieldNumber;
const int ClientRankList::kItemsFieldNumber;
const int ClientRankList::kMyrankFieldNumber;
const int ClientRankList::kTemplateIdFieldNumber;
const int ClientRankList::kMyvalueFieldNumber;
#endif  // !_MSC_VER

ClientRankList::ClientRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientRankList)
}

void ClientRankList::InitAsDefaultInstance() {
}

ClientRankList::ClientRankList(const ClientRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientRankList)
}

void ClientRankList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  myrank_ = 0u;
  templateid_ = 0u;
  myvalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRankList::~ClientRankList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientRankList)
  SharedDtor();
}

void ClientRankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRankList_descriptor_;
}

const ClientRankList& ClientRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientRankList* ClientRankList::default_instance_ = NULL;

ClientRankList* ClientRankList::New() const {
  return new ClientRankList;
}

void ClientRankList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientRankList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, templateid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientRankList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TgsProtocol.ERankType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::ERankType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::ERankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .TgsProtocol.ClientRank items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_myrank;
        break;
      }

      // required uint32 myrank = 3;
      case 3: {
        if (tag == 24) {
         parse_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_templateId;
        break;
      }

      // optional uint32 templateId = 4;
      case 4: {
        if (tag == 32) {
         parse_templateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_myvalue;
        break;
      }

      // optional uint64 myvalue = 5;
      case 5: {
        if (tag == 40) {
         parse_myvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &myvalue_)));
          set_has_myvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientRankList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientRankList)
  return false;
#undef DO_
}

void ClientRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientRankList)
  // required .TgsProtocol.ERankType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .TgsProtocol.ClientRank items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // required uint32 myrank = 3;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->myrank(), output);
  }

  // optional uint32 templateId = 4;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->templateid(), output);
  }

  // optional uint64 myvalue = 5;
  if (has_myvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->myvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientRankList)
}

::google::protobuf::uint8* ClientRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientRankList)
  // required .TgsProtocol.ERankType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .TgsProtocol.ClientRank items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // required uint32 myrank = 3;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->myrank(), target);
  }

  // optional uint32 templateId = 4;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->templateid(), target);
  }

  // optional uint64 myvalue = 5;
  if (has_myvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->myvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientRankList)
  return target;
}

int ClientRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TgsProtocol.ERankType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 myrank = 3;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

    // optional uint32 templateId = 4;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // optional uint64 myvalue = 5;
    if (has_myvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->myvalue());
    }

  }
  // repeated .TgsProtocol.ClientRank items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRankList::MergeFrom(const ClientRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_myvalue()) {
      set_myvalue(from.myvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRankList::CopyFrom(const ClientRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRankList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void ClientRankList::Swap(ClientRankList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    items_.Swap(&other->items_);
    std::swap(myrank_, other->myrank_);
    std::swap(templateid_, other->templateid_);
    std::swap(myvalue_, other->myvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRankList_descriptor_;
  metadata.reflection = ClientRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientHeroRank::kRankFieldNumber;
const int ClientHeroRank::kHeroIdFieldNumber;
const int ClientHeroRank::kCharidFieldNumber;
const int ClientHeroRank::kNameFieldNumber;
const int ClientHeroRank::kGuildFieldNumber;
const int ClientHeroRank::kPhotoFieldNumber;
const int ClientHeroRank::kPlayerlevelFieldNumber;
const int ClientHeroRank::kLevelFieldNumber;
const int ClientHeroRank::kForceLevelFieldNumber;
const int ClientHeroRank::kDeificationlevelFieldNumber;
const int ClientHeroRank::kWingslevelFieldNumber;
const int ClientHeroRank::kEffectFieldNumber;
#endif  // !_MSC_VER

ClientHeroRank::ClientHeroRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientHeroRank)
}

void ClientHeroRank::InitAsDefaultInstance() {
}

ClientHeroRank::ClientHeroRank(const ClientHeroRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientHeroRank)
}

void ClientHeroRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rank_ = 0u;
  hero_id_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_ = 0u;
  playerlevel_ = 0u;
  level_ = 0u;
  forcelevel_ = 0u;
  deificationlevel_ = 0u;
  wingslevel_ = 0u;
  effect_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientHeroRank::~ClientHeroRank() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientHeroRank)
  SharedDtor();
}

void ClientHeroRank::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guild_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_;
  }
  if (this != default_instance_) {
  }
}

void ClientHeroRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientHeroRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientHeroRank_descriptor_;
}

const ClientHeroRank& ClientHeroRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientHeroRank* ClientHeroRank::default_instance_ = NULL;

ClientHeroRank* ClientHeroRank::New() const {
  return new ClientHeroRank;
}

void ClientHeroRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientHeroRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rank_, charid_);
    ZR_(photo_, level_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_guild()) {
      if (guild_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_->clear();
      }
    }
  }
  ZR_(forcelevel_, effect_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientHeroRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientHeroRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_guild;
        break;
      }

      // optional string guild = 5;
      case 5: {
        if (tag == 42) {
         parse_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild().data(), this->guild().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_photo;
        break;
      }

      // required uint32 photo = 6;
      case 6: {
        if (tag == 48) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_playerlevel;
        break;
      }

      // required uint32 playerlevel = 7;
      case 7: {
        if (tag == 56) {
         parse_playerlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerlevel_)));
          set_has_playerlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // required uint32 level = 8;
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_forceLevel;
        break;
      }

      // required uint32 forceLevel = 9;
      case 9: {
        if (tag == 72) {
         parse_forceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcelevel_)));
          set_has_forcelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_deificationlevel;
        break;
      }

      // required uint32 deificationlevel = 10;
      case 10: {
        if (tag == 80) {
         parse_deificationlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deificationlevel_)));
          set_has_deificationlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_wingslevel;
        break;
      }

      // required uint32 wingslevel = 11;
      case 11: {
        if (tag == 88) {
         parse_wingslevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingslevel_)));
          set_has_wingslevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_effect;
        break;
      }

      // required uint64 effect = 12;
      case 12: {
        if (tag == 96) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientHeroRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientHeroRank)
  return false;
#undef DO_
}

void ClientHeroRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientHeroRank)
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string guild = 5;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild().data(), this->guild().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->guild(), output);
  }

  // required uint32 photo = 6;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->photo(), output);
  }

  // required uint32 playerlevel = 7;
  if (has_playerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->playerlevel(), output);
  }

  // required uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // required uint32 forceLevel = 9;
  if (has_forcelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->forcelevel(), output);
  }

  // required uint32 deificationlevel = 10;
  if (has_deificationlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->deificationlevel(), output);
  }

  // required uint32 wingslevel = 11;
  if (has_wingslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wingslevel(), output);
  }

  // required uint64 effect = 12;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->effect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientHeroRank)
}

::google::protobuf::uint8* ClientHeroRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientHeroRank)
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string guild = 5;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild().data(), this->guild().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guild(), target);
  }

  // required uint32 photo = 6;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->photo(), target);
  }

  // required uint32 playerlevel = 7;
  if (has_playerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->playerlevel(), target);
  }

  // required uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  // required uint32 forceLevel = 9;
  if (has_forcelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->forcelevel(), target);
  }

  // required uint32 deificationlevel = 10;
  if (has_deificationlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->deificationlevel(), target);
  }

  // required uint32 wingslevel = 11;
  if (has_wingslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wingslevel(), target);
  }

  // required uint64 effect = 12;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->effect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientHeroRank)
  return target;
}

int ClientHeroRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string guild = 5;
    if (has_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild());
    }

    // required uint32 photo = 6;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required uint32 playerlevel = 7;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerlevel());
    }

    // required uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 forceLevel = 9;
    if (has_forcelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcelevel());
    }

    // required uint32 deificationlevel = 10;
    if (has_deificationlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deificationlevel());
    }

    // required uint32 wingslevel = 11;
    if (has_wingslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingslevel());
    }

    // required uint64 effect = 12;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->effect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientHeroRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientHeroRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientHeroRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientHeroRank::MergeFrom(const ClientHeroRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guild()) {
      set_guild(from.guild());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_playerlevel()) {
      set_playerlevel(from.playerlevel());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_forcelevel()) {
      set_forcelevel(from.forcelevel());
    }
    if (from.has_deificationlevel()) {
      set_deificationlevel(from.deificationlevel());
    }
    if (from.has_wingslevel()) {
      set_wingslevel(from.wingslevel());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientHeroRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientHeroRank::CopyFrom(const ClientHeroRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHeroRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fef) != 0x00000fef) return false;

  return true;
}

void ClientHeroRank::Swap(ClientHeroRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(guild_, other->guild_);
    std::swap(photo_, other->photo_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(level_, other->level_);
    std::swap(forcelevel_, other->forcelevel_);
    std::swap(deificationlevel_, other->deificationlevel_);
    std::swap(wingslevel_, other->wingslevel_);
    std::swap(effect_, other->effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientHeroRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientHeroRank_descriptor_;
  metadata.reflection = ClientHeroRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientAchieve::kIdFieldNumber;
const int ClientAchieve::kCharidFieldNumber;
const int ClientAchieve::kPhotoFieldNumber;
const int ClientAchieve::kPlayerLevFieldNumber;
const int ClientAchieve::kVipLevFieldNumber;
const int ClientAchieve::kPlayerNameFieldNumber;
const int ClientAchieve::kGotFieldNumber;
#endif  // !_MSC_VER

ClientAchieve::ClientAchieve()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientAchieve)
}

void ClientAchieve::InitAsDefaultInstance() {
}

ClientAchieve::ClientAchieve(const ClientAchieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientAchieve)
}

void ClientAchieve::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  photo_ = 0u;
  playerlev_ = 0u;
  viplev_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  got_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientAchieve::~ClientAchieve() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientAchieve)
  SharedDtor();
}

void ClientAchieve::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void ClientAchieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientAchieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientAchieve_descriptor_;
}

const ClientAchieve& ClientAchieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientAchieve* ClientAchieve::default_instance_ = NULL;

ClientAchieve* ClientAchieve::New() const {
  return new ClientAchieve;
}

void ClientAchieve::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientAchieve*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(charid_, viplev_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
    got_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientAchieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientAchieve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_photo;
        break;
      }

      // optional uint32 photo = 3;
      case 3: {
        if (tag == 24) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerLev;
        break;
      }

      // optional uint32 playerLev = 4;
      case 4: {
        if (tag == 32) {
         parse_playerLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerlev_)));
          set_has_playerlev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vipLev;
        break;
      }

      // optional uint32 vipLev = 5;
      case 5: {
        if (tag == 40) {
         parse_vipLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplev_)));
          set_has_viplev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_playerName;
        break;
      }

      // optional string playerName = 6;
      case 6: {
        if (tag == 50) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_got;
        break;
      }

      // optional uint32 got = 7;
      case 7: {
        if (tag == 56) {
         parse_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &got_)));
          set_has_got();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientAchieve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientAchieve)
  return false;
#undef DO_
}

void ClientAchieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientAchieve)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional uint32 photo = 3;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->photo(), output);
  }

  // optional uint32 playerLev = 4;
  if (has_playerlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerlev(), output);
  }

  // optional uint32 vipLev = 5;
  if (has_viplev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplev(), output);
  }

  // optional string playerName = 6;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->playername(), output);
  }

  // optional uint32 got = 7;
  if (has_got()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->got(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientAchieve)
}

::google::protobuf::uint8* ClientAchieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientAchieve)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional uint32 photo = 3;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->photo(), target);
  }

  // optional uint32 playerLev = 4;
  if (has_playerlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerlev(), target);
  }

  // optional uint32 vipLev = 5;
  if (has_viplev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->viplev(), target);
  }

  // optional string playerName = 6;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playername(), target);
  }

  // optional uint32 got = 7;
  if (has_got()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->got(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientAchieve)
  return target;
}

int ClientAchieve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 photo = 3;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // optional uint32 playerLev = 4;
    if (has_playerlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerlev());
    }

    // optional uint32 vipLev = 5;
    if (has_viplev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplev());
    }

    // optional string playerName = 6;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional uint32 got = 7;
    if (has_got()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->got());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientAchieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientAchieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientAchieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientAchieve::MergeFrom(const ClientAchieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_playerlev()) {
      set_playerlev(from.playerlev());
    }
    if (from.has_viplev()) {
      set_viplev(from.viplev());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_got()) {
      set_got(from.got());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientAchieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientAchieve::CopyFrom(const ClientAchieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAchieve::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientAchieve::Swap(ClientAchieve* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(charid_, other->charid_);
    std::swap(photo_, other->photo_);
    std::swap(playerlev_, other->playerlev_);
    std::swap(viplev_, other->viplev_);
    std::swap(playername_, other->playername_);
    std::swap(got_, other->got_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientAchieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientAchieve_descriptor_;
  metadata.reflection = ClientAchieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionRecord::kTypeFieldNumber;
const int ActionRecord::kValueFieldNumber;
#endif  // !_MSC_VER

ActionRecord::ActionRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ActionRecord)
}

void ActionRecord::InitAsDefaultInstance() {
}

ActionRecord::ActionRecord(const ActionRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ActionRecord)
}

void ActionRecord::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionRecord::~ActionRecord() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ActionRecord)
  SharedDtor();
}

void ActionRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRecord_descriptor_;
}

const ActionRecord& ActionRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ActionRecord* ActionRecord::default_instance_ = NULL;

ActionRecord* ActionRecord::New() const {
  return new ActionRecord;
}

void ActionRecord::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ActionRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TgsProtocol.eActionType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::eActionType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::eActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ActionRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ActionRecord)
  return false;
#undef DO_
}

void ActionRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ActionRecord)
  // required .TgsProtocol.eActionType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ActionRecord)
}

::google::protobuf::uint8* ActionRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ActionRecord)
  // required .TgsProtocol.eActionType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ActionRecord)
  return target;
}

int ActionRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TgsProtocol.eActionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionRecord::MergeFrom(const ActionRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRecord::CopyFrom(const ActionRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActionRecord::Swap(ActionRecord* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionRecord_descriptor_;
  metadata.reflection = ActionRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInfo::kIdFieldNumber;
const int GuildInfo::kLevelFieldNumber;
const int GuildInfo::kExpFieldNumber;
const int GuildInfo::kCreaterFieldNumber;
const int GuildInfo::kLeaderFieldNumber;
const int GuildInfo::kCreatetimeFieldNumber;
const int GuildInfo::kPhotoFieldNumber;
const int GuildInfo::kNameFieldNumber;
const int GuildInfo::kNoticeFieldNumber;
const int GuildInfo::kManifestoFieldNumber;
const int GuildInfo::kRitualFieldNumber;
const int GuildInfo::kTechnologyLevelFieldNumber;
const int GuildInfo::kTechnologyExpFieldNumber;
const int GuildInfo::kUnlockedSkillFieldNumber;
const int GuildInfo::kGuildwarEnemyFieldNumber;
const int GuildInfo::kGuildwarEnemyExpFieldNumber;
const int GuildInfo::kCityLevelFieldNumber;
const int GuildInfo::kCityExpFieldNumber;
#endif  // !_MSC_VER

GuildInfo::GuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildInfo)
}

void GuildInfo::InitAsDefaultInstance() {
}

GuildInfo::GuildInfo(const GuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildInfo)
}

void GuildInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  creater_ = GOOGLE_ULONGLONG(0);
  leader_ = GOOGLE_ULONGLONG(0);
  createtime_ = 0u;
  photo_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manifesto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ritual_ = 0u;
  technology_level_ = 0u;
  technology_exp_ = 0u;
  guildwar_enemy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildwar_enemy_exp_ = 0u;
  city_level_ = 0u;
  city_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInfo::~GuildInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildInfo)
  SharedDtor();
}

void GuildInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (manifesto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manifesto_;
  }
  if (guildwar_enemy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildwar_enemy_;
  }
  if (this != default_instance_) {
  }
}

void GuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInfo_descriptor_;
}

const GuildInfo& GuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildInfo* GuildInfo::default_instance_ = NULL;

GuildInfo* GuildInfo::New() const {
  return new GuildInfo;
}

void GuildInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, leader_);
    photo_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 57088) {
    ZR_(technology_level_, technology_exp_);
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
    if (has_manifesto()) {
      if (manifesto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manifesto_->clear();
      }
    }
    ritual_ = 0u;
    if (has_guildwar_enemy()) {
      if (guildwar_enemy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildwar_enemy_->clear();
      }
    }
    guildwar_enemy_exp_ = 0u;
  }
  ZR_(city_level_, city_exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unlocked_skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required uint32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_creater;
        break;
      }

      // required uint64 creater = 4;
      case 4: {
        if (tag == 32) {
         parse_creater:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creater_)));
          set_has_creater();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leader;
        break;
      }

      // required uint64 leader = 5;
      case 5: {
        if (tag == 40) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_createtime;
        break;
      }

      // required uint32 createtime = 6;
      case 6: {
        if (tag == 48) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_photo;
        break;
      }

      // required uint32 photo = 7;
      case 7: {
        if (tag == 56) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // required string name = 8;
      case 8: {
        if (tag == 66) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_notice;
        break;
      }

      // required string notice = 9;
      case 9: {
        if (tag == 74) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_manifesto;
        break;
      }

      // required string manifesto = 10;
      case 10: {
        if (tag == 82) {
         parse_manifesto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manifesto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manifesto().data(), this->manifesto().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "manifesto");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ritual;
        break;
      }

      // required uint32 ritual = 11;
      case 11: {
        if (tag == 88) {
         parse_ritual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ritual_)));
          set_has_ritual();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_technology_level;
        break;
      }

      // required uint32 technology_level = 12;
      case 12: {
        if (tag == 96) {
         parse_technology_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &technology_level_)));
          set_has_technology_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_technology_exp;
        break;
      }

      // required uint32 technology_exp = 13;
      case 13: {
        if (tag == 104) {
         parse_technology_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &technology_exp_)));
          set_has_technology_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_unlocked_skill;
        break;
      }

      // repeated uint32 unlocked_skill = 14;
      case 14: {
        if (tag == 112) {
         parse_unlocked_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_unlocked_skill())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlocked_skill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_unlocked_skill;
        if (input->ExpectTag(122)) goto parse_guildwar_enemy;
        break;
      }

      // optional string guildwar_enemy = 15;
      case 15: {
        if (tag == 122) {
         parse_guildwar_enemy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildwar_enemy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildwar_enemy().data(), this->guildwar_enemy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildwar_enemy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_guildwar_enemy_exp;
        break;
      }

      // optional uint32 guildwar_enemy_exp = 16;
      case 16: {
        if (tag == 128) {
         parse_guildwar_enemy_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildwar_enemy_exp_)));
          set_has_guildwar_enemy_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_city_level;
        break;
      }

      // optional uint32 city_level = 17;
      case 17: {
        if (tag == 136) {
         parse_city_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_level_)));
          set_has_city_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_city_exp;
        break;
      }

      // optional uint32 city_exp = 18;
      case 18: {
        if (tag == 144) {
         parse_city_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_exp_)));
          set_has_city_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildInfo)
  return false;
#undef DO_
}

void GuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // required uint64 creater = 4;
  if (has_creater()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->creater(), output);
  }

  // required uint64 leader = 5;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->leader(), output);
  }

  // required uint32 createtime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->createtime(), output);
  }

  // required uint32 photo = 7;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->photo(), output);
  }

  // required string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // required string notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->notice(), output);
  }

  // required string manifesto = 10;
  if (has_manifesto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manifesto().data(), this->manifesto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manifesto");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->manifesto(), output);
  }

  // required uint32 ritual = 11;
  if (has_ritual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ritual(), output);
  }

  // required uint32 technology_level = 12;
  if (has_technology_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->technology_level(), output);
  }

  // required uint32 technology_exp = 13;
  if (has_technology_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->technology_exp(), output);
  }

  // repeated uint32 unlocked_skill = 14;
  for (int i = 0; i < this->unlocked_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->unlocked_skill(i), output);
  }

  // optional string guildwar_enemy = 15;
  if (has_guildwar_enemy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildwar_enemy().data(), this->guildwar_enemy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildwar_enemy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->guildwar_enemy(), output);
  }

  // optional uint32 guildwar_enemy_exp = 16;
  if (has_guildwar_enemy_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->guildwar_enemy_exp(), output);
  }

  // optional uint32 city_level = 17;
  if (has_city_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->city_level(), output);
  }

  // optional uint32 city_exp = 18;
  if (has_city_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->city_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildInfo)
}

::google::protobuf::uint8* GuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildInfo)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // required uint64 creater = 4;
  if (has_creater()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->creater(), target);
  }

  // required uint64 leader = 5;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->leader(), target);
  }

  // required uint32 createtime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->createtime(), target);
  }

  // required uint32 photo = 7;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->photo(), target);
  }

  // required string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  // required string notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->notice(), target);
  }

  // required string manifesto = 10;
  if (has_manifesto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manifesto().data(), this->manifesto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manifesto");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->manifesto(), target);
  }

  // required uint32 ritual = 11;
  if (has_ritual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ritual(), target);
  }

  // required uint32 technology_level = 12;
  if (has_technology_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->technology_level(), target);
  }

  // required uint32 technology_exp = 13;
  if (has_technology_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->technology_exp(), target);
  }

  // repeated uint32 unlocked_skill = 14;
  for (int i = 0; i < this->unlocked_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->unlocked_skill(i), target);
  }

  // optional string guildwar_enemy = 15;
  if (has_guildwar_enemy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildwar_enemy().data(), this->guildwar_enemy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildwar_enemy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->guildwar_enemy(), target);
  }

  // optional uint32 guildwar_enemy_exp = 16;
  if (has_guildwar_enemy_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->guildwar_enemy_exp(), target);
  }

  // optional uint32 city_level = 17;
  if (has_city_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->city_level(), target);
  }

  // optional uint32 city_exp = 18;
  if (has_city_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->city_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildInfo)
  return target;
}

int GuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint64 creater = 4;
    if (has_creater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creater());
    }

    // required uint64 leader = 5;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader());
    }

    // required uint32 createtime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // required uint32 photo = 7;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string notice = 9;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // required string manifesto = 10;
    if (has_manifesto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manifesto());
    }

    // required uint32 ritual = 11;
    if (has_ritual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ritual());
    }

    // required uint32 technology_level = 12;
    if (has_technology_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->technology_level());
    }

    // required uint32 technology_exp = 13;
    if (has_technology_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->technology_exp());
    }

    // optional string guildwar_enemy = 15;
    if (has_guildwar_enemy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildwar_enemy());
    }

    // optional uint32 guildwar_enemy_exp = 16;
    if (has_guildwar_enemy_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildwar_enemy_exp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 city_level = 17;
    if (has_city_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_level());
    }

    // optional uint32 city_exp = 18;
    if (has_city_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_exp());
    }

  }
  // repeated uint32 unlocked_skill = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlocked_skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlocked_skill(i));
    }
    total_size += 1 * this->unlocked_skill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInfo::MergeFrom(const GuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlocked_skill_.MergeFrom(from.unlocked_skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_creater()) {
      set_creater(from.creater());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_manifesto()) {
      set_manifesto(from.manifesto());
    }
    if (from.has_ritual()) {
      set_ritual(from.ritual());
    }
    if (from.has_technology_level()) {
      set_technology_level(from.technology_level());
    }
    if (from.has_technology_exp()) {
      set_technology_exp(from.technology_exp());
    }
    if (from.has_guildwar_enemy()) {
      set_guildwar_enemy(from.guildwar_enemy());
    }
    if (from.has_guildwar_enemy_exp()) {
      set_guildwar_enemy_exp(from.guildwar_enemy_exp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_city_level()) {
      set_city_level(from.city_level());
    }
    if (from.has_city_exp()) {
      set_city_exp(from.city_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInfo::CopyFrom(const GuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void GuildInfo::Swap(GuildInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(creater_, other->creater_);
    std::swap(leader_, other->leader_);
    std::swap(createtime_, other->createtime_);
    std::swap(photo_, other->photo_);
    std::swap(name_, other->name_);
    std::swap(notice_, other->notice_);
    std::swap(manifesto_, other->manifesto_);
    std::swap(ritual_, other->ritual_);
    std::swap(technology_level_, other->technology_level_);
    std::swap(technology_exp_, other->technology_exp_);
    unlocked_skill_.Swap(&other->unlocked_skill_);
    std::swap(guildwar_enemy_, other->guildwar_enemy_);
    std::swap(guildwar_enemy_exp_, other->guildwar_enemy_exp_);
    std::swap(city_level_, other->city_level_);
    std::swap(city_exp_, other->city_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInfo_descriptor_;
  metadata.reflection = GuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGuildInfo::kInfoFieldNumber;
const int ClientGuildInfo::kMembernumFieldNumber;
const int ClientGuildInfo::kMembermaxFieldNumber;
const int ClientGuildInfo::kIsapplyFieldNumber;
const int ClientGuildInfo::kLeadernameFieldNumber;
const int ClientGuildInfo::kMyjobFieldNumber;
#endif  // !_MSC_VER

ClientGuildInfo::ClientGuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientGuildInfo)
}

void ClientGuildInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::TgsProtocol::GuildInfo*>(&::TgsProtocol::GuildInfo::default_instance());
}

ClientGuildInfo::ClientGuildInfo(const ClientGuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientGuildInfo)
}

void ClientGuildInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_ = NULL;
  membernum_ = 0u;
  membermax_ = 0u;
  isapply_ = 0u;
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  myjob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGuildInfo::~ClientGuildInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientGuildInfo)
  SharedDtor();
}

void ClientGuildInfo::SharedDtor() {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void ClientGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGuildInfo_descriptor_;
}

const ClientGuildInfo& ClientGuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientGuildInfo* ClientGuildInfo::default_instance_ = NULL;

ClientGuildInfo* ClientGuildInfo::New() const {
  return new ClientGuildInfo;
}

void ClientGuildInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientGuildInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(membernum_, membermax_);
    ZR_(isapply_, myjob_);
    if (has_info()) {
      if (info_ != NULL) info_->::TgsProtocol::GuildInfo::Clear();
    }
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leadername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientGuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TgsProtocol.GuildInfo info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_membernum;
        break;
      }

      // optional uint32 membernum = 2;
      case 2: {
        if (tag == 16) {
         parse_membernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membernum_)));
          set_has_membernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_membermax;
        break;
      }

      // optional uint32 membermax = 3;
      case 3: {
        if (tag == 24) {
         parse_membermax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membermax_)));
          set_has_membermax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isapply;
        break;
      }

      // optional uint32 isapply = 4;
      case 4: {
        if (tag == 32) {
         parse_isapply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isapply_)));
          set_has_isapply();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_leadername;
        break;
      }

      // optional string leadername = 5;
      case 5: {
        if (tag == 42) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leadername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_myjob;
        break;
      }

      // optional uint32 myjob = 6;
      case 6: {
        if (tag == 48) {
         parse_myjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myjob_)));
          set_has_myjob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientGuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientGuildInfo)
  return false;
#undef DO_
}

void ClientGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientGuildInfo)
  // required .TgsProtocol.GuildInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional uint32 membernum = 2;
  if (has_membernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membernum(), output);
  }

  // optional uint32 membermax = 3;
  if (has_membermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->membermax(), output);
  }

  // optional uint32 isapply = 4;
  if (has_isapply()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isapply(), output);
  }

  // optional string leadername = 5;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->leadername(), output);
  }

  // optional uint32 myjob = 6;
  if (has_myjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->myjob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientGuildInfo)
}

::google::protobuf::uint8* ClientGuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientGuildInfo)
  // required .TgsProtocol.GuildInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional uint32 membernum = 2;
  if (has_membernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membernum(), target);
  }

  // optional uint32 membermax = 3;
  if (has_membermax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->membermax(), target);
  }

  // optional uint32 isapply = 4;
  if (has_isapply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isapply(), target);
  }

  // optional string leadername = 5;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->leadername(), target);
  }

  // optional uint32 myjob = 6;
  if (has_myjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->myjob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientGuildInfo)
  return target;
}

int ClientGuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TgsProtocol.GuildInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 membernum = 2;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membernum());
    }

    // optional uint32 membermax = 3;
    if (has_membermax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membermax());
    }

    // optional uint32 isapply = 4;
    if (has_isapply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isapply());
    }

    // optional string leadername = 5;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

    // optional uint32 myjob = 6;
    if (has_myjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myjob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGuildInfo::MergeFrom(const ClientGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::TgsProtocol::GuildInfo::MergeFrom(from.info());
    }
    if (from.has_membernum()) {
      set_membernum(from.membernum());
    }
    if (from.has_membermax()) {
      set_membermax(from.membermax());
    }
    if (from.has_isapply()) {
      set_isapply(from.isapply());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_myjob()) {
      set_myjob(from.myjob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGuildInfo::CopyFrom(const ClientGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGuildInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ClientGuildInfo::Swap(ClientGuildInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(membernum_, other->membernum_);
    std::swap(membermax_, other->membermax_);
    std::swap(isapply_, other->isapply_);
    std::swap(leadername_, other->leadername_);
    std::swap(myjob_, other->myjob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGuildInfo_descriptor_;
  metadata.reflection = ClientGuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGuildMember::kCharidFieldNumber;
const int ClientGuildMember::kNameFieldNumber;
const int ClientGuildMember::kPhotoFieldNumber;
const int ClientGuildMember::kLevelFieldNumber;
const int ClientGuildMember::kVipFieldNumber;
const int ClientGuildMember::kEffectFieldNumber;
const int ClientGuildMember::kOnlineFieldNumber;
const int ClientGuildMember::kArenarankFieldNumber;
const int ClientGuildMember::kJobFieldNumber;
const int ClientGuildMember::kDevoteFieldNumber;
const int ClientGuildMember::kDailyDevoteFieldNumber;
const int ClientGuildMember::kTypeFieldNumber;
const int ClientGuildMember::kNationalIdFieldNumber;
#endif  // !_MSC_VER

ClientGuildMember::ClientGuildMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientGuildMember)
}

void ClientGuildMember::InitAsDefaultInstance() {
}

ClientGuildMember::ClientGuildMember(const ClientGuildMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientGuildMember)
}

void ClientGuildMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_ = 0u;
  level_ = 0u;
  vip_ = 0u;
  effect_ = GOOGLE_ULONGLONG(0);
  online_ = 0u;
  arenarank_ = 0u;
  job_ = 0u;
  devote_ = 0u;
  dailydevote_ = 0u;
  type_ = 0;
  nationalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGuildMember::~ClientGuildMember() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientGuildMember)
  SharedDtor();
}

void ClientGuildMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClientGuildMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGuildMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGuildMember_descriptor_;
}

const ClientGuildMember& ClientGuildMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientGuildMember* ClientGuildMember::default_instance_ = NULL;

ClientGuildMember* ClientGuildMember::New() const {
  return new ClientGuildMember;
}

void ClientGuildMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientGuildMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(photo_, arenarank_);
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(job_, nationalid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGuildMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientGuildMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_photo;
        break;
      }

      // required uint32 photo = 3;
      case 3: {
        if (tag == 24) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vip;
        break;
      }

      // required uint32 vip = 5;
      case 5: {
        if (tag == 40) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_effect;
        break;
      }

      // required uint64 effect = 6;
      case 6: {
        if (tag == 48) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_online;
        break;
      }

      // optional uint32 online = 7;
      case 7: {
        if (tag == 56) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_arenarank;
        break;
      }

      // optional uint32 arenarank = 8;
      case 8: {
        if (tag == 64) {
         parse_arenarank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenarank_)));
          set_has_arenarank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_job;
        break;
      }

      // optional uint32 job = 9;
      case 9: {
        if (tag == 72) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_devote;
        break;
      }

      // optional uint32 devote = 10;
      case 10: {
        if (tag == 80) {
         parse_devote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devote_)));
          set_has_devote();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_dailyDevote;
        break;
      }

      // optional uint32 dailyDevote = 11;
      case 11: {
        if (tag == 88) {
         parse_dailyDevote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailydevote_)));
          set_has_dailydevote();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional .TgsProtocol.eGuildMemberType type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::eGuildMemberType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::eGuildMemberType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_nationalId;
        break;
      }

      // optional uint32 nationalId = 13;
      case 13: {
        if (tag == 104) {
         parse_nationalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nationalid_)));
          set_has_nationalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientGuildMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientGuildMember)
  return false;
#undef DO_
}

void ClientGuildMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientGuildMember)
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 photo = 3;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->photo(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint32 vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip(), output);
  }

  // required uint64 effect = 6;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->effect(), output);
  }

  // optional uint32 online = 7;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->online(), output);
  }

  // optional uint32 arenarank = 8;
  if (has_arenarank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->arenarank(), output);
  }

  // optional uint32 job = 9;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->job(), output);
  }

  // optional uint32 devote = 10;
  if (has_devote()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->devote(), output);
  }

  // optional uint32 dailyDevote = 11;
  if (has_dailydevote()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->dailydevote(), output);
  }

  // optional .TgsProtocol.eGuildMemberType type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  // optional uint32 nationalId = 13;
  if (has_nationalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->nationalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientGuildMember)
}

::google::protobuf::uint8* ClientGuildMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientGuildMember)
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 photo = 3;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->photo(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint32 vip = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip(), target);
  }

  // required uint64 effect = 6;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->effect(), target);
  }

  // optional uint32 online = 7;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->online(), target);
  }

  // optional uint32 arenarank = 8;
  if (has_arenarank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->arenarank(), target);
  }

  // optional uint32 job = 9;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->job(), target);
  }

  // optional uint32 devote = 10;
  if (has_devote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->devote(), target);
  }

  // optional uint32 dailyDevote = 11;
  if (has_dailydevote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->dailydevote(), target);
  }

  // optional .TgsProtocol.eGuildMemberType type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->type(), target);
  }

  // optional uint32 nationalId = 13;
  if (has_nationalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->nationalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientGuildMember)
  return target;
}

int ClientGuildMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 photo = 3;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // required uint64 effect = 6;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->effect());
    }

    // optional uint32 online = 7;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online());
    }

    // optional uint32 arenarank = 8;
    if (has_arenarank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenarank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 job = 9;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 devote = 10;
    if (has_devote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devote());
    }

    // optional uint32 dailyDevote = 11;
    if (has_dailydevote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailydevote());
    }

    // optional .TgsProtocol.eGuildMemberType type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 nationalId = 13;
    if (has_nationalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nationalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGuildMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGuildMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGuildMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGuildMember::MergeFrom(const ClientGuildMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_arenarank()) {
      set_arenarank(from.arenarank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_devote()) {
      set_devote(from.devote());
    }
    if (from.has_dailydevote()) {
      set_dailydevote(from.dailydevote());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_nationalid()) {
      set_nationalid(from.nationalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGuildMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGuildMember::CopyFrom(const ClientGuildMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGuildMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ClientGuildMember::Swap(ClientGuildMember* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(photo_, other->photo_);
    std::swap(level_, other->level_);
    std::swap(vip_, other->vip_);
    std::swap(effect_, other->effect_);
    std::swap(online_, other->online_);
    std::swap(arenarank_, other->arenarank_);
    std::swap(job_, other->job_);
    std::swap(devote_, other->devote_);
    std::swap(dailydevote_, other->dailydevote_);
    std::swap(type_, other->type_);
    std::swap(nationalid_, other->nationalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGuildMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGuildMember_descriptor_;
  metadata.reflection = ClientGuildMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGuildRitual::kRateFieldNumber;
const int ClientGuildRitual::kRitualFieldNumber;
const int ClientGuildRitual::kDaysFieldNumber;
const int ClientGuildRitual::kRewardgotFieldNumber;
const int ClientGuildRitual::kRaterewardFieldNumber;
const int ClientGuildRitual::kGuildlevelFieldNumber;
const int ClientGuildRitual::kGuildexpFieldNumber;
#endif  // !_MSC_VER

ClientGuildRitual::ClientGuildRitual()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientGuildRitual)
}

void ClientGuildRitual::InitAsDefaultInstance() {
}

ClientGuildRitual::ClientGuildRitual(const ClientGuildRitual& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientGuildRitual)
}

void ClientGuildRitual::SharedCtor() {
  _cached_size_ = 0;
  rate_ = 0u;
  ritual_ = 0u;
  days_ = 0u;
  rewardgot_ = 0u;
  ratereward_ = 0u;
  guildlevel_ = 0u;
  guildexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGuildRitual::~ClientGuildRitual() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientGuildRitual)
  SharedDtor();
}

void ClientGuildRitual::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientGuildRitual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGuildRitual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGuildRitual_descriptor_;
}

const ClientGuildRitual& ClientGuildRitual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientGuildRitual* ClientGuildRitual::default_instance_ = NULL;

ClientGuildRitual* ClientGuildRitual::New() const {
  return new ClientGuildRitual;
}

void ClientGuildRitual::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientGuildRitual*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(rate_, guildexp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGuildRitual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientGuildRitual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ritual;
        break;
      }

      // optional uint32 ritual = 2;
      case 2: {
        if (tag == 16) {
         parse_ritual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ritual_)));
          set_has_ritual();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_days;
        break;
      }

      // optional uint32 days = 3;
      case 3: {
        if (tag == 24) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rewardgot;
        break;
      }

      // optional uint32 rewardgot = 4;
      case 4: {
        if (tag == 32) {
         parse_rewardgot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardgot_)));
          set_has_rewardgot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ratereward;
        break;
      }

      // optional uint32 ratereward = 5;
      case 5: {
        if (tag == 40) {
         parse_ratereward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratereward_)));
          set_has_ratereward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_guildlevel;
        break;
      }

      // optional uint32 guildlevel = 6;
      case 6: {
        if (tag == 48) {
         parse_guildlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlevel_)));
          set_has_guildlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_guildexp;
        break;
      }

      // optional uint32 guildexp = 7;
      case 7: {
        if (tag == 56) {
         parse_guildexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildexp_)));
          set_has_guildexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientGuildRitual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientGuildRitual)
  return false;
#undef DO_
}

void ClientGuildRitual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientGuildRitual)
  // required uint32 rate = 1;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rate(), output);
  }

  // optional uint32 ritual = 2;
  if (has_ritual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ritual(), output);
  }

  // optional uint32 days = 3;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->days(), output);
  }

  // optional uint32 rewardgot = 4;
  if (has_rewardgot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rewardgot(), output);
  }

  // optional uint32 ratereward = 5;
  if (has_ratereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ratereward(), output);
  }

  // optional uint32 guildlevel = 6;
  if (has_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->guildlevel(), output);
  }

  // optional uint32 guildexp = 7;
  if (has_guildexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->guildexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientGuildRitual)
}

::google::protobuf::uint8* ClientGuildRitual::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientGuildRitual)
  // required uint32 rate = 1;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rate(), target);
  }

  // optional uint32 ritual = 2;
  if (has_ritual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ritual(), target);
  }

  // optional uint32 days = 3;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->days(), target);
  }

  // optional uint32 rewardgot = 4;
  if (has_rewardgot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rewardgot(), target);
  }

  // optional uint32 ratereward = 5;
  if (has_ratereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ratereward(), target);
  }

  // optional uint32 guildlevel = 6;
  if (has_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->guildlevel(), target);
  }

  // optional uint32 guildexp = 7;
  if (has_guildexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->guildexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientGuildRitual)
  return target;
}

int ClientGuildRitual::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rate = 1;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // optional uint32 ritual = 2;
    if (has_ritual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ritual());
    }

    // optional uint32 days = 3;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days());
    }

    // optional uint32 rewardgot = 4;
    if (has_rewardgot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardgot());
    }

    // optional uint32 ratereward = 5;
    if (has_ratereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ratereward());
    }

    // optional uint32 guildlevel = 6;
    if (has_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlevel());
    }

    // optional uint32 guildexp = 7;
    if (has_guildexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGuildRitual::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGuildRitual* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGuildRitual*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGuildRitual::MergeFrom(const ClientGuildRitual& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_ritual()) {
      set_ritual(from.ritual());
    }
    if (from.has_days()) {
      set_days(from.days());
    }
    if (from.has_rewardgot()) {
      set_rewardgot(from.rewardgot());
    }
    if (from.has_ratereward()) {
      set_ratereward(from.ratereward());
    }
    if (from.has_guildlevel()) {
      set_guildlevel(from.guildlevel());
    }
    if (from.has_guildexp()) {
      set_guildexp(from.guildexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGuildRitual::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGuildRitual::CopyFrom(const ClientGuildRitual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGuildRitual::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientGuildRitual::Swap(ClientGuildRitual* other) {
  if (other != this) {
    std::swap(rate_, other->rate_);
    std::swap(ritual_, other->ritual_);
    std::swap(days_, other->days_);
    std::swap(rewardgot_, other->rewardgot_);
    std::swap(ratereward_, other->ratereward_);
    std::swap(guildlevel_, other->guildlevel_);
    std::swap(guildexp_, other->guildexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGuildRitual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGuildRitual_descriptor_;
  metadata.reflection = ClientGuildRitual_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGuildTechnology::kTechnologyLevelFieldNumber;
const int ClientGuildTechnology::kTechnologyExpFieldNumber;
const int ClientGuildTechnology::kUnlockedSkillFieldNumber;
#endif  // !_MSC_VER

ClientGuildTechnology::ClientGuildTechnology()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientGuildTechnology)
}

void ClientGuildTechnology::InitAsDefaultInstance() {
}

ClientGuildTechnology::ClientGuildTechnology(const ClientGuildTechnology& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientGuildTechnology)
}

void ClientGuildTechnology::SharedCtor() {
  _cached_size_ = 0;
  technology_level_ = 0u;
  technology_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGuildTechnology::~ClientGuildTechnology() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientGuildTechnology)
  SharedDtor();
}

void ClientGuildTechnology::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientGuildTechnology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGuildTechnology::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGuildTechnology_descriptor_;
}

const ClientGuildTechnology& ClientGuildTechnology::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientGuildTechnology* ClientGuildTechnology::default_instance_ = NULL;

ClientGuildTechnology* ClientGuildTechnology::New() const {
  return new ClientGuildTechnology;
}

void ClientGuildTechnology::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientGuildTechnology*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(technology_level_, technology_exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unlocked_skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGuildTechnology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientGuildTechnology)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 technology_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &technology_level_)));
          set_has_technology_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_technology_exp;
        break;
      }

      // required uint32 technology_exp = 2;
      case 2: {
        if (tag == 16) {
         parse_technology_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &technology_exp_)));
          set_has_technology_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlocked_skill;
        break;
      }

      // repeated uint32 unlocked_skill = 3;
      case 3: {
        if (tag == 24) {
         parse_unlocked_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_unlocked_skill())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlocked_skill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlocked_skill;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientGuildTechnology)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientGuildTechnology)
  return false;
#undef DO_
}

void ClientGuildTechnology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientGuildTechnology)
  // required uint32 technology_level = 1;
  if (has_technology_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->technology_level(), output);
  }

  // required uint32 technology_exp = 2;
  if (has_technology_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->technology_exp(), output);
  }

  // repeated uint32 unlocked_skill = 3;
  for (int i = 0; i < this->unlocked_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->unlocked_skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientGuildTechnology)
}

::google::protobuf::uint8* ClientGuildTechnology::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientGuildTechnology)
  // required uint32 technology_level = 1;
  if (has_technology_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->technology_level(), target);
  }

  // required uint32 technology_exp = 2;
  if (has_technology_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->technology_exp(), target);
  }

  // repeated uint32 unlocked_skill = 3;
  for (int i = 0; i < this->unlocked_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->unlocked_skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientGuildTechnology)
  return target;
}

int ClientGuildTechnology::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 technology_level = 1;
    if (has_technology_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->technology_level());
    }

    // required uint32 technology_exp = 2;
    if (has_technology_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->technology_exp());
    }

  }
  // repeated uint32 unlocked_skill = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlocked_skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlocked_skill(i));
    }
    total_size += 1 * this->unlocked_skill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGuildTechnology::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGuildTechnology* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGuildTechnology*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGuildTechnology::MergeFrom(const ClientGuildTechnology& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlocked_skill_.MergeFrom(from.unlocked_skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_technology_level()) {
      set_technology_level(from.technology_level());
    }
    if (from.has_technology_exp()) {
      set_technology_exp(from.technology_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGuildTechnology::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGuildTechnology::CopyFrom(const ClientGuildTechnology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGuildTechnology::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientGuildTechnology::Swap(ClientGuildTechnology* other) {
  if (other != this) {
    std::swap(technology_level_, other->technology_level_);
    std::swap(technology_exp_, other->technology_exp_);
    unlocked_skill_.Swap(&other->unlocked_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGuildTechnology::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGuildTechnology_descriptor_;
  metadata.reflection = ClientGuildTechnology_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGuildState::kJobFieldNumber;
const int ClientGuildState::kNameFieldNumber;
const int ClientGuildState::kTypeFieldNumber;
const int ClientGuildState::kValueFieldNumber;
const int ClientGuildState::kName2FieldNumber;
#endif  // !_MSC_VER

ClientGuildState::ClientGuildState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientGuildState)
}

void ClientGuildState::InitAsDefaultInstance() {
}

ClientGuildState::ClientGuildState(const ClientGuildState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientGuildState)
}

void ClientGuildState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  value_ = 0u;
  name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGuildState::~ClientGuildState() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientGuildState)
  SharedDtor();
}

void ClientGuildState::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name2_;
  }
  if (this != default_instance_) {
  }
}

void ClientGuildState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGuildState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGuildState_descriptor_;
}

const ClientGuildState& ClientGuildState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientGuildState* ClientGuildState::default_instance_ = NULL;

ClientGuildState* ClientGuildState::New() const {
  return new ClientGuildState;
}

void ClientGuildState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientGuildState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(job_, type_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    value_ = 0u;
    if (has_name2()) {
      if (name2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name2_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGuildState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientGuildState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 job = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .TgsProtocol.eGuildStateType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::eGuildStateType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::eGuildStateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // required uint32 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name2;
        break;
      }

      // optional string name2 = 5;
      case 5: {
        if (tag == 42) {
         parse_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name2().data(), this->name2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientGuildState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientGuildState)
  return false;
#undef DO_
}

void ClientGuildState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientGuildState)
  // required uint32 job = 1;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->job(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .TgsProtocol.eGuildStateType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required uint32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // optional string name2 = 5;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientGuildState)
}

::google::protobuf::uint8* ClientGuildState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientGuildState)
  // required uint32 job = 1;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->job(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .TgsProtocol.eGuildStateType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required uint32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // optional string name2 = 5;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientGuildState)
  return target;
}

int ClientGuildState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 job = 1;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .TgsProtocol.eGuildStateType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional string name2 = 5;
    if (has_name2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGuildState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGuildState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGuildState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGuildState::MergeFrom(const ClientGuildState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_name2()) {
      set_name2(from.name2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGuildState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGuildState::CopyFrom(const ClientGuildState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGuildState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClientGuildState::Swap(ClientGuildState* other) {
  if (other != this) {
    std::swap(job_, other->job_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(name2_, other->name2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGuildState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGuildState_descriptor_;
  metadata.reflection = ClientGuildState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGuildWarMsg::kIsAttackFieldNumber;
const int ClientGuildWarMsg::kIsAttackerWinFieldNumber;
const int ClientGuildWarMsg::kAttackerNameFieldNumber;
const int ClientGuildWarMsg::kAttackerStarFieldNumber;
const int ClientGuildWarMsg::kDefenderNameFieldNumber;
const int ClientGuildWarMsg::kDefenderStarFieldNumber;
const int ClientGuildWarMsg::kEnemyGuildNameFieldNumber;
const int ClientGuildWarMsg::kExpFieldNumber;
const int ClientGuildWarMsg::kAttackerTotalFieldNumber;
const int ClientGuildWarMsg::kAttackerWinFieldNumber;
const int ClientGuildWarMsg::kTotalExpFieldNumber;
#endif  // !_MSC_VER

ClientGuildWarMsg::ClientGuildWarMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientGuildWarMsg)
}

void ClientGuildWarMsg::InitAsDefaultInstance() {
}

ClientGuildWarMsg::ClientGuildWarMsg(const ClientGuildWarMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientGuildWarMsg)
}

void ClientGuildWarMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_attack_ = false;
  is_attacker_win_ = false;
  attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attacker_star_ = 0u;
  defender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defender_star_ = 0u;
  enemy_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_ = 0u;
  attacker_total_ = 0u;
  attacker_win_ = 0u;
  total_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGuildWarMsg::~ClientGuildWarMsg() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientGuildWarMsg)
  SharedDtor();
}

void ClientGuildWarMsg::SharedDtor() {
  if (attacker_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attacker_name_;
  }
  if (defender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defender_name_;
  }
  if (enemy_guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enemy_guild_name_;
  }
  if (this != default_instance_) {
  }
}

void ClientGuildWarMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGuildWarMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGuildWarMsg_descriptor_;
}

const ClientGuildWarMsg& ClientGuildWarMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientGuildWarMsg* ClientGuildWarMsg::default_instance_ = NULL;

ClientGuildWarMsg* ClientGuildWarMsg::New() const {
  return new ClientGuildWarMsg;
}

void ClientGuildWarMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientGuildWarMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(is_attack_, attacker_star_);
    ZR_(defender_star_, exp_);
    if (has_attacker_name()) {
      if (attacker_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attacker_name_->clear();
      }
    }
    if (has_defender_name()) {
      if (defender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defender_name_->clear();
      }
    }
    if (has_enemy_guild_name()) {
      if (enemy_guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enemy_guild_name_->clear();
      }
    }
  }
  ZR_(attacker_total_, total_exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGuildWarMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientGuildWarMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_attack = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attack_)));
          set_has_is_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_attacker_win;
        break;
      }

      // required bool is_attacker_win = 2;
      case 2: {
        if (tag == 16) {
         parse_is_attacker_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_win_)));
          set_has_is_attacker_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attacker_name;
        break;
      }

      // required string attacker_name = 3;
      case 3: {
        if (tag == 26) {
         parse_attacker_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attacker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attacker_name().data(), this->attacker_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "attacker_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attacker_star;
        break;
      }

      // required uint32 attacker_star = 4;
      case 4: {
        if (tag == 32) {
         parse_attacker_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_star_)));
          set_has_attacker_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_defender_name;
        break;
      }

      // required string defender_name = 5;
      case 5: {
        if (tag == 42) {
         parse_defender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defender_name().data(), this->defender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "defender_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_defender_star;
        break;
      }

      // required uint32 defender_star = 6;
      case 6: {
        if (tag == 48) {
         parse_defender_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defender_star_)));
          set_has_defender_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_enemy_guild_name;
        break;
      }

      // required string enemy_guild_name = 7;
      case 7: {
        if (tag == 58) {
         parse_enemy_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemy_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enemy_guild_name().data(), this->enemy_guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "enemy_guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // required uint32 exp = 8;
      case 8: {
        if (tag == 64) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_attacker_total;
        break;
      }

      // optional uint32 attacker_total = 9;
      case 9: {
        if (tag == 72) {
         parse_attacker_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_total_)));
          set_has_attacker_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_attacker_win;
        break;
      }

      // optional uint32 attacker_win = 10;
      case 10: {
        if (tag == 80) {
         parse_attacker_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_win_)));
          set_has_attacker_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_total_exp;
        break;
      }

      // optional uint32 total_exp = 11;
      case 11: {
        if (tag == 88) {
         parse_total_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_exp_)));
          set_has_total_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientGuildWarMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientGuildWarMsg)
  return false;
#undef DO_
}

void ClientGuildWarMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientGuildWarMsg)
  // required bool is_attack = 1;
  if (has_is_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_attack(), output);
  }

  // required bool is_attacker_win = 2;
  if (has_is_attacker_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_attacker_win(), output);
  }

  // required string attacker_name = 3;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attacker_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->attacker_name(), output);
  }

  // required uint32 attacker_star = 4;
  if (has_attacker_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attacker_star(), output);
  }

  // required string defender_name = 5;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->defender_name(), output);
  }

  // required uint32 defender_star = 6;
  if (has_defender_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->defender_star(), output);
  }

  // required string enemy_guild_name = 7;
  if (has_enemy_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enemy_guild_name().data(), this->enemy_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enemy_guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->enemy_guild_name(), output);
  }

  // required uint32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->exp(), output);
  }

  // optional uint32 attacker_total = 9;
  if (has_attacker_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->attacker_total(), output);
  }

  // optional uint32 attacker_win = 10;
  if (has_attacker_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->attacker_win(), output);
  }

  // optional uint32 total_exp = 11;
  if (has_total_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->total_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientGuildWarMsg)
}

::google::protobuf::uint8* ClientGuildWarMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientGuildWarMsg)
  // required bool is_attack = 1;
  if (has_is_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_attack(), target);
  }

  // required bool is_attacker_win = 2;
  if (has_is_attacker_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_attacker_win(), target);
  }

  // required string attacker_name = 3;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attacker_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->attacker_name(), target);
  }

  // required uint32 attacker_star = 4;
  if (has_attacker_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attacker_star(), target);
  }

  // required string defender_name = 5;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->defender_name(), target);
  }

  // required uint32 defender_star = 6;
  if (has_defender_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->defender_star(), target);
  }

  // required string enemy_guild_name = 7;
  if (has_enemy_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enemy_guild_name().data(), this->enemy_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enemy_guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->enemy_guild_name(), target);
  }

  // required uint32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->exp(), target);
  }

  // optional uint32 attacker_total = 9;
  if (has_attacker_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->attacker_total(), target);
  }

  // optional uint32 attacker_win = 10;
  if (has_attacker_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->attacker_win(), target);
  }

  // optional uint32 total_exp = 11;
  if (has_total_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->total_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientGuildWarMsg)
  return target;
}

int ClientGuildWarMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_attack = 1;
    if (has_is_attack()) {
      total_size += 1 + 1;
    }

    // required bool is_attacker_win = 2;
    if (has_is_attacker_win()) {
      total_size += 1 + 1;
    }

    // required string attacker_name = 3;
    if (has_attacker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attacker_name());
    }

    // required uint32 attacker_star = 4;
    if (has_attacker_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_star());
    }

    // required string defender_name = 5;
    if (has_defender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defender_name());
    }

    // required uint32 defender_star = 6;
    if (has_defender_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defender_star());
    }

    // required string enemy_guild_name = 7;
    if (has_enemy_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemy_guild_name());
    }

    // required uint32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 attacker_total = 9;
    if (has_attacker_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_total());
    }

    // optional uint32 attacker_win = 10;
    if (has_attacker_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_win());
    }

    // optional uint32 total_exp = 11;
    if (has_total_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGuildWarMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGuildWarMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGuildWarMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGuildWarMsg::MergeFrom(const ClientGuildWarMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_attack()) {
      set_is_attack(from.is_attack());
    }
    if (from.has_is_attacker_win()) {
      set_is_attacker_win(from.is_attacker_win());
    }
    if (from.has_attacker_name()) {
      set_attacker_name(from.attacker_name());
    }
    if (from.has_attacker_star()) {
      set_attacker_star(from.attacker_star());
    }
    if (from.has_defender_name()) {
      set_defender_name(from.defender_name());
    }
    if (from.has_defender_star()) {
      set_defender_star(from.defender_star());
    }
    if (from.has_enemy_guild_name()) {
      set_enemy_guild_name(from.enemy_guild_name());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attacker_total()) {
      set_attacker_total(from.attacker_total());
    }
    if (from.has_attacker_win()) {
      set_attacker_win(from.attacker_win());
    }
    if (from.has_total_exp()) {
      set_total_exp(from.total_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGuildWarMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGuildWarMsg::CopyFrom(const ClientGuildWarMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGuildWarMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void ClientGuildWarMsg::Swap(ClientGuildWarMsg* other) {
  if (other != this) {
    std::swap(is_attack_, other->is_attack_);
    std::swap(is_attacker_win_, other->is_attacker_win_);
    std::swap(attacker_name_, other->attacker_name_);
    std::swap(attacker_star_, other->attacker_star_);
    std::swap(defender_name_, other->defender_name_);
    std::swap(defender_star_, other->defender_star_);
    std::swap(enemy_guild_name_, other->enemy_guild_name_);
    std::swap(exp_, other->exp_);
    std::swap(attacker_total_, other->attacker_total_);
    std::swap(attacker_win_, other->attacker_win_);
    std::swap(total_exp_, other->total_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGuildWarMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGuildWarMsg_descriptor_;
  metadata.reflection = ClientGuildWarMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGuildWarEndMsg::kIsAttackFieldNumber;
const int ClientGuildWarEndMsg::kEnemyGuildNameFieldNumber;
const int ClientGuildWarEndMsg::kExpFieldNumber;
const int ClientGuildWarEndMsg::kAttackTotalFieldNumber;
const int ClientGuildWarEndMsg::kAttackWinFieldNumber;
#endif  // !_MSC_VER

ClientGuildWarEndMsg::ClientGuildWarEndMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientGuildWarEndMsg)
}

void ClientGuildWarEndMsg::InitAsDefaultInstance() {
}

ClientGuildWarEndMsg::ClientGuildWarEndMsg(const ClientGuildWarEndMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientGuildWarEndMsg)
}

void ClientGuildWarEndMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_attack_ = false;
  enemy_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_ = 0u;
  attack_total_ = 0u;
  attack_win_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGuildWarEndMsg::~ClientGuildWarEndMsg() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientGuildWarEndMsg)
  SharedDtor();
}

void ClientGuildWarEndMsg::SharedDtor() {
  if (enemy_guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enemy_guild_name_;
  }
  if (this != default_instance_) {
  }
}

void ClientGuildWarEndMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGuildWarEndMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGuildWarEndMsg_descriptor_;
}

const ClientGuildWarEndMsg& ClientGuildWarEndMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientGuildWarEndMsg* ClientGuildWarEndMsg::default_instance_ = NULL;

ClientGuildWarEndMsg* ClientGuildWarEndMsg::New() const {
  return new ClientGuildWarEndMsg;
}

void ClientGuildWarEndMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientGuildWarEndMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(is_attack_, attack_win_);
    if (has_enemy_guild_name()) {
      if (enemy_guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enemy_guild_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGuildWarEndMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientGuildWarEndMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_attack = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attack_)));
          set_has_is_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_enemy_guild_name;
        break;
      }

      // required string enemy_guild_name = 2;
      case 2: {
        if (tag == 18) {
         parse_enemy_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemy_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enemy_guild_name().data(), this->enemy_guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "enemy_guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required uint32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attack_total;
        break;
      }

      // required uint32 attack_total = 4;
      case 4: {
        if (tag == 32) {
         parse_attack_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_total_)));
          set_has_attack_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_attack_win;
        break;
      }

      // required uint32 attack_win = 5;
      case 5: {
        if (tag == 40) {
         parse_attack_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_win_)));
          set_has_attack_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientGuildWarEndMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientGuildWarEndMsg)
  return false;
#undef DO_
}

void ClientGuildWarEndMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientGuildWarEndMsg)
  // required bool is_attack = 1;
  if (has_is_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_attack(), output);
  }

  // required string enemy_guild_name = 2;
  if (has_enemy_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enemy_guild_name().data(), this->enemy_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enemy_guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->enemy_guild_name(), output);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // required uint32 attack_total = 4;
  if (has_attack_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attack_total(), output);
  }

  // required uint32 attack_win = 5;
  if (has_attack_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attack_win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientGuildWarEndMsg)
}

::google::protobuf::uint8* ClientGuildWarEndMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientGuildWarEndMsg)
  // required bool is_attack = 1;
  if (has_is_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_attack(), target);
  }

  // required string enemy_guild_name = 2;
  if (has_enemy_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enemy_guild_name().data(), this->enemy_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enemy_guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->enemy_guild_name(), target);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // required uint32 attack_total = 4;
  if (has_attack_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attack_total(), target);
  }

  // required uint32 attack_win = 5;
  if (has_attack_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attack_win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientGuildWarEndMsg)
  return target;
}

int ClientGuildWarEndMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_attack = 1;
    if (has_is_attack()) {
      total_size += 1 + 1;
    }

    // required string enemy_guild_name = 2;
    if (has_enemy_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemy_guild_name());
    }

    // required uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 attack_total = 4;
    if (has_attack_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_total());
    }

    // required uint32 attack_win = 5;
    if (has_attack_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGuildWarEndMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGuildWarEndMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGuildWarEndMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGuildWarEndMsg::MergeFrom(const ClientGuildWarEndMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_attack()) {
      set_is_attack(from.is_attack());
    }
    if (from.has_enemy_guild_name()) {
      set_enemy_guild_name(from.enemy_guild_name());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_attack_total()) {
      set_attack_total(from.attack_total());
    }
    if (from.has_attack_win()) {
      set_attack_win(from.attack_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGuildWarEndMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGuildWarEndMsg::CopyFrom(const ClientGuildWarEndMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGuildWarEndMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ClientGuildWarEndMsg::Swap(ClientGuildWarEndMsg* other) {
  if (other != this) {
    std::swap(is_attack_, other->is_attack_);
    std::swap(enemy_guild_name_, other->enemy_guild_name_);
    std::swap(exp_, other->exp_);
    std::swap(attack_total_, other->attack_total_);
    std::swap(attack_win_, other->attack_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGuildWarEndMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGuildWarEndMsg_descriptor_;
  metadata.reflection = ClientGuildWarEndMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonthCardEle::kIndexFieldNumber;
const int MonthCardEle::kCountFieldNumber;
const int MonthCardEle::kStartTimeFieldNumber;
const int MonthCardEle::kRepeatFieldNumber;
#endif  // !_MSC_VER

MonthCardEle::MonthCardEle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.MonthCardEle)
}

void MonthCardEle::InitAsDefaultInstance() {
}

MonthCardEle::MonthCardEle(const MonthCardEle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.MonthCardEle)
}

void MonthCardEle::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  count_ = 0u;
  starttime_ = 0u;
  repeat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthCardEle::~MonthCardEle() {
  // @@protoc_insertion_point(destructor:TgsProtocol.MonthCardEle)
  SharedDtor();
}

void MonthCardEle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonthCardEle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonthCardEle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonthCardEle_descriptor_;
}

const MonthCardEle& MonthCardEle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

MonthCardEle* MonthCardEle::default_instance_ = NULL;

MonthCardEle* MonthCardEle::New() const {
  return new MonthCardEle;
}

void MonthCardEle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MonthCardEle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, repeat_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonthCardEle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.MonthCardEle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }

      // required uint32 startTime = 3;
      case 3: {
        if (tag == 24) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_repeat;
        break;
      }

      // required uint32 repeat = 4;
      case 4: {
        if (tag == 32) {
         parse_repeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeat_)));
          set_has_repeat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.MonthCardEle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.MonthCardEle)
  return false;
#undef DO_
}

void MonthCardEle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.MonthCardEle)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starttime(), output);
  }

  // required uint32 repeat = 4;
  if (has_repeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->repeat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.MonthCardEle)
}

::google::protobuf::uint8* MonthCardEle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.MonthCardEle)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starttime(), target);
  }

  // required uint32 repeat = 4;
  if (has_repeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->repeat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.MonthCardEle)
  return target;
}

int MonthCardEle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 repeat = 4;
    if (has_repeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthCardEle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonthCardEle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonthCardEle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonthCardEle::MergeFrom(const MonthCardEle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_repeat()) {
      set_repeat(from.repeat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonthCardEle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonthCardEle::CopyFrom(const MonthCardEle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthCardEle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MonthCardEle::Swap(MonthCardEle* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(starttime_, other->starttime_);
    std::swap(repeat_, other->repeat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonthCardEle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonthCardEle_descriptor_;
  metadata.reflection = MonthCardEle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbMonthCard::kCardFieldNumber;
#endif  // !_MSC_VER

DbMonthCard::DbMonthCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbMonthCard)
}

void DbMonthCard::InitAsDefaultInstance() {
}

DbMonthCard::DbMonthCard(const DbMonthCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbMonthCard)
}

void DbMonthCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbMonthCard::~DbMonthCard() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbMonthCard)
  SharedDtor();
}

void DbMonthCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbMonthCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbMonthCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbMonthCard_descriptor_;
}

const DbMonthCard& DbMonthCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DbMonthCard* DbMonthCard::default_instance_ = NULL;

DbMonthCard* DbMonthCard::New() const {
  return new DbMonthCard;
}

void DbMonthCard::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbMonthCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbMonthCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.MonthCardEle card = 1;
      case 1: {
        if (tag == 10) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbMonthCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbMonthCard)
  return false;
#undef DO_
}

void DbMonthCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbMonthCard)
  // repeated .TgsProtocol.MonthCardEle card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbMonthCard)
}

::google::protobuf::uint8* DbMonthCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbMonthCard)
  // repeated .TgsProtocol.MonthCardEle card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbMonthCard)
  return target;
}

int DbMonthCard::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.MonthCardEle card = 1;
  total_size += 1 * this->card_size();
  for (int i = 0; i < this->card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbMonthCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbMonthCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbMonthCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbMonthCard::MergeFrom(const DbMonthCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbMonthCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbMonthCard::CopyFrom(const DbMonthCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbMonthCard::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->card())) return false;
  return true;
}

void DbMonthCard::Swap(DbMonthCard* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbMonthCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbMonthCard_descriptor_;
  metadata.reflection = DbMonthCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrizeInfo::kTypeFieldNumber;
const int PrizeInfo::kGotFieldNumber;
const int PrizeInfo::kValueFieldNumber;
const int PrizeInfo::kResetFieldNumber;
#endif  // !_MSC_VER

PrizeInfo::PrizeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.PrizeInfo)
}

void PrizeInfo::InitAsDefaultInstance() {
}

PrizeInfo::PrizeInfo(const PrizeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.PrizeInfo)
}

void PrizeInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  got_ = 0;
  value_ = 0;
  reset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrizeInfo::~PrizeInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.PrizeInfo)
  SharedDtor();
}

void PrizeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrizeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrizeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrizeInfo_descriptor_;
}

const PrizeInfo& PrizeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

PrizeInfo* PrizeInfo::default_instance_ = NULL;

PrizeInfo* PrizeInfo::New() const {
  return new PrizeInfo;
}

void PrizeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrizeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, reset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrizeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.PrizeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_got;
        break;
      }

      // required int32 got = 2;
      case 2: {
        if (tag == 16) {
         parse_got:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &got_)));
          set_has_got();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required int32 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reset;
        break;
      }

      // optional uint32 reset = 4;
      case 4: {
        if (tag == 32) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.PrizeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.PrizeInfo)
  return false;
#undef DO_
}

void PrizeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.PrizeInfo)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 got = 2;
  if (has_got()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->got(), output);
  }

  // required int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  // optional uint32 reset = 4;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.PrizeInfo)
}

::google::protobuf::uint8* PrizeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.PrizeInfo)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 got = 2;
  if (has_got()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->got(), target);
  }

  // required int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  // optional uint32 reset = 4;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.PrizeInfo)
  return target;
}

int PrizeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 got = 2;
    if (has_got()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->got());
    }

    // required int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional uint32 reset = 4;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrizeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrizeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrizeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrizeInfo::MergeFrom(const PrizeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_got()) {
      set_got(from.got());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrizeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeInfo::CopyFrom(const PrizeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PrizeInfo::Swap(PrizeInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(got_, other->got_);
    std::swap(value_, other->value_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrizeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrizeInfo_descriptor_;
  metadata.reflection = PrizeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrizeInfoList::kItemFieldNumber;
#endif  // !_MSC_VER

PrizeInfoList::PrizeInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.PrizeInfoList)
}

void PrizeInfoList::InitAsDefaultInstance() {
}

PrizeInfoList::PrizeInfoList(const PrizeInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.PrizeInfoList)
}

void PrizeInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrizeInfoList::~PrizeInfoList() {
  // @@protoc_insertion_point(destructor:TgsProtocol.PrizeInfoList)
  SharedDtor();
}

void PrizeInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrizeInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrizeInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrizeInfoList_descriptor_;
}

const PrizeInfoList& PrizeInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

PrizeInfoList* PrizeInfoList::default_instance_ = NULL;

PrizeInfoList* PrizeInfoList::New() const {
  return new PrizeInfoList;
}

void PrizeInfoList::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrizeInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.PrizeInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.PrizeInfo item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.PrizeInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.PrizeInfoList)
  return false;
#undef DO_
}

void PrizeInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.PrizeInfoList)
  // repeated .TgsProtocol.PrizeInfo item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.PrizeInfoList)
}

::google::protobuf::uint8* PrizeInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.PrizeInfoList)
  // repeated .TgsProtocol.PrizeInfo item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.PrizeInfoList)
  return target;
}

int PrizeInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.PrizeInfo item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrizeInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrizeInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrizeInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrizeInfoList::MergeFrom(const PrizeInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrizeInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeInfoList::CopyFrom(const PrizeInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeInfoList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void PrizeInfoList::Swap(PrizeInfoList* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrizeInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrizeInfoList_descriptor_;
  metadata.reflection = PrizeInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMapInfo::kPassedChapteridFieldNumber;
const int GuildMapInfo::kSelectChapteridFieldNumber;
const int GuildMapInfo::kMapIdFieldNumber;
const int GuildMapInfo::kIsMapPassFieldNumber;
const int GuildMapInfo::kPassTimeFieldNumber;
#endif  // !_MSC_VER

GuildMapInfo::GuildMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildMapInfo)
}

void GuildMapInfo::InitAsDefaultInstance() {
}

GuildMapInfo::GuildMapInfo(const GuildMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildMapInfo)
}

void GuildMapInfo::SharedCtor() {
  _cached_size_ = 0;
  passed_chapterid_ = 0u;
  select_chapterid_ = 0u;
  map_id_ = 0u;
  is_map_pass_ = false;
  pass_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMapInfo::~GuildMapInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildMapInfo)
  SharedDtor();
}

void GuildMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMapInfo_descriptor_;
}

const GuildMapInfo& GuildMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildMapInfo* GuildMapInfo::default_instance_ = NULL;

GuildMapInfo* GuildMapInfo::New() const {
  return new GuildMapInfo;
}

void GuildMapInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildMapInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(passed_chapterid_, pass_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 passed_chapterid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passed_chapterid_)));
          set_has_passed_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_select_chapterid;
        break;
      }

      // required uint32 select_chapterid = 2;
      case 2: {
        if (tag == 16) {
         parse_select_chapterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &select_chapterid_)));
          set_has_select_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 3;
      case 3: {
        if (tag == 24) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_map_pass;
        break;
      }

      // optional bool is_map_pass = 4;
      case 4: {
        if (tag == 32) {
         parse_is_map_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_map_pass_)));
          set_has_is_map_pass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pass_time;
        break;
      }

      // optional uint32 pass_time = 5;
      case 5: {
        if (tag == 40) {
         parse_pass_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_time_)));
          set_has_pass_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildMapInfo)
  return false;
#undef DO_
}

void GuildMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildMapInfo)
  // required uint32 passed_chapterid = 1;
  if (has_passed_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->passed_chapterid(), output);
  }

  // required uint32 select_chapterid = 2;
  if (has_select_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->select_chapterid(), output);
  }

  // optional uint32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->map_id(), output);
  }

  // optional bool is_map_pass = 4;
  if (has_is_map_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_map_pass(), output);
  }

  // optional uint32 pass_time = 5;
  if (has_pass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pass_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildMapInfo)
}

::google::protobuf::uint8* GuildMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildMapInfo)
  // required uint32 passed_chapterid = 1;
  if (has_passed_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->passed_chapterid(), target);
  }

  // required uint32 select_chapterid = 2;
  if (has_select_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->select_chapterid(), target);
  }

  // optional uint32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->map_id(), target);
  }

  // optional bool is_map_pass = 4;
  if (has_is_map_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_map_pass(), target);
  }

  // optional uint32 pass_time = 5;
  if (has_pass_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pass_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildMapInfo)
  return target;
}

int GuildMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 passed_chapterid = 1;
    if (has_passed_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passed_chapterid());
    }

    // required uint32 select_chapterid = 2;
    if (has_select_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->select_chapterid());
    }

    // optional uint32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional bool is_map_pass = 4;
    if (has_is_map_pass()) {
      total_size += 1 + 1;
    }

    // optional uint32 pass_time = 5;
    if (has_pass_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMapInfo::MergeFrom(const GuildMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passed_chapterid()) {
      set_passed_chapterid(from.passed_chapterid());
    }
    if (from.has_select_chapterid()) {
      set_select_chapterid(from.select_chapterid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_is_map_pass()) {
      set_is_map_pass(from.is_map_pass());
    }
    if (from.has_pass_time()) {
      set_pass_time(from.pass_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMapInfo::CopyFrom(const GuildMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuildMapInfo::Swap(GuildMapInfo* other) {
  if (other != this) {
    std::swap(passed_chapterid_, other->passed_chapterid_);
    std::swap(select_chapterid_, other->select_chapterid_);
    std::swap(map_id_, other->map_id_);
    std::swap(is_map_pass_, other->is_map_pass_);
    std::swap(pass_time_, other->pass_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMapInfo_descriptor_;
  metadata.reflection = GuildMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMapMonster::kMonsterIdFieldNumber;
const int GuildMapMonster::kHpPerFieldNumber;
const int GuildMapMonster::kHpMaxFieldNumber;
#endif  // !_MSC_VER

GuildMapMonster::GuildMapMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildMapMonster)
}

void GuildMapMonster::InitAsDefaultInstance() {
}

GuildMapMonster::GuildMapMonster(const GuildMapMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildMapMonster)
}

void GuildMapMonster::SharedCtor() {
  _cached_size_ = 0;
  monster_id_ = 0u;
  hp_per_ = 0u;
  hp_max_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMapMonster::~GuildMapMonster() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildMapMonster)
  SharedDtor();
}

void GuildMapMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMapMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMapMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMapMonster_descriptor_;
}

const GuildMapMonster& GuildMapMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildMapMonster* GuildMapMonster::default_instance_ = NULL;

GuildMapMonster* GuildMapMonster::New() const {
  return new GuildMapMonster;
}

void GuildMapMonster::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildMapMonster*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(monster_id_, hp_max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMapMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildMapMonster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 monster_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hp_per;
        break;
      }

      // required uint32 hp_per = 2;
      case 2: {
        if (tag == 16) {
         parse_hp_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_per_)));
          set_has_hp_per();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp_max;
        break;
      }

      // optional uint32 hp_max = 3;
      case 3: {
        if (tag == 24) {
         parse_hp_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_max_)));
          set_has_hp_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildMapMonster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildMapMonster)
  return false;
#undef DO_
}

void GuildMapMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildMapMonster)
  // required uint32 monster_id = 1;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monster_id(), output);
  }

  // required uint32 hp_per = 2;
  if (has_hp_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp_per(), output);
  }

  // optional uint32 hp_max = 3;
  if (has_hp_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildMapMonster)
}

::google::protobuf::uint8* GuildMapMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildMapMonster)
  // required uint32 monster_id = 1;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monster_id(), target);
  }

  // required uint32 hp_per = 2;
  if (has_hp_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hp_per(), target);
  }

  // optional uint32 hp_max = 3;
  if (has_hp_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildMapMonster)
  return target;
}

int GuildMapMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 monster_id = 1;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
    }

    // required uint32 hp_per = 2;
    if (has_hp_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp_per());
    }

    // optional uint32 hp_max = 3;
    if (has_hp_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMapMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMapMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMapMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMapMonster::MergeFrom(const GuildMapMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_hp_per()) {
      set_hp_per(from.hp_per());
    }
    if (from.has_hp_max()) {
      set_hp_max(from.hp_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMapMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMapMonster::CopyFrom(const GuildMapMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMapMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuildMapMonster::Swap(GuildMapMonster* other) {
  if (other != this) {
    std::swap(monster_id_, other->monster_id_);
    std::swap(hp_per_, other->hp_per_);
    std::swap(hp_max_, other->hp_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMapMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMapMonster_descriptor_;
  metadata.reflection = GuildMapMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMapItem::kSourceFieldNumber;
const int GuildMapItem::kCharidFieldNumber;
const int GuildMapItem::kNameFieldNumber;
const int GuildMapItem::kPhotoFieldNumber;
#endif  // !_MSC_VER

GuildMapItem::GuildMapItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildMapItem)
}

void GuildMapItem::InitAsDefaultInstance() {
  source_ = const_cast< ::TgsProtocol::ClientSource*>(&::TgsProtocol::ClientSource::default_instance());
}

GuildMapItem::GuildMapItem(const GuildMapItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildMapItem)
}

void GuildMapItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = NULL;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMapItem::~GuildMapItem() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildMapItem)
  SharedDtor();
}

void GuildMapItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete source_;
  }
}

void GuildMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMapItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMapItem_descriptor_;
}

const GuildMapItem& GuildMapItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildMapItem* GuildMapItem::default_instance_ = NULL;

GuildMapItem* GuildMapItem::New() const {
  return new GuildMapItem;
}

void GuildMapItem::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_source()) {
      if (source_ != NULL) source_->::TgsProtocol::ClientSource::Clear();
    }
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    photo_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.ClientSource source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_photo;
        break;
      }

      // optional uint32 photo = 4;
      case 4: {
        if (tag == 32) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildMapItem)
  return false;
#undef DO_
}

void GuildMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildMapItem)
  // optional .TgsProtocol.ClientSource source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->source(), output);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 photo = 4;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->photo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildMapItem)
}

::google::protobuf::uint8* GuildMapItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildMapItem)
  // optional .TgsProtocol.ClientSource source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->source(), target);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 photo = 4;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->photo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildMapItem)
  return target;
}

int GuildMapItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.ClientSource source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }

    // optional uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 photo = 4;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMapItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMapItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMapItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMapItem::MergeFrom(const GuildMapItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      mutable_source()->::TgsProtocol::ClientSource::MergeFrom(from.source());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMapItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMapItem::CopyFrom(const GuildMapItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMapItem::IsInitialized() const {

  if (has_source()) {
    if (!this->source().IsInitialized()) return false;
  }
  return true;
}

void GuildMapItem::Swap(GuildMapItem* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(photo_, other->photo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMapItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMapItem_descriptor_;
  metadata.reflection = GuildMapItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMapReward::kMapIdFieldNumber;
const int GuildMapReward::kItemFieldNumber;
#endif  // !_MSC_VER

GuildMapReward::GuildMapReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildMapReward)
}

void GuildMapReward::InitAsDefaultInstance() {
}

GuildMapReward::GuildMapReward(const GuildMapReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildMapReward)
}

void GuildMapReward::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMapReward::~GuildMapReward() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildMapReward)
  SharedDtor();
}

void GuildMapReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMapReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMapReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMapReward_descriptor_;
}

const GuildMapReward& GuildMapReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildMapReward* GuildMapReward::default_instance_ = NULL;

GuildMapReward* GuildMapReward::New() const {
  return new GuildMapReward;
}

void GuildMapReward::Clear() {
  map_id_ = 0u;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMapReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildMapReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.GuildMapItem item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildMapReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildMapReward)
  return false;
#undef DO_
}

void GuildMapReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildMapReward)
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // repeated .TgsProtocol.GuildMapItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildMapReward)
}

::google::protobuf::uint8* GuildMapReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildMapReward)
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }

  // repeated .TgsProtocol.GuildMapItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildMapReward)
  return target;
}

int GuildMapReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

  }
  // repeated .TgsProtocol.GuildMapItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMapReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMapReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMapReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMapReward::MergeFrom(const GuildMapReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMapReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMapReward::CopyFrom(const GuildMapReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMapReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void GuildMapReward::Swap(GuildMapReward* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMapReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMapReward_descriptor_;
  metadata.reflection = GuildMapReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBGuildMap::kInfoFieldNumber;
const int DBGuildMap::kMonsterFieldNumber;
const int DBGuildMap::kItemFieldNumber;
#endif  // !_MSC_VER

DBGuildMap::DBGuildMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBGuildMap)
}

void DBGuildMap::InitAsDefaultInstance() {
  info_ = const_cast< ::TgsProtocol::GuildMapInfo*>(&::TgsProtocol::GuildMapInfo::default_instance());
}

DBGuildMap::DBGuildMap(const DBGuildMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBGuildMap)
}

void DBGuildMap::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBGuildMap::~DBGuildMap() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBGuildMap)
  SharedDtor();
}

void DBGuildMap::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DBGuildMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBGuildMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBGuildMap_descriptor_;
}

const DBGuildMap& DBGuildMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBGuildMap* DBGuildMap::default_instance_ = NULL;

DBGuildMap* DBGuildMap::New() const {
  return new DBGuildMap;
}

void DBGuildMap::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::TgsProtocol::GuildMapInfo::Clear();
  }
  monster_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBGuildMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBGuildMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.GuildMapInfo info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_monster;
        break;
      }

      // repeated .TgsProtocol.GuildMapMonster monster = 2;
      case 2: {
        if (tag == 18) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_monster;
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.GuildMapItem item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBGuildMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBGuildMap)
  return false;
#undef DO_
}

void DBGuildMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBGuildMap)
  // optional .TgsProtocol.GuildMapInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // repeated .TgsProtocol.GuildMapMonster monster = 2;
  for (int i = 0; i < this->monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monster(i), output);
  }

  // repeated .TgsProtocol.GuildMapItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBGuildMap)
}

::google::protobuf::uint8* DBGuildMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBGuildMap)
  // optional .TgsProtocol.GuildMapInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // repeated .TgsProtocol.GuildMapMonster monster = 2;
  for (int i = 0; i < this->monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monster(i), target);
  }

  // repeated .TgsProtocol.GuildMapItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBGuildMap)
  return target;
}

int DBGuildMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.GuildMapInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .TgsProtocol.GuildMapMonster monster = 2;
  total_size += 1 * this->monster_size();
  for (int i = 0; i < this->monster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster(i));
  }

  // repeated .TgsProtocol.GuildMapItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBGuildMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBGuildMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBGuildMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBGuildMap::MergeFrom(const DBGuildMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_.MergeFrom(from.monster_);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::TgsProtocol::GuildMapInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBGuildMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBGuildMap::CopyFrom(const DBGuildMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGuildMap::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->monster())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void DBGuildMap::Swap(DBGuildMap* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    monster_.Swap(&other->monster_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBGuildMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBGuildMap_descriptor_;
  metadata.reflection = DBGuildMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildNewMapInfo::kMapIdFieldNumber;
const int GuildNewMapInfo::kPassTimeFieldNumber;
const int GuildNewMapInfo::kMonsterFieldNumber;
const int GuildNewMapInfo::kItemFieldNumber;
const int GuildNewMapInfo::kPassNameFieldNumber;
#endif  // !_MSC_VER

GuildNewMapInfo::GuildNewMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildNewMapInfo)
}

void GuildNewMapInfo::InitAsDefaultInstance() {
}

GuildNewMapInfo::GuildNewMapInfo(const GuildNewMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildNewMapInfo)
}

void GuildNewMapInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_id_ = 0u;
  pass_time_ = 0u;
  pass_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildNewMapInfo::~GuildNewMapInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildNewMapInfo)
  SharedDtor();
}

void GuildNewMapInfo::SharedDtor() {
  if (pass_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildNewMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildNewMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildNewMapInfo_descriptor_;
}

const GuildNewMapInfo& GuildNewMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildNewMapInfo* GuildNewMapInfo::default_instance_ = NULL;

GuildNewMapInfo* GuildNewMapInfo::New() const {
  return new GuildNewMapInfo;
}

void GuildNewMapInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildNewMapInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(map_id_, pass_time_);
    if (has_pass_name()) {
      if (pass_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  monster_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildNewMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildNewMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pass_time;
        break;
      }

      // optional uint32 pass_time = 2;
      case 2: {
        if (tag == 16) {
         parse_pass_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_time_)));
          set_has_pass_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_monster;
        break;
      }

      // repeated .TgsProtocol.GuildMapMonster monster = 3;
      case 3: {
        if (tag == 26) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_monster;
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.GuildMapItem item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        if (input->ExpectTag(42)) goto parse_pass_name;
        break;
      }

      // optional string pass_name = 5;
      case 5: {
        if (tag == 42) {
         parse_pass_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_name().data(), this->pass_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildNewMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildNewMapInfo)
  return false;
#undef DO_
}

void GuildNewMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildNewMapInfo)
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // optional uint32 pass_time = 2;
  if (has_pass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pass_time(), output);
  }

  // repeated .TgsProtocol.GuildMapMonster monster = 3;
  for (int i = 0; i < this->monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->monster(i), output);
  }

  // repeated .TgsProtocol.GuildMapItem item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(i), output);
  }

  // optional string pass_name = 5;
  if (has_pass_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_name().data(), this->pass_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pass_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildNewMapInfo)
}

::google::protobuf::uint8* GuildNewMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildNewMapInfo)
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }

  // optional uint32 pass_time = 2;
  if (has_pass_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pass_time(), target);
  }

  // repeated .TgsProtocol.GuildMapMonster monster = 3;
  for (int i = 0; i < this->monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->monster(i), target);
  }

  // repeated .TgsProtocol.GuildMapItem item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(i), target);
  }

  // optional string pass_name = 5;
  if (has_pass_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_name().data(), this->pass_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pass_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildNewMapInfo)
  return target;
}

int GuildNewMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 pass_time = 2;
    if (has_pass_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_time());
    }

    // optional string pass_name = 5;
    if (has_pass_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_name());
    }

  }
  // repeated .TgsProtocol.GuildMapMonster monster = 3;
  total_size += 1 * this->monster_size();
  for (int i = 0; i < this->monster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster(i));
  }

  // repeated .TgsProtocol.GuildMapItem item = 4;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildNewMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildNewMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildNewMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildNewMapInfo::MergeFrom(const GuildNewMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_.MergeFrom(from.monster_);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_pass_time()) {
      set_pass_time(from.pass_time());
    }
    if (from.has_pass_name()) {
      set_pass_name(from.pass_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildNewMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildNewMapInfo::CopyFrom(const GuildNewMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildNewMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->monster())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void GuildNewMapInfo::Swap(GuildNewMapInfo* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(pass_time_, other->pass_time_);
    monster_.Swap(&other->monster_);
    item_.Swap(&other->item_);
    std::swap(pass_name_, other->pass_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildNewMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildNewMapInfo_descriptor_;
  metadata.reflection = GuildNewMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildChapterMap::kChapterIdFieldNumber;
const int GuildChapterMap::kMapItemFieldNumber;
const int GuildChapterMap::kAttackPlayerFieldNumber;
const int GuildChapterMap::kSelfAttackedFieldNumber;
#endif  // !_MSC_VER

GuildChapterMap::GuildChapterMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildChapterMap)
}

void GuildChapterMap::InitAsDefaultInstance() {
}

GuildChapterMap::GuildChapterMap(const GuildChapterMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildChapterMap)
}

void GuildChapterMap::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0u;
  self_attacked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildChapterMap::~GuildChapterMap() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildChapterMap)
  SharedDtor();
}

void GuildChapterMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildChapterMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildChapterMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildChapterMap_descriptor_;
}

const GuildChapterMap& GuildChapterMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildChapterMap* GuildChapterMap::default_instance_ = NULL;

GuildChapterMap* GuildChapterMap::New() const {
  return new GuildChapterMap;
}

void GuildChapterMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildChapterMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chapter_id_, self_attacked_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  map_item_.Clear();
  attack_player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildChapterMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildChapterMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 chapter_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map_item;
        break;
      }

      // repeated .TgsProtocol.GuildNewMapInfo map_item = 2;
      case 2: {
        if (tag == 18) {
         parse_map_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map_item;
        if (input->ExpectTag(24)) goto parse_attack_player;
        break;
      }

      // repeated uint64 attack_player = 3;
      case 3: {
        if (tag == 24) {
         parse_attack_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_attack_player())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_attack_player())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attack_player;
        if (input->ExpectTag(32)) goto parse_self_attacked;
        break;
      }

      // optional bool self_attacked = 4;
      case 4: {
        if (tag == 32) {
         parse_self_attacked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_attacked_)));
          set_has_self_attacked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildChapterMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildChapterMap)
  return false;
#undef DO_
}

void GuildChapterMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildChapterMap)
  // required uint32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapter_id(), output);
  }

  // repeated .TgsProtocol.GuildNewMapInfo map_item = 2;
  for (int i = 0; i < this->map_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->map_item(i), output);
  }

  // repeated uint64 attack_player = 3;
  for (int i = 0; i < this->attack_player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->attack_player(i), output);
  }

  // optional bool self_attacked = 4;
  if (has_self_attacked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->self_attacked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildChapterMap)
}

::google::protobuf::uint8* GuildChapterMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildChapterMap)
  // required uint32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapter_id(), target);
  }

  // repeated .TgsProtocol.GuildNewMapInfo map_item = 2;
  for (int i = 0; i < this->map_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->map_item(i), target);
  }

  // repeated uint64 attack_player = 3;
  for (int i = 0; i < this->attack_player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->attack_player(i), target);
  }

  // optional bool self_attacked = 4;
  if (has_self_attacked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->self_attacked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildChapterMap)
  return target;
}

int GuildChapterMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // optional bool self_attacked = 4;
    if (has_self_attacked()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TgsProtocol.GuildNewMapInfo map_item = 2;
  total_size += 1 * this->map_item_size();
  for (int i = 0; i < this->map_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_item(i));
  }

  // repeated uint64 attack_player = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->attack_player_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->attack_player(i));
    }
    total_size += 1 * this->attack_player_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildChapterMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildChapterMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildChapterMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildChapterMap::MergeFrom(const GuildChapterMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_item_.MergeFrom(from.map_item_);
  attack_player_.MergeFrom(from.attack_player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_self_attacked()) {
      set_self_attacked(from.self_attacked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildChapterMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildChapterMap::CopyFrom(const GuildChapterMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildChapterMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->map_item())) return false;
  return true;
}

void GuildChapterMap::Swap(GuildChapterMap* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    map_item_.Swap(&other->map_item_);
    attack_player_.Swap(&other->attack_player_);
    std::swap(self_attacked_, other->self_attacked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildChapterMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildChapterMap_descriptor_;
  metadata.reflection = GuildChapterMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildChapterInfo::kPassedChapteridFieldNumber;
const int GuildChapterInfo::kChapterBackFieldNumber;
const int GuildChapterInfo::kChapterItemFieldNumber;
const int GuildChapterInfo::kAttackChapteridFieldNumber;
#endif  // !_MSC_VER

GuildChapterInfo::GuildChapterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildChapterInfo)
}

void GuildChapterInfo::InitAsDefaultInstance() {
}

GuildChapterInfo::GuildChapterInfo(const GuildChapterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildChapterInfo)
}

void GuildChapterInfo::SharedCtor() {
  _cached_size_ = 0;
  passed_chapterid_ = 0u;
  chapter_back_ = false;
  attack_chapterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildChapterInfo::~GuildChapterInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildChapterInfo)
  SharedDtor();
}

void GuildChapterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildChapterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildChapterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildChapterInfo_descriptor_;
}

const GuildChapterInfo& GuildChapterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildChapterInfo* GuildChapterInfo::default_instance_ = NULL;

GuildChapterInfo* GuildChapterInfo::New() const {
  return new GuildChapterInfo;
}

void GuildChapterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildChapterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(passed_chapterid_, chapter_back_);
    attack_chapterid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  chapter_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildChapterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildChapterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 passed_chapterid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passed_chapterid_)));
          set_has_passed_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chapter_back;
        break;
      }

      // optional bool chapter_back = 2;
      case 2: {
        if (tag == 16) {
         parse_chapter_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chapter_back_)));
          set_has_chapter_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chapter_item;
        break;
      }

      // repeated .TgsProtocol.GuildChapterMap chapter_item = 3;
      case 3: {
        if (tag == 26) {
         parse_chapter_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapter_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chapter_item;
        if (input->ExpectTag(32)) goto parse_attack_chapterid;
        break;
      }

      // optional uint32 attack_chapterid = 4;
      case 4: {
        if (tag == 32) {
         parse_attack_chapterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_chapterid_)));
          set_has_attack_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildChapterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildChapterInfo)
  return false;
#undef DO_
}

void GuildChapterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildChapterInfo)
  // required uint32 passed_chapterid = 1;
  if (has_passed_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->passed_chapterid(), output);
  }

  // optional bool chapter_back = 2;
  if (has_chapter_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chapter_back(), output);
  }

  // repeated .TgsProtocol.GuildChapterMap chapter_item = 3;
  for (int i = 0; i < this->chapter_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chapter_item(i), output);
  }

  // optional uint32 attack_chapterid = 4;
  if (has_attack_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attack_chapterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildChapterInfo)
}

::google::protobuf::uint8* GuildChapterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildChapterInfo)
  // required uint32 passed_chapterid = 1;
  if (has_passed_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->passed_chapterid(), target);
  }

  // optional bool chapter_back = 2;
  if (has_chapter_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chapter_back(), target);
  }

  // repeated .TgsProtocol.GuildChapterMap chapter_item = 3;
  for (int i = 0; i < this->chapter_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chapter_item(i), target);
  }

  // optional uint32 attack_chapterid = 4;
  if (has_attack_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attack_chapterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildChapterInfo)
  return target;
}

int GuildChapterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 passed_chapterid = 1;
    if (has_passed_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passed_chapterid());
    }

    // optional bool chapter_back = 2;
    if (has_chapter_back()) {
      total_size += 1 + 1;
    }

    // optional uint32 attack_chapterid = 4;
    if (has_attack_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_chapterid());
    }

  }
  // repeated .TgsProtocol.GuildChapterMap chapter_item = 3;
  total_size += 1 * this->chapter_item_size();
  for (int i = 0; i < this->chapter_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapter_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildChapterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildChapterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildChapterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildChapterInfo::MergeFrom(const GuildChapterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_item_.MergeFrom(from.chapter_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passed_chapterid()) {
      set_passed_chapterid(from.passed_chapterid());
    }
    if (from.has_chapter_back()) {
      set_chapter_back(from.chapter_back());
    }
    if (from.has_attack_chapterid()) {
      set_attack_chapterid(from.attack_chapterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildChapterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildChapterInfo::CopyFrom(const GuildChapterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildChapterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->chapter_item())) return false;
  return true;
}

void GuildChapterInfo::Swap(GuildChapterInfo* other) {
  if (other != this) {
    std::swap(passed_chapterid_, other->passed_chapterid_);
    std::swap(chapter_back_, other->chapter_back_);
    chapter_item_.Swap(&other->chapter_item_);
    std::swap(attack_chapterid_, other->attack_chapterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildChapterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildChapterInfo_descriptor_;
  metadata.reflection = GuildChapterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildTerritoryEvent::kIdFieldNumber;
const int GuildTerritoryEvent::kTypeFieldNumber;
const int GuildTerritoryEvent::kSourcesFieldNumber;
const int GuildTerritoryEvent::kSuppressCharidFieldNumber;
const int GuildTerritoryEvent::kSuppressNameFieldNumber;
#endif  // !_MSC_VER

GuildTerritoryEvent::GuildTerritoryEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildTerritoryEvent)
}

void GuildTerritoryEvent::InitAsDefaultInstance() {
}

GuildTerritoryEvent::GuildTerritoryEvent(const GuildTerritoryEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildTerritoryEvent)
}

void GuildTerritoryEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0;
  suppress_charid_ = GOOGLE_ULONGLONG(0);
  suppress_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildTerritoryEvent::~GuildTerritoryEvent() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildTerritoryEvent)
  SharedDtor();
}

void GuildTerritoryEvent::SharedDtor() {
  if (suppress_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suppress_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildTerritoryEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildTerritoryEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildTerritoryEvent_descriptor_;
}

const GuildTerritoryEvent& GuildTerritoryEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildTerritoryEvent* GuildTerritoryEvent::default_instance_ = NULL;

GuildTerritoryEvent* GuildTerritoryEvent::New() const {
  return new GuildTerritoryEvent;
}

void GuildTerritoryEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildTerritoryEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(id_, type_);
    suppress_charid_ = GOOGLE_ULONGLONG(0);
    if (has_suppress_name()) {
      if (suppress_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        suppress_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildTerritoryEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildTerritoryEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .TgsProtocol.GuildTerritoryEventType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::GuildTerritoryEventType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::GuildTerritoryEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sources;
        break;
      }

      // repeated .TgsProtocol.ClientSource sources = 3;
      case 3: {
        if (tag == 26) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sources;
        if (input->ExpectTag(32)) goto parse_suppress_charid;
        break;
      }

      // optional uint64 suppress_charid = 4;
      case 4: {
        if (tag == 32) {
         parse_suppress_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &suppress_charid_)));
          set_has_suppress_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_suppress_name;
        break;
      }

      // optional string suppress_name = 5;
      case 5: {
        if (tag == 42) {
         parse_suppress_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suppress_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suppress_name().data(), this->suppress_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "suppress_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildTerritoryEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildTerritoryEvent)
  return false;
#undef DO_
}

void GuildTerritoryEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildTerritoryEvent)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .TgsProtocol.GuildTerritoryEventType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .TgsProtocol.ClientSource sources = 3;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sources(i), output);
  }

  // optional uint64 suppress_charid = 4;
  if (has_suppress_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->suppress_charid(), output);
  }

  // optional string suppress_name = 5;
  if (has_suppress_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suppress_name().data(), this->suppress_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suppress_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->suppress_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildTerritoryEvent)
}

::google::protobuf::uint8* GuildTerritoryEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildTerritoryEvent)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .TgsProtocol.GuildTerritoryEventType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .TgsProtocol.ClientSource sources = 3;
  for (int i = 0; i < this->sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sources(i), target);
  }

  // optional uint64 suppress_charid = 4;
  if (has_suppress_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->suppress_charid(), target);
  }

  // optional string suppress_name = 5;
  if (has_suppress_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suppress_name().data(), this->suppress_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suppress_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->suppress_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildTerritoryEvent)
  return target;
}

int GuildTerritoryEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .TgsProtocol.GuildTerritoryEventType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 suppress_charid = 4;
    if (has_suppress_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->suppress_charid());
    }

    // optional string suppress_name = 5;
    if (has_suppress_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suppress_name());
    }

  }
  // repeated .TgsProtocol.ClientSource sources = 3;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildTerritoryEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildTerritoryEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildTerritoryEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildTerritoryEvent::MergeFrom(const GuildTerritoryEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  sources_.MergeFrom(from.sources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_suppress_charid()) {
      set_suppress_charid(from.suppress_charid());
    }
    if (from.has_suppress_name()) {
      set_suppress_name(from.suppress_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildTerritoryEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildTerritoryEvent::CopyFrom(const GuildTerritoryEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildTerritoryEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->sources())) return false;
  return true;
}

void GuildTerritoryEvent::Swap(GuildTerritoryEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    sources_.Swap(&other->sources_);
    std::swap(suppress_charid_, other->suppress_charid_);
    std::swap(suppress_name_, other->suppress_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildTerritoryEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildTerritoryEvent_descriptor_;
  metadata.reflection = GuildTerritoryEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildTerritoryEventUpdate::kIdFieldNumber;
const int GuildTerritoryEventUpdate::kTypeFieldNumber;
const int GuildTerritoryEventUpdate::kIndexFieldNumber;
#endif  // !_MSC_VER

GuildTerritoryEventUpdate::GuildTerritoryEventUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildTerritoryEventUpdate)
}

void GuildTerritoryEventUpdate::InitAsDefaultInstance() {
}

GuildTerritoryEventUpdate::GuildTerritoryEventUpdate(const GuildTerritoryEventUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildTerritoryEventUpdate)
}

void GuildTerritoryEventUpdate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildTerritoryEventUpdate::~GuildTerritoryEventUpdate() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildTerritoryEventUpdate)
  SharedDtor();
}

void GuildTerritoryEventUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildTerritoryEventUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildTerritoryEventUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildTerritoryEventUpdate_descriptor_;
}

const GuildTerritoryEventUpdate& GuildTerritoryEventUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildTerritoryEventUpdate* GuildTerritoryEventUpdate::default_instance_ = NULL;

GuildTerritoryEventUpdate* GuildTerritoryEventUpdate::New() const {
  return new GuildTerritoryEventUpdate;
}

void GuildTerritoryEventUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildTerritoryEventUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildTerritoryEventUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildTerritoryEventUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .TgsProtocol.GuildTerritoryEventType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::GuildTerritoryEventType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::GuildTerritoryEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required uint32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildTerritoryEventUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildTerritoryEventUpdate)
  return false;
#undef DO_
}

void GuildTerritoryEventUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildTerritoryEventUpdate)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .TgsProtocol.GuildTerritoryEventType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildTerritoryEventUpdate)
}

::google::protobuf::uint8* GuildTerritoryEventUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildTerritoryEventUpdate)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .TgsProtocol.GuildTerritoryEventType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildTerritoryEventUpdate)
  return target;
}

int GuildTerritoryEventUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .TgsProtocol.GuildTerritoryEventType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildTerritoryEventUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildTerritoryEventUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildTerritoryEventUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildTerritoryEventUpdate::MergeFrom(const GuildTerritoryEventUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildTerritoryEventUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildTerritoryEventUpdate::CopyFrom(const GuildTerritoryEventUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildTerritoryEventUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GuildTerritoryEventUpdate::Swap(GuildTerritoryEventUpdate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildTerritoryEventUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildTerritoryEventUpdate_descriptor_;
  metadata.reflection = GuildTerritoryEventUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildTerritoryChapter::kChapterIdFieldNumber;
const int GuildTerritoryChapter::kHeroIdFieldNumber;
const int GuildTerritoryChapter::kBeginTimeFieldNumber;
const int GuildTerritoryChapter::kEventFieldNumber;
const int GuildTerritoryChapter::kSourcesFieldNumber;
const int GuildTerritoryChapter::kSourceRateFieldNumber;
#endif  // !_MSC_VER

GuildTerritoryChapter::GuildTerritoryChapter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildTerritoryChapter)
}

void GuildTerritoryChapter::InitAsDefaultInstance() {
}

GuildTerritoryChapter::GuildTerritoryChapter(const GuildTerritoryChapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildTerritoryChapter)
}

void GuildTerritoryChapter::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0u;
  hero_id_ = 0u;
  begin_time_ = 0u;
  source_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildTerritoryChapter::~GuildTerritoryChapter() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildTerritoryChapter)
  SharedDtor();
}

void GuildTerritoryChapter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildTerritoryChapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildTerritoryChapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildTerritoryChapter_descriptor_;
}

const GuildTerritoryChapter& GuildTerritoryChapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildTerritoryChapter* GuildTerritoryChapter::default_instance_ = NULL;

GuildTerritoryChapter* GuildTerritoryChapter::New() const {
  return new GuildTerritoryChapter;
}

void GuildTerritoryChapter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildTerritoryChapter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chapter_id_, hero_id_);
  ZR_(begin_time_, source_rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  event_.Clear();
  sources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildTerritoryChapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildTerritoryChapter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 chapter_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_begin_time;
        break;
      }

      // required uint32 begin_time = 3;
      case 3: {
        if (tag == 24) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_event;
        break;
      }

      // repeated .TgsProtocol.GuildTerritoryEvent event = 4;
      case 4: {
        if (tag == 34) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_event;
        if (input->ExpectTag(42)) goto parse_sources;
        break;
      }

      // repeated .TgsProtocol.ClientSource sources = 5;
      case 5: {
        if (tag == 42) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sources;
        if (input->ExpectTag(48)) goto parse_source_rate;
        break;
      }

      // required uint32 source_rate = 6;
      case 6: {
        if (tag == 48) {
         parse_source_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_rate_)));
          set_has_source_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildTerritoryChapter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildTerritoryChapter)
  return false;
#undef DO_
}

void GuildTerritoryChapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildTerritoryChapter)
  // required uint32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapter_id(), output);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // required uint32 begin_time = 3;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin_time(), output);
  }

  // repeated .TgsProtocol.GuildTerritoryEvent event = 4;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->event(i), output);
  }

  // repeated .TgsProtocol.ClientSource sources = 5;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sources(i), output);
  }

  // required uint32 source_rate = 6;
  if (has_source_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildTerritoryChapter)
}

::google::protobuf::uint8* GuildTerritoryChapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildTerritoryChapter)
  // required uint32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapter_id(), target);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // required uint32 begin_time = 3;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin_time(), target);
  }

  // repeated .TgsProtocol.GuildTerritoryEvent event = 4;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->event(i), target);
  }

  // repeated .TgsProtocol.ClientSource sources = 5;
  for (int i = 0; i < this->sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sources(i), target);
  }

  // required uint32 source_rate = 6;
  if (has_source_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildTerritoryChapter)
  return target;
}

int GuildTerritoryChapter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // required uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 begin_time = 3;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // required uint32 source_rate = 6;
    if (has_source_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_rate());
    }

  }
  // repeated .TgsProtocol.GuildTerritoryEvent event = 4;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }

  // repeated .TgsProtocol.ClientSource sources = 5;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildTerritoryChapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildTerritoryChapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildTerritoryChapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildTerritoryChapter::MergeFrom(const GuildTerritoryChapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  sources_.MergeFrom(from.sources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_source_rate()) {
      set_source_rate(from.source_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildTerritoryChapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildTerritoryChapter::CopyFrom(const GuildTerritoryChapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildTerritoryChapter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->event())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sources())) return false;
  return true;
}

void GuildTerritoryChapter::Swap(GuildTerritoryChapter* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(begin_time_, other->begin_time_);
    event_.Swap(&other->event_);
    sources_.Swap(&other->sources_);
    std::swap(source_rate_, other->source_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildTerritoryChapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildTerritoryChapter_descriptor_;
  metadata.reflection = GuildTerritoryChapter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildTerritoryInfo::kPassedChapteridFieldNumber;
const int GuildTerritoryInfo::kItemFieldNumber;
#endif  // !_MSC_VER

GuildTerritoryInfo::GuildTerritoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildTerritoryInfo)
}

void GuildTerritoryInfo::InitAsDefaultInstance() {
}

GuildTerritoryInfo::GuildTerritoryInfo(const GuildTerritoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildTerritoryInfo)
}

void GuildTerritoryInfo::SharedCtor() {
  _cached_size_ = 0;
  passed_chapterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildTerritoryInfo::~GuildTerritoryInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildTerritoryInfo)
  SharedDtor();
}

void GuildTerritoryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildTerritoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildTerritoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildTerritoryInfo_descriptor_;
}

const GuildTerritoryInfo& GuildTerritoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildTerritoryInfo* GuildTerritoryInfo::default_instance_ = NULL;

GuildTerritoryInfo* GuildTerritoryInfo::New() const {
  return new GuildTerritoryInfo;
}

void GuildTerritoryInfo::Clear() {
  passed_chapterid_ = 0u;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildTerritoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildTerritoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 passed_chapterid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passed_chapterid_)));
          set_has_passed_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.GuildTerritoryChapter item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildTerritoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildTerritoryInfo)
  return false;
#undef DO_
}

void GuildTerritoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildTerritoryInfo)
  // required uint32 passed_chapterid = 1;
  if (has_passed_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->passed_chapterid(), output);
  }

  // repeated .TgsProtocol.GuildTerritoryChapter item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildTerritoryInfo)
}

::google::protobuf::uint8* GuildTerritoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildTerritoryInfo)
  // required uint32 passed_chapterid = 1;
  if (has_passed_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->passed_chapterid(), target);
  }

  // repeated .TgsProtocol.GuildTerritoryChapter item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildTerritoryInfo)
  return target;
}

int GuildTerritoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 passed_chapterid = 1;
    if (has_passed_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passed_chapterid());
    }

  }
  // repeated .TgsProtocol.GuildTerritoryChapter item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildTerritoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildTerritoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildTerritoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildTerritoryInfo::MergeFrom(const GuildTerritoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passed_chapterid()) {
      set_passed_chapterid(from.passed_chapterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildTerritoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildTerritoryInfo::CopyFrom(const GuildTerritoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildTerritoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void GuildTerritoryInfo::Swap(GuildTerritoryInfo* other) {
  if (other != this) {
    std::swap(passed_chapterid_, other->passed_chapterid_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildTerritoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildTerritoryInfo_descriptor_;
  metadata.reflection = GuildTerritoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberTerritoryInfo::kCharidFieldNumber;
const int GuildMemberTerritoryInfo::kPhotoFieldNumber;
const int GuildMemberTerritoryInfo::kLevelFieldNumber;
const int GuildMemberTerritoryInfo::kNameFieldNumber;
const int GuildMemberTerritoryInfo::kTerritoryCountFieldNumber;
const int GuildMemberTerritoryInfo::kTerritoryRiotCountFieldNumber;
#endif  // !_MSC_VER

GuildMemberTerritoryInfo::GuildMemberTerritoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GuildMemberTerritoryInfo)
}

void GuildMemberTerritoryInfo::InitAsDefaultInstance() {
}

GuildMemberTerritoryInfo::GuildMemberTerritoryInfo(const GuildMemberTerritoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GuildMemberTerritoryInfo)
}

void GuildMemberTerritoryInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  photo_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  territorycount_ = 0u;
  territoryriotcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberTerritoryInfo::~GuildMemberTerritoryInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GuildMemberTerritoryInfo)
  SharedDtor();
}

void GuildMemberTerritoryInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GuildMemberTerritoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberTerritoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberTerritoryInfo_descriptor_;
}

const GuildMemberTerritoryInfo& GuildMemberTerritoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GuildMemberTerritoryInfo* GuildMemberTerritoryInfo::default_instance_ = NULL;

GuildMemberTerritoryInfo* GuildMemberTerritoryInfo::New() const {
  return new GuildMemberTerritoryInfo;
}

void GuildMemberTerritoryInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildMemberTerritoryInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, level_);
    ZR_(territorycount_, territoryriotcount_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberTerritoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GuildMemberTerritoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_photo;
        break;
      }

      // required uint32 photo = 2;
      case 2: {
        if (tag == 16) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_territoryCount;
        break;
      }

      // required uint32 territoryCount = 5;
      case 5: {
        if (tag == 40) {
         parse_territoryCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &territorycount_)));
          set_has_territorycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_territoryRiotCount;
        break;
      }

      // required uint32 territoryRiotCount = 6;
      case 6: {
        if (tag == 48) {
         parse_territoryRiotCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &territoryriotcount_)));
          set_has_territoryriotcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GuildMemberTerritoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GuildMemberTerritoryInfo)
  return false;
#undef DO_
}

void GuildMemberTerritoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GuildMemberTerritoryInfo)
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 photo = 2;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->photo(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required uint32 territoryCount = 5;
  if (has_territorycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->territorycount(), output);
  }

  // required uint32 territoryRiotCount = 6;
  if (has_territoryriotcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->territoryriotcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GuildMemberTerritoryInfo)
}

::google::protobuf::uint8* GuildMemberTerritoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GuildMemberTerritoryInfo)
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 photo = 2;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->photo(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required uint32 territoryCount = 5;
  if (has_territorycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->territorycount(), target);
  }

  // required uint32 territoryRiotCount = 6;
  if (has_territoryriotcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->territoryriotcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GuildMemberTerritoryInfo)
  return target;
}

int GuildMemberTerritoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 photo = 2;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 territoryCount = 5;
    if (has_territorycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->territorycount());
    }

    // required uint32 territoryRiotCount = 6;
    if (has_territoryriotcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->territoryriotcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberTerritoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberTerritoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberTerritoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberTerritoryInfo::MergeFrom(const GuildMemberTerritoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_territorycount()) {
      set_territorycount(from.territorycount());
    }
    if (from.has_territoryriotcount()) {
      set_territoryriotcount(from.territoryriotcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberTerritoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberTerritoryInfo::CopyFrom(const GuildMemberTerritoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberTerritoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GuildMemberTerritoryInfo::Swap(GuildMemberTerritoryInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(photo_, other->photo_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(territorycount_, other->territorycount_);
    std::swap(territoryriotcount_, other->territoryriotcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberTerritoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberTerritoryInfo_descriptor_;
  metadata.reflection = GuildMemberTerritoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTerritoryEvent::kIdFieldNumber;
const int PlayerTerritoryEvent::kTypeFieldNumber;
const int PlayerTerritoryEvent::kSourcesFieldNumber;
const int PlayerTerritoryEvent::kSuppressCharidFieldNumber;
const int PlayerTerritoryEvent::kSuppressNameFieldNumber;
const int PlayerTerritoryEvent::kBeginTimeFieldNumber;
const int PlayerTerritoryEvent::kRateFieldNumber;
const int PlayerTerritoryEvent::kSuppressSourcesFieldNumber;
const int PlayerTerritoryEvent::kPatrolWordsFieldNumber;
const int PlayerTerritoryEvent::kSuppressWordsFieldNumber;
const int PlayerTerritoryEvent::kSuppressTimeFieldNumber;
#endif  // !_MSC_VER

PlayerTerritoryEvent::PlayerTerritoryEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.PlayerTerritoryEvent)
}

void PlayerTerritoryEvent::InitAsDefaultInstance() {
}

PlayerTerritoryEvent::PlayerTerritoryEvent(const PlayerTerritoryEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.PlayerTerritoryEvent)
}

void PlayerTerritoryEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0;
  suppress_charid_ = GOOGLE_ULONGLONG(0);
  suppress_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begin_time_ = 0u;
  rate_ = 0u;
  patrol_words_ = 0u;
  suppress_words_ = 0u;
  suppress_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTerritoryEvent::~PlayerTerritoryEvent() {
  // @@protoc_insertion_point(destructor:TgsProtocol.PlayerTerritoryEvent)
  SharedDtor();
}

void PlayerTerritoryEvent::SharedDtor() {
  if (suppress_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suppress_name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerTerritoryEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTerritoryEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTerritoryEvent_descriptor_;
}

const PlayerTerritoryEvent& PlayerTerritoryEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

PlayerTerritoryEvent* PlayerTerritoryEvent::default_instance_ = NULL;

PlayerTerritoryEvent* PlayerTerritoryEvent::New() const {
  return new PlayerTerritoryEvent;
}

void PlayerTerritoryEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerTerritoryEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(id_, type_);
    ZR_(begin_time_, rate_);
    suppress_charid_ = GOOGLE_ULONGLONG(0);
    if (has_suppress_name()) {
      if (suppress_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        suppress_name_->clear();
      }
    }
  }
  ZR_(patrol_words_, suppress_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  sources_.Clear();
  suppress_sources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerTerritoryEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.PlayerTerritoryEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .TgsProtocol.PlayerTerritoryEventType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PlayerTerritoryEventType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::PlayerTerritoryEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sources;
        break;
      }

      // repeated .TgsProtocol.ClientSource sources = 3;
      case 3: {
        if (tag == 26) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sources;
        if (input->ExpectTag(32)) goto parse_suppress_charid;
        break;
      }

      // optional uint64 suppress_charid = 4;
      case 4: {
        if (tag == 32) {
         parse_suppress_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &suppress_charid_)));
          set_has_suppress_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_suppress_name;
        break;
      }

      // optional string suppress_name = 5;
      case 5: {
        if (tag == 42) {
         parse_suppress_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suppress_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suppress_name().data(), this->suppress_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "suppress_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_begin_time;
        break;
      }

      // optional uint32 begin_time = 6;
      case 6: {
        if (tag == 48) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rate;
        break;
      }

      // optional uint32 rate = 7;
      case 7: {
        if (tag == 56) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_suppress_sources;
        break;
      }

      // repeated .TgsProtocol.ClientSource suppress_sources = 8;
      case 8: {
        if (tag == 66) {
         parse_suppress_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suppress_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_suppress_sources;
        if (input->ExpectTag(72)) goto parse_patrol_words;
        break;
      }

      // optional uint32 patrol_words = 9;
      case 9: {
        if (tag == 72) {
         parse_patrol_words:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patrol_words_)));
          set_has_patrol_words();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_suppress_words;
        break;
      }

      // optional uint32 suppress_words = 10;
      case 10: {
        if (tag == 80) {
         parse_suppress_words:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suppress_words_)));
          set_has_suppress_words();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_suppress_time;
        break;
      }

      // optional uint32 suppress_time = 11;
      case 11: {
        if (tag == 88) {
         parse_suppress_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suppress_time_)));
          set_has_suppress_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.PlayerTerritoryEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.PlayerTerritoryEvent)
  return false;
#undef DO_
}

void PlayerTerritoryEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.PlayerTerritoryEvent)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .TgsProtocol.PlayerTerritoryEventType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .TgsProtocol.ClientSource sources = 3;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sources(i), output);
  }

  // optional uint64 suppress_charid = 4;
  if (has_suppress_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->suppress_charid(), output);
  }

  // optional string suppress_name = 5;
  if (has_suppress_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suppress_name().data(), this->suppress_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suppress_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->suppress_name(), output);
  }

  // optional uint32 begin_time = 6;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->begin_time(), output);
  }

  // optional uint32 rate = 7;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rate(), output);
  }

  // repeated .TgsProtocol.ClientSource suppress_sources = 8;
  for (int i = 0; i < this->suppress_sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->suppress_sources(i), output);
  }

  // optional uint32 patrol_words = 9;
  if (has_patrol_words()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->patrol_words(), output);
  }

  // optional uint32 suppress_words = 10;
  if (has_suppress_words()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->suppress_words(), output);
  }

  // optional uint32 suppress_time = 11;
  if (has_suppress_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->suppress_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.PlayerTerritoryEvent)
}

::google::protobuf::uint8* PlayerTerritoryEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.PlayerTerritoryEvent)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .TgsProtocol.PlayerTerritoryEventType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .TgsProtocol.ClientSource sources = 3;
  for (int i = 0; i < this->sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sources(i), target);
  }

  // optional uint64 suppress_charid = 4;
  if (has_suppress_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->suppress_charid(), target);
  }

  // optional string suppress_name = 5;
  if (has_suppress_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suppress_name().data(), this->suppress_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suppress_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->suppress_name(), target);
  }

  // optional uint32 begin_time = 6;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->begin_time(), target);
  }

  // optional uint32 rate = 7;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rate(), target);
  }

  // repeated .TgsProtocol.ClientSource suppress_sources = 8;
  for (int i = 0; i < this->suppress_sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->suppress_sources(i), target);
  }

  // optional uint32 patrol_words = 9;
  if (has_patrol_words()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->patrol_words(), target);
  }

  // optional uint32 suppress_words = 10;
  if (has_suppress_words()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->suppress_words(), target);
  }

  // optional uint32 suppress_time = 11;
  if (has_suppress_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->suppress_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.PlayerTerritoryEvent)
  return target;
}

int PlayerTerritoryEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .TgsProtocol.PlayerTerritoryEventType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 suppress_charid = 4;
    if (has_suppress_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->suppress_charid());
    }

    // optional string suppress_name = 5;
    if (has_suppress_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suppress_name());
    }

    // optional uint32 begin_time = 6;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // optional uint32 rate = 7;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 patrol_words = 9;
    if (has_patrol_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patrol_words());
    }

    // optional uint32 suppress_words = 10;
    if (has_suppress_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suppress_words());
    }

    // optional uint32 suppress_time = 11;
    if (has_suppress_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suppress_time());
    }

  }
  // repeated .TgsProtocol.ClientSource sources = 3;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }

  // repeated .TgsProtocol.ClientSource suppress_sources = 8;
  total_size += 1 * this->suppress_sources_size();
  for (int i = 0; i < this->suppress_sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suppress_sources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTerritoryEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTerritoryEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTerritoryEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerTerritoryEvent::MergeFrom(const PlayerTerritoryEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  sources_.MergeFrom(from.sources_);
  suppress_sources_.MergeFrom(from.suppress_sources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_suppress_charid()) {
      set_suppress_charid(from.suppress_charid());
    }
    if (from.has_suppress_name()) {
      set_suppress_name(from.suppress_name());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_patrol_words()) {
      set_patrol_words(from.patrol_words());
    }
    if (from.has_suppress_words()) {
      set_suppress_words(from.suppress_words());
    }
    if (from.has_suppress_time()) {
      set_suppress_time(from.suppress_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerTerritoryEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTerritoryEvent::CopyFrom(const PlayerTerritoryEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTerritoryEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->sources())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->suppress_sources())) return false;
  return true;
}

void PlayerTerritoryEvent::Swap(PlayerTerritoryEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    sources_.Swap(&other->sources_);
    std::swap(suppress_charid_, other->suppress_charid_);
    std::swap(suppress_name_, other->suppress_name_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(rate_, other->rate_);
    suppress_sources_.Swap(&other->suppress_sources_);
    std::swap(patrol_words_, other->patrol_words_);
    std::swap(suppress_words_, other->suppress_words_);
    std::swap(suppress_time_, other->suppress_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerTerritoryEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTerritoryEvent_descriptor_;
  metadata.reflection = PlayerTerritoryEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTerritoryChapter::kChapterIdFieldNumber;
const int PlayerTerritoryChapter::kHeroIdFieldNumber;
const int PlayerTerritoryChapter::kBeginTimeFieldNumber;
const int PlayerTerritoryChapter::kEndTimeFieldNumber;
const int PlayerTerritoryChapter::kPatrolTypeFieldNumber;
const int PlayerTerritoryChapter::kEventFieldNumber;
const int PlayerTerritoryChapter::kSourcesFieldNumber;
const int PlayerTerritoryChapter::kNextEventTimeFieldNumber;
#endif  // !_MSC_VER

PlayerTerritoryChapter::PlayerTerritoryChapter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.PlayerTerritoryChapter)
}

void PlayerTerritoryChapter::InitAsDefaultInstance() {
}

PlayerTerritoryChapter::PlayerTerritoryChapter(const PlayerTerritoryChapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.PlayerTerritoryChapter)
}

void PlayerTerritoryChapter::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0u;
  hero_id_ = 0u;
  begin_time_ = 0u;
  end_time_ = 0u;
  patrol_type_ = 0u;
  next_event_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTerritoryChapter::~PlayerTerritoryChapter() {
  // @@protoc_insertion_point(destructor:TgsProtocol.PlayerTerritoryChapter)
  SharedDtor();
}

void PlayerTerritoryChapter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerTerritoryChapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTerritoryChapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTerritoryChapter_descriptor_;
}

const PlayerTerritoryChapter& PlayerTerritoryChapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

PlayerTerritoryChapter* PlayerTerritoryChapter::default_instance_ = NULL;

PlayerTerritoryChapter* PlayerTerritoryChapter::New() const {
  return new PlayerTerritoryChapter;
}

void PlayerTerritoryChapter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerTerritoryChapter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(chapter_id_, end_time_);
    ZR_(patrol_type_, next_event_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  event_.Clear();
  sources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerTerritoryChapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.PlayerTerritoryChapter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 chapter_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_begin_time;
        break;
      }

      // required uint32 begin_time = 3;
      case 3: {
        if (tag == 24) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // required uint32 end_time = 4;
      case 4: {
        if (tag == 32) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_patrol_type;
        break;
      }

      // required uint32 patrol_type = 5;
      case 5: {
        if (tag == 40) {
         parse_patrol_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patrol_type_)));
          set_has_patrol_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_event;
        break;
      }

      // repeated .TgsProtocol.PlayerTerritoryEvent event = 6;
      case 6: {
        if (tag == 50) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_event;
        if (input->ExpectTag(58)) goto parse_sources;
        break;
      }

      // repeated .TgsProtocol.ClientSource sources = 7;
      case 7: {
        if (tag == 58) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sources;
        if (input->ExpectTag(64)) goto parse_next_event_time;
        break;
      }

      // required uint32 next_event_time = 8;
      case 8: {
        if (tag == 64) {
         parse_next_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_event_time_)));
          set_has_next_event_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.PlayerTerritoryChapter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.PlayerTerritoryChapter)
  return false;
#undef DO_
}

void PlayerTerritoryChapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.PlayerTerritoryChapter)
  // required uint32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapter_id(), output);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // required uint32 begin_time = 3;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin_time(), output);
  }

  // required uint32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_time(), output);
  }

  // required uint32 patrol_type = 5;
  if (has_patrol_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->patrol_type(), output);
  }

  // repeated .TgsProtocol.PlayerTerritoryEvent event = 6;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->event(i), output);
  }

  // repeated .TgsProtocol.ClientSource sources = 7;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sources(i), output);
  }

  // required uint32 next_event_time = 8;
  if (has_next_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->next_event_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.PlayerTerritoryChapter)
}

::google::protobuf::uint8* PlayerTerritoryChapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.PlayerTerritoryChapter)
  // required uint32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapter_id(), target);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // required uint32 begin_time = 3;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin_time(), target);
  }

  // required uint32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_time(), target);
  }

  // required uint32 patrol_type = 5;
  if (has_patrol_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->patrol_type(), target);
  }

  // repeated .TgsProtocol.PlayerTerritoryEvent event = 6;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->event(i), target);
  }

  // repeated .TgsProtocol.ClientSource sources = 7;
  for (int i = 0; i < this->sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sources(i), target);
  }

  // required uint32 next_event_time = 8;
  if (has_next_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->next_event_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.PlayerTerritoryChapter)
  return target;
}

int PlayerTerritoryChapter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // required uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 begin_time = 3;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // required uint32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // required uint32 patrol_type = 5;
    if (has_patrol_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patrol_type());
    }

    // required uint32 next_event_time = 8;
    if (has_next_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_event_time());
    }

  }
  // repeated .TgsProtocol.PlayerTerritoryEvent event = 6;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }

  // repeated .TgsProtocol.ClientSource sources = 7;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTerritoryChapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTerritoryChapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTerritoryChapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerTerritoryChapter::MergeFrom(const PlayerTerritoryChapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  sources_.MergeFrom(from.sources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_patrol_type()) {
      set_patrol_type(from.patrol_type());
    }
    if (from.has_next_event_time()) {
      set_next_event_time(from.next_event_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerTerritoryChapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTerritoryChapter::CopyFrom(const PlayerTerritoryChapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTerritoryChapter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009f) != 0x0000009f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->event())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sources())) return false;
  return true;
}

void PlayerTerritoryChapter::Swap(PlayerTerritoryChapter* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(patrol_type_, other->patrol_type_);
    event_.Swap(&other->event_);
    sources_.Swap(&other->sources_);
    std::swap(next_event_time_, other->next_event_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerTerritoryChapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTerritoryChapter_descriptor_;
  metadata.reflection = PlayerTerritoryChapter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TerritorySkill::kIdFieldNumber;
const int TerritorySkill::kLevelFieldNumber;
#endif  // !_MSC_VER

TerritorySkill::TerritorySkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.TerritorySkill)
}

void TerritorySkill::InitAsDefaultInstance() {
}

TerritorySkill::TerritorySkill(const TerritorySkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.TerritorySkill)
}

void TerritorySkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TerritorySkill::~TerritorySkill() {
  // @@protoc_insertion_point(destructor:TgsProtocol.TerritorySkill)
  SharedDtor();
}

void TerritorySkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TerritorySkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerritorySkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TerritorySkill_descriptor_;
}

const TerritorySkill& TerritorySkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

TerritorySkill* TerritorySkill::default_instance_ = NULL;

TerritorySkill* TerritorySkill::New() const {
  return new TerritorySkill;
}

void TerritorySkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TerritorySkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TerritorySkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.TerritorySkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.TerritorySkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.TerritorySkill)
  return false;
#undef DO_
}

void TerritorySkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.TerritorySkill)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.TerritorySkill)
}

::google::protobuf::uint8* TerritorySkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.TerritorySkill)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.TerritorySkill)
  return target;
}

int TerritorySkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerritorySkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TerritorySkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TerritorySkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TerritorySkill::MergeFrom(const TerritorySkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TerritorySkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerritorySkill::CopyFrom(const TerritorySkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerritorySkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TerritorySkill::Swap(TerritorySkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TerritorySkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TerritorySkill_descriptor_;
  metadata.reflection = TerritorySkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTerritoryInfo::kPassedChapteridFieldNumber;
const int PlayerTerritoryInfo::kItemFieldNumber;
const int PlayerTerritoryInfo::kSkillFieldNumber;
#endif  // !_MSC_VER

PlayerTerritoryInfo::PlayerTerritoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.PlayerTerritoryInfo)
}

void PlayerTerritoryInfo::InitAsDefaultInstance() {
}

PlayerTerritoryInfo::PlayerTerritoryInfo(const PlayerTerritoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.PlayerTerritoryInfo)
}

void PlayerTerritoryInfo::SharedCtor() {
  _cached_size_ = 0;
  passed_chapterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTerritoryInfo::~PlayerTerritoryInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.PlayerTerritoryInfo)
  SharedDtor();
}

void PlayerTerritoryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerTerritoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTerritoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTerritoryInfo_descriptor_;
}

const PlayerTerritoryInfo& PlayerTerritoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

PlayerTerritoryInfo* PlayerTerritoryInfo::default_instance_ = NULL;

PlayerTerritoryInfo* PlayerTerritoryInfo::New() const {
  return new PlayerTerritoryInfo;
}

void PlayerTerritoryInfo::Clear() {
  passed_chapterid_ = 0u;
  item_.Clear();
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerTerritoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.PlayerTerritoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 passed_chapterid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passed_chapterid_)));
          set_has_passed_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.PlayerTerritoryChapter item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(26)) goto parse_skill;
        break;
      }

      // repeated .TgsProtocol.TerritorySkill skill = 3;
      case 3: {
        if (tag == 26) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_skill;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.PlayerTerritoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.PlayerTerritoryInfo)
  return false;
#undef DO_
}

void PlayerTerritoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.PlayerTerritoryInfo)
  // required uint32 passed_chapterid = 1;
  if (has_passed_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->passed_chapterid(), output);
  }

  // repeated .TgsProtocol.PlayerTerritoryChapter item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // repeated .TgsProtocol.TerritorySkill skill = 3;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.PlayerTerritoryInfo)
}

::google::protobuf::uint8* PlayerTerritoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.PlayerTerritoryInfo)
  // required uint32 passed_chapterid = 1;
  if (has_passed_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->passed_chapterid(), target);
  }

  // repeated .TgsProtocol.PlayerTerritoryChapter item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // repeated .TgsProtocol.TerritorySkill skill = 3;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.PlayerTerritoryInfo)
  return target;
}

int PlayerTerritoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 passed_chapterid = 1;
    if (has_passed_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passed_chapterid());
    }

  }
  // repeated .TgsProtocol.PlayerTerritoryChapter item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .TgsProtocol.TerritorySkill skill = 3;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTerritoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTerritoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTerritoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerTerritoryInfo::MergeFrom(const PlayerTerritoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passed_chapterid()) {
      set_passed_chapterid(from.passed_chapterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerTerritoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTerritoryInfo::CopyFrom(const PlayerTerritoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTerritoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skill())) return false;
  return true;
}

void PlayerTerritoryInfo::Swap(PlayerTerritoryInfo* other) {
  if (other != this) {
    std::swap(passed_chapterid_, other->passed_chapterid_);
    item_.Swap(&other->item_);
    skill_.Swap(&other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerTerritoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTerritoryInfo_descriptor_;
  metadata.reflection = PlayerTerritoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendTerritoryInfo::kCharidFieldNumber;
const int FriendTerritoryInfo::kPhotoFieldNumber;
const int FriendTerritoryInfo::kLevelFieldNumber;
const int FriendTerritoryInfo::kNameFieldNumber;
const int FriendTerritoryInfo::kTerritoryCountFieldNumber;
const int FriendTerritoryInfo::kTerritoryRiotCountFieldNumber;
const int FriendTerritoryInfo::kPatrolCountFieldNumber;
const int FriendTerritoryInfo::kStarFieldNumber;
const int FriendTerritoryInfo::kOfflineTimeFieldNumber;
#endif  // !_MSC_VER

FriendTerritoryInfo::FriendTerritoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.FriendTerritoryInfo)
}

void FriendTerritoryInfo::InitAsDefaultInstance() {
}

FriendTerritoryInfo::FriendTerritoryInfo(const FriendTerritoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.FriendTerritoryInfo)
}

void FriendTerritoryInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  photo_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  territorycount_ = 0u;
  territoryriotcount_ = 0u;
  patrolcount_ = 0u;
  star_ = 0u;
  offlinetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendTerritoryInfo::~FriendTerritoryInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.FriendTerritoryInfo)
  SharedDtor();
}

void FriendTerritoryInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FriendTerritoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendTerritoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendTerritoryInfo_descriptor_;
}

const FriendTerritoryInfo& FriendTerritoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

FriendTerritoryInfo* FriendTerritoryInfo::default_instance_ = NULL;

FriendTerritoryInfo* FriendTerritoryInfo::New() const {
  return new FriendTerritoryInfo;
}

void FriendTerritoryInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendTerritoryInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, level_);
    ZR_(territorycount_, star_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  offlinetime_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendTerritoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.FriendTerritoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_photo;
        break;
      }

      // required uint32 photo = 2;
      case 2: {
        if (tag == 16) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_territoryCount;
        break;
      }

      // required uint32 territoryCount = 5;
      case 5: {
        if (tag == 40) {
         parse_territoryCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &territorycount_)));
          set_has_territorycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_territoryRiotCount;
        break;
      }

      // required uint32 territoryRiotCount = 6;
      case 6: {
        if (tag == 48) {
         parse_territoryRiotCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &territoryriotcount_)));
          set_has_territoryriotcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_patrolCount;
        break;
      }

      // optional uint32 patrolCount = 7;
      case 7: {
        if (tag == 56) {
         parse_patrolCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patrolcount_)));
          set_has_patrolcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_star;
        break;
      }

      // optional uint32 star = 8;
      case 8: {
        if (tag == 64) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_offlineTime;
        break;
      }

      // optional uint32 offlineTime = 9;
      case 9: {
        if (tag == 72) {
         parse_offlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.FriendTerritoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.FriendTerritoryInfo)
  return false;
#undef DO_
}

void FriendTerritoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.FriendTerritoryInfo)
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 photo = 2;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->photo(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required uint32 territoryCount = 5;
  if (has_territorycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->territorycount(), output);
  }

  // required uint32 territoryRiotCount = 6;
  if (has_territoryriotcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->territoryriotcount(), output);
  }

  // optional uint32 patrolCount = 7;
  if (has_patrolcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->patrolcount(), output);
  }

  // optional uint32 star = 8;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->star(), output);
  }

  // optional uint32 offlineTime = 9;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->offlinetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.FriendTerritoryInfo)
}

::google::protobuf::uint8* FriendTerritoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.FriendTerritoryInfo)
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 photo = 2;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->photo(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required uint32 territoryCount = 5;
  if (has_territorycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->territorycount(), target);
  }

  // required uint32 territoryRiotCount = 6;
  if (has_territoryriotcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->territoryriotcount(), target);
  }

  // optional uint32 patrolCount = 7;
  if (has_patrolcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->patrolcount(), target);
  }

  // optional uint32 star = 8;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->star(), target);
  }

  // optional uint32 offlineTime = 9;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->offlinetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.FriendTerritoryInfo)
  return target;
}

int FriendTerritoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 photo = 2;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 territoryCount = 5;
    if (has_territorycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->territorycount());
    }

    // required uint32 territoryRiotCount = 6;
    if (has_territoryriotcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->territoryriotcount());
    }

    // optional uint32 patrolCount = 7;
    if (has_patrolcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patrolcount());
    }

    // optional uint32 star = 8;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 offlineTime = 9;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offlinetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendTerritoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendTerritoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendTerritoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendTerritoryInfo::MergeFrom(const FriendTerritoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_territorycount()) {
      set_territorycount(from.territorycount());
    }
    if (from.has_territoryriotcount()) {
      set_territoryriotcount(from.territoryriotcount());
    }
    if (from.has_patrolcount()) {
      set_patrolcount(from.patrolcount());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendTerritoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendTerritoryInfo::CopyFrom(const FriendTerritoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendTerritoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FriendTerritoryInfo::Swap(FriendTerritoryInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(photo_, other->photo_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(territorycount_, other->territorycount_);
    std::swap(territoryriotcount_, other->territoryriotcount_);
    std::swap(patrolcount_, other->patrolcount_);
    std::swap(star_, other->star_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendTerritoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendTerritoryInfo_descriptor_;
  metadata.reflection = FriendTerritoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientNoticeInfo::kIdFieldNumber;
const int ClientNoticeInfo::kConfidFieldNumber;
const int ClientNoticeInfo::kTypeFieldNumber;
const int ClientNoticeInfo::kTemplateidFieldNumber;
const int ClientNoticeInfo::kValueFieldNumber;
const int ClientNoticeInfo::kPlayernameFieldNumber;
const int ClientNoticeInfo::kPlayerstarFieldNumber;
const int ClientNoticeInfo::kHasitemFieldNumber;
const int ClientNoticeInfo::kWordsidFieldNumber;
const int ClientNoticeInfo::kReasonFieldNumber;
const int ClientNoticeInfo::kCharidFieldNumber;
const int ClientNoticeInfo::kStrFieldNumber;
const int ClientNoticeInfo::kSourcetypeFieldNumber;
#endif  // !_MSC_VER

ClientNoticeInfo::ClientNoticeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientNoticeInfo)
}

void ClientNoticeInfo::InitAsDefaultInstance() {
}

ClientNoticeInfo::ClientNoticeInfo(const ClientNoticeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientNoticeInfo)
}

void ClientNoticeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  confid_ = 0u;
  type_ = 0;
  templateid_ = 0u;
  value_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerstar_ = 0u;
  hasitem_ = false;
  wordsid_ = 0u;
  reason_ = 0u;
  charid_ = 0u;
  sourcetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientNoticeInfo::~ClientNoticeInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientNoticeInfo)
  SharedDtor();
}

void ClientNoticeInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void ClientNoticeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientNoticeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientNoticeInfo_descriptor_;
}

const ClientNoticeInfo& ClientNoticeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientNoticeInfo* ClientNoticeInfo::default_instance_ = NULL;

ClientNoticeInfo* ClientNoticeInfo::New() const {
  return new ClientNoticeInfo;
}

void ClientNoticeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientNoticeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, templateid_);
    ZR_(value_, hasitem_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 5888) {
    ZR_(wordsid_, charid_);
    sourcetype_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  str_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientNoticeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientNoticeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confid;
        break;
      }

      // required uint32 confid = 2;
      case 2: {
        if (tag == 16) {
         parse_confid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confid_)));
          set_has_confid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .TgsProtocol.eNoticeType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::eNoticeType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::eNoticeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_templateid;
        break;
      }

      // required uint32 templateid = 4;
      case 4: {
        if (tag == 32) {
         parse_templateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional uint32 value = 5;
      case 5: {
        if (tag == 40) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_playername;
        break;
      }

      // optional string playername = 6;
      case 6: {
        if (tag == 50) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_playerstar;
        break;
      }

      // optional uint32 playerstar = 7;
      case 7: {
        if (tag == 56) {
         parse_playerstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerstar_)));
          set_has_playerstar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hasitem;
        break;
      }

      // required bool hasitem = 8;
      case 8: {
        if (tag == 64) {
         parse_hasitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasitem_)));
          set_has_hasitem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_wordsid;
        break;
      }

      // required uint32 wordsid = 9;
      case 9: {
        if (tag == 72) {
         parse_wordsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wordsid_)));
          set_has_wordsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 10;
      case 10: {
        if (tag == 80) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 11;
      case 11: {
        if (tag == 88) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_str;
        break;
      }

      // repeated string str = 12;
      case 12: {
        if (tag == 98) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str(this->str_size() - 1).data(),
            this->str(this->str_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_str;
        if (input->ExpectTag(104)) goto parse_sourcetype;
        break;
      }

      // required .TgsProtocol.SourceType sourcetype = 13;
      case 13: {
        if (tag == 104) {
         parse_sourcetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::SourceType_IsValid(value)) {
            set_sourcetype(static_cast< ::TgsProtocol::SourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientNoticeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientNoticeInfo)
  return false;
#undef DO_
}

void ClientNoticeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientNoticeInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 confid = 2;
  if (has_confid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->confid(), output);
  }

  // required .TgsProtocol.eNoticeType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required uint32 templateid = 4;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->templateid(), output);
  }

  // optional uint32 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value(), output);
  }

  // optional string playername = 6;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->playername(), output);
  }

  // optional uint32 playerstar = 7;
  if (has_playerstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->playerstar(), output);
  }

  // required bool hasitem = 8;
  if (has_hasitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hasitem(), output);
  }

  // required uint32 wordsid = 9;
  if (has_wordsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->wordsid(), output);
  }

  // optional uint32 reason = 10;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->reason(), output);
  }

  // optional uint32 charid = 11;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->charid(), output);
  }

  // repeated string str = 12;
  for (int i = 0; i < this->str_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->str(i).data(), this->str(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "str");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->str(i), output);
  }

  // required .TgsProtocol.SourceType sourcetype = 13;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->sourcetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientNoticeInfo)
}

::google::protobuf::uint8* ClientNoticeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientNoticeInfo)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 confid = 2;
  if (has_confid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->confid(), target);
  }

  // required .TgsProtocol.eNoticeType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required uint32 templateid = 4;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->templateid(), target);
  }

  // optional uint32 value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value(), target);
  }

  // optional string playername = 6;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playername(), target);
  }

  // optional uint32 playerstar = 7;
  if (has_playerstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->playerstar(), target);
  }

  // required bool hasitem = 8;
  if (has_hasitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hasitem(), target);
  }

  // required uint32 wordsid = 9;
  if (has_wordsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->wordsid(), target);
  }

  // optional uint32 reason = 10;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->reason(), target);
  }

  // optional uint32 charid = 11;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->charid(), target);
  }

  // repeated string str = 12;
  for (int i = 0; i < this->str_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str(i).data(), this->str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->str(i), target);
  }

  // required .TgsProtocol.SourceType sourcetype = 13;
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->sourcetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientNoticeInfo)
  return target;
}

int ClientNoticeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 confid = 2;
    if (has_confid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confid());
    }

    // required .TgsProtocol.eNoticeType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 templateid = 4;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // optional uint32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional string playername = 6;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional uint32 playerstar = 7;
    if (has_playerstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerstar());
    }

    // required bool hasitem = 8;
    if (has_hasitem()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 wordsid = 9;
    if (has_wordsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wordsid());
    }

    // optional uint32 reason = 10;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 charid = 11;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required .TgsProtocol.SourceType sourcetype = 13;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sourcetype());
    }

  }
  // repeated string str = 12;
  total_size += 1 * this->str_size();
  for (int i = 0; i < this->str_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->str(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientNoticeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientNoticeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientNoticeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientNoticeInfo::MergeFrom(const ClientNoticeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  str_.MergeFrom(from.str_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_confid()) {
      set_confid(from.confid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerstar()) {
      set_playerstar(from.playerstar());
    }
    if (from.has_hasitem()) {
      set_hasitem(from.hasitem());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wordsid()) {
      set_wordsid(from.wordsid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientNoticeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientNoticeInfo::CopyFrom(const ClientNoticeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientNoticeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000118f) != 0x0000118f) return false;

  return true;
}

void ClientNoticeInfo::Swap(ClientNoticeInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(confid_, other->confid_);
    std::swap(type_, other->type_);
    std::swap(templateid_, other->templateid_);
    std::swap(value_, other->value_);
    std::swap(playername_, other->playername_);
    std::swap(playerstar_, other->playerstar_);
    std::swap(hasitem_, other->hasitem_);
    std::swap(wordsid_, other->wordsid_);
    std::swap(reason_, other->reason_);
    std::swap(charid_, other->charid_);
    str_.Swap(&other->str_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientNoticeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientNoticeInfo_descriptor_;
  metadata.reflection = ClientNoticeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbTreasureInfo::kCharidFieldNumber;
const int DbTreasureInfo::kLevelFieldNumber;
const int DbTreasureInfo::kPlayernameFieldNumber;
const int DbTreasureInfo::kItemlistFieldNumber;
#endif  // !_MSC_VER

DbTreasureInfo::DbTreasureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbTreasureInfo)
}

void DbTreasureInfo::InitAsDefaultInstance() {
}

DbTreasureInfo::DbTreasureInfo(const DbTreasureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbTreasureInfo)
}

void DbTreasureInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = 0u;
  level_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbTreasureInfo::~DbTreasureInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbTreasureInfo)
  SharedDtor();
}

void DbTreasureInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void DbTreasureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbTreasureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbTreasureInfo_descriptor_;
}

const DbTreasureInfo& DbTreasureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DbTreasureInfo* DbTreasureInfo::default_instance_ = NULL;

DbTreasureInfo* DbTreasureInfo::New() const {
  return new DbTreasureInfo;
}

void DbTreasureInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbTreasureInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(charid_, level_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbTreasureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbTreasureInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playername;
        break;
      }

      // required string playername = 3;
      case 3: {
        if (tag == 26) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemlist;
        break;
      }

      // repeated uint32 itemlist = 4;
      case 4: {
        if (tag == 32) {
         parse_itemlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_itemlist())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_itemlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbTreasureInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbTreasureInfo)
  return false;
#undef DO_
}

void DbTreasureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbTreasureInfo)
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playername(), output);
  }

  // repeated uint32 itemlist = 4;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->itemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbTreasureInfo)
}

::google::protobuf::uint8* DbTreasureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbTreasureInfo)
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // repeated uint32 itemlist = 4;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->itemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbTreasureInfo)
  return target;
}

int DbTreasureInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required string playername = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  // repeated uint32 itemlist = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->itemlist(i));
    }
    total_size += 1 * this->itemlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbTreasureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbTreasureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbTreasureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbTreasureInfo::MergeFrom(const DbTreasureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbTreasureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbTreasureInfo::CopyFrom(const DbTreasureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbTreasureInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DbTreasureInfo::Swap(DbTreasureInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(playername_, other->playername_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbTreasureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbTreasureInfo_descriptor_;
  metadata.reflection = DbTreasureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbDropEle::kTypeFieldNumber;
const int DbDropEle::kKeyFieldNumber;
const int DbDropEle::kValFieldNumber;
#endif  // !_MSC_VER

DbDropEle::DbDropEle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbDropEle)
}

void DbDropEle::InitAsDefaultInstance() {
}

DbDropEle::DbDropEle(const DbDropEle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbDropEle)
}

void DbDropEle::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  key_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbDropEle::~DbDropEle() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbDropEle)
  SharedDtor();
}

void DbDropEle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbDropEle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbDropEle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbDropEle_descriptor_;
}

const DbDropEle& DbDropEle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DbDropEle* DbDropEle::default_instance_ = NULL;

DbDropEle* DbDropEle::New() const {
  return new DbDropEle;
}

void DbDropEle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbDropEle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, val_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbDropEle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbDropEle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // required uint32 key = 2;
      case 2: {
        if (tag == 16) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_val;
        break;
      }

      // required uint32 val = 3;
      case 3: {
        if (tag == 24) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbDropEle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbDropEle)
  return false;
#undef DO_
}

void DbDropEle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbDropEle)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->key(), output);
  }

  // required uint32 val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbDropEle)
}

::google::protobuf::uint8* DbDropEle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbDropEle)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->key(), target);
  }

  // required uint32 val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbDropEle)
  return target;
}

int DbDropEle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // required uint32 val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbDropEle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbDropEle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbDropEle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbDropEle::MergeFrom(const DbDropEle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbDropEle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbDropEle::CopyFrom(const DbDropEle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbDropEle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DbDropEle::Swap(DbDropEle* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbDropEle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbDropEle_descriptor_;
  metadata.reflection = DbDropEle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbDrop::kOneFieldNumber;
#endif  // !_MSC_VER

DbDrop::DbDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbDrop)
}

void DbDrop::InitAsDefaultInstance() {
}

DbDrop::DbDrop(const DbDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbDrop)
}

void DbDrop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbDrop::~DbDrop() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbDrop)
  SharedDtor();
}

void DbDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbDrop_descriptor_;
}

const DbDrop& DbDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DbDrop* DbDrop::default_instance_ = NULL;

DbDrop* DbDrop::New() const {
  return new DbDrop;
}

void DbDrop::Clear() {
  one_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbDrop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DbDropEle one = 1;
      case 1: {
        if (tag == 10) {
         parse_one:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_one()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_one;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbDrop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbDrop)
  return false;
#undef DO_
}

void DbDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbDrop)
  // repeated .TgsProtocol.DbDropEle one = 1;
  for (int i = 0; i < this->one_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->one(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbDrop)
}

::google::protobuf::uint8* DbDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbDrop)
  // repeated .TgsProtocol.DbDropEle one = 1;
  for (int i = 0; i < this->one_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->one(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbDrop)
  return target;
}

int DbDrop::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DbDropEle one = 1;
  total_size += 1 * this->one_size();
  for (int i = 0; i < this->one_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->one(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbDrop::MergeFrom(const DbDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  one_.MergeFrom(from.one_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbDrop::CopyFrom(const DbDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbDrop::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->one())) return false;
  return true;
}

void DbDrop::Swap(DbDrop* other) {
  if (other != this) {
    one_.Swap(&other->one_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbDrop_descriptor_;
  metadata.reflection = DbDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotEffect::kIdFieldNumber;
const int RobotEffect::kEffectFieldNumber;
#endif  // !_MSC_VER

RobotEffect::RobotEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.RobotEffect)
}

void RobotEffect::InitAsDefaultInstance() {
}

RobotEffect::RobotEffect(const RobotEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.RobotEffect)
}

void RobotEffect::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  effect_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotEffect::~RobotEffect() {
  // @@protoc_insertion_point(destructor:TgsProtocol.RobotEffect)
  SharedDtor();
}

void RobotEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotEffect_descriptor_;
}

const RobotEffect& RobotEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

RobotEffect* RobotEffect::default_instance_ = NULL;

RobotEffect* RobotEffect::New() const {
  return new RobotEffect;
}

void RobotEffect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RobotEffect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(effect_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.RobotEffect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_effect;
        break;
      }

      // required uint64 effect = 2;
      case 2: {
        if (tag == 16) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.RobotEffect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.RobotEffect)
  return false;
#undef DO_
}

void RobotEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.RobotEffect)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint64 effect = 2;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->effect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.RobotEffect)
}

::google::protobuf::uint8* RobotEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.RobotEffect)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint64 effect = 2;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->effect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.RobotEffect)
  return target;
}

int RobotEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint64 effect = 2;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->effect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotEffect::MergeFrom(const RobotEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotEffect::CopyFrom(const RobotEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotEffect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RobotEffect::Swap(RobotEffect* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(effect_, other->effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotEffect_descriptor_;
  metadata.reflection = RobotEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientChargeShopConf::kGoodsidFieldNumber;
const int ClientChargeShopConf::kShopTypeFieldNumber;
const int ClientChargeShopConf::kBuyFieldNumber;
const int ClientChargeShopConf::kCostFieldNumber;
const int ClientChargeShopConf::kStatusFieldNumber;
const int ClientChargeShopConf::kPlatformtypeFieldNumber;
const int ClientChargeShopConf::kLimitNumberFieldNumber;
const int ClientChargeShopConf::kLimitTypeFieldNumber;
const int ClientChargeShopConf::kPrizeFloatFieldNumber;
const int ClientChargeShopConf::kIsDoubleFieldNumber;
const int ClientChargeShopConf::kIOSGoodIdFieldNumber;
const int ClientChargeShopConf::kAndroidGoodIdFieldNumber;
const int ClientChargeShopConf::kCurrencyFieldNumber;
const int ClientChargeShopConf::kGoodGiftFieldNumber;
const int ClientChargeShopConf::kItemIconFieldNumber;
const int ClientChargeShopConf::kCollectionIconFieldNumber;
const int ClientChargeShopConf::kStrNameFieldNumber;
const int ClientChargeShopConf::kStrDescriptionFieldNumber;
const int ClientChargeShopConf::kStartTimeFieldNumber;
const int ClientChargeShopConf::kEndTimeFieldNumber;
const int ClientChargeShopConf::kMonthCardTypeFieldNumber;
const int ClientChargeShopConf::kExtraFieldNumber;
const int ClientChargeShopConf::kOldPriceFieldNumber;
const int ClientChargeShopConf::kRateFieldNumber;
const int ClientChargeShopConf::kMonthCardPrizeFieldNumber;
#endif  // !_MSC_VER

ClientChargeShopConf::ClientChargeShopConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientChargeShopConf)
}

void ClientChargeShopConf::InitAsDefaultInstance() {
  cost_ = const_cast< ::TgsProtocol::ClientSource*>(&::TgsProtocol::ClientSource::default_instance());
  oldprice_ = const_cast< ::TgsProtocol::ClientSource*>(&::TgsProtocol::ClientSource::default_instance());
}

ClientChargeShopConf::ClientChargeShopConf(const ClientChargeShopConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientChargeShopConf)
}

void ClientChargeShopConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  goodsid_ = 0u;
  shoptype_ = 0u;
  cost_ = NULL;
  status_ = 0u;
  platformtype_ = 0u;
  limitnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limittype_ = 0u;
  prizefloat_ = 0u;
  isdouble_ = 0u;
  iosgoodid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidgoodid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goodgift_ = 0u;
  itemicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collectionicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = 0u;
  endtime_ = 0u;
  monthcardtype_ = 0u;
  oldprice_ = NULL;
  rate_ = 0u;
  monthcardprize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientChargeShopConf::~ClientChargeShopConf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientChargeShopConf)
  SharedDtor();
}

void ClientChargeShopConf::SharedDtor() {
  if (limitnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete limitnumber_;
  }
  if (iosgoodid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iosgoodid_;
  }
  if (androidgoodid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete androidgoodid_;
  }
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (itemicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemicon_;
  }
  if (collectionicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete collectionicon_;
  }
  if (strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strname_;
  }
  if (strdescription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strdescription_;
  }
  if (this != default_instance_) {
    delete cost_;
    delete oldprice_;
  }
}

void ClientChargeShopConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientChargeShopConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientChargeShopConf_descriptor_;
}

const ClientChargeShopConf& ClientChargeShopConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientChargeShopConf* ClientChargeShopConf::default_instance_ = NULL;

ClientChargeShopConf* ClientChargeShopConf::New() const {
  return new ClientChargeShopConf;
}

void ClientChargeShopConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientChargeShopConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(goodsid_, shoptype_);
    ZR_(status_, platformtype_);
    if (has_cost()) {
      if (cost_ != NULL) cost_->::TgsProtocol::ClientSource::Clear();
    }
    if (has_limitnumber()) {
      if (limitnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        limitnumber_->clear();
      }
    }
    limittype_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(isdouble_, goodgift_);
    prizefloat_ = 0u;
    if (has_iosgoodid()) {
      if (iosgoodid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iosgoodid_->clear();
      }
    }
    if (has_androidgoodid()) {
      if (androidgoodid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        androidgoodid_->clear();
      }
    }
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currency_->clear();
      }
    }
    if (has_itemicon()) {
      if (itemicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemicon_->clear();
      }
    }
    if (has_collectionicon()) {
      if (collectionicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        collectionicon_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 14614528) {
    ZR_(starttime_, endtime_);
    ZR_(monthcardtype_, rate_);
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strname_->clear();
      }
    }
    if (has_strdescription()) {
      if (strdescription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strdescription_->clear();
      }
    }
    if (has_oldprice()) {
      if (oldprice_ != NULL) oldprice_->::TgsProtocol::ClientSource::Clear();
    }
  }
  monthcardprize_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  buy_.Clear();
  extra_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientChargeShopConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientChargeShopConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 goodsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shopType;
        break;
      }

      // required uint32 shopType = 2;
      case 2: {
        if (tag == 16) {
         parse_shopType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoptype_)));
          set_has_shoptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buy;
        break;
      }

      // repeated .TgsProtocol.ClientSource buy = 3;
      case 3: {
        if (tag == 26) {
         parse_buy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buy;
        if (input->ExpectTag(34)) goto parse_cost;
        break;
      }

      // required .TgsProtocol.ClientSource cost = 4;
      case 4: {
        if (tag == 34) {
         parse_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required uint32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_platformtype;
        break;
      }

      // required uint32 platformtype = 6;
      case 6: {
        if (tag == 48) {
         parse_platformtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platformtype_)));
          set_has_platformtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_limitNumber;
        break;
      }

      // required bytes limitNumber = 7;
      case 7: {
        if (tag == 58) {
         parse_limitNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_limitnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_limitType;
        break;
      }

      // required uint32 limitType = 8;
      case 8: {
        if (tag == 64) {
         parse_limitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limittype_)));
          set_has_limittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_prizeFloat;
        break;
      }

      // required uint32 prizeFloat = 9;
      case 9: {
        if (tag == 72) {
         parse_prizeFloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizefloat_)));
          set_has_prizefloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_isDouble;
        break;
      }

      // required uint32 isDouble = 10;
      case 10: {
        if (tag == 80) {
         parse_isDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isdouble_)));
          set_has_isdouble();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_IOSGoodId;
        break;
      }

      // required bytes IOSGoodId = 11;
      case 11: {
        if (tag == 90) {
         parse_IOSGoodId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iosgoodid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_AndroidGoodId;
        break;
      }

      // required bytes AndroidGoodId = 12;
      case 12: {
        if (tag == 98) {
         parse_AndroidGoodId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_androidgoodid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_currency;
        break;
      }

      // required bytes currency = 13;
      case 13: {
        if (tag == 106) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_currency()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_goodGift;
        break;
      }

      // required uint32 goodGift = 14;
      case 14: {
        if (tag == 112) {
         parse_goodGift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodgift_)));
          set_has_goodgift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_itemIcon;
        break;
      }

      // required bytes itemIcon = 15;
      case 15: {
        if (tag == 122) {
         parse_itemIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_itemicon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_collectionIcon;
        break;
      }

      // required bytes collectionIcon = 16;
      case 16: {
        if (tag == 130) {
         parse_collectionIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_collectionicon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_strName;
        break;
      }

      // required bytes strName = 17;
      case 17: {
        if (tag == 138) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_strDescription;
        break;
      }

      // required bytes strDescription = 18;
      case 18: {
        if (tag == 146) {
         parse_strDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdescription()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_startTime;
        break;
      }

      // required uint32 startTime = 19;
      case 19: {
        if (tag == 152) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_endTime;
        break;
      }

      // required uint32 endTime = 20;
      case 20: {
        if (tag == 160) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_monthCardType;
        break;
      }

      // optional uint32 monthCardType = 21;
      case 21: {
        if (tag == 168) {
         parse_monthCardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monthcardtype_)));
          set_has_monthcardtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_extra;
        break;
      }

      // repeated .TgsProtocol.ClientSource extra = 22;
      case 22: {
        if (tag == 178) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_extra;
        if (input->ExpectTag(186)) goto parse_oldPrice;
        break;
      }

      // optional .TgsProtocol.ClientSource oldPrice = 23;
      case 23: {
        if (tag == 186) {
         parse_oldPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_rate;
        break;
      }

      // optional uint32 rate = 24;
      case 24: {
        if (tag == 192) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_monthCardPrize;
        break;
      }

      // optional uint32 monthCardPrize = 25;
      case 25: {
        if (tag == 200) {
         parse_monthCardPrize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monthcardprize_)));
          set_has_monthcardprize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientChargeShopConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientChargeShopConf)
  return false;
#undef DO_
}

void ClientChargeShopConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientChargeShopConf)
  // required uint32 goodsid = 1;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goodsid(), output);
  }

  // required uint32 shopType = 2;
  if (has_shoptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shoptype(), output);
  }

  // repeated .TgsProtocol.ClientSource buy = 3;
  for (int i = 0; i < this->buy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buy(i), output);
  }

  // required .TgsProtocol.ClientSource cost = 4;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cost(), output);
  }

  // required uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // required uint32 platformtype = 6;
  if (has_platformtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->platformtype(), output);
  }

  // required bytes limitNumber = 7;
  if (has_limitnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->limitnumber(), output);
  }

  // required uint32 limitType = 8;
  if (has_limittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->limittype(), output);
  }

  // required uint32 prizeFloat = 9;
  if (has_prizefloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->prizefloat(), output);
  }

  // required uint32 isDouble = 10;
  if (has_isdouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->isdouble(), output);
  }

  // required bytes IOSGoodId = 11;
  if (has_iosgoodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->iosgoodid(), output);
  }

  // required bytes AndroidGoodId = 12;
  if (has_androidgoodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->androidgoodid(), output);
  }

  // required bytes currency = 13;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->currency(), output);
  }

  // required uint32 goodGift = 14;
  if (has_goodgift()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->goodgift(), output);
  }

  // required bytes itemIcon = 15;
  if (has_itemicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->itemicon(), output);
  }

  // required bytes collectionIcon = 16;
  if (has_collectionicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->collectionicon(), output);
  }

  // required bytes strName = 17;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->strname(), output);
  }

  // required bytes strDescription = 18;
  if (has_strdescription()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->strdescription(), output);
  }

  // required uint32 startTime = 19;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->starttime(), output);
  }

  // required uint32 endTime = 20;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->endtime(), output);
  }

  // optional uint32 monthCardType = 21;
  if (has_monthcardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->monthcardtype(), output);
  }

  // repeated .TgsProtocol.ClientSource extra = 22;
  for (int i = 0; i < this->extra_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->extra(i), output);
  }

  // optional .TgsProtocol.ClientSource oldPrice = 23;
  if (has_oldprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->oldprice(), output);
  }

  // optional uint32 rate = 24;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->rate(), output);
  }

  // optional uint32 monthCardPrize = 25;
  if (has_monthcardprize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->monthcardprize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientChargeShopConf)
}

::google::protobuf::uint8* ClientChargeShopConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientChargeShopConf)
  // required uint32 goodsid = 1;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goodsid(), target);
  }

  // required uint32 shopType = 2;
  if (has_shoptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shoptype(), target);
  }

  // repeated .TgsProtocol.ClientSource buy = 3;
  for (int i = 0; i < this->buy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buy(i), target);
  }

  // required .TgsProtocol.ClientSource cost = 4;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cost(), target);
  }

  // required uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // required uint32 platformtype = 6;
  if (has_platformtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->platformtype(), target);
  }

  // required bytes limitNumber = 7;
  if (has_limitnumber()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->limitnumber(), target);
  }

  // required uint32 limitType = 8;
  if (has_limittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->limittype(), target);
  }

  // required uint32 prizeFloat = 9;
  if (has_prizefloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->prizefloat(), target);
  }

  // required uint32 isDouble = 10;
  if (has_isdouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->isdouble(), target);
  }

  // required bytes IOSGoodId = 11;
  if (has_iosgoodid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->iosgoodid(), target);
  }

  // required bytes AndroidGoodId = 12;
  if (has_androidgoodid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->androidgoodid(), target);
  }

  // required bytes currency = 13;
  if (has_currency()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->currency(), target);
  }

  // required uint32 goodGift = 14;
  if (has_goodgift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->goodgift(), target);
  }

  // required bytes itemIcon = 15;
  if (has_itemicon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->itemicon(), target);
  }

  // required bytes collectionIcon = 16;
  if (has_collectionicon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->collectionicon(), target);
  }

  // required bytes strName = 17;
  if (has_strname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->strname(), target);
  }

  // required bytes strDescription = 18;
  if (has_strdescription()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->strdescription(), target);
  }

  // required uint32 startTime = 19;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->starttime(), target);
  }

  // required uint32 endTime = 20;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->endtime(), target);
  }

  // optional uint32 monthCardType = 21;
  if (has_monthcardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->monthcardtype(), target);
  }

  // repeated .TgsProtocol.ClientSource extra = 22;
  for (int i = 0; i < this->extra_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->extra(i), target);
  }

  // optional .TgsProtocol.ClientSource oldPrice = 23;
  if (has_oldprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->oldprice(), target);
  }

  // optional uint32 rate = 24;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->rate(), target);
  }

  // optional uint32 monthCardPrize = 25;
  if (has_monthcardprize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->monthcardprize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientChargeShopConf)
  return target;
}

int ClientChargeShopConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 goodsid = 1;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsid());
    }

    // required uint32 shopType = 2;
    if (has_shoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoptype());
    }

    // required .TgsProtocol.ClientSource cost = 4;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cost());
    }

    // required uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 platformtype = 6;
    if (has_platformtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platformtype());
    }

    // required bytes limitNumber = 7;
    if (has_limitnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->limitnumber());
    }

    // required uint32 limitType = 8;
    if (has_limittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limittype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 prizeFloat = 9;
    if (has_prizefloat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizefloat());
    }

    // required uint32 isDouble = 10;
    if (has_isdouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isdouble());
    }

    // required bytes IOSGoodId = 11;
    if (has_iosgoodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iosgoodid());
    }

    // required bytes AndroidGoodId = 12;
    if (has_androidgoodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->androidgoodid());
    }

    // required bytes currency = 13;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->currency());
    }

    // required uint32 goodGift = 14;
    if (has_goodgift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodgift());
    }

    // required bytes itemIcon = 15;
    if (has_itemicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->itemicon());
    }

    // required bytes collectionIcon = 16;
    if (has_collectionicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->collectionicon());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bytes strName = 17;
    if (has_strname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strname());
    }

    // required bytes strDescription = 18;
    if (has_strdescription()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strdescription());
    }

    // required uint32 startTime = 19;
    if (has_starttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 endTime = 20;
    if (has_endtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 monthCardType = 21;
    if (has_monthcardtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monthcardtype());
    }

    // optional .TgsProtocol.ClientSource oldPrice = 23;
    if (has_oldprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldprice());
    }

    // optional uint32 rate = 24;
    if (has_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 monthCardPrize = 25;
    if (has_monthcardprize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monthcardprize());
    }

  }
  // repeated .TgsProtocol.ClientSource buy = 3;
  total_size += 1 * this->buy_size();
  for (int i = 0; i < this->buy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy(i));
  }

  // repeated .TgsProtocol.ClientSource extra = 22;
  total_size += 2 * this->extra_size();
  for (int i = 0; i < this->extra_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientChargeShopConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientChargeShopConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientChargeShopConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientChargeShopConf::MergeFrom(const ClientChargeShopConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_.MergeFrom(from.buy_);
  extra_.MergeFrom(from.extra_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_shoptype()) {
      set_shoptype(from.shoptype());
    }
    if (from.has_cost()) {
      mutable_cost()->::TgsProtocol::ClientSource::MergeFrom(from.cost());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_platformtype()) {
      set_platformtype(from.platformtype());
    }
    if (from.has_limitnumber()) {
      set_limitnumber(from.limitnumber());
    }
    if (from.has_limittype()) {
      set_limittype(from.limittype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prizefloat()) {
      set_prizefloat(from.prizefloat());
    }
    if (from.has_isdouble()) {
      set_isdouble(from.isdouble());
    }
    if (from.has_iosgoodid()) {
      set_iosgoodid(from.iosgoodid());
    }
    if (from.has_androidgoodid()) {
      set_androidgoodid(from.androidgoodid());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_goodgift()) {
      set_goodgift(from.goodgift());
    }
    if (from.has_itemicon()) {
      set_itemicon(from.itemicon());
    }
    if (from.has_collectionicon()) {
      set_collectionicon(from.collectionicon());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_strdescription()) {
      set_strdescription(from.strdescription());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_monthcardtype()) {
      set_monthcardtype(from.monthcardtype());
    }
    if (from.has_oldprice()) {
      mutable_oldprice()->::TgsProtocol::ClientSource::MergeFrom(from.oldprice());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_monthcardprize()) {
      set_monthcardprize(from.monthcardprize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientChargeShopConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientChargeShopConf::CopyFrom(const ClientChargeShopConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientChargeShopConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x000ffffb) != 0x000ffffb) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->buy())) return false;
  if (has_cost()) {
    if (!this->cost().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->extra())) return false;
  if (has_oldprice()) {
    if (!this->oldprice().IsInitialized()) return false;
  }
  return true;
}

void ClientChargeShopConf::Swap(ClientChargeShopConf* other) {
  if (other != this) {
    std::swap(goodsid_, other->goodsid_);
    std::swap(shoptype_, other->shoptype_);
    buy_.Swap(&other->buy_);
    std::swap(cost_, other->cost_);
    std::swap(status_, other->status_);
    std::swap(platformtype_, other->platformtype_);
    std::swap(limitnumber_, other->limitnumber_);
    std::swap(limittype_, other->limittype_);
    std::swap(prizefloat_, other->prizefloat_);
    std::swap(isdouble_, other->isdouble_);
    std::swap(iosgoodid_, other->iosgoodid_);
    std::swap(androidgoodid_, other->androidgoodid_);
    std::swap(currency_, other->currency_);
    std::swap(goodgift_, other->goodgift_);
    std::swap(itemicon_, other->itemicon_);
    std::swap(collectionicon_, other->collectionicon_);
    std::swap(strname_, other->strname_);
    std::swap(strdescription_, other->strdescription_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(monthcardtype_, other->monthcardtype_);
    extra_.Swap(&other->extra_);
    std::swap(oldprice_, other->oldprice_);
    std::swap(rate_, other->rate_);
    std::swap(monthcardprize_, other->monthcardprize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientChargeShopConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientChargeShopConf_descriptor_;
  metadata.reflection = ClientChargeShopConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientSevenDayRankEle::kRankFieldNumber;
const int ClientSevenDayRankEle::kCharidFieldNumber;
const int ClientSevenDayRankEle::kNameFieldNumber;
const int ClientSevenDayRankEle::kValueFieldNumber;
const int ClientSevenDayRankEle::kPhotoFieldNumber;
const int ClientSevenDayRankEle::kLevelFieldNumber;
#endif  // !_MSC_VER

ClientSevenDayRankEle::ClientSevenDayRankEle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientSevenDayRankEle)
}

void ClientSevenDayRankEle::InitAsDefaultInstance() {
}

ClientSevenDayRankEle::ClientSevenDayRankEle(const ClientSevenDayRankEle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientSevenDayRankEle)
}

void ClientSevenDayRankEle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rank_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0u;
  photo_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientSevenDayRankEle::~ClientSevenDayRankEle() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientSevenDayRankEle)
  SharedDtor();
}

void ClientSevenDayRankEle::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClientSevenDayRankEle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientSevenDayRankEle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientSevenDayRankEle_descriptor_;
}

const ClientSevenDayRankEle& ClientSevenDayRankEle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientSevenDayRankEle* ClientSevenDayRankEle::default_instance_ = NULL;

ClientSevenDayRankEle* ClientSevenDayRankEle::New() const {
  return new ClientSevenDayRankEle;
}

void ClientSevenDayRankEle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientSevenDayRankEle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, value_);
    ZR_(photo_, level_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientSevenDayRankEle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientSevenDayRankEle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // required uint32 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_photo;
        break;
      }

      // required uint32 photo = 5;
      case 5: {
        if (tag == 40) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientSevenDayRankEle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientSevenDayRankEle)
  return false;
#undef DO_
}

void ClientSevenDayRankEle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientSevenDayRankEle)
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required uint32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // required uint32 photo = 5;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->photo(), output);
  }

  // required uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientSevenDayRankEle)
}

::google::protobuf::uint8* ClientSevenDayRankEle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientSevenDayRankEle)
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // required uint32 photo = 5;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->photo(), target);
  }

  // required uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientSevenDayRankEle)
  return target;
}

int ClientSevenDayRankEle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 photo = 5;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSevenDayRankEle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientSevenDayRankEle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientSevenDayRankEle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientSevenDayRankEle::MergeFrom(const ClientSevenDayRankEle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientSevenDayRankEle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSevenDayRankEle::CopyFrom(const ClientSevenDayRankEle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSevenDayRankEle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ClientSevenDayRankEle::Swap(ClientSevenDayRankEle* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(photo_, other->photo_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientSevenDayRankEle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientSevenDayRankEle_descriptor_;
  metadata.reflection = ClientSevenDayRankEle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientSevenDayRank::kDayFieldNumber;
const int ClientSevenDayRank::kSecondsFieldNumber;
const int ClientSevenDayRank::kItemFieldNumber;
#endif  // !_MSC_VER

ClientSevenDayRank::ClientSevenDayRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientSevenDayRank)
}

void ClientSevenDayRank::InitAsDefaultInstance() {
}

ClientSevenDayRank::ClientSevenDayRank(const ClientSevenDayRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientSevenDayRank)
}

void ClientSevenDayRank::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  seconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientSevenDayRank::~ClientSevenDayRank() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientSevenDayRank)
  SharedDtor();
}

void ClientSevenDayRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientSevenDayRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientSevenDayRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientSevenDayRank_descriptor_;
}

const ClientSevenDayRank& ClientSevenDayRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientSevenDayRank* ClientSevenDayRank::default_instance_ = NULL;

ClientSevenDayRank* ClientSevenDayRank::New() const {
  return new ClientSevenDayRank;
}

void ClientSevenDayRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientSevenDayRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(day_, seconds_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientSevenDayRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientSevenDayRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seconds;
        break;
      }

      // required uint32 seconds = 2;
      case 2: {
        if (tag == 16) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.ClientSevenDayRankEle item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientSevenDayRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientSevenDayRank)
  return false;
#undef DO_
}

void ClientSevenDayRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientSevenDayRank)
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // required uint32 seconds = 2;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seconds(), output);
  }

  // repeated .TgsProtocol.ClientSevenDayRankEle item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientSevenDayRank)
}

::google::protobuf::uint8* ClientSevenDayRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientSevenDayRank)
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // required uint32 seconds = 2;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seconds(), target);
  }

  // repeated .TgsProtocol.ClientSevenDayRankEle item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientSevenDayRank)
  return target;
}

int ClientSevenDayRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // required uint32 seconds = 2;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

  }
  // repeated .TgsProtocol.ClientSevenDayRankEle item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSevenDayRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientSevenDayRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientSevenDayRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientSevenDayRank::MergeFrom(const ClientSevenDayRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientSevenDayRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSevenDayRank::CopyFrom(const ClientSevenDayRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSevenDayRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void ClientSevenDayRank::Swap(ClientSevenDayRank* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(seconds_, other->seconds_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientSevenDayRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientSevenDayRank_descriptor_;
  metadata.reflection = ClientSevenDayRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbNoticeEle::kIdFieldNumber;
const int DbNoticeEle::kTypeFieldNumber;
const int DbNoticeEle::kValuesFieldNumber;
const int DbNoticeEle::kWordsidFieldNumber;
const int DbNoticeEle::kProFieldNumber;
const int DbNoticeEle::kRewardFieldNumber;
const int DbNoticeEle::kNumberFieldNumber;
const int DbNoticeEle::kTimeoutFieldNumber;
const int DbNoticeEle::kReasonFieldNumber;
const int DbNoticeEle::kRateFieldNumber;
const int DbNoticeEle::kSendNumberFieldNumber;
const int DbNoticeEle::kCreateTimeFieldNumber;
const int DbNoticeEle::kContentFieldNumber;
#endif  // !_MSC_VER

DbNoticeEle::DbNoticeEle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbNoticeEle)
}

void DbNoticeEle::InitAsDefaultInstance() {
}

DbNoticeEle::DbNoticeEle(const DbNoticeEle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbNoticeEle)
}

void DbNoticeEle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0;
  values_ = 0u;
  wordsid_ = 0u;
  pro_ = 0u;
  number_ = 0u;
  timeout_ = 0u;
  reason_ = 0u;
  rate_ = 0u;
  sendnumber_ = 0u;
  createtime_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbNoticeEle::~DbNoticeEle() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbNoticeEle)
  SharedDtor();
}

void DbNoticeEle::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void DbNoticeEle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbNoticeEle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbNoticeEle_descriptor_;
}

const DbNoticeEle& DbNoticeEle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DbNoticeEle* DbNoticeEle::default_instance_ = NULL;

DbNoticeEle* DbNoticeEle::New() const {
  return new DbNoticeEle;
}

void DbNoticeEle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbNoticeEle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(id_, wordsid_);
    ZR_(pro_, timeout_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(reason_, sendnumber_);
    createtime_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbNoticeEle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbNoticeEle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .TgsProtocol.eNoticeType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::eNoticeType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::eNoticeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_values;
        break;
      }

      // required uint32 values = 3;
      case 3: {
        if (tag == 24) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &values_)));
          set_has_values();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wordsid;
        break;
      }

      // required uint32 wordsid = 4;
      case 4: {
        if (tag == 32) {
         parse_wordsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wordsid_)));
          set_has_wordsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pro;
        break;
      }

      // required uint32 pro = 5;
      case 5: {
        if (tag == 40) {
         parse_pro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pro_)));
          set_has_pro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reward;
        break;
      }

      // repeated .TgsProtocol.ClientSource reward = 6;
      case 6: {
        if (tag == 50) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reward;
        if (input->ExpectTag(56)) goto parse_number;
        break;
      }

      // required uint32 number = 7;
      case 7: {
        if (tag == 56) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_timeout;
        break;
      }

      // required uint32 timeout = 8;
      case 8: {
        if (tag == 64) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reason;
        break;
      }

      // required uint32 reason = 9;
      case 9: {
        if (tag == 72) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_rate;
        break;
      }

      // required uint32 rate = 10;
      case 10: {
        if (tag == 80) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sendNumber;
        break;
      }

      // required uint32 sendNumber = 11;
      case 11: {
        if (tag == 88) {
         parse_sendNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendnumber_)));
          set_has_sendnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_createTime;
        break;
      }

      // required uint32 createTime = 12;
      case 12: {
        if (tag == 96) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_content;
        break;
      }

      // required string content = 13;
      case 13: {
        if (tag == 106) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbNoticeEle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbNoticeEle)
  return false;
#undef DO_
}

void DbNoticeEle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbNoticeEle)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .TgsProtocol.eNoticeType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 values = 3;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->values(), output);
  }

  // required uint32 wordsid = 4;
  if (has_wordsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wordsid(), output);
  }

  // required uint32 pro = 5;
  if (has_pro()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pro(), output);
  }

  // repeated .TgsProtocol.ClientSource reward = 6;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reward(i), output);
  }

  // required uint32 number = 7;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->number(), output);
  }

  // required uint32 timeout = 8;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timeout(), output);
  }

  // required uint32 reason = 9;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reason(), output);
  }

  // required uint32 rate = 10;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rate(), output);
  }

  // required uint32 sendNumber = 11;
  if (has_sendnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sendnumber(), output);
  }

  // required uint32 createTime = 12;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->createtime(), output);
  }

  // required string content = 13;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbNoticeEle)
}

::google::protobuf::uint8* DbNoticeEle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbNoticeEle)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .TgsProtocol.eNoticeType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 values = 3;
  if (has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->values(), target);
  }

  // required uint32 wordsid = 4;
  if (has_wordsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wordsid(), target);
  }

  // required uint32 pro = 5;
  if (has_pro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pro(), target);
  }

  // repeated .TgsProtocol.ClientSource reward = 6;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reward(i), target);
  }

  // required uint32 number = 7;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->number(), target);
  }

  // required uint32 timeout = 8;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timeout(), target);
  }

  // required uint32 reason = 9;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reason(), target);
  }

  // required uint32 rate = 10;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rate(), target);
  }

  // required uint32 sendNumber = 11;
  if (has_sendnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sendnumber(), target);
  }

  // required uint32 createTime = 12;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->createtime(), target);
  }

  // required string content = 13;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbNoticeEle)
  return target;
}

int DbNoticeEle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .TgsProtocol.eNoticeType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 values = 3;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->values());
    }

    // required uint32 wordsid = 4;
    if (has_wordsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wordsid());
    }

    // required uint32 pro = 5;
    if (has_pro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pro());
    }

    // required uint32 number = 7;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // required uint32 timeout = 8;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 reason = 9;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // required uint32 rate = 10;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // required uint32 sendNumber = 11;
    if (has_sendnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendnumber());
    }

    // required uint32 createTime = 12;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // required string content = 13;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated .TgsProtocol.ClientSource reward = 6;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbNoticeEle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbNoticeEle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbNoticeEle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbNoticeEle::MergeFrom(const DbNoticeEle& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_values()) {
      set_values(from.values());
    }
    if (from.has_wordsid()) {
      set_wordsid(from.wordsid());
    }
    if (from.has_pro()) {
      set_pro(from.pro());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_sendnumber()) {
      set_sendnumber(from.sendnumber());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbNoticeEle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbNoticeEle::CopyFrom(const DbNoticeEle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbNoticeEle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fdf) != 0x00001fdf) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void DbNoticeEle::Swap(DbNoticeEle* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(values_, other->values_);
    std::swap(wordsid_, other->wordsid_);
    std::swap(pro_, other->pro_);
    reward_.Swap(&other->reward_);
    std::swap(number_, other->number_);
    std::swap(timeout_, other->timeout_);
    std::swap(reason_, other->reason_);
    std::swap(rate_, other->rate_);
    std::swap(sendnumber_, other->sendnumber_);
    std::swap(createtime_, other->createtime_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbNoticeEle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbNoticeEle_descriptor_;
  metadata.reflection = DbNoticeEle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OptGlobal::kNoticeFieldNumber;
#endif  // !_MSC_VER

OptGlobal::OptGlobal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.OptGlobal)
}

void OptGlobal::InitAsDefaultInstance() {
}

OptGlobal::OptGlobal(const OptGlobal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.OptGlobal)
}

void OptGlobal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptGlobal::~OptGlobal() {
  // @@protoc_insertion_point(destructor:TgsProtocol.OptGlobal)
  SharedDtor();
}

void OptGlobal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OptGlobal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptGlobal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptGlobal_descriptor_;
}

const OptGlobal& OptGlobal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

OptGlobal* OptGlobal::default_instance_ = NULL;

OptGlobal* OptGlobal::New() const {
  return new OptGlobal;
}

void OptGlobal::Clear() {
  notice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptGlobal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.OptGlobal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DbNoticeEle notice = 1;
      case 1: {
        if (tag == 10) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_notice;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.OptGlobal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.OptGlobal)
  return false;
#undef DO_
}

void OptGlobal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.OptGlobal)
  // repeated .TgsProtocol.DbNoticeEle notice = 1;
  for (int i = 0; i < this->notice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notice(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.OptGlobal)
}

::google::protobuf::uint8* OptGlobal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.OptGlobal)
  // repeated .TgsProtocol.DbNoticeEle notice = 1;
  for (int i = 0; i < this->notice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notice(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.OptGlobal)
  return target;
}

int OptGlobal::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DbNoticeEle notice = 1;
  total_size += 1 * this->notice_size();
  for (int i = 0; i < this->notice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notice(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptGlobal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptGlobal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptGlobal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptGlobal::MergeFrom(const OptGlobal& from) {
  GOOGLE_CHECK_NE(&from, this);
  notice_.MergeFrom(from.notice_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptGlobal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptGlobal::CopyFrom(const OptGlobal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptGlobal::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->notice())) return false;
  return true;
}

void OptGlobal::Swap(OptGlobal* other) {
  if (other != this) {
    notice_.Swap(&other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptGlobal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptGlobal_descriptor_;
  metadata.reflection = OptGlobal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientContinueCharge::kIndexFieldNumber;
const int ClientContinueCharge::kCdFieldNumber;
const int ClientContinueCharge::kNameFieldNumber;
const int ClientContinueCharge::kLineFieldNumber;
const int ClientContinueCharge::kSkillIndexFieldNumber;
const int ClientContinueCharge::kChargeTypeFieldNumber;
const int ClientContinueCharge::kChargeValueFieldNumber;
const int ClientContinueCharge::kChargePrizeFieldNumber;
const int ClientContinueCharge::kChargePrize2FieldNumber;
const int ClientContinueCharge::kChargePrize3FieldNumber;
const int ClientContinueCharge::kChargePrize4FieldNumber;
#endif  // !_MSC_VER

ClientContinueCharge::ClientContinueCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientContinueCharge)
}

void ClientContinueCharge::InitAsDefaultInstance() {
}

ClientContinueCharge::ClientContinueCharge(const ClientContinueCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientContinueCharge)
}

void ClientContinueCharge::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0u;
  cd_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chargetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientContinueCharge::~ClientContinueCharge() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientContinueCharge)
  SharedDtor();
}

void ClientContinueCharge::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClientContinueCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientContinueCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientContinueCharge_descriptor_;
}

const ClientContinueCharge& ClientContinueCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientContinueCharge* ClientContinueCharge::default_instance_ = NULL;

ClientContinueCharge* ClientContinueCharge::New() const {
  return new ClientContinueCharge;
}

void ClientContinueCharge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientContinueCharge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 39) {
    ZR_(index_, cd_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    chargetype_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  line_.Clear();
  skillindex_.Clear();
  chargevalue_.Clear();
  chargeprize_.Clear();
  chargeprize2_.Clear();
  chargeprize3_.Clear();
  chargeprize4_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientContinueCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientContinueCharge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // required uint32 cd = 2;
      case 2: {
        if (tag == 16) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_line;
        break;
      }

      // repeated uint32 line = 4;
      case 4: {
        if (tag == 32) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_line())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_line())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_line;
        if (input->ExpectTag(40)) goto parse_skillIndex;
        break;
      }

      // repeated uint32 skillIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_skillIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_skillindex())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillindex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skillIndex;
        if (input->ExpectTag(48)) goto parse_chargeType;
        break;
      }

      // required uint32 chargeType = 6;
      case 6: {
        if (tag == 48) {
         parse_chargeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chargetype_)));
          set_has_chargetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_chargeValue;
        break;
      }

      // repeated uint32 chargeValue = 7;
      case 7: {
        if (tag == 56) {
         parse_chargeValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_chargevalue())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chargevalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_chargeValue;
        if (input->ExpectTag(66)) goto parse_chargePrize;
        break;
      }

      // repeated .TgsProtocol.SourceList chargePrize = 8;
      case 8: {
        if (tag == 66) {
         parse_chargePrize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargeprize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_chargePrize;
        if (input->ExpectTag(74)) goto parse_chargePrize2;
        break;
      }

      // repeated .TgsProtocol.SourceList chargePrize2 = 9;
      case 9: {
        if (tag == 74) {
         parse_chargePrize2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargeprize2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_chargePrize2;
        if (input->ExpectTag(82)) goto parse_chargePrize3;
        break;
      }

      // repeated .TgsProtocol.SourceList chargePrize3 = 10;
      case 10: {
        if (tag == 82) {
         parse_chargePrize3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargeprize3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_chargePrize3;
        if (input->ExpectTag(90)) goto parse_chargePrize4;
        break;
      }

      // repeated .TgsProtocol.SourceList chargePrize4 = 11;
      case 11: {
        if (tag == 90) {
         parse_chargePrize4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargeprize4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_chargePrize4;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientContinueCharge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientContinueCharge)
  return false;
#undef DO_
}

void ClientContinueCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientContinueCharge)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cd(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated uint32 line = 4;
  for (int i = 0; i < this->line_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->line(i), output);
  }

  // repeated uint32 skillIndex = 5;
  for (int i = 0; i < this->skillindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->skillindex(i), output);
  }

  // required uint32 chargeType = 6;
  if (has_chargetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->chargetype(), output);
  }

  // repeated uint32 chargeValue = 7;
  for (int i = 0; i < this->chargevalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->chargevalue(i), output);
  }

  // repeated .TgsProtocol.SourceList chargePrize = 8;
  for (int i = 0; i < this->chargeprize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->chargeprize(i), output);
  }

  // repeated .TgsProtocol.SourceList chargePrize2 = 9;
  for (int i = 0; i < this->chargeprize2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->chargeprize2(i), output);
  }

  // repeated .TgsProtocol.SourceList chargePrize3 = 10;
  for (int i = 0; i < this->chargeprize3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->chargeprize3(i), output);
  }

  // repeated .TgsProtocol.SourceList chargePrize4 = 11;
  for (int i = 0; i < this->chargeprize4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->chargeprize4(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientContinueCharge)
}

::google::protobuf::uint8* ClientContinueCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientContinueCharge)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cd(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated uint32 line = 4;
  for (int i = 0; i < this->line_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->line(i), target);
  }

  // repeated uint32 skillIndex = 5;
  for (int i = 0; i < this->skillindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->skillindex(i), target);
  }

  // required uint32 chargeType = 6;
  if (has_chargetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->chargetype(), target);
  }

  // repeated uint32 chargeValue = 7;
  for (int i = 0; i < this->chargevalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->chargevalue(i), target);
  }

  // repeated .TgsProtocol.SourceList chargePrize = 8;
  for (int i = 0; i < this->chargeprize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->chargeprize(i), target);
  }

  // repeated .TgsProtocol.SourceList chargePrize2 = 9;
  for (int i = 0; i < this->chargeprize2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->chargeprize2(i), target);
  }

  // repeated .TgsProtocol.SourceList chargePrize3 = 10;
  for (int i = 0; i < this->chargeprize3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->chargeprize3(i), target);
  }

  // repeated .TgsProtocol.SourceList chargePrize4 = 11;
  for (int i = 0; i < this->chargeprize4_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->chargeprize4(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientContinueCharge)
  return target;
}

int ClientContinueCharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 chargeType = 6;
    if (has_chargetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chargetype());
    }

  }
  // repeated uint32 line = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->line_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->line(i));
    }
    total_size += 1 * this->line_size() + data_size;
  }

  // repeated uint32 skillIndex = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillindex(i));
    }
    total_size += 1 * this->skillindex_size() + data_size;
  }

  // repeated uint32 chargeValue = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->chargevalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chargevalue(i));
    }
    total_size += 1 * this->chargevalue_size() + data_size;
  }

  // repeated .TgsProtocol.SourceList chargePrize = 8;
  total_size += 1 * this->chargeprize_size();
  for (int i = 0; i < this->chargeprize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargeprize(i));
  }

  // repeated .TgsProtocol.SourceList chargePrize2 = 9;
  total_size += 1 * this->chargeprize2_size();
  for (int i = 0; i < this->chargeprize2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargeprize2(i));
  }

  // repeated .TgsProtocol.SourceList chargePrize3 = 10;
  total_size += 1 * this->chargeprize3_size();
  for (int i = 0; i < this->chargeprize3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargeprize3(i));
  }

  // repeated .TgsProtocol.SourceList chargePrize4 = 11;
  total_size += 1 * this->chargeprize4_size();
  for (int i = 0; i < this->chargeprize4_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargeprize4(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientContinueCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientContinueCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientContinueCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientContinueCharge::MergeFrom(const ClientContinueCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  line_.MergeFrom(from.line_);
  skillindex_.MergeFrom(from.skillindex_);
  chargevalue_.MergeFrom(from.chargevalue_);
  chargeprize_.MergeFrom(from.chargeprize_);
  chargeprize2_.MergeFrom(from.chargeprize2_);
  chargeprize3_.MergeFrom(from.chargeprize3_);
  chargeprize4_.MergeFrom(from.chargeprize4_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_chargetype()) {
      set_chargetype(from.chargetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientContinueCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientContinueCharge::CopyFrom(const ClientContinueCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientContinueCharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->chargeprize())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->chargeprize2())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->chargeprize3())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->chargeprize4())) return false;
  return true;
}

void ClientContinueCharge::Swap(ClientContinueCharge* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(cd_, other->cd_);
    std::swap(name_, other->name_);
    line_.Swap(&other->line_);
    skillindex_.Swap(&other->skillindex_);
    std::swap(chargetype_, other->chargetype_);
    chargevalue_.Swap(&other->chargevalue_);
    chargeprize_.Swap(&other->chargeprize_);
    chargeprize2_.Swap(&other->chargeprize2_);
    chargeprize3_.Swap(&other->chargeprize3_);
    chargeprize4_.Swap(&other->chargeprize4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientContinueCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientContinueCharge_descriptor_;
  metadata.reflection = ClientContinueCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbHandBookEle::kKeyFieldNumber;
const int DbHandBookEle::kValFieldNumber;
#endif  // !_MSC_VER

DbHandBookEle::DbHandBookEle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbHandBookEle)
}

void DbHandBookEle::InitAsDefaultInstance() {
}

DbHandBookEle::DbHandBookEle(const DbHandBookEle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbHandBookEle)
}

void DbHandBookEle::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbHandBookEle::~DbHandBookEle() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbHandBookEle)
  SharedDtor();
}

void DbHandBookEle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbHandBookEle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbHandBookEle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbHandBookEle_descriptor_;
}

const DbHandBookEle& DbHandBookEle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DbHandBookEle* DbHandBookEle::default_instance_ = NULL;

DbHandBookEle* DbHandBookEle::New() const {
  return new DbHandBookEle;
}

void DbHandBookEle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbHandBookEle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(key_, val_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbHandBookEle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbHandBookEle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // required uint32 val = 2;
      case 2: {
        if (tag == 16) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbHandBookEle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbHandBookEle)
  return false;
#undef DO_
}

void DbHandBookEle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbHandBookEle)
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // required uint32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbHandBookEle)
}

::google::protobuf::uint8* DbHandBookEle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbHandBookEle)
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // required uint32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbHandBookEle)
  return target;
}

int DbHandBookEle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // required uint32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbHandBookEle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbHandBookEle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbHandBookEle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbHandBookEle::MergeFrom(const DbHandBookEle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbHandBookEle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbHandBookEle::CopyFrom(const DbHandBookEle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbHandBookEle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DbHandBookEle::Swap(DbHandBookEle* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbHandBookEle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbHandBookEle_descriptor_;
  metadata.reflection = DbHandBookEle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbHandBook::kOneFieldNumber;
#endif  // !_MSC_VER

DbHandBook::DbHandBook()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbHandBook)
}

void DbHandBook::InitAsDefaultInstance() {
}

DbHandBook::DbHandBook(const DbHandBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbHandBook)
}

void DbHandBook::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbHandBook::~DbHandBook() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbHandBook)
  SharedDtor();
}

void DbHandBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbHandBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbHandBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbHandBook_descriptor_;
}

const DbHandBook& DbHandBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DbHandBook* DbHandBook::default_instance_ = NULL;

DbHandBook* DbHandBook::New() const {
  return new DbHandBook;
}

void DbHandBook::Clear() {
  one_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbHandBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbHandBook)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DbHandBookEle one = 1;
      case 1: {
        if (tag == 10) {
         parse_one:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_one()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_one;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbHandBook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbHandBook)
  return false;
#undef DO_
}

void DbHandBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbHandBook)
  // repeated .TgsProtocol.DbHandBookEle one = 1;
  for (int i = 0; i < this->one_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->one(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbHandBook)
}

::google::protobuf::uint8* DbHandBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbHandBook)
  // repeated .TgsProtocol.DbHandBookEle one = 1;
  for (int i = 0; i < this->one_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->one(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbHandBook)
  return target;
}

int DbHandBook::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DbHandBookEle one = 1;
  total_size += 1 * this->one_size();
  for (int i = 0; i < this->one_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->one(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbHandBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbHandBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbHandBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbHandBook::MergeFrom(const DbHandBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  one_.MergeFrom(from.one_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbHandBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbHandBook::CopyFrom(const DbHandBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbHandBook::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->one())) return false;
  return true;
}

void DbHandBook::Swap(DbHandBook* other) {
  if (other != this) {
    one_.Swap(&other->one_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbHandBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbHandBook_descriptor_;
  metadata.reflection = DbHandBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientHandBook::kKeyFieldNumber;
const int ClientHandBook::kValFieldNumber;
#endif  // !_MSC_VER

ClientHandBook::ClientHandBook()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientHandBook)
}

void ClientHandBook::InitAsDefaultInstance() {
}

ClientHandBook::ClientHandBook(const ClientHandBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientHandBook)
}

void ClientHandBook::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientHandBook::~ClientHandBook() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientHandBook)
  SharedDtor();
}

void ClientHandBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientHandBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientHandBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientHandBook_descriptor_;
}

const ClientHandBook& ClientHandBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientHandBook* ClientHandBook::default_instance_ = NULL;

ClientHandBook* ClientHandBook::New() const {
  return new ClientHandBook;
}

void ClientHandBook::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientHandBook*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(key_, val_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientHandBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientHandBook)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // required uint32 val = 2;
      case 2: {
        if (tag == 16) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientHandBook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientHandBook)
  return false;
#undef DO_
}

void ClientHandBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientHandBook)
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // required uint32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientHandBook)
}

::google::protobuf::uint8* ClientHandBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientHandBook)
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // required uint32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientHandBook)
  return target;
}

int ClientHandBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // required uint32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientHandBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientHandBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientHandBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientHandBook::MergeFrom(const ClientHandBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientHandBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientHandBook::CopyFrom(const ClientHandBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHandBook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientHandBook::Swap(ClientHandBook* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientHandBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientHandBook_descriptor_;
  metadata.reflection = ClientHandBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTurntableData::kServerIdFieldNumber;
const int PlayerTurntableData::kServerNameFieldNumber;
const int PlayerTurntableData::kCharidFieldNumber;
const int PlayerTurntableData::kPhotoFieldNumber;
const int PlayerTurntableData::kNameFieldNumber;
const int PlayerTurntableData::kActidFieldNumber;
const int PlayerTurntableData::kTurnnumFieldNumber;
const int PlayerTurntableData::kMailtimeFieldNumber;
const int PlayerTurntableData::kUidFieldNumber;
const int PlayerTurntableData::kNationalIdFieldNumber;
#endif  // !_MSC_VER

PlayerTurntableData::PlayerTurntableData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.PlayerTurntableData)
}

void PlayerTurntableData::InitAsDefaultInstance() {
}

PlayerTurntableData::PlayerTurntableData(const PlayerTurntableData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.PlayerTurntableData)
}

void PlayerTurntableData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = 0u;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charid_ = GOOGLE_ULONGLONG(0);
  photo_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actid_ = 0u;
  turnnum_ = 0u;
  mailtime_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  nationalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTurntableData::~PlayerTurntableData() {
  // @@protoc_insertion_point(destructor:TgsProtocol.PlayerTurntableData)
  SharedDtor();
}

void PlayerTurntableData::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_name_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerTurntableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTurntableData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTurntableData_descriptor_;
}

const PlayerTurntableData& PlayerTurntableData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

PlayerTurntableData* PlayerTurntableData::default_instance_ = NULL;

PlayerTurntableData* PlayerTurntableData::New() const {
  return new PlayerTurntableData;
}

void PlayerTurntableData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerTurntableData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(server_id_, charid_);
    ZR_(actid_, turnnum_);
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_name_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    mailtime_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    uid_ = GOOGLE_ULONGLONG(0);
    nationalid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerTurntableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.PlayerTurntableData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (tag == 18) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_photo;
        break;
      }

      // required uint32 photo = 4;
      case 4: {
        if (tag == 32) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_actid;
        break;
      }

      // required uint32 actid = 6;
      case 6: {
        if (tag == 48) {
         parse_actid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_turnnum;
        break;
      }

      // required uint32 turnnum = 7;
      case 7: {
        if (tag == 56) {
         parse_turnnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turnnum_)));
          set_has_turnnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mailtime;
        break;
      }

      // optional uint32 mailtime = 8;
      case 8: {
        if (tag == 64) {
         parse_mailtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtime_)));
          set_has_mailtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_uid;
        break;
      }

      // required uint64 uid = 9;
      case 9: {
        if (tag == 72) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_nationalId;
        break;
      }

      // optional uint32 nationalId = 10;
      case 10: {
        if (tag == 80) {
         parse_nationalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nationalid_)));
          set_has_nationalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.PlayerTurntableData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.PlayerTurntableData)
  return false;
#undef DO_
}

void PlayerTurntableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.PlayerTurntableData)
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_name(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint32 photo = 4;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->photo(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // required uint32 actid = 6;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->actid(), output);
  }

  // required uint32 turnnum = 7;
  if (has_turnnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->turnnum(), output);
  }

  // optional uint32 mailtime = 8;
  if (has_mailtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mailtime(), output);
  }

  // required uint64 uid = 9;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->uid(), output);
  }

  // optional uint32 nationalId = 10;
  if (has_nationalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->nationalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.PlayerTurntableData)
}

::google::protobuf::uint8* PlayerTurntableData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.PlayerTurntableData)
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint32 photo = 4;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->photo(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required uint32 actid = 6;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->actid(), target);
  }

  // required uint32 turnnum = 7;
  if (has_turnnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->turnnum(), target);
  }

  // optional uint32 mailtime = 8;
  if (has_mailtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mailtime(), target);
  }

  // required uint64 uid = 9;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->uid(), target);
  }

  // optional uint32 nationalId = 10;
  if (has_nationalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->nationalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.PlayerTurntableData)
  return target;
}

int PlayerTurntableData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 photo = 4;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 actid = 6;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actid());
    }

    // required uint32 turnnum = 7;
    if (has_turnnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turnnum());
    }

    // optional uint32 mailtime = 8;
    if (has_mailtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 uid = 9;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 nationalId = 10;
    if (has_nationalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nationalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTurntableData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTurntableData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTurntableData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerTurntableData::MergeFrom(const PlayerTurntableData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_turnnum()) {
      set_turnnum(from.turnnum());
    }
    if (from.has_mailtime()) {
      set_mailtime(from.mailtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nationalid()) {
      set_nationalid(from.nationalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerTurntableData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTurntableData::CopyFrom(const PlayerTurntableData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTurntableData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000017c) != 0x0000017c) return false;

  return true;
}

void PlayerTurntableData::Swap(PlayerTurntableData* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(server_name_, other->server_name_);
    std::swap(charid_, other->charid_);
    std::swap(photo_, other->photo_);
    std::swap(name_, other->name_);
    std::swap(actid_, other->actid_);
    std::swap(turnnum_, other->turnnum_);
    std::swap(mailtime_, other->mailtime_);
    std::swap(uid_, other->uid_);
    std::swap(nationalid_, other->nationalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerTurntableData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTurntableData_descriptor_;
  metadata.reflection = PlayerTurntableData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalGoodsConf::kGoodsidFieldNumber;
const int GlobalGoodsConf::kNumFieldNumber;
#endif  // !_MSC_VER

GlobalGoodsConf::GlobalGoodsConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GlobalGoodsConf)
}

void GlobalGoodsConf::InitAsDefaultInstance() {
}

GlobalGoodsConf::GlobalGoodsConf(const GlobalGoodsConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GlobalGoodsConf)
}

void GlobalGoodsConf::SharedCtor() {
  _cached_size_ = 0;
  goodsid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalGoodsConf::~GlobalGoodsConf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GlobalGoodsConf)
  SharedDtor();
}

void GlobalGoodsConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalGoodsConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalGoodsConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalGoodsConf_descriptor_;
}

const GlobalGoodsConf& GlobalGoodsConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GlobalGoodsConf* GlobalGoodsConf::default_instance_ = NULL;

GlobalGoodsConf* GlobalGoodsConf::New() const {
  return new GlobalGoodsConf;
}

void GlobalGoodsConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GlobalGoodsConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(goodsid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalGoodsConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GlobalGoodsConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 goodsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GlobalGoodsConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GlobalGoodsConf)
  return false;
#undef DO_
}

void GlobalGoodsConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GlobalGoodsConf)
  // required uint32 goodsid = 1;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goodsid(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GlobalGoodsConf)
}

::google::protobuf::uint8* GlobalGoodsConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GlobalGoodsConf)
  // required uint32 goodsid = 1;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goodsid(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GlobalGoodsConf)
  return target;
}

int GlobalGoodsConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 goodsid = 1;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsid());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalGoodsConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalGoodsConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalGoodsConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalGoodsConf::MergeFrom(const GlobalGoodsConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalGoodsConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalGoodsConf::CopyFrom(const GlobalGoodsConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalGoodsConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GlobalGoodsConf::Swap(GlobalGoodsConf* other) {
  if (other != this) {
    std::swap(goodsid_, other->goodsid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalGoodsConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalGoodsConf_descriptor_;
  metadata.reflection = GlobalGoodsConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerWarConf::kScoreOpenDayFieldNumber;
const int ServerWarConf::kScoreOpenHourFieldNumber;
const int ServerWarConf::kScoreCloseDayFieldNumber;
const int ServerWarConf::kScoreCloseHourFieldNumber;
const int ServerWarConf::kFightOpenDayFieldNumber;
const int ServerWarConf::kFightOpenHourFieldNumber;
const int ServerWarConf::kFightCloseDayFieldNumber;
const int ServerWarConf::kFightCloseHourFieldNumber;
const int ServerWarConf::kCountryFightNumFieldNumber;
const int ServerWarConf::kFightShowTopnumFieldNumber;
const int ServerWarConf::kFightEnemyNumFieldNumber;
const int ServerWarConf::kScoreRankCountryNumFieldNumber;
const int ServerWarConf::kFightRankNumFieldNumber;
const int ServerWarConf::kScoreWinScoreFieldNumber;
const int ServerWarConf::kScoreWinScoreminFieldNumber;
const int ServerWarConf::kScoreWinScoremaxFieldNumber;
const int ServerWarConf::kScoreWinHonorFieldNumber;
const int ServerWarConf::kScoreWinHonorminFieldNumber;
const int ServerWarConf::kScoreWinHonormaxFieldNumber;
const int ServerWarConf::kScoreLoseScoreFieldNumber;
const int ServerWarConf::kScoreLoseHonorFieldNumber;
const int ServerWarConf::kEffectCheckPerFieldNumber;
const int ServerWarConf::kEffectSkipPerFieldNumber;
const int ServerWarConf::kFightWinHonorFieldNumber;
const int ServerWarConf::kFightLoseHonorFieldNumber;
const int ServerWarConf::kScoreEnemyEffectFieldNumber;
const int ServerWarConf::kScoreOpenPlayersFieldNumber;
#endif  // !_MSC_VER

ServerWarConf::ServerWarConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ServerWarConf)
}

void ServerWarConf::InitAsDefaultInstance() {
}

ServerWarConf::ServerWarConf(const ServerWarConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ServerWarConf)
}

void ServerWarConf::SharedCtor() {
  _cached_size_ = 0;
  score_open_day_ = 0u;
  score_open_hour_ = 0u;
  score_close_day_ = 0u;
  score_close_hour_ = 0u;
  fight_open_day_ = 0u;
  fight_open_hour_ = 0u;
  fight_close_day_ = 0u;
  fight_close_hour_ = 0u;
  country_fight_num_ = 0u;
  fight_show_topnum_ = 0u;
  fight_enemy_num_ = 0u;
  score_rank_country_num_ = 0u;
  fight_rank_num_ = 0u;
  score_win_score_ = 0u;
  score_win_scoremin_ = 0u;
  score_win_scoremax_ = 0u;
  score_win_honor_ = 0u;
  score_win_honormin_ = 0u;
  score_win_honormax_ = 0u;
  score_lose_score_ = 0u;
  score_lose_honor_ = 0u;
  effect_check_per_ = 0;
  effect_skip_per_ = 0u;
  fight_win_honor_ = 0u;
  fight_lose_honor_ = 0u;
  score_open_players_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerWarConf::~ServerWarConf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ServerWarConf)
  SharedDtor();
}

void ServerWarConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerWarConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerWarConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerWarConf_descriptor_;
}

const ServerWarConf& ServerWarConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ServerWarConf* ServerWarConf::default_instance_ = NULL;

ServerWarConf* ServerWarConf::New() const {
  return new ServerWarConf;
}

void ServerWarConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerWarConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(score_open_day_, fight_close_hour_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(country_fight_num_, score_win_scoremax_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(score_win_honor_, fight_win_honor_);
  }
  ZR_(fight_lose_honor_, score_open_players_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  score_enemy_effect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerWarConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ServerWarConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score_open_day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_open_day_)));
          set_has_score_open_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score_open_hour;
        break;
      }

      // optional uint32 score_open_hour = 2;
      case 2: {
        if (tag == 16) {
         parse_score_open_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_open_hour_)));
          set_has_score_open_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score_close_day;
        break;
      }

      // optional uint32 score_close_day = 3;
      case 3: {
        if (tag == 24) {
         parse_score_close_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_close_day_)));
          set_has_score_close_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score_close_hour;
        break;
      }

      // optional uint32 score_close_hour = 4;
      case 4: {
        if (tag == 32) {
         parse_score_close_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_close_hour_)));
          set_has_score_close_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fight_open_day;
        break;
      }

      // optional uint32 fight_open_day = 5;
      case 5: {
        if (tag == 40) {
         parse_fight_open_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_open_day_)));
          set_has_fight_open_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fight_open_hour;
        break;
      }

      // optional uint32 fight_open_hour = 6;
      case 6: {
        if (tag == 48) {
         parse_fight_open_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_open_hour_)));
          set_has_fight_open_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fight_close_day;
        break;
      }

      // optional uint32 fight_close_day = 7;
      case 7: {
        if (tag == 56) {
         parse_fight_close_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_close_day_)));
          set_has_fight_close_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fight_close_hour;
        break;
      }

      // optional uint32 fight_close_hour = 8;
      case 8: {
        if (tag == 64) {
         parse_fight_close_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_close_hour_)));
          set_has_fight_close_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_country_fight_num;
        break;
      }

      // optional uint32 country_fight_num = 9;
      case 9: {
        if (tag == 72) {
         parse_country_fight_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_fight_num_)));
          set_has_country_fight_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fight_show_topnum;
        break;
      }

      // optional uint32 fight_show_topnum = 10;
      case 10: {
        if (tag == 80) {
         parse_fight_show_topnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_show_topnum_)));
          set_has_fight_show_topnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_fight_enemy_num;
        break;
      }

      // optional uint32 fight_enemy_num = 11;
      case 11: {
        if (tag == 88) {
         parse_fight_enemy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_enemy_num_)));
          set_has_fight_enemy_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_score_rank_country_num;
        break;
      }

      // optional uint32 score_rank_country_num = 12;
      case 12: {
        if (tag == 96) {
         parse_score_rank_country_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_rank_country_num_)));
          set_has_score_rank_country_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_fight_rank_num;
        break;
      }

      // optional uint32 fight_rank_num = 13;
      case 13: {
        if (tag == 104) {
         parse_fight_rank_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_rank_num_)));
          set_has_fight_rank_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_score_win_score;
        break;
      }

      // optional uint32 score_win_score = 14;
      case 14: {
        if (tag == 112) {
         parse_score_win_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_win_score_)));
          set_has_score_win_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_score_win_scoremin;
        break;
      }

      // optional uint32 score_win_scoremin = 15;
      case 15: {
        if (tag == 120) {
         parse_score_win_scoremin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_win_scoremin_)));
          set_has_score_win_scoremin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_score_win_scoremax;
        break;
      }

      // optional uint32 score_win_scoremax = 16;
      case 16: {
        if (tag == 128) {
         parse_score_win_scoremax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_win_scoremax_)));
          set_has_score_win_scoremax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_score_win_honor;
        break;
      }

      // optional uint32 score_win_honor = 17;
      case 17: {
        if (tag == 136) {
         parse_score_win_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_win_honor_)));
          set_has_score_win_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_score_win_honormin;
        break;
      }

      // optional uint32 score_win_honormin = 18;
      case 18: {
        if (tag == 144) {
         parse_score_win_honormin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_win_honormin_)));
          set_has_score_win_honormin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_score_win_honormax;
        break;
      }

      // optional uint32 score_win_honormax = 19;
      case 19: {
        if (tag == 152) {
         parse_score_win_honormax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_win_honormax_)));
          set_has_score_win_honormax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_score_lose_score;
        break;
      }

      // optional uint32 score_lose_score = 20;
      case 20: {
        if (tag == 160) {
         parse_score_lose_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_lose_score_)));
          set_has_score_lose_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_score_lose_honor;
        break;
      }

      // optional uint32 score_lose_honor = 21;
      case 21: {
        if (tag == 168) {
         parse_score_lose_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_lose_honor_)));
          set_has_score_lose_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_effect_check_per;
        break;
      }

      // optional float effect_check_per = 22;
      case 22: {
        if (tag == 181) {
         parse_effect_check_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effect_check_per_)));
          set_has_effect_check_per();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_effect_skip_per;
        break;
      }

      // optional uint32 effect_skip_per = 23;
      case 23: {
        if (tag == 184) {
         parse_effect_skip_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_skip_per_)));
          set_has_effect_skip_per();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_fight_win_honor;
        break;
      }

      // optional uint32 fight_win_honor = 24;
      case 24: {
        if (tag == 192) {
         parse_fight_win_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_win_honor_)));
          set_has_fight_win_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_fight_lose_honor;
        break;
      }

      // optional uint32 fight_lose_honor = 25;
      case 25: {
        if (tag == 200) {
         parse_fight_lose_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_lose_honor_)));
          set_has_fight_lose_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_score_enemy_effect;
        break;
      }

      // repeated uint64 score_enemy_effect = 26;
      case 26: {
        if (tag == 208) {
         parse_score_enemy_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 208, input, this->mutable_score_enemy_effect())));
        } else if (tag == 210) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_score_enemy_effect())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_score_enemy_effect;
        if (input->ExpectTag(216)) goto parse_score_open_players;
        break;
      }

      // optional uint32 score_open_players = 27;
      case 27: {
        if (tag == 216) {
         parse_score_open_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_open_players_)));
          set_has_score_open_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ServerWarConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ServerWarConf)
  return false;
#undef DO_
}

void ServerWarConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ServerWarConf)
  // optional uint32 score_open_day = 1;
  if (has_score_open_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score_open_day(), output);
  }

  // optional uint32 score_open_hour = 2;
  if (has_score_open_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score_open_hour(), output);
  }

  // optional uint32 score_close_day = 3;
  if (has_score_close_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score_close_day(), output);
  }

  // optional uint32 score_close_hour = 4;
  if (has_score_close_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score_close_hour(), output);
  }

  // optional uint32 fight_open_day = 5;
  if (has_fight_open_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fight_open_day(), output);
  }

  // optional uint32 fight_open_hour = 6;
  if (has_fight_open_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fight_open_hour(), output);
  }

  // optional uint32 fight_close_day = 7;
  if (has_fight_close_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fight_close_day(), output);
  }

  // optional uint32 fight_close_hour = 8;
  if (has_fight_close_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fight_close_hour(), output);
  }

  // optional uint32 country_fight_num = 9;
  if (has_country_fight_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->country_fight_num(), output);
  }

  // optional uint32 fight_show_topnum = 10;
  if (has_fight_show_topnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fight_show_topnum(), output);
  }

  // optional uint32 fight_enemy_num = 11;
  if (has_fight_enemy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->fight_enemy_num(), output);
  }

  // optional uint32 score_rank_country_num = 12;
  if (has_score_rank_country_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->score_rank_country_num(), output);
  }

  // optional uint32 fight_rank_num = 13;
  if (has_fight_rank_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->fight_rank_num(), output);
  }

  // optional uint32 score_win_score = 14;
  if (has_score_win_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->score_win_score(), output);
  }

  // optional uint32 score_win_scoremin = 15;
  if (has_score_win_scoremin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->score_win_scoremin(), output);
  }

  // optional uint32 score_win_scoremax = 16;
  if (has_score_win_scoremax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->score_win_scoremax(), output);
  }

  // optional uint32 score_win_honor = 17;
  if (has_score_win_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->score_win_honor(), output);
  }

  // optional uint32 score_win_honormin = 18;
  if (has_score_win_honormin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->score_win_honormin(), output);
  }

  // optional uint32 score_win_honormax = 19;
  if (has_score_win_honormax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->score_win_honormax(), output);
  }

  // optional uint32 score_lose_score = 20;
  if (has_score_lose_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->score_lose_score(), output);
  }

  // optional uint32 score_lose_honor = 21;
  if (has_score_lose_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->score_lose_honor(), output);
  }

  // optional float effect_check_per = 22;
  if (has_effect_check_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->effect_check_per(), output);
  }

  // optional uint32 effect_skip_per = 23;
  if (has_effect_skip_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->effect_skip_per(), output);
  }

  // optional uint32 fight_win_honor = 24;
  if (has_fight_win_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->fight_win_honor(), output);
  }

  // optional uint32 fight_lose_honor = 25;
  if (has_fight_lose_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->fight_lose_honor(), output);
  }

  // repeated uint64 score_enemy_effect = 26;
  for (int i = 0; i < this->score_enemy_effect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      26, this->score_enemy_effect(i), output);
  }

  // optional uint32 score_open_players = 27;
  if (has_score_open_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->score_open_players(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ServerWarConf)
}

::google::protobuf::uint8* ServerWarConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ServerWarConf)
  // optional uint32 score_open_day = 1;
  if (has_score_open_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score_open_day(), target);
  }

  // optional uint32 score_open_hour = 2;
  if (has_score_open_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score_open_hour(), target);
  }

  // optional uint32 score_close_day = 3;
  if (has_score_close_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score_close_day(), target);
  }

  // optional uint32 score_close_hour = 4;
  if (has_score_close_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score_close_hour(), target);
  }

  // optional uint32 fight_open_day = 5;
  if (has_fight_open_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fight_open_day(), target);
  }

  // optional uint32 fight_open_hour = 6;
  if (has_fight_open_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fight_open_hour(), target);
  }

  // optional uint32 fight_close_day = 7;
  if (has_fight_close_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fight_close_day(), target);
  }

  // optional uint32 fight_close_hour = 8;
  if (has_fight_close_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fight_close_hour(), target);
  }

  // optional uint32 country_fight_num = 9;
  if (has_country_fight_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->country_fight_num(), target);
  }

  // optional uint32 fight_show_topnum = 10;
  if (has_fight_show_topnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->fight_show_topnum(), target);
  }

  // optional uint32 fight_enemy_num = 11;
  if (has_fight_enemy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->fight_enemy_num(), target);
  }

  // optional uint32 score_rank_country_num = 12;
  if (has_score_rank_country_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->score_rank_country_num(), target);
  }

  // optional uint32 fight_rank_num = 13;
  if (has_fight_rank_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->fight_rank_num(), target);
  }

  // optional uint32 score_win_score = 14;
  if (has_score_win_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->score_win_score(), target);
  }

  // optional uint32 score_win_scoremin = 15;
  if (has_score_win_scoremin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->score_win_scoremin(), target);
  }

  // optional uint32 score_win_scoremax = 16;
  if (has_score_win_scoremax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->score_win_scoremax(), target);
  }

  // optional uint32 score_win_honor = 17;
  if (has_score_win_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->score_win_honor(), target);
  }

  // optional uint32 score_win_honormin = 18;
  if (has_score_win_honormin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->score_win_honormin(), target);
  }

  // optional uint32 score_win_honormax = 19;
  if (has_score_win_honormax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->score_win_honormax(), target);
  }

  // optional uint32 score_lose_score = 20;
  if (has_score_lose_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->score_lose_score(), target);
  }

  // optional uint32 score_lose_honor = 21;
  if (has_score_lose_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->score_lose_honor(), target);
  }

  // optional float effect_check_per = 22;
  if (has_effect_check_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->effect_check_per(), target);
  }

  // optional uint32 effect_skip_per = 23;
  if (has_effect_skip_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->effect_skip_per(), target);
  }

  // optional uint32 fight_win_honor = 24;
  if (has_fight_win_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->fight_win_honor(), target);
  }

  // optional uint32 fight_lose_honor = 25;
  if (has_fight_lose_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->fight_lose_honor(), target);
  }

  // repeated uint64 score_enemy_effect = 26;
  for (int i = 0; i < this->score_enemy_effect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(26, this->score_enemy_effect(i), target);
  }

  // optional uint32 score_open_players = 27;
  if (has_score_open_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->score_open_players(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ServerWarConf)
  return target;
}

int ServerWarConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 score_open_day = 1;
    if (has_score_open_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_open_day());
    }

    // optional uint32 score_open_hour = 2;
    if (has_score_open_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_open_hour());
    }

    // optional uint32 score_close_day = 3;
    if (has_score_close_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_close_day());
    }

    // optional uint32 score_close_hour = 4;
    if (has_score_close_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_close_hour());
    }

    // optional uint32 fight_open_day = 5;
    if (has_fight_open_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_open_day());
    }

    // optional uint32 fight_open_hour = 6;
    if (has_fight_open_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_open_hour());
    }

    // optional uint32 fight_close_day = 7;
    if (has_fight_close_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_close_day());
    }

    // optional uint32 fight_close_hour = 8;
    if (has_fight_close_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_close_hour());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 country_fight_num = 9;
    if (has_country_fight_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_fight_num());
    }

    // optional uint32 fight_show_topnum = 10;
    if (has_fight_show_topnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_show_topnum());
    }

    // optional uint32 fight_enemy_num = 11;
    if (has_fight_enemy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_enemy_num());
    }

    // optional uint32 score_rank_country_num = 12;
    if (has_score_rank_country_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_rank_country_num());
    }

    // optional uint32 fight_rank_num = 13;
    if (has_fight_rank_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_rank_num());
    }

    // optional uint32 score_win_score = 14;
    if (has_score_win_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_win_score());
    }

    // optional uint32 score_win_scoremin = 15;
    if (has_score_win_scoremin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_win_scoremin());
    }

    // optional uint32 score_win_scoremax = 16;
    if (has_score_win_scoremax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_win_scoremax());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 score_win_honor = 17;
    if (has_score_win_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_win_honor());
    }

    // optional uint32 score_win_honormin = 18;
    if (has_score_win_honormin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_win_honormin());
    }

    // optional uint32 score_win_honormax = 19;
    if (has_score_win_honormax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_win_honormax());
    }

    // optional uint32 score_lose_score = 20;
    if (has_score_lose_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_lose_score());
    }

    // optional uint32 score_lose_honor = 21;
    if (has_score_lose_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_lose_honor());
    }

    // optional float effect_check_per = 22;
    if (has_effect_check_per()) {
      total_size += 2 + 4;
    }

    // optional uint32 effect_skip_per = 23;
    if (has_effect_skip_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_skip_per());
    }

    // optional uint32 fight_win_honor = 24;
    if (has_fight_win_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_win_honor());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 fight_lose_honor = 25;
    if (has_fight_lose_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_lose_honor());
    }

    // optional uint32 score_open_players = 27;
    if (has_score_open_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_open_players());
    }

  }
  // repeated uint64 score_enemy_effect = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_enemy_effect_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->score_enemy_effect(i));
    }
    total_size += 2 * this->score_enemy_effect_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerWarConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerWarConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerWarConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerWarConf::MergeFrom(const ServerWarConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_enemy_effect_.MergeFrom(from.score_enemy_effect_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score_open_day()) {
      set_score_open_day(from.score_open_day());
    }
    if (from.has_score_open_hour()) {
      set_score_open_hour(from.score_open_hour());
    }
    if (from.has_score_close_day()) {
      set_score_close_day(from.score_close_day());
    }
    if (from.has_score_close_hour()) {
      set_score_close_hour(from.score_close_hour());
    }
    if (from.has_fight_open_day()) {
      set_fight_open_day(from.fight_open_day());
    }
    if (from.has_fight_open_hour()) {
      set_fight_open_hour(from.fight_open_hour());
    }
    if (from.has_fight_close_day()) {
      set_fight_close_day(from.fight_close_day());
    }
    if (from.has_fight_close_hour()) {
      set_fight_close_hour(from.fight_close_hour());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_country_fight_num()) {
      set_country_fight_num(from.country_fight_num());
    }
    if (from.has_fight_show_topnum()) {
      set_fight_show_topnum(from.fight_show_topnum());
    }
    if (from.has_fight_enemy_num()) {
      set_fight_enemy_num(from.fight_enemy_num());
    }
    if (from.has_score_rank_country_num()) {
      set_score_rank_country_num(from.score_rank_country_num());
    }
    if (from.has_fight_rank_num()) {
      set_fight_rank_num(from.fight_rank_num());
    }
    if (from.has_score_win_score()) {
      set_score_win_score(from.score_win_score());
    }
    if (from.has_score_win_scoremin()) {
      set_score_win_scoremin(from.score_win_scoremin());
    }
    if (from.has_score_win_scoremax()) {
      set_score_win_scoremax(from.score_win_scoremax());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_score_win_honor()) {
      set_score_win_honor(from.score_win_honor());
    }
    if (from.has_score_win_honormin()) {
      set_score_win_honormin(from.score_win_honormin());
    }
    if (from.has_score_win_honormax()) {
      set_score_win_honormax(from.score_win_honormax());
    }
    if (from.has_score_lose_score()) {
      set_score_lose_score(from.score_lose_score());
    }
    if (from.has_score_lose_honor()) {
      set_score_lose_honor(from.score_lose_honor());
    }
    if (from.has_effect_check_per()) {
      set_effect_check_per(from.effect_check_per());
    }
    if (from.has_effect_skip_per()) {
      set_effect_skip_per(from.effect_skip_per());
    }
    if (from.has_fight_win_honor()) {
      set_fight_win_honor(from.fight_win_honor());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_fight_lose_honor()) {
      set_fight_lose_honor(from.fight_lose_honor());
    }
    if (from.has_score_open_players()) {
      set_score_open_players(from.score_open_players());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerWarConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerWarConf::CopyFrom(const ServerWarConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerWarConf::IsInitialized() const {

  return true;
}

void ServerWarConf::Swap(ServerWarConf* other) {
  if (other != this) {
    std::swap(score_open_day_, other->score_open_day_);
    std::swap(score_open_hour_, other->score_open_hour_);
    std::swap(score_close_day_, other->score_close_day_);
    std::swap(score_close_hour_, other->score_close_hour_);
    std::swap(fight_open_day_, other->fight_open_day_);
    std::swap(fight_open_hour_, other->fight_open_hour_);
    std::swap(fight_close_day_, other->fight_close_day_);
    std::swap(fight_close_hour_, other->fight_close_hour_);
    std::swap(country_fight_num_, other->country_fight_num_);
    std::swap(fight_show_topnum_, other->fight_show_topnum_);
    std::swap(fight_enemy_num_, other->fight_enemy_num_);
    std::swap(score_rank_country_num_, other->score_rank_country_num_);
    std::swap(fight_rank_num_, other->fight_rank_num_);
    std::swap(score_win_score_, other->score_win_score_);
    std::swap(score_win_scoremin_, other->score_win_scoremin_);
    std::swap(score_win_scoremax_, other->score_win_scoremax_);
    std::swap(score_win_honor_, other->score_win_honor_);
    std::swap(score_win_honormin_, other->score_win_honormin_);
    std::swap(score_win_honormax_, other->score_win_honormax_);
    std::swap(score_lose_score_, other->score_lose_score_);
    std::swap(score_lose_honor_, other->score_lose_honor_);
    std::swap(effect_check_per_, other->effect_check_per_);
    std::swap(effect_skip_per_, other->effect_skip_per_);
    std::swap(fight_win_honor_, other->fight_win_honor_);
    std::swap(fight_lose_honor_, other->fight_lose_honor_);
    score_enemy_effect_.Swap(&other->score_enemy_effect_);
    std::swap(score_open_players_, other->score_open_players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerWarConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerWarConf_descriptor_;
  metadata.reflection = ServerWarConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int STeamWinProperty::kTimesFieldNumber;
const int STeamWinProperty::kAtkHurtFieldNumber;
const int STeamWinProperty::kDefHurtFieldNumber;
#endif  // !_MSC_VER

STeamWinProperty::STeamWinProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.STeamWinProperty)
}

void STeamWinProperty::InitAsDefaultInstance() {
}

STeamWinProperty::STeamWinProperty(const STeamWinProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.STeamWinProperty)
}

void STeamWinProperty::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0u;
  atkhurt_ = 0u;
  defhurt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STeamWinProperty::~STeamWinProperty() {
  // @@protoc_insertion_point(destructor:TgsProtocol.STeamWinProperty)
  SharedDtor();
}

void STeamWinProperty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STeamWinProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STeamWinProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STeamWinProperty_descriptor_;
}

const STeamWinProperty& STeamWinProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

STeamWinProperty* STeamWinProperty::default_instance_ = NULL;

STeamWinProperty* STeamWinProperty::New() const {
  return new STeamWinProperty;
}

void STeamWinProperty::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<STeamWinProperty*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(times_, defhurt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STeamWinProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.STeamWinProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 times = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_atkHurt;
        break;
      }

      // optional uint32 atkHurt = 2;
      case 2: {
        if (tag == 16) {
         parse_atkHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkhurt_)));
          set_has_atkhurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_defHurt;
        break;
      }

      // optional uint32 defHurt = 3;
      case 3: {
        if (tag == 24) {
         parse_defHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defhurt_)));
          set_has_defhurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.STeamWinProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.STeamWinProperty)
  return false;
#undef DO_
}

void STeamWinProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.STeamWinProperty)
  // required uint32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->times(), output);
  }

  // optional uint32 atkHurt = 2;
  if (has_atkhurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->atkhurt(), output);
  }

  // optional uint32 defHurt = 3;
  if (has_defhurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->defhurt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.STeamWinProperty)
}

::google::protobuf::uint8* STeamWinProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.STeamWinProperty)
  // required uint32 times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->times(), target);
  }

  // optional uint32 atkHurt = 2;
  if (has_atkhurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->atkhurt(), target);
  }

  // optional uint32 defHurt = 3;
  if (has_defhurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->defhurt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.STeamWinProperty)
  return target;
}

int STeamWinProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional uint32 atkHurt = 2;
    if (has_atkhurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkhurt());
    }

    // optional uint32 defHurt = 3;
    if (has_defhurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defhurt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STeamWinProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STeamWinProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STeamWinProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STeamWinProperty::MergeFrom(const STeamWinProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_atkhurt()) {
      set_atkhurt(from.atkhurt());
    }
    if (from.has_defhurt()) {
      set_defhurt(from.defhurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STeamWinProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STeamWinProperty::CopyFrom(const STeamWinProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STeamWinProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void STeamWinProperty::Swap(STeamWinProperty* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(atkhurt_, other->atkhurt_);
    std::swap(defhurt_, other->defhurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STeamWinProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STeamWinProperty_descriptor_;
  metadata.reflection = STeamWinProperty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTeamConf::kTeamOpenTimeFieldNumber;
const int ServerTeamConf::kTeamHonorDoubleTimeFieldNumber;
const int ServerTeamConf::kTeamScoreAddPerFieldNumber;
const int ServerTeamConf::kTeamScoreFieldNumber;
const int ServerTeamConf::kTeamHonorFieldNumber;
const int ServerTeamConf::kTeamFightEffectPerFieldNumber;
const int ServerTeamConf::kTeamFightAttrFieldNumber;
const int ServerTeamConf::kTeamFightFactorFieldNumber;
const int ServerTeamConf::kTeamRobotEffectPerFieldNumber;
const int ServerTeamConf::kPropertyFieldNumber;
#endif  // !_MSC_VER

ServerTeamConf::ServerTeamConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ServerTeamConf)
}

void ServerTeamConf::InitAsDefaultInstance() {
  teamopentime_ = const_cast< ::TgsProtocol::TodayTime*>(&::TgsProtocol::TodayTime::default_instance());
}

ServerTeamConf::ServerTeamConf(const ServerTeamConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ServerTeamConf)
}

void ServerTeamConf::SharedCtor() {
  _cached_size_ = 0;
  teamopentime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTeamConf::~ServerTeamConf() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ServerTeamConf)
  SharedDtor();
}

void ServerTeamConf::SharedDtor() {
  if (this != default_instance_) {
    delete teamopentime_;
  }
}

void ServerTeamConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTeamConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTeamConf_descriptor_;
}

const ServerTeamConf& ServerTeamConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ServerTeamConf* ServerTeamConf::default_instance_ = NULL;

ServerTeamConf* ServerTeamConf::New() const {
  return new ServerTeamConf;
}

void ServerTeamConf::Clear() {
  if (has_teamopentime()) {
    if (teamopentime_ != NULL) teamopentime_->::TgsProtocol::TodayTime::Clear();
  }
  teamhonordoubletime_.Clear();
  teamscoreaddper_.Clear();
  teamscore_.Clear();
  teamhonor_.Clear();
  teamfighteffectper_.Clear();
  teamfightattr_.Clear();
  teamfightfactor_.Clear();
  teamroboteffectper_.Clear();
  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerTeamConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ServerTeamConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.TodayTime TeamOpenTime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamopentime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamHonorDoubleTime;
        break;
      }

      // repeated .TgsProtocol.TodayTime TeamHonorDoubleTime = 2;
      case 2: {
        if (tag == 18) {
         parse_TeamHonorDoubleTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamhonordoubletime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamHonorDoubleTime;
        if (input->ExpectTag(24)) goto parse_TeamScoreAddPer;
        break;
      }

      // repeated uint32 TeamScoreAddPer = 3;
      case 3: {
        if (tag == 24) {
         parse_TeamScoreAddPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_teamscoreaddper())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teamscoreaddper())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TeamScoreAddPer;
        if (input->ExpectTag(32)) goto parse_TeamScore;
        break;
      }

      // repeated uint32 TeamScore = 4;
      case 4: {
        if (tag == 32) {
         parse_TeamScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_teamscore())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teamscore())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TeamScore;
        if (input->ExpectTag(40)) goto parse_TeamHonor;
        break;
      }

      // repeated uint32 TeamHonor = 5;
      case 5: {
        if (tag == 40) {
         parse_TeamHonor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_teamhonor())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teamhonor())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TeamHonor;
        if (input->ExpectTag(48)) goto parse_TeamFightEffectPer;
        break;
      }

      // repeated uint32 TeamFightEffectPer = 6;
      case 6: {
        if (tag == 48) {
         parse_TeamFightEffectPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_teamfighteffectper())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teamfighteffectper())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TeamFightEffectPer;
        if (input->ExpectTag(56)) goto parse_TeamFightAttr;
        break;
      }

      // repeated uint32 TeamFightAttr = 7;
      case 7: {
        if (tag == 56) {
         parse_TeamFightAttr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_teamfightattr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teamfightattr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TeamFightAttr;
        if (input->ExpectTag(64)) goto parse_TeamFightFactor;
        break;
      }

      // repeated uint32 TeamFightFactor = 8;
      case 8: {
        if (tag == 64) {
         parse_TeamFightFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_teamfightfactor())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teamfightfactor())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TeamFightFactor;
        if (input->ExpectTag(72)) goto parse_TeamRobotEffectPer;
        break;
      }

      // repeated uint32 TeamRobotEffectPer = 9;
      case 9: {
        if (tag == 72) {
         parse_TeamRobotEffectPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_teamroboteffectper())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teamroboteffectper())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_TeamRobotEffectPer;
        if (input->ExpectTag(82)) goto parse_property;
        break;
      }

      // repeated .TgsProtocol.STeamWinProperty property = 10;
      case 10: {
        if (tag == 82) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_property;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ServerTeamConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ServerTeamConf)
  return false;
#undef DO_
}

void ServerTeamConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ServerTeamConf)
  // optional .TgsProtocol.TodayTime TeamOpenTime = 1;
  if (has_teamopentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamopentime(), output);
  }

  // repeated .TgsProtocol.TodayTime TeamHonorDoubleTime = 2;
  for (int i = 0; i < this->teamhonordoubletime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teamhonordoubletime(i), output);
  }

  // repeated uint32 TeamScoreAddPer = 3;
  for (int i = 0; i < this->teamscoreaddper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->teamscoreaddper(i), output);
  }

  // repeated uint32 TeamScore = 4;
  for (int i = 0; i < this->teamscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->teamscore(i), output);
  }

  // repeated uint32 TeamHonor = 5;
  for (int i = 0; i < this->teamhonor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->teamhonor(i), output);
  }

  // repeated uint32 TeamFightEffectPer = 6;
  for (int i = 0; i < this->teamfighteffectper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->teamfighteffectper(i), output);
  }

  // repeated uint32 TeamFightAttr = 7;
  for (int i = 0; i < this->teamfightattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->teamfightattr(i), output);
  }

  // repeated uint32 TeamFightFactor = 8;
  for (int i = 0; i < this->teamfightfactor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->teamfightfactor(i), output);
  }

  // repeated uint32 TeamRobotEffectPer = 9;
  for (int i = 0; i < this->teamroboteffectper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->teamroboteffectper(i), output);
  }

  // repeated .TgsProtocol.STeamWinProperty property = 10;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->property(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ServerTeamConf)
}

::google::protobuf::uint8* ServerTeamConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ServerTeamConf)
  // optional .TgsProtocol.TodayTime TeamOpenTime = 1;
  if (has_teamopentime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamopentime(), target);
  }

  // repeated .TgsProtocol.TodayTime TeamHonorDoubleTime = 2;
  for (int i = 0; i < this->teamhonordoubletime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teamhonordoubletime(i), target);
  }

  // repeated uint32 TeamScoreAddPer = 3;
  for (int i = 0; i < this->teamscoreaddper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->teamscoreaddper(i), target);
  }

  // repeated uint32 TeamScore = 4;
  for (int i = 0; i < this->teamscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->teamscore(i), target);
  }

  // repeated uint32 TeamHonor = 5;
  for (int i = 0; i < this->teamhonor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->teamhonor(i), target);
  }

  // repeated uint32 TeamFightEffectPer = 6;
  for (int i = 0; i < this->teamfighteffectper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->teamfighteffectper(i), target);
  }

  // repeated uint32 TeamFightAttr = 7;
  for (int i = 0; i < this->teamfightattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->teamfightattr(i), target);
  }

  // repeated uint32 TeamFightFactor = 8;
  for (int i = 0; i < this->teamfightfactor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->teamfightfactor(i), target);
  }

  // repeated uint32 TeamRobotEffectPer = 9;
  for (int i = 0; i < this->teamroboteffectper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->teamroboteffectper(i), target);
  }

  // repeated .TgsProtocol.STeamWinProperty property = 10;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->property(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ServerTeamConf)
  return target;
}

int ServerTeamConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.TodayTime TeamOpenTime = 1;
    if (has_teamopentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamopentime());
    }

  }
  // repeated .TgsProtocol.TodayTime TeamHonorDoubleTime = 2;
  total_size += 1 * this->teamhonordoubletime_size();
  for (int i = 0; i < this->teamhonordoubletime_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamhonordoubletime(i));
  }

  // repeated uint32 TeamScoreAddPer = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamscoreaddper_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teamscoreaddper(i));
    }
    total_size += 1 * this->teamscoreaddper_size() + data_size;
  }

  // repeated uint32 TeamScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teamscore(i));
    }
    total_size += 1 * this->teamscore_size() + data_size;
  }

  // repeated uint32 TeamHonor = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamhonor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teamhonor(i));
    }
    total_size += 1 * this->teamhonor_size() + data_size;
  }

  // repeated uint32 TeamFightEffectPer = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamfighteffectper_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teamfighteffectper(i));
    }
    total_size += 1 * this->teamfighteffectper_size() + data_size;
  }

  // repeated uint32 TeamFightAttr = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamfightattr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teamfightattr(i));
    }
    total_size += 1 * this->teamfightattr_size() + data_size;
  }

  // repeated uint32 TeamFightFactor = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamfightfactor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teamfightfactor(i));
    }
    total_size += 1 * this->teamfightfactor_size() + data_size;
  }

  // repeated uint32 TeamRobotEffectPer = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamroboteffectper_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teamroboteffectper(i));
    }
    total_size += 1 * this->teamroboteffectper_size() + data_size;
  }

  // repeated .TgsProtocol.STeamWinProperty property = 10;
  total_size += 1 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTeamConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTeamConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTeamConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerTeamConf::MergeFrom(const ServerTeamConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamhonordoubletime_.MergeFrom(from.teamhonordoubletime_);
  teamscoreaddper_.MergeFrom(from.teamscoreaddper_);
  teamscore_.MergeFrom(from.teamscore_);
  teamhonor_.MergeFrom(from.teamhonor_);
  teamfighteffectper_.MergeFrom(from.teamfighteffectper_);
  teamfightattr_.MergeFrom(from.teamfightattr_);
  teamfightfactor_.MergeFrom(from.teamfightfactor_);
  teamroboteffectper_.MergeFrom(from.teamroboteffectper_);
  property_.MergeFrom(from.property_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamopentime()) {
      mutable_teamopentime()->::TgsProtocol::TodayTime::MergeFrom(from.teamopentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerTeamConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTeamConf::CopyFrom(const ServerTeamConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTeamConf::IsInitialized() const {

  if (has_teamopentime()) {
    if (!this->teamopentime().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->teamhonordoubletime())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property())) return false;
  return true;
}

void ServerTeamConf::Swap(ServerTeamConf* other) {
  if (other != this) {
    std::swap(teamopentime_, other->teamopentime_);
    teamhonordoubletime_.Swap(&other->teamhonordoubletime_);
    teamscoreaddper_.Swap(&other->teamscoreaddper_);
    teamscore_.Swap(&other->teamscore_);
    teamhonor_.Swap(&other->teamhonor_);
    teamfighteffectper_.Swap(&other->teamfighteffectper_);
    teamfightattr_.Swap(&other->teamfightattr_);
    teamfightfactor_.Swap(&other->teamfightfactor_);
    teamroboteffectper_.Swap(&other->teamroboteffectper_);
    property_.Swap(&other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerTeamConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTeamConf_descriptor_;
  metadata.reflection = ServerTeamConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientServerWarPlayer::kBattlePlayerFieldNumber;
const int ClientServerWarPlayer::kCountryFieldNumber;
const int ClientServerWarPlayer::kRankFieldNumber;
const int ClientServerWarPlayer::kScoreFieldNumber;
const int ClientServerWarPlayer::kWinFieldNumber;
#endif  // !_MSC_VER

ClientServerWarPlayer::ClientServerWarPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientServerWarPlayer)
}

void ClientServerWarPlayer::InitAsDefaultInstance() {
  battle_player_ = const_cast< ::TgsProtocol::ClientBattlePlayer*>(&::TgsProtocol::ClientBattlePlayer::default_instance());
}

ClientServerWarPlayer::ClientServerWarPlayer(const ClientServerWarPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientServerWarPlayer)
}

void ClientServerWarPlayer::SharedCtor() {
  _cached_size_ = 0;
  battle_player_ = NULL;
  country_ = 0u;
  rank_ = 0u;
  score_ = 0u;
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientServerWarPlayer::~ClientServerWarPlayer() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientServerWarPlayer)
  SharedDtor();
}

void ClientServerWarPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete battle_player_;
  }
}

void ClientServerWarPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientServerWarPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientServerWarPlayer_descriptor_;
}

const ClientServerWarPlayer& ClientServerWarPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientServerWarPlayer* ClientServerWarPlayer::default_instance_ = NULL;

ClientServerWarPlayer* ClientServerWarPlayer::New() const {
  return new ClientServerWarPlayer;
}

void ClientServerWarPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientServerWarPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(country_, win_);
    if (has_battle_player()) {
      if (battle_player_ != NULL) battle_player_->::TgsProtocol::ClientBattlePlayer::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientServerWarPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientServerWarPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TgsProtocol.ClientBattlePlayer battle_player = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_country;
        break;
      }

      // optional uint32 country = 2;
      case 2: {
        if (tag == 16) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (tag == 24) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional uint32 score = 4;
      case 4: {
        if (tag == 32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_win;
        break;
      }

      // optional bool win = 5;
      case 5: {
        if (tag == 40) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientServerWarPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientServerWarPlayer)
  return false;
#undef DO_
}

void ClientServerWarPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientServerWarPlayer)
  // required .TgsProtocol.ClientBattlePlayer battle_player = 1;
  if (has_battle_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_player(), output);
  }

  // optional uint32 country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->country(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // optional bool win = 5;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientServerWarPlayer)
}

::google::protobuf::uint8* ClientServerWarPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientServerWarPlayer)
  // required .TgsProtocol.ClientBattlePlayer battle_player = 1;
  if (has_battle_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_player(), target);
  }

  // optional uint32 country = 2;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->country(), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  // optional bool win = 5;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientServerWarPlayer)
  return target;
}

int ClientServerWarPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TgsProtocol.ClientBattlePlayer battle_player = 1;
    if (has_battle_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_player());
    }

    // optional uint32 country = 2;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional bool win = 5;
    if (has_win()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientServerWarPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientServerWarPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientServerWarPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientServerWarPlayer::MergeFrom(const ClientServerWarPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_player()) {
      mutable_battle_player()->::TgsProtocol::ClientBattlePlayer::MergeFrom(from.battle_player());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientServerWarPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientServerWarPlayer::CopyFrom(const ClientServerWarPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientServerWarPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_battle_player()) {
    if (!this->battle_player().IsInitialized()) return false;
  }
  return true;
}

void ClientServerWarPlayer::Swap(ClientServerWarPlayer* other) {
  if (other != this) {
    std::swap(battle_player_, other->battle_player_);
    std::swap(country_, other->country_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientServerWarPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientServerWarPlayer_descriptor_;
  metadata.reflection = ClientServerWarPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TombImp::kIdFieldNumber;
const int TombImp::kEventFieldNumber;
const int TombImp::kOpponentFieldNumber;
const int TombImp::kStepFieldNumber;
const int TombImp::kRateFieldNumber;
#endif  // !_MSC_VER

TombImp::TombImp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.TombImp)
}

void TombImp::InitAsDefaultInstance() {
  opponent_ = const_cast< ::TgsProtocol::ClientBattlePlayer*>(&::TgsProtocol::ClientBattlePlayer::default_instance());
}

TombImp::TombImp(const TombImp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.TombImp)
}

void TombImp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  event_ = 0u;
  opponent_ = NULL;
  step_ = 0u;
  rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TombImp::~TombImp() {
  // @@protoc_insertion_point(destructor:TgsProtocol.TombImp)
  SharedDtor();
}

void TombImp::SharedDtor() {
  if (this != default_instance_) {
    delete opponent_;
  }
}

void TombImp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TombImp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TombImp_descriptor_;
}

const TombImp& TombImp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

TombImp* TombImp::default_instance_ = NULL;

TombImp* TombImp::New() const {
  return new TombImp;
}

void TombImp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TombImp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, event_);
    ZR_(step_, rate_);
    if (has_opponent()) {
      if (opponent_ != NULL) opponent_->::TgsProtocol::ClientBattlePlayer::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TombImp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.TombImp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event;
        break;
      }

      // optional uint32 event = 2;
      case 2: {
        if (tag == 16) {
         parse_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_opponent;
        break;
      }

      // optional .TgsProtocol.ClientBattlePlayer opponent = 3;
      case 3: {
        if (tag == 26) {
         parse_opponent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opponent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_step;
        break;
      }

      // optional uint32 step = 4;
      case 4: {
        if (tag == 32) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rate;
        break;
      }

      // optional uint32 rate = 5;
      case 5: {
        if (tag == 40) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.TombImp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.TombImp)
  return false;
#undef DO_
}

void TombImp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.TombImp)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event(), output);
  }

  // optional .TgsProtocol.ClientBattlePlayer opponent = 3;
  if (has_opponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->opponent(), output);
  }

  // optional uint32 step = 4;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->step(), output);
  }

  // optional uint32 rate = 5;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.TombImp)
}

::google::protobuf::uint8* TombImp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.TombImp)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event(), target);
  }

  // optional .TgsProtocol.ClientBattlePlayer opponent = 3;
  if (has_opponent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->opponent(), target);
  }

  // optional uint32 step = 4;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->step(), target);
  }

  // optional uint32 rate = 5;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.TombImp)
  return target;
}

int TombImp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }

    // optional .TgsProtocol.ClientBattlePlayer opponent = 3;
    if (has_opponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opponent());
    }

    // optional uint32 step = 4;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

    // optional uint32 rate = 5;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TombImp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TombImp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TombImp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TombImp::MergeFrom(const TombImp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_opponent()) {
      mutable_opponent()->::TgsProtocol::ClientBattlePlayer::MergeFrom(from.opponent());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TombImp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TombImp::CopyFrom(const TombImp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TombImp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_opponent()) {
    if (!this->opponent().IsInitialized()) return false;
  }
  return true;
}

void TombImp::Swap(TombImp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(event_, other->event_);
    std::swap(opponent_, other->opponent_);
    std::swap(step_, other->step_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TombImp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TombImp_descriptor_;
  metadata.reflection = TombImp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTeamBattle::kHpFieldNumber;
const int ServerTeamBattle::kAtkFieldNumber;
const int ServerTeamBattle::kForceLevelFieldNumber;
const int ServerTeamBattle::kRefineLevelFieldNumber;
const int ServerTeamBattle::kNatureFieldNumber;
const int ServerTeamBattle::kEquipStarFieldNumber;
const int ServerTeamBattle::kHp64FieldNumber;
const int ServerTeamBattle::kAtk64FieldNumber;
#endif  // !_MSC_VER

ServerTeamBattle::ServerTeamBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ServerTeamBattle)
}

void ServerTeamBattle::InitAsDefaultInstance() {
}

ServerTeamBattle::ServerTeamBattle(const ServerTeamBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ServerTeamBattle)
}

void ServerTeamBattle::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0u;
  atk_ = 0u;
  forcelevel_ = 0u;
  refinelevel_ = 0u;
  nature_ = 0u;
  equipstar_ = 0u;
  hp64_ = GOOGLE_ULONGLONG(0);
  atk64_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTeamBattle::~ServerTeamBattle() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ServerTeamBattle)
  SharedDtor();
}

void ServerTeamBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerTeamBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTeamBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTeamBattle_descriptor_;
}

const ServerTeamBattle& ServerTeamBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ServerTeamBattle* ServerTeamBattle::default_instance_ = NULL;

ServerTeamBattle* ServerTeamBattle::New() const {
  return new ServerTeamBattle;
}

void ServerTeamBattle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerTeamBattle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hp_, atk64_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerTeamBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ServerTeamBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_atk;
        break;
      }

      // required uint32 atk = 2;
      case 2: {
        if (tag == 16) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_forceLevel;
        break;
      }

      // required uint32 forceLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_forceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcelevel_)));
          set_has_forcelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_refineLevel;
        break;
      }

      // required uint32 refineLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_refineLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelevel_)));
          set_has_refinelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nature;
        break;
      }

      // required uint32 nature = 5;
      case 5: {
        if (tag == 40) {
         parse_nature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nature_)));
          set_has_nature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_equipStar;
        break;
      }

      // required uint32 equipStar = 6;
      case 6: {
        if (tag == 48) {
         parse_equipStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipstar_)));
          set_has_equipstar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hp64;
        break;
      }

      // optional uint64 hp64 = 7;
      case 7: {
        if (tag == 56) {
         parse_hp64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp64_)));
          set_has_hp64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_atk64;
        break;
      }

      // optional uint64 atk64 = 8;
      case 8: {
        if (tag == 64) {
         parse_atk64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atk64_)));
          set_has_atk64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ServerTeamBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ServerTeamBattle)
  return false;
#undef DO_
}

void ServerTeamBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ServerTeamBattle)
  // required uint32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hp(), output);
  }

  // required uint32 atk = 2;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->atk(), output);
  }

  // required uint32 forceLevel = 3;
  if (has_forcelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->forcelevel(), output);
  }

  // required uint32 refineLevel = 4;
  if (has_refinelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->refinelevel(), output);
  }

  // required uint32 nature = 5;
  if (has_nature()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nature(), output);
  }

  // required uint32 equipStar = 6;
  if (has_equipstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->equipstar(), output);
  }

  // optional uint64 hp64 = 7;
  if (has_hp64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->hp64(), output);
  }

  // optional uint64 atk64 = 8;
  if (has_atk64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->atk64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ServerTeamBattle)
}

::google::protobuf::uint8* ServerTeamBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ServerTeamBattle)
  // required uint32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hp(), target);
  }

  // required uint32 atk = 2;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->atk(), target);
  }

  // required uint32 forceLevel = 3;
  if (has_forcelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->forcelevel(), target);
  }

  // required uint32 refineLevel = 4;
  if (has_refinelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->refinelevel(), target);
  }

  // required uint32 nature = 5;
  if (has_nature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nature(), target);
  }

  // required uint32 equipStar = 6;
  if (has_equipstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->equipstar(), target);
  }

  // optional uint64 hp64 = 7;
  if (has_hp64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->hp64(), target);
  }

  // optional uint64 atk64 = 8;
  if (has_atk64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->atk64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ServerTeamBattle)
  return target;
}

int ServerTeamBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required uint32 atk = 2;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atk());
    }

    // required uint32 forceLevel = 3;
    if (has_forcelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcelevel());
    }

    // required uint32 refineLevel = 4;
    if (has_refinelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelevel());
    }

    // required uint32 nature = 5;
    if (has_nature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nature());
    }

    // required uint32 equipStar = 6;
    if (has_equipstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipstar());
    }

    // optional uint64 hp64 = 7;
    if (has_hp64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp64());
    }

    // optional uint64 atk64 = 8;
    if (has_atk64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atk64());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTeamBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTeamBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTeamBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerTeamBattle::MergeFrom(const ServerTeamBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_forcelevel()) {
      set_forcelevel(from.forcelevel());
    }
    if (from.has_refinelevel()) {
      set_refinelevel(from.refinelevel());
    }
    if (from.has_nature()) {
      set_nature(from.nature());
    }
    if (from.has_equipstar()) {
      set_equipstar(from.equipstar());
    }
    if (from.has_hp64()) {
      set_hp64(from.hp64());
    }
    if (from.has_atk64()) {
      set_atk64(from.atk64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerTeamBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTeamBattle::CopyFrom(const ServerTeamBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTeamBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ServerTeamBattle::Swap(ServerTeamBattle* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(atk_, other->atk_);
    std::swap(forcelevel_, other->forcelevel_);
    std::swap(refinelevel_, other->refinelevel_);
    std::swap(nature_, other->nature_);
    std::swap(equipstar_, other->equipstar_);
    std::swap(hp64_, other->hp64_);
    std::swap(atk64_, other->atk64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerTeamBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTeamBattle_descriptor_;
  metadata.reflection = ServerTeamBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientServerTeamPlayer::kBattlePlayerFieldNumber;
const int ClientServerTeamPlayer::kIsleaderFieldNumber;
const int ClientServerTeamPlayer::kPosFieldNumber;
const int ClientServerTeamPlayer::kIsreadyFieldNumber;
const int ClientServerTeamPlayer::kIsrobotFieldNumber;
const int ClientServerTeamPlayer::kBattleAttrFieldNumber;
const int ClientServerTeamPlayer::kHonorFieldNumber;
const int ClientServerTeamPlayer::kHonorRankFieldNumber;
#endif  // !_MSC_VER

ClientServerTeamPlayer::ClientServerTeamPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientServerTeamPlayer)
}

void ClientServerTeamPlayer::InitAsDefaultInstance() {
  battle_player_ = const_cast< ::TgsProtocol::ClientBattlePlayer*>(&::TgsProtocol::ClientBattlePlayer::default_instance());
  battle_attr_ = const_cast< ::TgsProtocol::ServerTeamBattle*>(&::TgsProtocol::ServerTeamBattle::default_instance());
}

ClientServerTeamPlayer::ClientServerTeamPlayer(const ClientServerTeamPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientServerTeamPlayer)
}

void ClientServerTeamPlayer::SharedCtor() {
  _cached_size_ = 0;
  battle_player_ = NULL;
  isleader_ = false;
  pos_ = 0u;
  isready_ = false;
  isrobot_ = false;
  battle_attr_ = NULL;
  honor_ = 0u;
  honor_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientServerTeamPlayer::~ClientServerTeamPlayer() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientServerTeamPlayer)
  SharedDtor();
}

void ClientServerTeamPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete battle_player_;
    delete battle_attr_;
  }
}

void ClientServerTeamPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientServerTeamPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientServerTeamPlayer_descriptor_;
}

const ClientServerTeamPlayer& ClientServerTeamPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientServerTeamPlayer* ClientServerTeamPlayer::default_instance_ = NULL;

ClientServerTeamPlayer* ClientServerTeamPlayer::New() const {
  return new ClientServerTeamPlayer;
}

void ClientServerTeamPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientServerTeamPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pos_, isrobot_);
    ZR_(honor_, honor_rank_);
    if (has_battle_player()) {
      if (battle_player_ != NULL) battle_player_->::TgsProtocol::ClientBattlePlayer::Clear();
    }
    if (has_battle_attr()) {
      if (battle_attr_ != NULL) battle_attr_->::TgsProtocol::ServerTeamBattle::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientServerTeamPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientServerTeamPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TgsProtocol.ClientBattlePlayer battle_player = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isleader;
        break;
      }

      // optional bool isleader = 2;
      case 2: {
        if (tag == 16) {
         parse_isleader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isleader_)));
          set_has_isleader();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (tag == 24) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isready;
        break;
      }

      // optional bool isready = 4;
      case 4: {
        if (tag == 32) {
         parse_isready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isready_)));
          set_has_isready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isrobot;
        break;
      }

      // optional bool isrobot = 5;
      case 5: {
        if (tag == 40) {
         parse_isrobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_battle_attr;
        break;
      }

      // optional .TgsProtocol.ServerTeamBattle battle_attr = 6;
      case 6: {
        if (tag == 50) {
         parse_battle_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_honor;
        break;
      }

      // optional uint32 honor = 7;
      case 7: {
        if (tag == 56) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_honor_rank;
        break;
      }

      // optional uint32 honor_rank = 8;
      case 8: {
        if (tag == 64) {
         parse_honor_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_rank_)));
          set_has_honor_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientServerTeamPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientServerTeamPlayer)
  return false;
#undef DO_
}

void ClientServerTeamPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientServerTeamPlayer)
  // required .TgsProtocol.ClientBattlePlayer battle_player = 1;
  if (has_battle_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_player(), output);
  }

  // optional bool isleader = 2;
  if (has_isleader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isleader(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // optional bool isready = 4;
  if (has_isready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isready(), output);
  }

  // optional bool isrobot = 5;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isrobot(), output);
  }

  // optional .TgsProtocol.ServerTeamBattle battle_attr = 6;
  if (has_battle_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->battle_attr(), output);
  }

  // optional uint32 honor = 7;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->honor(), output);
  }

  // optional uint32 honor_rank = 8;
  if (has_honor_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->honor_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientServerTeamPlayer)
}

::google::protobuf::uint8* ClientServerTeamPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientServerTeamPlayer)
  // required .TgsProtocol.ClientBattlePlayer battle_player = 1;
  if (has_battle_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_player(), target);
  }

  // optional bool isleader = 2;
  if (has_isleader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isleader(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // optional bool isready = 4;
  if (has_isready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isready(), target);
  }

  // optional bool isrobot = 5;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isrobot(), target);
  }

  // optional .TgsProtocol.ServerTeamBattle battle_attr = 6;
  if (has_battle_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->battle_attr(), target);
  }

  // optional uint32 honor = 7;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->honor(), target);
  }

  // optional uint32 honor_rank = 8;
  if (has_honor_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->honor_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientServerTeamPlayer)
  return target;
}

int ClientServerTeamPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TgsProtocol.ClientBattlePlayer battle_player = 1;
    if (has_battle_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_player());
    }

    // optional bool isleader = 2;
    if (has_isleader()) {
      total_size += 1 + 1;
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional bool isready = 4;
    if (has_isready()) {
      total_size += 1 + 1;
    }

    // optional bool isrobot = 5;
    if (has_isrobot()) {
      total_size += 1 + 1;
    }

    // optional .TgsProtocol.ServerTeamBattle battle_attr = 6;
    if (has_battle_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_attr());
    }

    // optional uint32 honor = 7;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }

    // optional uint32 honor_rank = 8;
    if (has_honor_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientServerTeamPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientServerTeamPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientServerTeamPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientServerTeamPlayer::MergeFrom(const ClientServerTeamPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_player()) {
      mutable_battle_player()->::TgsProtocol::ClientBattlePlayer::MergeFrom(from.battle_player());
    }
    if (from.has_isleader()) {
      set_isleader(from.isleader());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_isready()) {
      set_isready(from.isready());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
    if (from.has_battle_attr()) {
      mutable_battle_attr()->::TgsProtocol::ServerTeamBattle::MergeFrom(from.battle_attr());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_honor_rank()) {
      set_honor_rank(from.honor_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientServerTeamPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientServerTeamPlayer::CopyFrom(const ClientServerTeamPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientServerTeamPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_battle_player()) {
    if (!this->battle_player().IsInitialized()) return false;
  }
  if (has_battle_attr()) {
    if (!this->battle_attr().IsInitialized()) return false;
  }
  return true;
}

void ClientServerTeamPlayer::Swap(ClientServerTeamPlayer* other) {
  if (other != this) {
    std::swap(battle_player_, other->battle_player_);
    std::swap(isleader_, other->isleader_);
    std::swap(pos_, other->pos_);
    std::swap(isready_, other->isready_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(battle_attr_, other->battle_attr_);
    std::swap(honor_, other->honor_);
    std::swap(honor_rank_, other->honor_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientServerTeamPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientServerTeamPlayer_descriptor_;
  metadata.reflection = ClientServerTeamPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTeamPos::kPosFieldNumber;
const int ServerTeamPos::kCharidFieldNumber;
#endif  // !_MSC_VER

ServerTeamPos::ServerTeamPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ServerTeamPos)
}

void ServerTeamPos::InitAsDefaultInstance() {
}

ServerTeamPos::ServerTeamPos(const ServerTeamPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ServerTeamPos)
}

void ServerTeamPos::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTeamPos::~ServerTeamPos() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ServerTeamPos)
  SharedDtor();
}

void ServerTeamPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerTeamPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTeamPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTeamPos_descriptor_;
}

const ServerTeamPos& ServerTeamPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ServerTeamPos* ServerTeamPos::default_instance_ = NULL;

ServerTeamPos* ServerTeamPos::New() const {
  return new ServerTeamPos;
}

void ServerTeamPos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerTeamPos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charid_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerTeamPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ServerTeamPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ServerTeamPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ServerTeamPos)
  return false;
#undef DO_
}

void ServerTeamPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ServerTeamPos)
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ServerTeamPos)
}

::google::protobuf::uint8* ServerTeamPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ServerTeamPos)
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ServerTeamPos)
  return target;
}

int ServerTeamPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTeamPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTeamPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTeamPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerTeamPos::MergeFrom(const ServerTeamPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerTeamPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTeamPos::CopyFrom(const ServerTeamPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTeamPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerTeamPos::Swap(ServerTeamPos* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerTeamPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTeamPos_descriptor_;
  metadata.reflection = ServerTeamPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientServerTeamFightTurn::kPos1FieldNumber;
const int ClientServerTeamFightTurn::kPos2FieldNumber;
const int ClientServerTeamFightTurn::kHp1FieldNumber;
const int ClientServerTeamFightTurn::kHp2FieldNumber;
const int ClientServerTeamFightTurn::kDead1FieldNumber;
const int ClientServerTeamFightTurn::kDead2FieldNumber;
#endif  // !_MSC_VER

ClientServerTeamFightTurn::ClientServerTeamFightTurn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientServerTeamFightTurn)
}

void ClientServerTeamFightTurn::InitAsDefaultInstance() {
}

ClientServerTeamFightTurn::ClientServerTeamFightTurn(const ClientServerTeamFightTurn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientServerTeamFightTurn)
}

void ClientServerTeamFightTurn::SharedCtor() {
  _cached_size_ = 0;
  pos1_ = 0u;
  pos2_ = 0u;
  hp1_ = GOOGLE_ULONGLONG(0);
  hp2_ = GOOGLE_ULONGLONG(0);
  dead1_ = false;
  dead2_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientServerTeamFightTurn::~ClientServerTeamFightTurn() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientServerTeamFightTurn)
  SharedDtor();
}

void ClientServerTeamFightTurn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientServerTeamFightTurn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientServerTeamFightTurn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientServerTeamFightTurn_descriptor_;
}

const ClientServerTeamFightTurn& ClientServerTeamFightTurn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientServerTeamFightTurn* ClientServerTeamFightTurn::default_instance_ = NULL;

ClientServerTeamFightTurn* ClientServerTeamFightTurn::New() const {
  return new ClientServerTeamFightTurn;
}

void ClientServerTeamFightTurn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientServerTeamFightTurn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(pos1_, dead2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientServerTeamFightTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientServerTeamFightTurn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos1_)));
          set_has_pos1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos2;
        break;
      }

      // required uint32 pos2 = 2;
      case 2: {
        if (tag == 16) {
         parse_pos2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos2_)));
          set_has_pos2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp1;
        break;
      }

      // required uint64 hp1 = 3;
      case 3: {
        if (tag == 24) {
         parse_hp1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp1_)));
          set_has_hp1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hp2;
        break;
      }

      // required uint64 hp2 = 4;
      case 4: {
        if (tag == 32) {
         parse_hp2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp2_)));
          set_has_hp2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dead1;
        break;
      }

      // optional bool dead1 = 5;
      case 5: {
        if (tag == 40) {
         parse_dead1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dead1_)));
          set_has_dead1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dead2;
        break;
      }

      // optional bool dead2 = 6;
      case 6: {
        if (tag == 48) {
         parse_dead2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dead2_)));
          set_has_dead2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientServerTeamFightTurn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientServerTeamFightTurn)
  return false;
#undef DO_
}

void ClientServerTeamFightTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientServerTeamFightTurn)
  // required uint32 pos1 = 1;
  if (has_pos1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos1(), output);
  }

  // required uint32 pos2 = 2;
  if (has_pos2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos2(), output);
  }

  // required uint64 hp1 = 3;
  if (has_hp1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hp1(), output);
  }

  // required uint64 hp2 = 4;
  if (has_hp2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hp2(), output);
  }

  // optional bool dead1 = 5;
  if (has_dead1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->dead1(), output);
  }

  // optional bool dead2 = 6;
  if (has_dead2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->dead2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientServerTeamFightTurn)
}

::google::protobuf::uint8* ClientServerTeamFightTurn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientServerTeamFightTurn)
  // required uint32 pos1 = 1;
  if (has_pos1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos1(), target);
  }

  // required uint32 pos2 = 2;
  if (has_pos2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos2(), target);
  }

  // required uint64 hp1 = 3;
  if (has_hp1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hp1(), target);
  }

  // required uint64 hp2 = 4;
  if (has_hp2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hp2(), target);
  }

  // optional bool dead1 = 5;
  if (has_dead1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->dead1(), target);
  }

  // optional bool dead2 = 6;
  if (has_dead2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->dead2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientServerTeamFightTurn)
  return target;
}

int ClientServerTeamFightTurn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos1 = 1;
    if (has_pos1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos1());
    }

    // required uint32 pos2 = 2;
    if (has_pos2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos2());
    }

    // required uint64 hp1 = 3;
    if (has_hp1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp1());
    }

    // required uint64 hp2 = 4;
    if (has_hp2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp2());
    }

    // optional bool dead1 = 5;
    if (has_dead1()) {
      total_size += 1 + 1;
    }

    // optional bool dead2 = 6;
    if (has_dead2()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientServerTeamFightTurn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientServerTeamFightTurn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientServerTeamFightTurn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientServerTeamFightTurn::MergeFrom(const ClientServerTeamFightTurn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos1()) {
      set_pos1(from.pos1());
    }
    if (from.has_pos2()) {
      set_pos2(from.pos2());
    }
    if (from.has_hp1()) {
      set_hp1(from.hp1());
    }
    if (from.has_hp2()) {
      set_hp2(from.hp2());
    }
    if (from.has_dead1()) {
      set_dead1(from.dead1());
    }
    if (from.has_dead2()) {
      set_dead2(from.dead2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientServerTeamFightTurn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientServerTeamFightTurn::CopyFrom(const ClientServerTeamFightTurn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientServerTeamFightTurn::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClientServerTeamFightTurn::Swap(ClientServerTeamFightTurn* other) {
  if (other != this) {
    std::swap(pos1_, other->pos1_);
    std::swap(pos2_, other->pos2_);
    std::swap(hp1_, other->hp1_);
    std::swap(hp2_, other->hp2_);
    std::swap(dead1_, other->dead1_);
    std::swap(dead2_, other->dead2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientServerTeamFightTurn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientServerTeamFightTurn_descriptor_;
  metadata.reflection = ClientServerTeamFightTurn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientServerTeamBattleResult::kItem1FieldNumber;
const int ClientServerTeamBattleResult::kItem2FieldNumber;
const int ClientServerTeamBattleResult::kWinteamFieldNumber;
const int ClientServerTeamBattleResult::kMvpFieldNumber;
const int ClientServerTeamBattleResult::kTurnFieldNumber;
const int ClientServerTeamBattleResult::kMyteamFieldNumber;
#endif  // !_MSC_VER

ClientServerTeamBattleResult::ClientServerTeamBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ClientServerTeamBattleResult)
}

void ClientServerTeamBattleResult::InitAsDefaultInstance() {
}

ClientServerTeamBattleResult::ClientServerTeamBattleResult(const ClientServerTeamBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ClientServerTeamBattleResult)
}

void ClientServerTeamBattleResult::SharedCtor() {
  _cached_size_ = 0;
  winteam_ = 0u;
  myteam_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientServerTeamBattleResult::~ClientServerTeamBattleResult() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ClientServerTeamBattleResult)
  SharedDtor();
}

void ClientServerTeamBattleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientServerTeamBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientServerTeamBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientServerTeamBattleResult_descriptor_;
}

const ClientServerTeamBattleResult& ClientServerTeamBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ClientServerTeamBattleResult* ClientServerTeamBattleResult::default_instance_ = NULL;

ClientServerTeamBattleResult* ClientServerTeamBattleResult::New() const {
  return new ClientServerTeamBattleResult;
}

void ClientServerTeamBattleResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientServerTeamBattleResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(winteam_, myteam_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  item1_.Clear();
  item2_.Clear();
  mvp_.Clear();
  turn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientServerTeamBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ClientServerTeamBattleResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.ClientServerTeamPlayer item1 = 1;
      case 1: {
        if (tag == 10) {
         parse_item1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item1;
        if (input->ExpectTag(18)) goto parse_item2;
        break;
      }

      // repeated .TgsProtocol.ClientServerTeamPlayer item2 = 2;
      case 2: {
        if (tag == 18) {
         parse_item2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item2;
        if (input->ExpectTag(24)) goto parse_winteam;
        break;
      }

      // required uint32 winteam = 3;
      case 3: {
        if (tag == 24) {
         parse_winteam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winteam_)));
          set_has_winteam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mvp;
        break;
      }

      // repeated uint64 mvp = 4;
      case 4: {
        if (tag == 32) {
         parse_mvp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_mvp())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mvp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mvp;
        if (input->ExpectTag(42)) goto parse_turn;
        break;
      }

      // repeated .TgsProtocol.ClientServerTeamFightTurn turn = 5;
      case 5: {
        if (tag == 42) {
         parse_turn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_turn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_turn;
        if (input->ExpectTag(48)) goto parse_myteam;
        break;
      }

      // required uint32 myteam = 6;
      case 6: {
        if (tag == 48) {
         parse_myteam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myteam_)));
          set_has_myteam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ClientServerTeamBattleResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ClientServerTeamBattleResult)
  return false;
#undef DO_
}

void ClientServerTeamBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ClientServerTeamBattleResult)
  // repeated .TgsProtocol.ClientServerTeamPlayer item1 = 1;
  for (int i = 0; i < this->item1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item1(i), output);
  }

  // repeated .TgsProtocol.ClientServerTeamPlayer item2 = 2;
  for (int i = 0; i < this->item2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item2(i), output);
  }

  // required uint32 winteam = 3;
  if (has_winteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->winteam(), output);
  }

  // repeated uint64 mvp = 4;
  for (int i = 0; i < this->mvp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->mvp(i), output);
  }

  // repeated .TgsProtocol.ClientServerTeamFightTurn turn = 5;
  for (int i = 0; i < this->turn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->turn(i), output);
  }

  // required uint32 myteam = 6;
  if (has_myteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->myteam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ClientServerTeamBattleResult)
}

::google::protobuf::uint8* ClientServerTeamBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ClientServerTeamBattleResult)
  // repeated .TgsProtocol.ClientServerTeamPlayer item1 = 1;
  for (int i = 0; i < this->item1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item1(i), target);
  }

  // repeated .TgsProtocol.ClientServerTeamPlayer item2 = 2;
  for (int i = 0; i < this->item2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item2(i), target);
  }

  // required uint32 winteam = 3;
  if (has_winteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->winteam(), target);
  }

  // repeated uint64 mvp = 4;
  for (int i = 0; i < this->mvp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->mvp(i), target);
  }

  // repeated .TgsProtocol.ClientServerTeamFightTurn turn = 5;
  for (int i = 0; i < this->turn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->turn(i), target);
  }

  // required uint32 myteam = 6;
  if (has_myteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->myteam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ClientServerTeamBattleResult)
  return target;
}

int ClientServerTeamBattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 winteam = 3;
    if (has_winteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winteam());
    }

    // required uint32 myteam = 6;
    if (has_myteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myteam());
    }

  }
  // repeated .TgsProtocol.ClientServerTeamPlayer item1 = 1;
  total_size += 1 * this->item1_size();
  for (int i = 0; i < this->item1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item1(i));
  }

  // repeated .TgsProtocol.ClientServerTeamPlayer item2 = 2;
  total_size += 1 * this->item2_size();
  for (int i = 0; i < this->item2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item2(i));
  }

  // repeated uint64 mvp = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mvp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mvp(i));
    }
    total_size += 1 * this->mvp_size() + data_size;
  }

  // repeated .TgsProtocol.ClientServerTeamFightTurn turn = 5;
  total_size += 1 * this->turn_size();
  for (int i = 0; i < this->turn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->turn(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientServerTeamBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientServerTeamBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientServerTeamBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientServerTeamBattleResult::MergeFrom(const ClientServerTeamBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  item1_.MergeFrom(from.item1_);
  item2_.MergeFrom(from.item2_);
  mvp_.MergeFrom(from.mvp_);
  turn_.MergeFrom(from.turn_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_winteam()) {
      set_winteam(from.winteam());
    }
    if (from.has_myteam()) {
      set_myteam(from.myteam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientServerTeamBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientServerTeamBattleResult::CopyFrom(const ClientServerTeamBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientServerTeamBattleResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000024) != 0x00000024) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item1())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->item2())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->turn())) return false;
  return true;
}

void ClientServerTeamBattleResult::Swap(ClientServerTeamBattleResult* other) {
  if (other != this) {
    item1_.Swap(&other->item1_);
    item2_.Swap(&other->item2_);
    std::swap(winteam_, other->winteam_);
    mvp_.Swap(&other->mvp_);
    turn_.Swap(&other->turn_);
    std::swap(myteam_, other->myteam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientServerTeamBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientServerTeamBattleResult_descriptor_;
  metadata.reflection = ClientServerTeamBattleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecretHole::kIdFieldNumber;
const int SecretHole::kStarFieldNumber;
const int SecretHole::kTotalstarFieldNumber;
#endif  // !_MSC_VER

SecretHole::SecretHole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.SecretHole)
}

void SecretHole::InitAsDefaultInstance() {
}

SecretHole::SecretHole(const SecretHole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.SecretHole)
}

void SecretHole::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  totalstar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecretHole::~SecretHole() {
  // @@protoc_insertion_point(destructor:TgsProtocol.SecretHole)
  SharedDtor();
}

void SecretHole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecretHole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecretHole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecretHole_descriptor_;
}

const SecretHole& SecretHole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

SecretHole* SecretHole::default_instance_ = NULL;

SecretHole* SecretHole::New() const {
  return new SecretHole;
}

void SecretHole::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SecretHole*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, totalstar_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  star_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecretHole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.SecretHole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // repeated uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_star())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_star())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        if (input->ExpectTag(24)) goto parse_totalstar;
        break;
      }

      // optional uint32 totalstar = 3;
      case 3: {
        if (tag == 24) {
         parse_totalstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalstar_)));
          set_has_totalstar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.SecretHole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.SecretHole)
  return false;
#undef DO_
}

void SecretHole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.SecretHole)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 star = 2;
  for (int i = 0; i < this->star_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->star(i), output);
  }

  // optional uint32 totalstar = 3;
  if (has_totalstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.SecretHole)
}

::google::protobuf::uint8* SecretHole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.SecretHole)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 star = 2;
  for (int i = 0; i < this->star_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->star(i), target);
  }

  // optional uint32 totalstar = 3;
  if (has_totalstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totalstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.SecretHole)
  return target;
}

int SecretHole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 totalstar = 3;
    if (has_totalstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalstar());
    }

  }
  // repeated uint32 star = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->star_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->star(i));
    }
    total_size += 1 * this->star_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecretHole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecretHole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecretHole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecretHole::MergeFrom(const SecretHole& from) {
  GOOGLE_CHECK_NE(&from, this);
  star_.MergeFrom(from.star_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_totalstar()) {
      set_totalstar(from.totalstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecretHole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecretHole::CopyFrom(const SecretHole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecretHole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SecretHole::Swap(SecretHole* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    star_.Swap(&other->star_);
    std::swap(totalstar_, other->totalstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecretHole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecretHole_descriptor_;
  metadata.reflection = SecretHole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBSecretHole::kIdFieldNumber;
const int DBSecretHole::kFloorFieldNumber;
const int DBSecretHole::kBoxtimesFieldNumber;
const int DBSecretHole::kBuffFieldNumber;
const int DBSecretHole::kHoleFieldNumber;
const int DBSecretHole::kGoodsidFieldNumber;
const int DBSecretHole::kStarsFieldNumber;
const int DBSecretHole::kFloorStarsFieldNumber;
#endif  // !_MSC_VER

DBSecretHole::DBSecretHole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBSecretHole)
}

void DBSecretHole::InitAsDefaultInstance() {
}

DBSecretHole::DBSecretHole(const DBSecretHole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBSecretHole)
}

void DBSecretHole::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  floor_ = 0u;
  boxtimes_ = 0u;
  goodsid_ = 0u;
  stars_ = 0u;
  floor_stars_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBSecretHole::~DBSecretHole() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBSecretHole)
  SharedDtor();
}

void DBSecretHole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBSecretHole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBSecretHole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBSecretHole_descriptor_;
}

const DBSecretHole& DBSecretHole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBSecretHole* DBSecretHole::default_instance_ = NULL;

DBSecretHole* DBSecretHole::New() const {
  return new DBSecretHole;
}

void DBSecretHole::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBSecretHole*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 231) {
    ZR_(id_, floor_);
    ZR_(boxtimes_, goodsid_);
    ZR_(stars_, floor_stars_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  buff_.Clear();
  hole_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBSecretHole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBSecretHole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_floor;
        break;
      }

      // required uint32 floor = 2;
      case 2: {
        if (tag == 16) {
         parse_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_boxtimes;
        break;
      }

      // required uint32 boxtimes = 3;
      case 3: {
        if (tag == 24) {
         parse_boxtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxtimes_)));
          set_has_boxtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buff;
        break;
      }

      // repeated uint32 buff = 4;
      case 4: {
        if (tag == 32) {
         parse_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_buff())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buff;
        if (input->ExpectTag(42)) goto parse_hole;
        break;
      }

      // repeated .TgsProtocol.SecretHole hole = 5;
      case 5: {
        if (tag == 42) {
         parse_hole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hole()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hole;
        if (input->ExpectTag(48)) goto parse_goodsid;
        break;
      }

      // required uint32 goodsid = 6;
      case 6: {
        if (tag == 48) {
         parse_goodsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_stars;
        break;
      }

      // required uint32 stars = 7;
      case 7: {
        if (tag == 56) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stars_)));
          set_has_stars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_floor_stars;
        break;
      }

      // optional uint32 floor_stars = 8;
      case 8: {
        if (tag == 64) {
         parse_floor_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_stars_)));
          set_has_floor_stars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBSecretHole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBSecretHole)
  return false;
#undef DO_
}

void DBSecretHole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBSecretHole)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 floor = 2;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->floor(), output);
  }

  // required uint32 boxtimes = 3;
  if (has_boxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boxtimes(), output);
  }

  // repeated uint32 buff = 4;
  for (int i = 0; i < this->buff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->buff(i), output);
  }

  // repeated .TgsProtocol.SecretHole hole = 5;
  for (int i = 0; i < this->hole_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hole(i), output);
  }

  // required uint32 goodsid = 6;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->goodsid(), output);
  }

  // required uint32 stars = 7;
  if (has_stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stars(), output);
  }

  // optional uint32 floor_stars = 8;
  if (has_floor_stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->floor_stars(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBSecretHole)
}

::google::protobuf::uint8* DBSecretHole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBSecretHole)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 floor = 2;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->floor(), target);
  }

  // required uint32 boxtimes = 3;
  if (has_boxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->boxtimes(), target);
  }

  // repeated uint32 buff = 4;
  for (int i = 0; i < this->buff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->buff(i), target);
  }

  // repeated .TgsProtocol.SecretHole hole = 5;
  for (int i = 0; i < this->hole_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hole(i), target);
  }

  // required uint32 goodsid = 6;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->goodsid(), target);
  }

  // required uint32 stars = 7;
  if (has_stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stars(), target);
  }

  // optional uint32 floor_stars = 8;
  if (has_floor_stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->floor_stars(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBSecretHole)
  return target;
}

int DBSecretHole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 floor = 2;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floor());
    }

    // required uint32 boxtimes = 3;
    if (has_boxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxtimes());
    }

    // required uint32 goodsid = 6;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsid());
    }

    // required uint32 stars = 7;
    if (has_stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stars());
    }

    // optional uint32 floor_stars = 8;
    if (has_floor_stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floor_stars());
    }

  }
  // repeated uint32 buff = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->buff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buff(i));
    }
    total_size += 1 * this->buff_size() + data_size;
  }

  // repeated .TgsProtocol.SecretHole hole = 5;
  total_size += 1 * this->hole_size();
  for (int i = 0; i < this->hole_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hole(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBSecretHole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBSecretHole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBSecretHole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBSecretHole::MergeFrom(const DBSecretHole& from) {
  GOOGLE_CHECK_NE(&from, this);
  buff_.MergeFrom(from.buff_);
  hole_.MergeFrom(from.hole_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_boxtimes()) {
      set_boxtimes(from.boxtimes());
    }
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_stars()) {
      set_stars(from.stars());
    }
    if (from.has_floor_stars()) {
      set_floor_stars(from.floor_stars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBSecretHole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSecretHole::CopyFrom(const DBSecretHole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSecretHole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hole())) return false;
  return true;
}

void DBSecretHole::Swap(DBSecretHole* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(floor_, other->floor_);
    std::swap(boxtimes_, other->boxtimes_);
    buff_.Swap(&other->buff_);
    hole_.Swap(&other->hole_);
    std::swap(goodsid_, other->goodsid_);
    std::swap(stars_, other->stars_);
    std::swap(floor_stars_, other->floor_stars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBSecretHole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBSecretHole_descriptor_;
  metadata.reflection = DBSecretHole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionInfo::kPhotoFieldNumber;
const int AuctionInfo::kNameFieldNumber;
const int AuctionInfo::kNumFieldNumber;
const int AuctionInfo::kSourceFieldNumber;
const int AuctionInfo::kServeridFieldNumber;
const int AuctionInfo::kServernameFieldNumber;
#endif  // !_MSC_VER

AuctionInfo::AuctionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.AuctionInfo)
}

void AuctionInfo::InitAsDefaultInstance() {
  source_ = const_cast< ::TgsProtocol::ClientSource*>(&::TgsProtocol::ClientSource::default_instance());
}

AuctionInfo::AuctionInfo(const AuctionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.AuctionInfo)
}

void AuctionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  photo_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0u;
  source_ = NULL;
  serverid_ = 0u;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionInfo::~AuctionInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.AuctionInfo)
  SharedDtor();
}

void AuctionInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (this != default_instance_) {
    delete source_;
  }
}

void AuctionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionInfo_descriptor_;
}

const AuctionInfo& AuctionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

AuctionInfo* AuctionInfo::default_instance_ = NULL;

AuctionInfo* AuctionInfo::New() const {
  return new AuctionInfo;
}

void AuctionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuctionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(photo_, num_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_source()) {
      if (source_ != NULL) source_->::TgsProtocol::ClientSource::Clear();
    }
    serverid_ = 0u;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.AuctionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 photo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_source;
        break;
      }

      // required .TgsProtocol.ClientSource source = 4;
      case 4: {
        if (tag == 34) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 5;
      case 5: {
        if (tag == 40) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_servername;
        break;
      }

      // required string servername = 6;
      case 6: {
        if (tag == 50) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.AuctionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.AuctionInfo)
  return false;
#undef DO_
}

void AuctionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.AuctionInfo)
  // required uint32 photo = 1;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->photo(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // required .TgsProtocol.ClientSource source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->source(), output);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverid(), output);
  }

  // required string servername = 6;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.AuctionInfo)
}

::google::protobuf::uint8* AuctionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.AuctionInfo)
  // required uint32 photo = 1;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->photo(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // required .TgsProtocol.ClientSource source = 4;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->source(), target);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverid(), target);
  }

  // required string servername = 6;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.AuctionInfo)
  return target;
}

int AuctionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 photo = 1;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required .TgsProtocol.ClientSource source = 4;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }

    // required uint32 serverid = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required string servername = 6;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionInfo::MergeFrom(const AuctionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_source()) {
      mutable_source()->::TgsProtocol::ClientSource::MergeFrom(from.source());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionInfo::CopyFrom(const AuctionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_source()) {
    if (!this->source().IsInitialized()) return false;
  }
  return true;
}

void AuctionInfo::Swap(AuctionInfo* other) {
  if (other != this) {
    std::swap(photo_, other->photo_);
    std::swap(name_, other->name_);
    std::swap(num_, other->num_);
    std::swap(source_, other->source_);
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionInfo_descriptor_;
  metadata.reflection = AuctionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionConfig::kIdFieldNumber;
const int AuctionConfig::kSourceTypeFieldNumber;
const int AuctionConfig::kSourceIdFieldNumber;
const int AuctionConfig::kSourceNumFieldNumber;
const int AuctionConfig::kMaxNumFieldNumber;
const int AuctionConfig::kLimitFieldNumber;
const int AuctionConfig::kBuyNumFieldNumber;
#endif  // !_MSC_VER

AuctionConfig::AuctionConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.AuctionConfig)
}

void AuctionConfig::InitAsDefaultInstance() {
}

AuctionConfig::AuctionConfig(const AuctionConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.AuctionConfig)
}

void AuctionConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  sourcetype_ = 0u;
  sourceid_ = 0u;
  sourcenum_ = 0u;
  maxnum_ = 0u;
  limit_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionConfig::~AuctionConfig() {
  // @@protoc_insertion_point(destructor:TgsProtocol.AuctionConfig)
  SharedDtor();
}

void AuctionConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionConfig_descriptor_;
}

const AuctionConfig& AuctionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

AuctionConfig* AuctionConfig::default_instance_ = NULL;

AuctionConfig* AuctionConfig::New() const {
  return new AuctionConfig;
}

void AuctionConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuctionConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, buynum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.AuctionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sourceType;
        break;
      }

      // required uint32 sourceType = 2;
      case 2: {
        if (tag == 16) {
         parse_sourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcetype_)));
          set_has_sourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sourceId;
        break;
      }

      // required uint32 sourceId = 3;
      case 3: {
        if (tag == 24) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sourceNum;
        break;
      }

      // required uint32 sourceNum = 4;
      case 4: {
        if (tag == 32) {
         parse_sourceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcenum_)));
          set_has_sourcenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxNum;
        break;
      }

      // required uint32 maxNum = 5;
      case 5: {
        if (tag == 40) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_limit;
        break;
      }

      // required uint32 limit = 6;
      case 6: {
        if (tag == 48) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_buyNum;
        break;
      }

      // required uint32 buyNum = 7;
      case 7: {
        if (tag == 56) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.AuctionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.AuctionConfig)
  return false;
#undef DO_
}

void AuctionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.AuctionConfig)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 sourceType = 2;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sourcetype(), output);
  }

  // required uint32 sourceId = 3;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sourceid(), output);
  }

  // required uint32 sourceNum = 4;
  if (has_sourcenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sourcenum(), output);
  }

  // required uint32 maxNum = 5;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxnum(), output);
  }

  // required uint32 limit = 6;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->limit(), output);
  }

  // required uint32 buyNum = 7;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.AuctionConfig)
}

::google::protobuf::uint8* AuctionConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.AuctionConfig)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 sourceType = 2;
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sourcetype(), target);
  }

  // required uint32 sourceId = 3;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sourceid(), target);
  }

  // required uint32 sourceNum = 4;
  if (has_sourcenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sourcenum(), target);
  }

  // required uint32 maxNum = 5;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxnum(), target);
  }

  // required uint32 limit = 6;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->limit(), target);
  }

  // required uint32 buyNum = 7;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.AuctionConfig)
  return target;
}

int AuctionConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 sourceType = 2;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcetype());
    }

    // required uint32 sourceId = 3;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // required uint32 sourceNum = 4;
    if (has_sourcenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcenum());
    }

    // required uint32 maxNum = 5;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnum());
    }

    // required uint32 limit = 6;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // required uint32 buyNum = 7;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionConfig::MergeFrom(const AuctionConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_sourcenum()) {
      set_sourcenum(from.sourcenum());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionConfig::CopyFrom(const AuctionConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void AuctionConfig::Swap(AuctionConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(sourcenum_, other->sourcenum_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(limit_, other->limit_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionConfig_descriptor_;
  metadata.reflection = AuctionConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRecords::kIdFieldNumber;
const int AuctionRecords::kSourceTypeFieldNumber;
const int AuctionRecords::kSourceIdFieldNumber;
const int AuctionRecords::kSourceNumFieldNumber;
const int AuctionRecords::kCharidFieldNumber;
const int AuctionRecords::kPhotoFieldNumber;
const int AuctionRecords::kNameFieldNumber;
const int AuctionRecords::kServeridFieldNumber;
const int AuctionRecords::kServernameFieldNumber;
const int AuctionRecords::kNumFieldNumber;
#endif  // !_MSC_VER

AuctionRecords::AuctionRecords()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.AuctionRecords)
}

void AuctionRecords::InitAsDefaultInstance() {
}

AuctionRecords::AuctionRecords(const AuctionRecords& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.AuctionRecords)
}

void AuctionRecords::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  sourcetype_ = 0u;
  sourceid_ = 0u;
  sourcenum_ = 0u;
  charid_ = 0u;
  photo_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0u;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRecords::~AuctionRecords() {
  // @@protoc_insertion_point(destructor:TgsProtocol.AuctionRecords)
  SharedDtor();
}

void AuctionRecords::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void AuctionRecords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRecords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRecords_descriptor_;
}

const AuctionRecords& AuctionRecords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

AuctionRecords* AuctionRecords::default_instance_ = NULL;

AuctionRecords* AuctionRecords::New() const {
  return new AuctionRecords;
}

void AuctionRecords::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuctionRecords*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, photo_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    serverid_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
    num_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRecords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.AuctionRecords)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sourceType;
        break;
      }

      // required uint32 sourceType = 2;
      case 2: {
        if (tag == 16) {
         parse_sourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcetype_)));
          set_has_sourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sourceId;
        break;
      }

      // required uint32 sourceId = 3;
      case 3: {
        if (tag == 24) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sourceNum;
        break;
      }

      // required uint32 sourceNum = 4;
      case 4: {
        if (tag == 32) {
         parse_sourceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcenum_)));
          set_has_sourcenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // required uint32 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_photo;
        break;
      }

      // required uint32 photo = 6;
      case 6: {
        if (tag == 48) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // required string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 8;
      case 8: {
        if (tag == 64) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_servername;
        break;
      }

      // required string servername = 9;
      case 9: {
        if (tag == 74) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_num;
        break;
      }

      // required uint32 num = 10;
      case 10: {
        if (tag == 80) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.AuctionRecords)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.AuctionRecords)
  return false;
#undef DO_
}

void AuctionRecords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.AuctionRecords)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 sourceType = 2;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sourcetype(), output);
  }

  // required uint32 sourceId = 3;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sourceid(), output);
  }

  // required uint32 sourceNum = 4;
  if (has_sourcenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sourcenum(), output);
  }

  // required uint32 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->charid(), output);
  }

  // required uint32 photo = 6;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->photo(), output);
  }

  // required string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // required uint32 serverid = 8;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->serverid(), output);
  }

  // required string servername = 9;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->servername(), output);
  }

  // required uint32 num = 10;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.AuctionRecords)
}

::google::protobuf::uint8* AuctionRecords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.AuctionRecords)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 sourceType = 2;
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sourcetype(), target);
  }

  // required uint32 sourceId = 3;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sourceid(), target);
  }

  // required uint32 sourceNum = 4;
  if (has_sourcenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sourcenum(), target);
  }

  // required uint32 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->charid(), target);
  }

  // required uint32 photo = 6;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->photo(), target);
  }

  // required string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // required uint32 serverid = 8;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->serverid(), target);
  }

  // required string servername = 9;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->servername(), target);
  }

  // required uint32 num = 10;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.AuctionRecords)
  return target;
}

int AuctionRecords::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 sourceType = 2;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcetype());
    }

    // required uint32 sourceId = 3;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // required uint32 sourceNum = 4;
    if (has_sourcenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcenum());
    }

    // required uint32 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 photo = 6;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 serverid = 8;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string servername = 9;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // required uint32 num = 10;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRecords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRecords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRecords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRecords::MergeFrom(const AuctionRecords& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_sourcenum()) {
      set_sourcenum(from.sourcenum());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRecords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRecords::CopyFrom(const AuctionRecords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRecords::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void AuctionRecords::Swap(AuctionRecords* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(sourcenum_, other->sourcenum_);
    std::swap(charid_, other->charid_);
    std::swap(photo_, other->photo_);
    std::swap(name_, other->name_);
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRecords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRecords_descriptor_;
  metadata.reflection = AuctionRecords_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRoleInfo::kCharidFieldNumber;
const int AuctionRoleInfo::kServeridFieldNumber;
const int AuctionRoleInfo::kPhotoFieldNumber;
const int AuctionRoleInfo::kNameFieldNumber;
const int AuctionRoleInfo::kNumFieldNumber;
#endif  // !_MSC_VER

AuctionRoleInfo::AuctionRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.AuctionRoleInfo)
}

void AuctionRoleInfo::InitAsDefaultInstance() {
}

AuctionRoleInfo::AuctionRoleInfo(const AuctionRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.AuctionRoleInfo)
}

void AuctionRoleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = 0u;
  serverid_ = 0u;
  photo_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRoleInfo::~AuctionRoleInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.AuctionRoleInfo)
  SharedDtor();
}

void AuctionRoleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AuctionRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRoleInfo_descriptor_;
}

const AuctionRoleInfo& AuctionRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

AuctionRoleInfo* AuctionRoleInfo::default_instance_ = NULL;

AuctionRoleInfo* AuctionRoleInfo::New() const {
  return new AuctionRoleInfo;
}

void AuctionRoleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuctionRoleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, serverid_);
    ZR_(photo_, num_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.AuctionRoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_photo;
        break;
      }

      // required uint32 photo = 3;
      case 3: {
        if (tag == 24) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // required uint32 num = 5;
      case 5: {
        if (tag == 40) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.AuctionRoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.AuctionRoleInfo)
  return false;
#undef DO_
}

void AuctionRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.AuctionRoleInfo)
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required uint32 photo = 3;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->photo(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required uint32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.AuctionRoleInfo)
}

::google::protobuf::uint8* AuctionRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.AuctionRoleInfo)
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required uint32 photo = 3;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->photo(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required uint32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.AuctionRoleInfo)
  return target;
}

int AuctionRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 photo = 3;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRoleInfo::MergeFrom(const AuctionRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRoleInfo::CopyFrom(const AuctionRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AuctionRoleInfo::Swap(AuctionRoleInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(serverid_, other->serverid_);
    std::swap(photo_, other->photo_);
    std::swap(name_, other->name_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRoleInfo_descriptor_;
  metadata.reflection = AuctionRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRoleMap::kIndexFieldNumber;
const int AuctionRoleMap::kInfoFieldNumber;
#endif  // !_MSC_VER

AuctionRoleMap::AuctionRoleMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.AuctionRoleMap)
}

void AuctionRoleMap::InitAsDefaultInstance() {
}

AuctionRoleMap::AuctionRoleMap(const AuctionRoleMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.AuctionRoleMap)
}

void AuctionRoleMap::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRoleMap::~AuctionRoleMap() {
  // @@protoc_insertion_point(destructor:TgsProtocol.AuctionRoleMap)
  SharedDtor();
}

void AuctionRoleMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionRoleMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRoleMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRoleMap_descriptor_;
}

const AuctionRoleMap& AuctionRoleMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

AuctionRoleMap* AuctionRoleMap::default_instance_ = NULL;

AuctionRoleMap* AuctionRoleMap::New() const {
  return new AuctionRoleMap;
}

void AuctionRoleMap::Clear() {
  index_ = 0u;
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRoleMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.AuctionRoleMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .TgsProtocol.AuctionRoleInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.AuctionRoleMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.AuctionRoleMap)
  return false;
#undef DO_
}

void AuctionRoleMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.AuctionRoleMap)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // repeated .TgsProtocol.AuctionRoleInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.AuctionRoleMap)
}

::google::protobuf::uint8* AuctionRoleMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.AuctionRoleMap)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // repeated .TgsProtocol.AuctionRoleInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.AuctionRoleMap)
  return target;
}

int AuctionRoleMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated .TgsProtocol.AuctionRoleInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRoleMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRoleMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRoleMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRoleMap::MergeFrom(const AuctionRoleMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRoleMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRoleMap::CopyFrom(const AuctionRoleMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRoleMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void AuctionRoleMap::Swap(AuctionRoleMap* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRoleMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRoleMap_descriptor_;
  metadata.reflection = AuctionRoleMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionSerialize::kStatusFieldNumber;
const int AuctionSerialize::kActivityidFieldNumber;
const int AuctionSerialize::kEndTimeFieldNumber;
const int AuctionSerialize::kConfFieldNumber;
const int AuctionSerialize::kCurFieldNumber;
const int AuctionSerialize::kLastFieldNumber;
const int AuctionSerialize::kInfFieldNumber;
#endif  // !_MSC_VER

AuctionSerialize::AuctionSerialize()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.AuctionSerialize)
}

void AuctionSerialize::InitAsDefaultInstance() {
}

AuctionSerialize::AuctionSerialize(const AuctionSerialize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.AuctionSerialize)
}

void AuctionSerialize::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  activityid_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionSerialize::~AuctionSerialize() {
  // @@protoc_insertion_point(destructor:TgsProtocol.AuctionSerialize)
  SharedDtor();
}

void AuctionSerialize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuctionSerialize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionSerialize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionSerialize_descriptor_;
}

const AuctionSerialize& AuctionSerialize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

AuctionSerialize* AuctionSerialize::default_instance_ = NULL;

AuctionSerialize* AuctionSerialize::New() const {
  return new AuctionSerialize;
}

void AuctionSerialize::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuctionSerialize*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(status_, activityid_);
    endtime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  conf_.Clear();
  cur_.Clear();
  last_.Clear();
  inf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionSerialize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.AuctionSerialize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activityid;
        break;
      }

      // required uint32 activityid = 2;
      case 2: {
        if (tag == 16) {
         parse_activityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // required uint32 endTime = 3;
      case 3: {
        if (tag == 24) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_conf;
        break;
      }

      // repeated .TgsProtocol.AuctionConfig conf = 4;
      case 4: {
        if (tag == 34) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_conf;
        if (input->ExpectTag(42)) goto parse_cur;
        break;
      }

      // repeated .TgsProtocol.AuctionRecords cur = 5;
      case 5: {
        if (tag == 42) {
         parse_cur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cur()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cur;
        if (input->ExpectTag(50)) goto parse_last;
        break;
      }

      // repeated .TgsProtocol.AuctionRecords last = 6;
      case 6: {
        if (tag == 50) {
         parse_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_last;
        if (input->ExpectTag(58)) goto parse_inf;
        break;
      }

      // repeated .TgsProtocol.AuctionRoleMap inf = 7;
      case 7: {
        if (tag == 58) {
         parse_inf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_inf;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.AuctionSerialize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.AuctionSerialize)
  return false;
#undef DO_
}

void AuctionSerialize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.AuctionSerialize)
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // required uint32 activityid = 2;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activityid(), output);
  }

  // required uint32 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtime(), output);
  }

  // repeated .TgsProtocol.AuctionConfig conf = 4;
  for (int i = 0; i < this->conf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->conf(i), output);
  }

  // repeated .TgsProtocol.AuctionRecords cur = 5;
  for (int i = 0; i < this->cur_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cur(i), output);
  }

  // repeated .TgsProtocol.AuctionRecords last = 6;
  for (int i = 0; i < this->last_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->last(i), output);
  }

  // repeated .TgsProtocol.AuctionRoleMap inf = 7;
  for (int i = 0; i < this->inf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->inf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.AuctionSerialize)
}

::google::protobuf::uint8* AuctionSerialize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.AuctionSerialize)
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // required uint32 activityid = 2;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activityid(), target);
  }

  // required uint32 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtime(), target);
  }

  // repeated .TgsProtocol.AuctionConfig conf = 4;
  for (int i = 0; i < this->conf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->conf(i), target);
  }

  // repeated .TgsProtocol.AuctionRecords cur = 5;
  for (int i = 0; i < this->cur_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cur(i), target);
  }

  // repeated .TgsProtocol.AuctionRecords last = 6;
  for (int i = 0; i < this->last_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->last(i), target);
  }

  // repeated .TgsProtocol.AuctionRoleMap inf = 7;
  for (int i = 0; i < this->inf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->inf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.AuctionSerialize)
  return target;
}

int AuctionSerialize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 activityid = 2;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // required uint32 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  // repeated .TgsProtocol.AuctionConfig conf = 4;
  total_size += 1 * this->conf_size();
  for (int i = 0; i < this->conf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conf(i));
  }

  // repeated .TgsProtocol.AuctionRecords cur = 5;
  total_size += 1 * this->cur_size();
  for (int i = 0; i < this->cur_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cur(i));
  }

  // repeated .TgsProtocol.AuctionRecords last = 6;
  total_size += 1 * this->last_size();
  for (int i = 0; i < this->last_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last(i));
  }

  // repeated .TgsProtocol.AuctionRoleMap inf = 7;
  total_size += 1 * this->inf_size();
  for (int i = 0; i < this->inf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionSerialize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionSerialize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionSerialize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionSerialize::MergeFrom(const AuctionSerialize& from) {
  GOOGLE_CHECK_NE(&from, this);
  conf_.MergeFrom(from.conf_);
  cur_.MergeFrom(from.cur_);
  last_.MergeFrom(from.last_);
  inf_.MergeFrom(from.inf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionSerialize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionSerialize::CopyFrom(const AuctionSerialize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionSerialize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->conf())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cur())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->last())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->inf())) return false;
  return true;
}

void AuctionSerialize::Swap(AuctionSerialize* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(activityid_, other->activityid_);
    std::swap(endtime_, other->endtime_);
    conf_.Swap(&other->conf_);
    cur_.Swap(&other->cur_);
    last_.Swap(&other->last_);
    inf_.Swap(&other->inf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionSerialize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionSerialize_descriptor_;
  metadata.reflection = AuctionSerialize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnTask::kIdFieldNumber;
const int ReturnTask::kStatusFieldNumber;
const int ReturnTask::kStepFieldNumber;
const int ReturnTask::kStep64FieldNumber;
#endif  // !_MSC_VER

ReturnTask::ReturnTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ReturnTask)
}

void ReturnTask::InitAsDefaultInstance() {
}

ReturnTask::ReturnTask(const ReturnTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ReturnTask)
}

void ReturnTask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  status_ = 0u;
  step_ = 0u;
  step64_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnTask::~ReturnTask() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ReturnTask)
  SharedDtor();
}

void ReturnTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnTask_descriptor_;
}

const ReturnTask& ReturnTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ReturnTask* ReturnTask::default_instance_ = NULL;

ReturnTask* ReturnTask::New() const {
  return new ReturnTask;
}

void ReturnTask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnTask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, step_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ReturnTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // required uint32 step = 3;
      case 3: {
        if (tag == 24) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_step64;
        break;
      }

      // optional uint64 step64 = 4;
      case 4: {
        if (tag == 32) {
         parse_step64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &step64_)));
          set_has_step64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ReturnTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ReturnTask)
  return false;
#undef DO_
}

void ReturnTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ReturnTask)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step(), output);
  }

  // optional uint64 step64 = 4;
  if (has_step64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->step64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ReturnTask)
}

::google::protobuf::uint8* ReturnTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ReturnTask)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step(), target);
  }

  // optional uint64 step64 = 4;
  if (has_step64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->step64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ReturnTask)
  return target;
}

int ReturnTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 step = 3;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

    // optional uint64 step64 = 4;
    if (has_step64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->step64());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnTask::MergeFrom(const ReturnTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_step64()) {
      set_step64(from.step64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnTask::CopyFrom(const ReturnTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReturnTask::Swap(ReturnTask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(step_, other->step_);
    std::swap(step64_, other->step64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnTask_descriptor_;
  metadata.reflection = ReturnTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBReturnTask::kTaskFieldNumber;
#endif  // !_MSC_VER

DBReturnTask::DBReturnTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBReturnTask)
}

void DBReturnTask::InitAsDefaultInstance() {
}

DBReturnTask::DBReturnTask(const DBReturnTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBReturnTask)
}

void DBReturnTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBReturnTask::~DBReturnTask() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBReturnTask)
  SharedDtor();
}

void DBReturnTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBReturnTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBReturnTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBReturnTask_descriptor_;
}

const DBReturnTask& DBReturnTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

DBReturnTask* DBReturnTask::default_instance_ = NULL;

DBReturnTask* DBReturnTask::New() const {
  return new DBReturnTask;
}

void DBReturnTask::Clear() {
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBReturnTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBReturnTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.ReturnTask task = 1;
      case 1: {
        if (tag == 10) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_task;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBReturnTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBReturnTask)
  return false;
#undef DO_
}

void DBReturnTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBReturnTask)
  // repeated .TgsProtocol.ReturnTask task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBReturnTask)
}

::google::protobuf::uint8* DBReturnTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBReturnTask)
  // repeated .TgsProtocol.ReturnTask task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBReturnTask)
  return target;
}

int DBReturnTask::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.ReturnTask task = 1;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBReturnTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBReturnTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBReturnTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBReturnTask::MergeFrom(const DBReturnTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBReturnTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBReturnTask::CopyFrom(const DBReturnTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBReturnTask::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->task())) return false;
  return true;
}

void DBReturnTask::Swap(DBReturnTask* other) {
  if (other != this) {
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBReturnTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBReturnTask_descriptor_;
  metadata.reflection = DBReturnTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefineEquipImp::kTypeFieldNumber;
const int RefineEquipImp::kIdFieldNumber;
const int RefineEquipImp::kNumFieldNumber;
#endif  // !_MSC_VER

RefineEquipImp::RefineEquipImp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.RefineEquipImp)
}

void RefineEquipImp::InitAsDefaultInstance() {
}

RefineEquipImp::RefineEquipImp(const RefineEquipImp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.RefineEquipImp)
}

void RefineEquipImp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefineEquipImp::~RefineEquipImp() {
  // @@protoc_insertion_point(destructor:TgsProtocol.RefineEquipImp)
  SharedDtor();
}

void RefineEquipImp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefineEquipImp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefineEquipImp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefineEquipImp_descriptor_;
}

const RefineEquipImp& RefineEquipImp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

RefineEquipImp* RefineEquipImp::default_instance_ = NULL;

RefineEquipImp* RefineEquipImp::New() const {
  return new RefineEquipImp;
}

void RefineEquipImp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RefineEquipImp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefineEquipImp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.RefineEquipImp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.RefineEquipImp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.RefineEquipImp)
  return false;
#undef DO_
}

void RefineEquipImp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.RefineEquipImp)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.RefineEquipImp)
}

::google::protobuf::uint8* RefineEquipImp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.RefineEquipImp)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.RefineEquipImp)
  return target;
}

int RefineEquipImp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefineEquipImp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefineEquipImp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefineEquipImp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefineEquipImp::MergeFrom(const RefineEquipImp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefineEquipImp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefineEquipImp::CopyFrom(const RefineEquipImp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefineEquipImp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RefineEquipImp::Swap(RefineEquipImp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefineEquipImp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefineEquipImp_descriptor_;
  metadata.reflection = RefineEquipImp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRankData::kServerIdFieldNumber;
const int PlayerRankData::kTypeFieldNumber;
const int PlayerRankData::kCharidFieldNumber;
const int PlayerRankData::kServerNameFieldNumber;
const int PlayerRankData::kRankValueFieldNumber;
const int PlayerRankData::kValue1FieldNumber;
const int PlayerRankData::kValue2FieldNumber;
const int PlayerRankData::kRankFieldNumber;
const int PlayerRankData::kBattlePlayerFieldNumber;
#endif  // !_MSC_VER

PlayerRankData::PlayerRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.PlayerRankData)
}

void PlayerRankData::InitAsDefaultInstance() {
  battle_player_ = const_cast< ::TgsProtocol::ClientBattlePlayer*>(&::TgsProtocol::ClientBattlePlayer::default_instance());
}

PlayerRankData::PlayerRankData(const PlayerRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.PlayerRankData)
}

void PlayerRankData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = 0u;
  type_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_value_ = GOOGLE_ULONGLONG(0);
  value1_ = GOOGLE_ULONGLONG(0);
  value2_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  battle_player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRankData::~PlayerRankData() {
  // @@protoc_insertion_point(destructor:TgsProtocol.PlayerRankData)
  SharedDtor();
}

void PlayerRankData::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_name_;
  }
  if (this != default_instance_) {
    delete battle_player_;
  }
}

void PlayerRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRankData_descriptor_;
}

const PlayerRankData& PlayerRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

PlayerRankData* PlayerRankData::default_instance_ = NULL;

PlayerRankData* PlayerRankData::New() const {
  return new PlayerRankData;
}

void PlayerRankData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerRankData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(server_id_, charid_);
    ZR_(rank_value_, value2_);
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_name_->clear();
      }
    }
    rank_ = 0u;
  }
  if (has_battle_player()) {
    if (battle_player_ != NULL) battle_player_->::TgsProtocol::ClientBattlePlayer::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.PlayerRankData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_server_name;
        break;
      }

      // optional string server_name = 4;
      case 4: {
        if (tag == 34) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rank_value;
        break;
      }

      // required uint64 rank_value = 5;
      case 5: {
        if (tag == 40) {
         parse_rank_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rank_value_)));
          set_has_rank_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_value1;
        break;
      }

      // optional uint64 value1 = 6;
      case 6: {
        if (tag == 48) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_value2;
        break;
      }

      // optional uint64 value2 = 7;
      case 7: {
        if (tag == 56) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 8;
      case 8: {
        if (tag == 64) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_battle_player;
        break;
      }

      // optional .TgsProtocol.ClientBattlePlayer battle_player = 9;
      case 9: {
        if (tag == 74) {
         parse_battle_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.PlayerRankData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.PlayerRankData)
  return false;
#undef DO_
}

void PlayerRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.PlayerRankData)
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string server_name = 4;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_name(), output);
  }

  // required uint64 rank_value = 5;
  if (has_rank_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rank_value(), output);
  }

  // optional uint64 value1 = 6;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->value1(), output);
  }

  // optional uint64 value2 = 7;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->value2(), output);
  }

  // optional uint32 rank = 8;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rank(), output);
  }

  // optional .TgsProtocol.ClientBattlePlayer battle_player = 9;
  if (has_battle_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->battle_player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.PlayerRankData)
}

::google::protobuf::uint8* PlayerRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.PlayerRankData)
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string server_name = 4;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_name(), target);
  }

  // required uint64 rank_value = 5;
  if (has_rank_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rank_value(), target);
  }

  // optional uint64 value1 = 6;
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->value1(), target);
  }

  // optional uint64 value2 = 7;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->value2(), target);
  }

  // optional uint32 rank = 8;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rank(), target);
  }

  // optional .TgsProtocol.ClientBattlePlayer battle_player = 9;
  if (has_battle_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->battle_player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.PlayerRankData)
  return target;
}

int PlayerRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string server_name = 4;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // required uint64 rank_value = 5;
    if (has_rank_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rank_value());
    }

    // optional uint64 value1 = 6;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value1());
    }

    // optional uint64 value2 = 7;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value2());
    }

    // optional uint32 rank = 8;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TgsProtocol.ClientBattlePlayer battle_player = 9;
    if (has_battle_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRankData::MergeFrom(const PlayerRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_rank_value()) {
      set_rank_value(from.rank_value());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battle_player()) {
      mutable_battle_player()->::TgsProtocol::ClientBattlePlayer::MergeFrom(from.battle_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRankData::CopyFrom(const PlayerRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000016) != 0x00000016) return false;

  if (has_battle_player()) {
    if (!this->battle_player().IsInitialized()) return false;
  }
  return true;
}

void PlayerRankData::Swap(PlayerRankData* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(server_name_, other->server_name_);
    std::swap(rank_value_, other->rank_value_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(rank_, other->rank_);
    std::swap(battle_player_, other->battle_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRankData_descriptor_;
  metadata.reflection = PlayerRankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerCompareInfo::kIdFieldNumber;
const int ServerCompareInfo::kFirstRankCharidFieldNumber;
const int ServerCompareInfo::kFirstRankCharnameFieldNumber;
const int ServerCompareInfo::kMyRankFieldNumber;
const int ServerCompareInfo::kGetRewardIndexsFieldNumber;
#endif  // !_MSC_VER

ServerCompareInfo::ServerCompareInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ServerCompareInfo)
}

void ServerCompareInfo::InitAsDefaultInstance() {
}

ServerCompareInfo::ServerCompareInfo(const ServerCompareInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ServerCompareInfo)
}

void ServerCompareInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  first_rank_charid_ = GOOGLE_ULONGLONG(0);
  first_rank_charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  my_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerCompareInfo::~ServerCompareInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ServerCompareInfo)
  SharedDtor();
}

void ServerCompareInfo::SharedDtor() {
  if (first_rank_charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete first_rank_charname_;
  }
  if (this != default_instance_) {
  }
}

void ServerCompareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerCompareInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerCompareInfo_descriptor_;
}

const ServerCompareInfo& ServerCompareInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ServerCompareInfo* ServerCompareInfo::default_instance_ = NULL;

ServerCompareInfo* ServerCompareInfo::New() const {
  return new ServerCompareInfo;
}

void ServerCompareInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerCompareInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(first_rank_charid_, my_rank_);
    if (has_first_rank_charname()) {
      if (first_rank_charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        first_rank_charname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  get_reward_indexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerCompareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ServerCompareInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_first_rank_charid;
        break;
      }

      // required uint64 first_rank_charid = 2;
      case 2: {
        if (tag == 16) {
         parse_first_rank_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_rank_charid_)));
          set_has_first_rank_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_first_rank_charname;
        break;
      }

      // required string first_rank_charname = 3;
      case 3: {
        if (tag == 26) {
         parse_first_rank_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_rank_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first_rank_charname().data(), this->first_rank_charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "first_rank_charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_my_rank;
        break;
      }

      // required uint32 my_rank = 4;
      case 4: {
        if (tag == 32) {
         parse_my_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_rank_)));
          set_has_my_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_get_reward_indexs;
        break;
      }

      // repeated uint32 get_reward_indexs = 5;
      case 5: {
        if (tag == 40) {
         parse_get_reward_indexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_get_reward_indexs())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_get_reward_indexs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_get_reward_indexs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ServerCompareInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ServerCompareInfo)
  return false;
#undef DO_
}

void ServerCompareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ServerCompareInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint64 first_rank_charid = 2;
  if (has_first_rank_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->first_rank_charid(), output);
  }

  // required string first_rank_charname = 3;
  if (has_first_rank_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_rank_charname().data(), this->first_rank_charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "first_rank_charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->first_rank_charname(), output);
  }

  // required uint32 my_rank = 4;
  if (has_my_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->my_rank(), output);
  }

  // repeated uint32 get_reward_indexs = 5;
  for (int i = 0; i < this->get_reward_indexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->get_reward_indexs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ServerCompareInfo)
}

::google::protobuf::uint8* ServerCompareInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ServerCompareInfo)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint64 first_rank_charid = 2;
  if (has_first_rank_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->first_rank_charid(), target);
  }

  // required string first_rank_charname = 3;
  if (has_first_rank_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_rank_charname().data(), this->first_rank_charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "first_rank_charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->first_rank_charname(), target);
  }

  // required uint32 my_rank = 4;
  if (has_my_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->my_rank(), target);
  }

  // repeated uint32 get_reward_indexs = 5;
  for (int i = 0; i < this->get_reward_indexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->get_reward_indexs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ServerCompareInfo)
  return target;
}

int ServerCompareInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint64 first_rank_charid = 2;
    if (has_first_rank_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_rank_charid());
    }

    // required string first_rank_charname = 3;
    if (has_first_rank_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_rank_charname());
    }

    // required uint32 my_rank = 4;
    if (has_my_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_rank());
    }

  }
  // repeated uint32 get_reward_indexs = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_reward_indexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->get_reward_indexs(i));
    }
    total_size += 1 * this->get_reward_indexs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerCompareInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerCompareInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerCompareInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerCompareInfo::MergeFrom(const ServerCompareInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_reward_indexs_.MergeFrom(from.get_reward_indexs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_first_rank_charid()) {
      set_first_rank_charid(from.first_rank_charid());
    }
    if (from.has_first_rank_charname()) {
      set_first_rank_charname(from.first_rank_charname());
    }
    if (from.has_my_rank()) {
      set_my_rank(from.my_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerCompareInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerCompareInfo::CopyFrom(const ServerCompareInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCompareInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerCompareInfo::Swap(ServerCompareInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(first_rank_charid_, other->first_rank_charid_);
    std::swap(first_rank_charname_, other->first_rank_charname_);
    std::swap(my_rank_, other->my_rank_);
    get_reward_indexs_.Swap(&other->get_reward_indexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerCompareInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerCompareInfo_descriptor_;
  metadata.reflection = ServerCompareInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerCompareGot::kDayFieldNumber;
const int ServerCompareGot::kIndexFieldNumber;
#endif  // !_MSC_VER

ServerCompareGot::ServerCompareGot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.ServerCompareGot)
}

void ServerCompareGot::InitAsDefaultInstance() {
}

ServerCompareGot::ServerCompareGot(const ServerCompareGot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.ServerCompareGot)
}

void ServerCompareGot::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerCompareGot::~ServerCompareGot() {
  // @@protoc_insertion_point(destructor:TgsProtocol.ServerCompareGot)
  SharedDtor();
}

void ServerCompareGot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerCompareGot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerCompareGot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerCompareGot_descriptor_;
}

const ServerCompareGot& ServerCompareGot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

ServerCompareGot* ServerCompareGot::default_instance_ = NULL;

ServerCompareGot* ServerCompareGot::New() const {
  return new ServerCompareGot;
}

void ServerCompareGot::Clear() {
  day_ = 0u;
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerCompareGot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.ServerCompareGot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // repeated uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_index())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.ServerCompareGot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.ServerCompareGot)
  return false;
#undef DO_
}

void ServerCompareGot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.ServerCompareGot)
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // repeated uint32 index = 2;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.ServerCompareGot)
}

::google::protobuf::uint8* ServerCompareGot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.ServerCompareGot)
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // repeated uint32 index = 2;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.ServerCompareGot)
  return target;
}

int ServerCompareGot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  // repeated uint32 index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerCompareGot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerCompareGot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerCompareGot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerCompareGot::MergeFrom(const ServerCompareGot& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_.MergeFrom(from.index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerCompareGot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerCompareGot::CopyFrom(const ServerCompareGot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCompareGot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerCompareGot::Swap(ServerCompareGot* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    index_.Swap(&other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerCompareGot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerCompareGot_descriptor_;
  metadata.reflection = ServerCompareGot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterRankInfo::kTypeFieldNumber;
const int CenterRankInfo::kCharidFieldNumber;
const int CenterRankInfo::kValueFieldNumber;
const int CenterRankInfo::kCharnameFieldNumber;
const int CenterRankInfo::kServernameFieldNumber;
const int CenterRankInfo::kRankFieldNumber;
const int CenterRankInfo::kNationalIdFieldNumber;
#endif  // !_MSC_VER

CenterRankInfo::CenterRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.CenterRankInfo)
}

void CenterRankInfo::InitAsDefaultInstance() {
}

CenterRankInfo::CenterRankInfo(const CenterRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.CenterRankInfo)
}

void CenterRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_ = 0u;
  nationalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterRankInfo::~CenterRankInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.CenterRankInfo)
  SharedDtor();
}

void CenterRankInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void CenterRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterRankInfo_descriptor_;
}

const CenterRankInfo& CenterRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

CenterRankInfo* CenterRankInfo::default_instance_ = NULL;

CenterRankInfo* CenterRankInfo::New() const {
  return new CenterRankInfo;
}

void CenterRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CenterRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(charid_, rank_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
    nationalid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.CenterRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TgsProtocol.ECenterRankType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::ECenterRankType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::ECenterRankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required uint64 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // required string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_servername;
        break;
      }

      // required string servername = 5;
      case 5: {
        if (tag == 42) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }

      // required uint32 rank = 6;
      case 6: {
        if (tag == 48) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nationalId;
        break;
      }

      // optional uint32 nationalId = 7;
      case 7: {
        if (tag == 56) {
         parse_nationalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nationalid_)));
          set_has_nationalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.CenterRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.CenterRankInfo)
  return false;
#undef DO_
}

void CenterRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.CenterRankInfo)
  // required .TgsProtocol.ECenterRankType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required uint64 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->value(), output);
  }

  // required string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // required string servername = 5;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->servername(), output);
  }

  // required uint32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank(), output);
  }

  // optional uint32 nationalId = 7;
  if (has_nationalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nationalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.CenterRankInfo)
}

::google::protobuf::uint8* CenterRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.CenterRankInfo)
  // required .TgsProtocol.ECenterRankType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required uint64 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->value(), target);
  }

  // required string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // required string servername = 5;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->servername(), target);
  }

  // required uint32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rank(), target);
  }

  // optional uint32 nationalId = 7;
  if (has_nationalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->nationalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.CenterRankInfo)
  return target;
}

int CenterRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TgsProtocol.ECenterRankType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint64 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // required string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required string servername = 5;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // required uint32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 nationalId = 7;
    if (has_nationalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nationalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterRankInfo::MergeFrom(const CenterRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_nationalid()) {
      set_nationalid(from.nationalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterRankInfo::CopyFrom(const CenterRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CenterRankInfo::Swap(CenterRankInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(value_, other->value_);
    std::swap(charname_, other->charname_);
    std::swap(servername_, other->servername_);
    std::swap(rank_, other->rank_);
    std::swap(nationalid_, other->nationalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterRankInfo_descriptor_;
  metadata.reflection = CenterRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeedInfo::kSeedIdFieldNumber;
const int SeedInfo::kPlantTimeFieldNumber;
#endif  // !_MSC_VER

SeedInfo::SeedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.SeedInfo)
}

void SeedInfo::InitAsDefaultInstance() {
}

SeedInfo::SeedInfo(const SeedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.SeedInfo)
}

void SeedInfo::SharedCtor() {
  _cached_size_ = 0;
  seedid_ = 0u;
  planttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeedInfo::~SeedInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.SeedInfo)
  SharedDtor();
}

void SeedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeedInfo_descriptor_;
}

const SeedInfo& SeedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

SeedInfo* SeedInfo::default_instance_ = NULL;

SeedInfo* SeedInfo::New() const {
  return new SeedInfo;
}

void SeedInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SeedInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seedid_, planttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.SeedInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seedId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seedid_)));
          set_has_seedid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plantTime;
        break;
      }

      // required uint32 plantTime = 2;
      case 2: {
        if (tag == 16) {
         parse_plantTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &planttime_)));
          set_has_planttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.SeedInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.SeedInfo)
  return false;
#undef DO_
}

void SeedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.SeedInfo)
  // required uint32 seedId = 1;
  if (has_seedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seedid(), output);
  }

  // required uint32 plantTime = 2;
  if (has_planttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->planttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.SeedInfo)
}

::google::protobuf::uint8* SeedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.SeedInfo)
  // required uint32 seedId = 1;
  if (has_seedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seedid(), target);
  }

  // required uint32 plantTime = 2;
  if (has_planttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->planttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.SeedInfo)
  return target;
}

int SeedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seedId = 1;
    if (has_seedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seedid());
    }

    // required uint32 plantTime = 2;
    if (has_planttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->planttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeedInfo::MergeFrom(const SeedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seedid()) {
      set_seedid(from.seedid());
    }
    if (from.has_planttime()) {
      set_planttime(from.planttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeedInfo::CopyFrom(const SeedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SeedInfo::Swap(SeedInfo* other) {
  if (other != this) {
    std::swap(seedid_, other->seedid_);
    std::swap(planttime_, other->planttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeedInfo_descriptor_;
  metadata.reflection = SeedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroundInfo::kGroundIdFieldNumber;
const int GroundInfo::kIsReclaimedFieldNumber;
const int GroundInfo::kSeedFieldNumber;
#endif  // !_MSC_VER

GroundInfo::GroundInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.GroundInfo)
}

void GroundInfo::InitAsDefaultInstance() {
  seed_ = const_cast< ::TgsProtocol::SeedInfo*>(&::TgsProtocol::SeedInfo::default_instance());
}

GroundInfo::GroundInfo(const GroundInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.GroundInfo)
}

void GroundInfo::SharedCtor() {
  _cached_size_ = 0;
  groundid_ = 0u;
  isreclaimed_ = false;
  seed_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroundInfo::~GroundInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.GroundInfo)
  SharedDtor();
}

void GroundInfo::SharedDtor() {
  if (this != default_instance_) {
    delete seed_;
  }
}

void GroundInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroundInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroundInfo_descriptor_;
}

const GroundInfo& GroundInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

GroundInfo* GroundInfo::default_instance_ = NULL;

GroundInfo* GroundInfo::New() const {
  return new GroundInfo;
}

void GroundInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroundInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(groundid_, isreclaimed_);
    if (has_seed()) {
      if (seed_ != NULL) seed_->::TgsProtocol::SeedInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroundInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.GroundInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 GroundId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groundid_)));
          set_has_groundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isReclaimed;
        break;
      }

      // required bool isReclaimed = 2;
      case 2: {
        if (tag == 16) {
         parse_isReclaimed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreclaimed_)));
          set_has_isreclaimed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_seed;
        break;
      }

      // optional .TgsProtocol.SeedInfo seed = 3;
      case 3: {
        if (tag == 26) {
         parse_seed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.GroundInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.GroundInfo)
  return false;
#undef DO_
}

void GroundInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.GroundInfo)
  // required uint32 GroundId = 1;
  if (has_groundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groundid(), output);
  }

  // required bool isReclaimed = 2;
  if (has_isreclaimed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isreclaimed(), output);
  }

  // optional .TgsProtocol.SeedInfo seed = 3;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.GroundInfo)
}

::google::protobuf::uint8* GroundInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.GroundInfo)
  // required uint32 GroundId = 1;
  if (has_groundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groundid(), target);
  }

  // required bool isReclaimed = 2;
  if (has_isreclaimed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isreclaimed(), target);
  }

  // optional .TgsProtocol.SeedInfo seed = 3;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.GroundInfo)
  return target;
}

int GroundInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 GroundId = 1;
    if (has_groundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groundid());
    }

    // required bool isReclaimed = 2;
    if (has_isreclaimed()) {
      total_size += 1 + 1;
    }

    // optional .TgsProtocol.SeedInfo seed = 3;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroundInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroundInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroundInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroundInfo::MergeFrom(const GroundInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groundid()) {
      set_groundid(from.groundid());
    }
    if (from.has_isreclaimed()) {
      set_isreclaimed(from.isreclaimed());
    }
    if (from.has_seed()) {
      mutable_seed()->::TgsProtocol::SeedInfo::MergeFrom(from.seed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroundInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundInfo::CopyFrom(const GroundInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_seed()) {
    if (!this->seed().IsInitialized()) return false;
  }
  return true;
}

void GroundInfo::Swap(GroundInfo* other) {
  if (other != this) {
    std::swap(groundid_, other->groundid_);
    std::swap(isreclaimed_, other->isreclaimed_);
    std::swap(seed_, other->seed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroundInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroundInfo_descriptor_;
  metadata.reflection = GroundInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FarmNoticeInfo::kIdFieldNumber;
const int FarmNoticeInfo::kTimeFieldNumber;
const int FarmNoticeInfo::kCharIdFieldNumber;
const int FarmNoticeInfo::kCharnameFieldNumber;
const int FarmNoticeInfo::kTypeFieldNumber;
const int FarmNoticeInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

FarmNoticeInfo::FarmNoticeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.FarmNoticeInfo)
}

void FarmNoticeInfo::InitAsDefaultInstance() {
}

FarmNoticeInfo::FarmNoticeInfo(const FarmNoticeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.FarmNoticeInfo)
}

void FarmNoticeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FarmNoticeInfo::~FarmNoticeInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.FarmNoticeInfo)
  SharedDtor();
}

void FarmNoticeInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void FarmNoticeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FarmNoticeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FarmNoticeInfo_descriptor_;
}

const FarmNoticeInfo& FarmNoticeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

FarmNoticeInfo* FarmNoticeInfo::default_instance_ = NULL;

FarmNoticeInfo* FarmNoticeInfo::New() const {
  return new FarmNoticeInfo;
}

void FarmNoticeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FarmNoticeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, type_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    status_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FarmNoticeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.FarmNoticeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charId;
        break;
      }

      // required uint64 charId = 3;
      case 3: {
        if (tag == 24) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // required string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required .TgsProtocol.FarmNoticeType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::FarmNoticeType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::FarmNoticeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required .TgsProtocol.FarmNoticeStatus status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::FarmNoticeStatus_IsValid(value)) {
            set_status(static_cast< ::TgsProtocol::FarmNoticeStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.FarmNoticeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.FarmNoticeInfo)
  return false;
#undef DO_
}

void FarmNoticeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.FarmNoticeInfo)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // required .TgsProtocol.FarmNoticeType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // required .TgsProtocol.FarmNoticeStatus status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.FarmNoticeInfo)
}

::google::protobuf::uint8* FarmNoticeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.FarmNoticeInfo)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // required .TgsProtocol.FarmNoticeType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // required .TgsProtocol.FarmNoticeStatus status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.FarmNoticeInfo)
  return target;
}

int FarmNoticeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint64 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required .TgsProtocol.FarmNoticeType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .TgsProtocol.FarmNoticeStatus status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FarmNoticeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FarmNoticeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FarmNoticeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FarmNoticeInfo::MergeFrom(const FarmNoticeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FarmNoticeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FarmNoticeInfo::CopyFrom(const FarmNoticeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FarmNoticeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FarmNoticeInfo::Swap(FarmNoticeInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FarmNoticeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FarmNoticeInfo_descriptor_;
  metadata.reflection = FarmNoticeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FarmWell::kLevelFieldNumber;
const int FarmWell::kWaterFieldNumber;
const int FarmWell::kExpFieldNumber;
#endif  // !_MSC_VER

FarmWell::FarmWell()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.FarmWell)
}

void FarmWell::InitAsDefaultInstance() {
}

FarmWell::FarmWell(const FarmWell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.FarmWell)
}

void FarmWell::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  water_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FarmWell::~FarmWell() {
  // @@protoc_insertion_point(destructor:TgsProtocol.FarmWell)
  SharedDtor();
}

void FarmWell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FarmWell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FarmWell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FarmWell_descriptor_;
}

const FarmWell& FarmWell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

FarmWell* FarmWell::default_instance_ = NULL;

FarmWell* FarmWell::New() const {
  return new FarmWell;
}

void FarmWell::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FarmWell*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FarmWell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.FarmWell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_water;
        break;
      }

      // required uint32 water = 2;
      case 2: {
        if (tag == 16) {
         parse_water:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &water_)));
          set_has_water();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required uint32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.FarmWell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.FarmWell)
  return false;
#undef DO_
}

void FarmWell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.FarmWell)
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint32 water = 2;
  if (has_water()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->water(), output);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.FarmWell)
}

::google::protobuf::uint8* FarmWell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.FarmWell)
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required uint32 water = 2;
  if (has_water()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->water(), target);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.FarmWell)
  return target;
}

int FarmWell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 water = 2;
    if (has_water()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->water());
    }

    // required uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FarmWell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FarmWell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FarmWell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FarmWell::MergeFrom(const FarmWell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_water()) {
      set_water(from.water());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FarmWell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FarmWell::CopyFrom(const FarmWell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FarmWell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FarmWell::Swap(FarmWell* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(water_, other->water_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FarmWell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FarmWell_descriptor_;
  metadata.reflection = FarmWell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FarmInfo::kCharidFieldNumber;
const int FarmInfo::kCharnameFieldNumber;
const int FarmInfo::kGroundsFieldNumber;
const int FarmInfo::kWellFieldNumber;
#endif  // !_MSC_VER

FarmInfo::FarmInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.FarmInfo)
}

void FarmInfo::InitAsDefaultInstance() {
  well_ = const_cast< ::TgsProtocol::FarmWell*>(&::TgsProtocol::FarmWell::default_instance());
}

FarmInfo::FarmInfo(const FarmInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.FarmInfo)
}

void FarmInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  well_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FarmInfo::~FarmInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.FarmInfo)
  SharedDtor();
}

void FarmInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
    delete well_;
  }
}

void FarmInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FarmInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FarmInfo_descriptor_;
}

const FarmInfo& FarmInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

FarmInfo* FarmInfo::default_instance_ = NULL;

FarmInfo* FarmInfo::New() const {
  return new FarmInfo;
}

void FarmInfo::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_well()) {
      if (well_ != NULL) well_->::TgsProtocol::FarmWell::Clear();
    }
  }
  grounds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FarmInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.FarmInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // required string charname = 2;
      case 2: {
        if (tag == 18) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_grounds;
        break;
      }

      // repeated .TgsProtocol.GroundInfo grounds = 3;
      case 3: {
        if (tag == 26) {
         parse_grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_grounds;
        if (input->ExpectTag(34)) goto parse_well;
        break;
      }

      // required .TgsProtocol.FarmWell well = 4;
      case 4: {
        if (tag == 34) {
         parse_well:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_well()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.FarmInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.FarmInfo)
  return false;
#undef DO_
}

void FarmInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.FarmInfo)
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->charname(), output);
  }

  // repeated .TgsProtocol.GroundInfo grounds = 3;
  for (int i = 0; i < this->grounds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->grounds(i), output);
  }

  // required .TgsProtocol.FarmWell well = 4;
  if (has_well()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->well(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.FarmInfo)
}

::google::protobuf::uint8* FarmInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.FarmInfo)
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // repeated .TgsProtocol.GroundInfo grounds = 3;
  for (int i = 0; i < this->grounds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->grounds(i), target);
  }

  // required .TgsProtocol.FarmWell well = 4;
  if (has_well()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->well(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.FarmInfo)
  return target;
}

int FarmInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required .TgsProtocol.FarmWell well = 4;
    if (has_well()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->well());
    }

  }
  // repeated .TgsProtocol.GroundInfo grounds = 3;
  total_size += 1 * this->grounds_size();
  for (int i = 0; i < this->grounds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grounds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FarmInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FarmInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FarmInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FarmInfo::MergeFrom(const FarmInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  grounds_.MergeFrom(from.grounds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_well()) {
      mutable_well()->::TgsProtocol::FarmWell::MergeFrom(from.well());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FarmInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FarmInfo::CopyFrom(const FarmInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FarmInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->grounds())) return false;
  if (has_well()) {
    if (!this->well().IsInitialized()) return false;
  }
  return true;
}

void FarmInfo::Swap(FarmInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    grounds_.Swap(&other->grounds_);
    std::swap(well_, other->well_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FarmInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FarmInfo_descriptor_;
  metadata.reflection = FarmInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonthCardPrize::kWordsidFieldNumber;
const int MonthCardPrize::kValueFieldNumber;
#endif  // !_MSC_VER

MonthCardPrize::MonthCardPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.MonthCardPrize)
}

void MonthCardPrize::InitAsDefaultInstance() {
}

MonthCardPrize::MonthCardPrize(const MonthCardPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.MonthCardPrize)
}

void MonthCardPrize::SharedCtor() {
  _cached_size_ = 0;
  wordsid_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthCardPrize::~MonthCardPrize() {
  // @@protoc_insertion_point(destructor:TgsProtocol.MonthCardPrize)
  SharedDtor();
}

void MonthCardPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonthCardPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonthCardPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonthCardPrize_descriptor_;
}

const MonthCardPrize& MonthCardPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

MonthCardPrize* MonthCardPrize::default_instance_ = NULL;

MonthCardPrize* MonthCardPrize::New() const {
  return new MonthCardPrize;
}

void MonthCardPrize::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MonthCardPrize*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(wordsid_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonthCardPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.MonthCardPrize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 wordsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wordsid_)));
          set_has_wordsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.MonthCardPrize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.MonthCardPrize)
  return false;
#undef DO_
}

void MonthCardPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.MonthCardPrize)
  // required uint32 wordsid = 1;
  if (has_wordsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wordsid(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.MonthCardPrize)
}

::google::protobuf::uint8* MonthCardPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.MonthCardPrize)
  // required uint32 wordsid = 1;
  if (has_wordsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wordsid(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.MonthCardPrize)
  return target;
}

int MonthCardPrize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 wordsid = 1;
    if (has_wordsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wordsid());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthCardPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonthCardPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonthCardPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonthCardPrize::MergeFrom(const MonthCardPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wordsid()) {
      set_wordsid(from.wordsid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonthCardPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonthCardPrize::CopyFrom(const MonthCardPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthCardPrize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MonthCardPrize::Swap(MonthCardPrize* other) {
  if (other != this) {
    std::swap(wordsid_, other->wordsid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonthCardPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonthCardPrize_descriptor_;
  metadata.reflection = MonthCardPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FarmDB::kGroundsFieldNumber;
const int FarmDB::kWellFieldNumber;
const int FarmDB::kNoticeFieldNumber;
const int FarmDB::kSignatureFieldNumber;
#endif  // !_MSC_VER

FarmDB::FarmDB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.FarmDB)
}

void FarmDB::InitAsDefaultInstance() {
  well_ = const_cast< ::TgsProtocol::FarmWell*>(&::TgsProtocol::FarmWell::default_instance());
}

FarmDB::FarmDB(const FarmDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.FarmDB)
}

void FarmDB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  well_ = NULL;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FarmDB::~FarmDB() {
  // @@protoc_insertion_point(destructor:TgsProtocol.FarmDB)
  SharedDtor();
}

void FarmDB::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete well_;
  }
}

void FarmDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FarmDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FarmDB_descriptor_;
}

const FarmDB& FarmDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

FarmDB* FarmDB::default_instance_ = NULL;

FarmDB* FarmDB::New() const {
  return new FarmDB;
}

void FarmDB::Clear() {
  if (_has_bits_[0 / 32] & 10) {
    if (has_well()) {
      if (well_ != NULL) well_->::TgsProtocol::FarmWell::Clear();
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
  }
  grounds_.Clear();
  notice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FarmDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.FarmDB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.GroundInfo grounds = 1;
      case 1: {
        if (tag == 10) {
         parse_grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_grounds;
        if (input->ExpectTag(18)) goto parse_well;
        break;
      }

      // optional .TgsProtocol.FarmWell well = 2;
      case 2: {
        if (tag == 18) {
         parse_well:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_well()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_notice;
        break;
      }

      // repeated .TgsProtocol.FarmNoticeInfo notice = 3;
      case 3: {
        if (tag == 26) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_notice;
        if (input->ExpectTag(34)) goto parse_signature;
        break;
      }

      // optional string signature = 4;
      case 4: {
        if (tag == 34) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signature");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.FarmDB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.FarmDB)
  return false;
#undef DO_
}

void FarmDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.FarmDB)
  // repeated .TgsProtocol.GroundInfo grounds = 1;
  for (int i = 0; i < this->grounds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grounds(i), output);
  }

  // optional .TgsProtocol.FarmWell well = 2;
  if (has_well()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->well(), output);
  }

  // repeated .TgsProtocol.FarmNoticeInfo notice = 3;
  for (int i = 0; i < this->notice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->notice(i), output);
  }

  // optional string signature = 4;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.FarmDB)
}

::google::protobuf::uint8* FarmDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.FarmDB)
  // repeated .TgsProtocol.GroundInfo grounds = 1;
  for (int i = 0; i < this->grounds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grounds(i), target);
  }

  // optional .TgsProtocol.FarmWell well = 2;
  if (has_well()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->well(), target);
  }

  // repeated .TgsProtocol.FarmNoticeInfo notice = 3;
  for (int i = 0; i < this->notice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->notice(i), target);
  }

  // optional string signature = 4;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.FarmDB)
  return target;
}

int FarmDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TgsProtocol.FarmWell well = 2;
    if (has_well()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->well());
    }

    // optional string signature = 4;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  // repeated .TgsProtocol.GroundInfo grounds = 1;
  total_size += 1 * this->grounds_size();
  for (int i = 0; i < this->grounds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grounds(i));
  }

  // repeated .TgsProtocol.FarmNoticeInfo notice = 3;
  total_size += 1 * this->notice_size();
  for (int i = 0; i < this->notice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notice(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FarmDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FarmDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FarmDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FarmDB::MergeFrom(const FarmDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  grounds_.MergeFrom(from.grounds_);
  notice_.MergeFrom(from.notice_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_well()) {
      mutable_well()->::TgsProtocol::FarmWell::MergeFrom(from.well());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FarmDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FarmDB::CopyFrom(const FarmDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FarmDB::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->grounds())) return false;
  if (has_well()) {
    if (!this->well().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->notice())) return false;
  return true;
}

void FarmDB::Swap(FarmDB* other) {
  if (other != this) {
    grounds_.Swap(&other->grounds_);
    std::swap(well_, other->well_);
    notice_.Swap(&other->notice_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FarmDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FarmDB_descriptor_;
  metadata.reflection = FarmDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeedBag::kSeedsFieldNumber;
#endif  // !_MSC_VER

SeedBag::SeedBag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.SeedBag)
}

void SeedBag::InitAsDefaultInstance() {
}

SeedBag::SeedBag(const SeedBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.SeedBag)
}

void SeedBag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeedBag::~SeedBag() {
  // @@protoc_insertion_point(destructor:TgsProtocol.SeedBag)
  SharedDtor();
}

void SeedBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeedBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeedBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeedBag_descriptor_;
}

const SeedBag& SeedBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketDef_2eproto();
  return *default_instance_;
}

SeedBag* SeedBag::default_instance_ = NULL;

SeedBag* SeedBag::New() const {
  return new SeedBag;
}

void SeedBag::Clear() {
  seeds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeedBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.SeedBag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.SeedSource seeds = 1;
      case 1: {
        if (tag == 10) {
         parse_seeds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seeds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_seeds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.SeedBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.SeedBag)
  return false;
#undef DO_
}

void SeedBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.SeedBag)
  // repeated .TgsProtocol.SeedSource seeds = 1;
  for (int i = 0; i < this->seeds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->seeds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.SeedBag)
}

::google::protobuf::uint8* SeedBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.SeedBag)
  // repeated .TgsProtocol.SeedSource seeds = 1;
  for (int i = 0; i < this->seeds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->seeds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.SeedBag)
  return target;
}

int SeedBag::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.SeedSource seeds = 1;
  total_size += 1 * this->seeds_size();
  for (int i = 0; i < this->seeds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seeds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeedBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeedBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeedBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeedBag::MergeFrom(const SeedBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  seeds_.MergeFrom(from.seeds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeedBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeedBag::CopyFrom(const SeedBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeedBag::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->seeds())) return false;
  return true;
}

void SeedBag::Swap(SeedBag* other) {
  if (other != this) {
    seeds_.Swap(&other->seeds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeedBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeedBag_descriptor_;
  metadata.reflection = SeedBag_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TgsProtocol

// @@protoc_insertion_point(global_scope)
