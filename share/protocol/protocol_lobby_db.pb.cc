// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_lobby_db.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol_lobby_db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TgsProtocol {

namespace {

const ::google::protobuf::Descriptor* DbSystemSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbSystemSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_LoadCharReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_LoadCharReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NationalDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NationalDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_LoadCharRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_LoadCharRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_CharAdvancedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_CharAdvancedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbSevenDayActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbSevenDayActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbSevenDayActiveElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbSevenDayActiveElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbRebelArmy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbRebelArmy_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbActionRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbActionRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbRaidTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbRaidTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBServerCompareGot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBServerCompareGot_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_CharAdvancedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_CharAdvancedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_LoadCharListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_LoadCharListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleDBCharInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleDBCharInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_LoadCharListRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_LoadCharListRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_CreateCharReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_CreateCharReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_CreateCharRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_CreateCharRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_SaveCharReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_SaveCharReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_SaveCharRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_SaveCharRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_SaveAdvancedCharReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_SaveAdvancedCharReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetrieveDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetrieveDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_SaveAdvancedCharRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_SaveAdvancedCharRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_LoadBagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_LoadBagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_LoadBagRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_LoadBagRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_CheckTokenRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_CheckTokenRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_SaveBagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_SaveBagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_AddDiamondReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_AddDiamondReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_ChangeNameCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_ChangeNameCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_ChangeNameCheckRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_ChangeNameCheckRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DBLoadWorldReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DBLoadWorldReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBYLoadWorldRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBYLoadWorldRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateSupremeHotBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateSupremeHotBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateArenaRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateArenaRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateArenaLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateArenaLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_OfflineMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_OfflineMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_LoadOfflineMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_LoadOfflineMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_LoadOfflineMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_LoadOfflineMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_CheckTokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_CheckTokenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_ApplyFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_ApplyFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_ApplyFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_ApplyFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_AddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_AddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_DelFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_DelFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_DelFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_DelFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_SendEnergy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_SendEnergy_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_PurchaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_PurchaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_Shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_Shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_GetTargetFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_GetTargetFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_GetTargetFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_GetTargetFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DBGetTargetUserinfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DBGetTargetUserinfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBYGetTargetUserinfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBYGetTargetUserinfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DBGetRecommandFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DBGetRecommandFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBYGetRecommandFriendRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBYGetRecommandFriendRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_LoadActivityReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_LoadActivityReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_LoadActivityRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_LoadActivityRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateActivityReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateActivityReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_LoadRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_LoadRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_LoadRankRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_LoadRankRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_ClearRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_ClearRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_ClearPlayerRank_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_ClearPlayerRank_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbArena_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbArena_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_LoadArenaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_LoadArenaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_LoadArenaRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_LoadArenaRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateArenaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateArenaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBServerCompare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBServerCompare_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_LoadServerCompare_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_LoadServerCompare_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_LoadServerCompare_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_LoadServerCompare_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateServerCompare_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateServerCompare_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_ClearServerCompare_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_ClearServerCompare_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBGuildPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBGuildPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBGuildApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBGuildApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBGuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBGuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_LoadGuild_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_LoadGuild_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_GuildInfo_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_GuildInfo_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_GuildPlayers_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_GuildPlayers_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBY_GuildApplys_Ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBY_GuildApplys_Ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateGuildInfo_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateGuildInfo_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateGuildPlayer_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateGuildPlayer_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateGuildApply_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateGuildApply_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateGuildRitual_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateGuildRitual_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateGuildNewDay_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DB_UpdateGuildNewDay_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DBLoadTreasureReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DBLoadTreasureReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBYLoadTreasureRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBYLoadTreasureRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DBLoadRobotReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DBLoadRobotReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBYLoadRobotRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBYLoadRobotRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DBCreateRobotReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DBCreateRobotReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBYCreateRobotRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBYCreateRobotRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOBBY2DBSaveRobotReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOBBY2DBSaveRobotReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DB2LOBBYSaveRobotRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB2LOBBYSaveRobotRet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_5flobby_5fdb_2eproto() {
  protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol_lobby_db.proto");
  GOOGLE_CHECK(file != NULL);
  DbSystemSetting_descriptor_ = file->message_type(0);
  static const int DbSystemSetting_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSystemSetting, modemask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSystemSetting, modereserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSystemSetting, showcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSystemSetting, rcvinvite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSystemSetting, showaudioeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSystemSetting, showmusic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSystemSetting, showeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSystemSetting, hiddensuit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSystemSetting, reservebuff_),
  };
  DbSystemSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbSystemSetting_descriptor_,
      DbSystemSetting::default_instance_,
      DbSystemSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSystemSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSystemSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbSystemSetting));
  LOBBY2DB_LoadCharReq_descriptor_ = file->message_type(1);
  static const int LOBBY2DB_LoadCharReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadCharReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadCharReq, charid_),
  };
  LOBBY2DB_LoadCharReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_LoadCharReq_descriptor_,
      LOBBY2DB_LoadCharReq::default_instance_,
      LOBBY2DB_LoadCharReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadCharReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadCharReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_LoadCharReq));
  NationalDB_descriptor_ = file->message_type(2);
  static const int NationalDB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalDB, nationalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalDB, lastchangetime_),
  };
  NationalDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NationalDB_descriptor_,
      NationalDB::default_instance_,
      NationalDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NationalDB));
  DB2LOBBY_LoadCharRet_descriptor_ = file->message_type(3);
  static const int DB2LOBBY_LoadCharRet_offsets_[63] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, curstamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, maxstamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, updatestaminatime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, bitflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, evaluation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, chapterreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, herobagnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, herolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, essenceitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, refreshprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, festivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, lockchatendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, daychattimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, skillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, updateskillpointtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, updateenergytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, equipnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, arenaformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, assistformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, chapterbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, leavepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, gmflushtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, isshopbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, diamondpay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, recommfriends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, prizeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, avoidbattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, acconlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, itemgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, buyedprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, lastupdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, crusademaxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, crusadecurid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, int32attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, awakeheroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, tombinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, marklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, rechargechoose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, national_),
  };
  DB2LOBBY_LoadCharRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_LoadCharRet_descriptor_,
      DB2LOBBY_LoadCharRet::default_instance_,
      DB2LOBBY_LoadCharRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_LoadCharRet));
  LOBBY2DB_CharAdvancedInfo_descriptor_ = file->message_type(4);
  static const int LOBBY2DB_CharAdvancedInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CharAdvancedInfo, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CharAdvancedInfo, charid_),
  };
  LOBBY2DB_CharAdvancedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_CharAdvancedInfo_descriptor_,
      LOBBY2DB_CharAdvancedInfo::default_instance_,
      LOBBY2DB_CharAdvancedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CharAdvancedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CharAdvancedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_CharAdvancedInfo));
  DbSevenDayActive_descriptor_ = file->message_type(5);
  static const int DbSevenDayActive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSevenDayActive, mission_),
  };
  DbSevenDayActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbSevenDayActive_descriptor_,
      DbSevenDayActive::default_instance_,
      DbSevenDayActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSevenDayActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSevenDayActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbSevenDayActive));
  DbSevenDayActiveElement_descriptor_ = file->message_type(6);
  static const int DbSevenDayActiveElement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSevenDayActiveElement, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSevenDayActiveElement, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSevenDayActiveElement, step_),
  };
  DbSevenDayActiveElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbSevenDayActiveElement_descriptor_,
      DbSevenDayActiveElement::default_instance_,
      DbSevenDayActiveElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSevenDayActiveElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbSevenDayActiveElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbSevenDayActiveElement));
  DbRebelArmy_descriptor_ = file->message_type(7);
  static const int DbRebelArmy_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, owneruserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, curhealth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, attacktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, bisshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, battlevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, freecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, countrecovertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, startlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, happentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, happencount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, dayharm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, dayexploits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, dayharmbig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, curhealthbig_),
  };
  DbRebelArmy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbRebelArmy_descriptor_,
      DbRebelArmy::default_instance_,
      DbRebelArmy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRebelArmy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbRebelArmy));
  DbActionRecord_descriptor_ = file->message_type(8);
  static const int DbActionRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActionRecord, action_),
  };
  DbActionRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbActionRecord_descriptor_,
      DbActionRecord::default_instance_,
      DbActionRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActionRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActionRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbActionRecord));
  DbRaidTeam_descriptor_ = file->message_type(9);
  static const int DbRaidTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRaidTeam, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRaidTeam, lucky_),
  };
  DbRaidTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbRaidTeam_descriptor_,
      DbRaidTeam::default_instance_,
      DbRaidTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRaidTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRaidTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbRaidTeam));
  DBServerCompareGot_descriptor_ = file->message_type(10);
  static const int DBServerCompareGot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerCompareGot, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerCompareGot, mergetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerCompareGot, gots_),
  };
  DBServerCompareGot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBServerCompareGot_descriptor_,
      DBServerCompareGot::default_instance_,
      DBServerCompareGot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerCompareGot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerCompareGot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBServerCompareGot));
  DB2LOBBY_CharAdvancedInfo_descriptor_ = file->message_type(11);
  static const int DB2LOBBY_CharAdvancedInfo_offsets_[60] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, opencopperboxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, lastopencopperboxtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, lastopendiamondboxtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, totalopencopperboxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, totalopendiamondboxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, maillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, skillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, updateskillpointtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, exformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, myheros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, defenseheros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, lastarenatime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, dailyarenatimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, bestarenarank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, arformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, totalarenawin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, arenalog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, topthreetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, ackformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, dailyopendiamondboxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, signin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, totalcopperminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, totalsilverminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, totaldiamondminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, dailycopperminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, dailysilverminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, dailydiamondminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, friendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, shopflush_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, sevenday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, rebelarmy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, raidteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, goodsbuyed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, firstchargechoose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, continuechargechoose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, continuecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, handbook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, secrethole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, returntask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, territory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, diagrammap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, ghostactivelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, cheerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, titlelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, epicbosslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, sevengifts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, onlinerewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, retrieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, chatpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, chatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, compare_gots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, farm_),
  };
  DB2LOBBY_CharAdvancedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_CharAdvancedInfo_descriptor_,
      DB2LOBBY_CharAdvancedInfo::default_instance_,
      DB2LOBBY_CharAdvancedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CharAdvancedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_CharAdvancedInfo));
  LOBBY2DB_LoadCharListReq_descriptor_ = file->message_type(12);
  static const int LOBBY2DB_LoadCharListReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadCharListReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadCharListReq, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadCharListReq, sessionid_),
  };
  LOBBY2DB_LoadCharListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_LoadCharListReq_descriptor_,
      LOBBY2DB_LoadCharListReq::default_instance_,
      LOBBY2DB_LoadCharListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadCharListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadCharListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_LoadCharListReq));
  SimpleDBCharInfo_descriptor_ = file->message_type(13);
  static const int SimpleDBCharInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleDBCharInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleDBCharInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleDBCharInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleDBCharInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleDBCharInfo, avatar_),
  };
  SimpleDBCharInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleDBCharInfo_descriptor_,
      SimpleDBCharInfo::default_instance_,
      SimpleDBCharInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleDBCharInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleDBCharInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleDBCharInfo));
  DB2LOBBY_LoadCharListRet_descriptor_ = file->message_type(14);
  static const int DB2LOBBY_LoadCharListRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharListRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharListRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharListRet, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharListRet, charlist_),
  };
  DB2LOBBY_LoadCharListRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_LoadCharListRet_descriptor_,
      DB2LOBBY_LoadCharListRet::default_instance_,
      DB2LOBBY_LoadCharListRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharListRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadCharListRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_LoadCharListRet));
  LOBBY2DB_CreateCharReq_descriptor_ = file->message_type(15);
  static const int LOBBY2DB_CreateCharReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CreateCharReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CreateCharReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CreateCharReq, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CreateCharReq, deviceid_),
  };
  LOBBY2DB_CreateCharReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_CreateCharReq_descriptor_,
      LOBBY2DB_CreateCharReq::default_instance_,
      LOBBY2DB_CreateCharReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CreateCharReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CreateCharReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_CreateCharReq));
  DB2LOBBY_CreateCharRet_descriptor_ = file->message_type(16);
  static const int DB2LOBBY_CreateCharRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CreateCharRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CreateCharRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CreateCharRet, charid_),
  };
  DB2LOBBY_CreateCharRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_CreateCharRet_descriptor_,
      DB2LOBBY_CreateCharRet::default_instance_,
      DB2LOBBY_CreateCharRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CreateCharRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CreateCharRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_CreateCharRet));
  LOBBY2DB_SaveCharReq_descriptor_ = file->message_type(17);
  static const int LOBBY2DB_SaveCharReq_offsets_[63] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, serialno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, curstamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, maxstamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, updatestaminatime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, bitflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, evaluation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, chapterreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, herobagnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, herolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, essenceitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, refreshprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, festivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, daychattimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, skillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, updateskillpointtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, updateenergytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, equipnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, arenaformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, assistformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, chapterbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, maxnormalchallenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, maxelitechallenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, leavepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, gmflushtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, isshopbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, diamondpay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, recommfriends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, prizeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, avoidbattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, acconlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, itemgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, buyedprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, lastupdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, crusademaxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, crusadecurid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, int32attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, awakeheroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, tombinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, marklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, rechargechoose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, national_),
  };
  LOBBY2DB_SaveCharReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_SaveCharReq_descriptor_,
      LOBBY2DB_SaveCharReq::default_instance_,
      LOBBY2DB_SaveCharReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveCharReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_SaveCharReq));
  DB2LOBBY_SaveCharRet_descriptor_ = file->message_type(18);
  static const int DB2LOBBY_SaveCharRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_SaveCharRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_SaveCharRet, serialno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_SaveCharRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_SaveCharRet, charid_),
  };
  DB2LOBBY_SaveCharRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_SaveCharRet_descriptor_,
      DB2LOBBY_SaveCharRet::default_instance_,
      DB2LOBBY_SaveCharRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_SaveCharRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_SaveCharRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_SaveCharRet));
  LOBBY2DB_SaveAdvancedCharReq_descriptor_ = file->message_type(19);
  static const int LOBBY2DB_SaveAdvancedCharReq_offsets_[59] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, shopgoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, opencopperboxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, lastopencopperboxtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, lastopendiamondboxtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, totalopencopperboxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, totalopendiamondboxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, maillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, skillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, updateskillpointtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, exformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, myheros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, defenseheros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, lastarenatime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, dailyarenatimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, bestarenarank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, arformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, totalarenawin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, arenalog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, topthreetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, ackformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, dailyopendiamondboxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, signin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, totalcopperminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, totalsilverminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, totaldiamondminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, dailycopperminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, dailysilverminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, dailydiamondminenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, friendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, shopflush_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, sevenday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, rebelarmy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, raidteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, goodsbuyed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, firstchargechoose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, continuechargechoose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, continuecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, handbook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, secrethole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, returntask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, territory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, diagrammap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, ghostactivelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, cheerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, titlelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, epicbosslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, sevengifts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, onlinerewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, retrieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, chatpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, chatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, compare_gots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, farm_),
  };
  LOBBY2DB_SaveAdvancedCharReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_SaveAdvancedCharReq_descriptor_,
      LOBBY2DB_SaveAdvancedCharReq::default_instance_,
      LOBBY2DB_SaveAdvancedCharReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveAdvancedCharReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_SaveAdvancedCharReq));
  RetrieveDB_descriptor_ = file->message_type(20);
  static const int RetrieveDB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieveDB, today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieveDB, yesterday_),
  };
  RetrieveDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetrieveDB_descriptor_,
      RetrieveDB::default_instance_,
      RetrieveDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieveDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieveDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetrieveDB));
  DB2LOBBY_SaveAdvancedCharRet_descriptor_ = file->message_type(21);
  static const int DB2LOBBY_SaveAdvancedCharRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_SaveAdvancedCharRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_SaveAdvancedCharRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_SaveAdvancedCharRet, charid_),
  };
  DB2LOBBY_SaveAdvancedCharRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_SaveAdvancedCharRet_descriptor_,
      DB2LOBBY_SaveAdvancedCharRet::default_instance_,
      DB2LOBBY_SaveAdvancedCharRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_SaveAdvancedCharRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_SaveAdvancedCharRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_SaveAdvancedCharRet));
  LOBBY2DB_LoadBagReq_descriptor_ = file->message_type(22);
  static const int LOBBY2DB_LoadBagReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadBagReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadBagReq, charid_),
  };
  LOBBY2DB_LoadBagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_LoadBagReq_descriptor_,
      LOBBY2DB_LoadBagReq::default_instance_,
      LOBBY2DB_LoadBagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadBagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadBagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_LoadBagReq));
  DB2LOBBY_LoadBagRet_descriptor_ = file->message_type(23);
  static const int DB2LOBBY_LoadBagRet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadBagRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadBagRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadBagRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadBagRet, curbagnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadBagRet, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadBagRet, seedbag_),
  };
  DB2LOBBY_LoadBagRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_LoadBagRet_descriptor_,
      DB2LOBBY_LoadBagRet::default_instance_,
      DB2LOBBY_LoadBagRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadBagRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadBagRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_LoadBagRet));
  DB2LOBBY_CheckTokenRet_descriptor_ = file->message_type(24);
  static const int DB2LOBBY_CheckTokenRet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CheckTokenRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CheckTokenRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CheckTokenRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CheckTokenRet, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CheckTokenRet, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CheckTokenRet, deviceuid_),
  };
  DB2LOBBY_CheckTokenRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_CheckTokenRet_descriptor_,
      DB2LOBBY_CheckTokenRet::default_instance_,
      DB2LOBBY_CheckTokenRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CheckTokenRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_CheckTokenRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_CheckTokenRet));
  LOBBY2DB_SaveBagReq_descriptor_ = file->message_type(25);
  static const int LOBBY2DB_SaveBagReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveBagReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveBagReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveBagReq, issavebag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveBagReq, curbagnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveBagReq, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveBagReq, seedbag_),
  };
  LOBBY2DB_SaveBagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_SaveBagReq_descriptor_,
      LOBBY2DB_SaveBagReq::default_instance_,
      LOBBY2DB_SaveBagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveBagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SaveBagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_SaveBagReq));
  LOBBY2DB_AddDiamondReq_descriptor_ = file->message_type(26);
  static const int LOBBY2DB_AddDiamondReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddDiamondReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddDiamondReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddDiamondReq, adddiamond_),
  };
  LOBBY2DB_AddDiamondReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_AddDiamondReq_descriptor_,
      LOBBY2DB_AddDiamondReq::default_instance_,
      LOBBY2DB_AddDiamondReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddDiamondReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddDiamondReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_AddDiamondReq));
  LOBBY2DB_ChangeNameCheckReq_descriptor_ = file->message_type(27);
  static const int LOBBY2DB_ChangeNameCheckReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ChangeNameCheckReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ChangeNameCheckReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ChangeNameCheckReq, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ChangeNameCheckReq, cmd_),
  };
  LOBBY2DB_ChangeNameCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_ChangeNameCheckReq_descriptor_,
      LOBBY2DB_ChangeNameCheckReq::default_instance_,
      LOBBY2DB_ChangeNameCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ChangeNameCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ChangeNameCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_ChangeNameCheckReq));
  DB2LOBBY_ChangeNameCheckRet_descriptor_ = file->message_type(28);
  static const int DB2LOBBY_ChangeNameCheckRet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ChangeNameCheckRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ChangeNameCheckRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ChangeNameCheckRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ChangeNameCheckRet, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ChangeNameCheckRet, cmd_),
  };
  DB2LOBBY_ChangeNameCheckRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_ChangeNameCheckRet_descriptor_,
      DB2LOBBY_ChangeNameCheckRet::default_instance_,
      DB2LOBBY_ChangeNameCheckRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ChangeNameCheckRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ChangeNameCheckRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_ChangeNameCheckRet));
  LOBBY2DBLoadWorldReq_descriptor_ = file->message_type(29);
  static const int LOBBY2DBLoadWorldReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBLoadWorldReq, cmdid_),
  };
  LOBBY2DBLoadWorldReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DBLoadWorldReq_descriptor_,
      LOBBY2DBLoadWorldReq::default_instance_,
      LOBBY2DBLoadWorldReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBLoadWorldReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBLoadWorldReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DBLoadWorldReq));
  DB2LOBBYLoadWorldRet_descriptor_ = file->message_type(30);
  static const int DB2LOBBYLoadWorldRet_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, weekboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, daybox_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, daybox_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, daybox_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, arenaheros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, openservertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, halfbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, achieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, globalitemgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, passwordgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, sevendayrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, boxdrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, maillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, astrologycountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, astrologycountrynexttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, rebatecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, herochangedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, chatpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, maxrobotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, robotname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, robotidcollection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, robotindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, monthcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, heroqualitychangedtime_),
  };
  DB2LOBBYLoadWorldRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBYLoadWorldRet_descriptor_,
      DB2LOBBYLoadWorldRet::default_instance_,
      DB2LOBBYLoadWorldRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadWorldRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBYLoadWorldRet));
  DB2LOBBY_Server_descriptor_ = file->message_type(31);
  static const int DB2LOBBY_Server_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_Server, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_Server, ret_),
  };
  DB2LOBBY_Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_Server_descriptor_,
      DB2LOBBY_Server::default_instance_,
      DB2LOBBY_Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_Server));
  LOBBY2DB_UpdateSupremeHotBox_descriptor_ = file->message_type(32);
  static const int LOBBY2DB_UpdateSupremeHotBox_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, weekboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, daybox_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, daybox_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, daybox_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, openservertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, halfbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, achieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, globalitemgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, passwordgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, sevendayrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, boxdrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, astrologycountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, astrologycountrynexttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, rebatecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, herochangedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, chatpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, monthcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, heroqualitychangedtime_),
  };
  LOBBY2DB_UpdateSupremeHotBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateSupremeHotBox_descriptor_,
      LOBBY2DB_UpdateSupremeHotBox::default_instance_,
      LOBBY2DB_UpdateSupremeHotBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateSupremeHotBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateSupremeHotBox));
  LOBBY2DB_UpdateArenaRank_descriptor_ = file->message_type(33);
  static const int LOBBY2DB_UpdateArenaRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaRank, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaRank, arenaheros_),
  };
  LOBBY2DB_UpdateArenaRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateArenaRank_descriptor_,
      LOBBY2DB_UpdateArenaRank::default_instance_,
      LOBBY2DB_UpdateArenaRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateArenaRank));
  LOBBY2DB_UpdateArenaLog_descriptor_ = file->message_type(34);
  static const int LOBBY2DB_UpdateArenaLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaLog, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaLog, arenalog_),
  };
  LOBBY2DB_UpdateArenaLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateArenaLog_descriptor_,
      LOBBY2DB_UpdateArenaLog::default_instance_,
      LOBBY2DB_UpdateArenaLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateArenaLog));
  LOBBY2DB_OfflineMail_descriptor_ = file->message_type(35);
  static const int LOBBY2DB_OfflineMail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_OfflineMail, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_OfflineMail, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_OfflineMail, mailinfo_),
  };
  LOBBY2DB_OfflineMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_OfflineMail_descriptor_,
      LOBBY2DB_OfflineMail::default_instance_,
      LOBBY2DB_OfflineMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_OfflineMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_OfflineMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_OfflineMail));
  DB2LOBBY_LoadOfflineMail_descriptor_ = file->message_type(36);
  static const int DB2LOBBY_LoadOfflineMail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadOfflineMail, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadOfflineMail, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadOfflineMail, maillist_),
  };
  DB2LOBBY_LoadOfflineMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_LoadOfflineMail_descriptor_,
      DB2LOBBY_LoadOfflineMail::default_instance_,
      DB2LOBBY_LoadOfflineMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadOfflineMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadOfflineMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_LoadOfflineMail));
  LOBBY2DB_LoadOfflineMail_descriptor_ = file->message_type(37);
  static const int LOBBY2DB_LoadOfflineMail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadOfflineMail, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadOfflineMail, charid_),
  };
  LOBBY2DB_LoadOfflineMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_LoadOfflineMail_descriptor_,
      LOBBY2DB_LoadOfflineMail::default_instance_,
      LOBBY2DB_LoadOfflineMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadOfflineMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadOfflineMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_LoadOfflineMail));
  LOBBY2DB_CheckTokenReq_descriptor_ = file->message_type(38);
  static const int LOBBY2DB_CheckTokenReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CheckTokenReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CheckTokenReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CheckTokenReq, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CheckTokenReq, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CheckTokenReq, deviceuid_),
  };
  LOBBY2DB_CheckTokenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_CheckTokenReq_descriptor_,
      LOBBY2DB_CheckTokenReq::default_instance_,
      LOBBY2DB_CheckTokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CheckTokenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_CheckTokenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_CheckTokenReq));
  LOBBY2DB_Server_descriptor_ = file->message_type(39);
  static const int LOBBY2DB_Server_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, localip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, onlinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, sourceip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, sourcedir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, canlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, sourceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, loginstrategyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, canregister_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, mergetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, lastmergetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, centerport_),
  };
  LOBBY2DB_Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_Server_descriptor_,
      LOBBY2DB_Server::default_instance_,
      LOBBY2DB_Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_Server));
  LOBBY2DB_ApplyFriend_descriptor_ = file->message_type(40);
  static const int LOBBY2DB_ApplyFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ApplyFriend, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ApplyFriend, charinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ApplyFriend, dstcharid_),
  };
  LOBBY2DB_ApplyFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_ApplyFriend_descriptor_,
      LOBBY2DB_ApplyFriend::default_instance_,
      LOBBY2DB_ApplyFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ApplyFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ApplyFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_ApplyFriend));
  DB2LOBBY_ApplyFriend_descriptor_ = file->message_type(41);
  static const int DB2LOBBY_ApplyFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ApplyFriend, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ApplyFriend, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ApplyFriend, charid_),
  };
  DB2LOBBY_ApplyFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_ApplyFriend_descriptor_,
      DB2LOBBY_ApplyFriend::default_instance_,
      DB2LOBBY_ApplyFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ApplyFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_ApplyFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_ApplyFriend));
  LOBBY2DB_AddFriend_descriptor_ = file->message_type(42);
  static const int LOBBY2DB_AddFriend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddFriend, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddFriend, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddFriend, dstcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddFriend, charinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddFriend, bagree_),
  };
  LOBBY2DB_AddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_AddFriend_descriptor_,
      LOBBY2DB_AddFriend::default_instance_,
      LOBBY2DB_AddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_AddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_AddFriend));
  DB2LOBBY_AddFriend_descriptor_ = file->message_type(43);
  static const int DB2LOBBY_AddFriend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_AddFriend, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_AddFriend, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_AddFriend, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_AddFriend, dstcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_AddFriend, bagree_),
  };
  DB2LOBBY_AddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_AddFriend_descriptor_,
      DB2LOBBY_AddFriend::default_instance_,
      DB2LOBBY_AddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_AddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_AddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_AddFriend));
  LOBBY2DB_DelFriend_descriptor_ = file->message_type(44);
  static const int LOBBY2DB_DelFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_DelFriend, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_DelFriend, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_DelFriend, dstcharid_),
  };
  LOBBY2DB_DelFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_DelFriend_descriptor_,
      LOBBY2DB_DelFriend::default_instance_,
      LOBBY2DB_DelFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_DelFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_DelFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_DelFriend));
  DB2LOBBY_DelFriend_descriptor_ = file->message_type(45);
  static const int DB2LOBBY_DelFriend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_DelFriend, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_DelFriend, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_DelFriend, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_DelFriend, dstcharid_),
  };
  DB2LOBBY_DelFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_DelFriend_descriptor_,
      DB2LOBBY_DelFriend::default_instance_,
      DB2LOBBY_DelFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_DelFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_DelFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_DelFriend));
  LOBBY2DB_SendEnergy_descriptor_ = file->message_type(46);
  static const int LOBBY2DB_SendEnergy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SendEnergy, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SendEnergy, dstcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SendEnergy, mycharid_),
  };
  LOBBY2DB_SendEnergy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_SendEnergy_descriptor_,
      LOBBY2DB_SendEnergy::default_instance_,
      LOBBY2DB_SendEnergy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SendEnergy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_SendEnergy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_SendEnergy));
  LOBBY2DB_PurchaseInfo_descriptor_ = file->message_type(47);
  static const int LOBBY2DB_PurchaseInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_PurchaseInfo, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_PurchaseInfo, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_PurchaseInfo, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_PurchaseInfo, goodsquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_PurchaseInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_PurchaseInfo, diamondpaiduse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_PurchaseInfo, time_),
  };
  LOBBY2DB_PurchaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_PurchaseInfo_descriptor_,
      LOBBY2DB_PurchaseInfo::default_instance_,
      LOBBY2DB_PurchaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_PurchaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_PurchaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_PurchaseInfo));
  DB2LOBBY_Shop_descriptor_ = file->message_type(48);
  static const int DB2LOBBY_Shop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_Shop, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_Shop, shopitem_),
  };
  DB2LOBBY_Shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_Shop_descriptor_,
      DB2LOBBY_Shop::default_instance_,
      DB2LOBBY_Shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_Shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_Shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_Shop));
  LOBBY2DB_GetTargetFriendInfo_descriptor_ = file->message_type(49);
  static const int LOBBY2DB_GetTargetFriendInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_GetTargetFriendInfo, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_GetTargetFriendInfo, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_GetTargetFriendInfo, dstcharid_),
  };
  LOBBY2DB_GetTargetFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_GetTargetFriendInfo_descriptor_,
      LOBBY2DB_GetTargetFriendInfo::default_instance_,
      LOBBY2DB_GetTargetFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_GetTargetFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_GetTargetFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_GetTargetFriendInfo));
  DB2LOBBY_GetTargetFriendInfo_descriptor_ = file->message_type(50);
  static const int DB2LOBBY_GetTargetFriendInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GetTargetFriendInfo, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GetTargetFriendInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GetTargetFriendInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GetTargetFriendInfo, bfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GetTargetFriendInfo, black_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GetTargetFriendInfo, apply_),
  };
  DB2LOBBY_GetTargetFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_GetTargetFriendInfo_descriptor_,
      DB2LOBBY_GetTargetFriendInfo::default_instance_,
      DB2LOBBY_GetTargetFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GetTargetFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GetTargetFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_GetTargetFriendInfo));
  LOBBY2DBGetTargetUserinfoReq_descriptor_ = file->message_type(51);
  static const int LOBBY2DBGetTargetUserinfoReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBGetTargetUserinfoReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBGetTargetUserinfoReq, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBGetTargetUserinfoReq, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBGetTargetUserinfoReq, dstcharid_),
  };
  LOBBY2DBGetTargetUserinfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DBGetTargetUserinfoReq_descriptor_,
      LOBBY2DBGetTargetUserinfoReq::default_instance_,
      LOBBY2DBGetTargetUserinfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBGetTargetUserinfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBGetTargetUserinfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DBGetTargetUserinfoReq));
  DB2LOBBYGetTargetUserinfoRet_descriptor_ = file->message_type(52);
  static const int DB2LOBBYGetTargetUserinfoRet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetTargetUserinfoRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetTargetUserinfoRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetTargetUserinfoRet, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetTargetUserinfoRet, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetTargetUserinfoRet, dstcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetTargetUserinfoRet, other_),
  };
  DB2LOBBYGetTargetUserinfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBYGetTargetUserinfoRet_descriptor_,
      DB2LOBBYGetTargetUserinfoRet::default_instance_,
      DB2LOBBYGetTargetUserinfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetTargetUserinfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetTargetUserinfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBYGetTargetUserinfoRet));
  LOBBY2DBGetRecommandFriendReq_descriptor_ = file->message_type(53);
  static const int LOBBY2DBGetRecommandFriendReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBGetRecommandFriendReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBGetRecommandFriendReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBGetRecommandFriendReq, level_),
  };
  LOBBY2DBGetRecommandFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DBGetRecommandFriendReq_descriptor_,
      LOBBY2DBGetRecommandFriendReq::default_instance_,
      LOBBY2DBGetRecommandFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBGetRecommandFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBGetRecommandFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DBGetRecommandFriendReq));
  DB2LOBBYGetRecommandFriendRet_descriptor_ = file->message_type(54);
  static const int DB2LOBBYGetRecommandFriendRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetRecommandFriendRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetRecommandFriendRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetRecommandFriendRet, recommandlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetRecommandFriendRet, recommandbiglist_),
  };
  DB2LOBBYGetRecommandFriendRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBYGetRecommandFriendRet_descriptor_,
      DB2LOBBYGetRecommandFriendRet::default_instance_,
      DB2LOBBYGetRecommandFriendRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetRecommandFriendRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYGetRecommandFriendRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBYGetRecommandFriendRet));
  DbActivity_descriptor_ = file->message_type(55);
  static const int DbActivity_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, closed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, opentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, actype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, showbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, showendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, playerlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, todaytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, childdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, values2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, activetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, countdown_),
  };
  DbActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbActivity_descriptor_,
      DbActivity::default_instance_,
      DbActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbActivity));
  LOBBY2DB_LoadActivityReq_descriptor_ = file->message_type(56);
  static const int LOBBY2DB_LoadActivityReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadActivityReq, cmdid_),
  };
  LOBBY2DB_LoadActivityReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_LoadActivityReq_descriptor_,
      LOBBY2DB_LoadActivityReq::default_instance_,
      LOBBY2DB_LoadActivityReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadActivityReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadActivityReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_LoadActivityReq));
  DB2LOBBY_LoadActivityRet_descriptor_ = file->message_type(57);
  static const int DB2LOBBY_LoadActivityRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadActivityRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadActivityRet, items_),
  };
  DB2LOBBY_LoadActivityRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_LoadActivityRet_descriptor_,
      DB2LOBBY_LoadActivityRet::default_instance_,
      DB2LOBBY_LoadActivityRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadActivityRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadActivityRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_LoadActivityRet));
  LOBBY2DB_UpdateActivityReq_descriptor_ = file->message_type(58);
  static const int LOBBY2DB_UpdateActivityReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateActivityReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateActivityReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateActivityReq, item_),
  };
  LOBBY2DB_UpdateActivityReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateActivityReq_descriptor_,
      LOBBY2DB_UpdateActivityReq::default_instance_,
      LOBBY2DB_UpdateActivityReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateActivityReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateActivityReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateActivityReq));
  DbRank_descriptor_ = file->message_type(59);
  static const int DbRank_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRank, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRank, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRank, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRank, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRank, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRank, instancevalue_),
  };
  DbRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbRank_descriptor_,
      DbRank::default_instance_,
      DbRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbRank));
  LOBBY2DB_LoadRankReq_descriptor_ = file->message_type(60);
  static const int LOBBY2DB_LoadRankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadRankReq, cmdid_),
  };
  LOBBY2DB_LoadRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_LoadRankReq_descriptor_,
      LOBBY2DB_LoadRankReq::default_instance_,
      LOBBY2DB_LoadRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_LoadRankReq));
  DB2LOBBY_LoadRankRet_descriptor_ = file->message_type(61);
  static const int DB2LOBBY_LoadRankRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadRankRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadRankRet, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadRankRet, ret_),
  };
  DB2LOBBY_LoadRankRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_LoadRankRet_descriptor_,
      DB2LOBBY_LoadRankRet::default_instance_,
      DB2LOBBY_LoadRankRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadRankRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadRankRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_LoadRankRet));
  LOBBY2DB_UpdateRankReq_descriptor_ = file->message_type(62);
  static const int LOBBY2DB_UpdateRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateRankReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateRankReq, item_),
  };
  LOBBY2DB_UpdateRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateRankReq_descriptor_,
      LOBBY2DB_UpdateRankReq::default_instance_,
      LOBBY2DB_UpdateRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateRankReq));
  LOBBY2DB_ClearRankReq_descriptor_ = file->message_type(63);
  static const int LOBBY2DB_ClearRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearRankReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearRankReq, type_),
  };
  LOBBY2DB_ClearRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_ClearRankReq_descriptor_,
      LOBBY2DB_ClearRankReq::default_instance_,
      LOBBY2DB_ClearRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_ClearRankReq));
  LOBBY2DB_ClearPlayerRank_Req_descriptor_ = file->message_type(64);
  static const int LOBBY2DB_ClearPlayerRank_Req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearPlayerRank_Req, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearPlayerRank_Req, charid_),
  };
  LOBBY2DB_ClearPlayerRank_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_ClearPlayerRank_Req_descriptor_,
      LOBBY2DB_ClearPlayerRank_Req::default_instance_,
      LOBBY2DB_ClearPlayerRank_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearPlayerRank_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearPlayerRank_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_ClearPlayerRank_Req));
  DbArena_descriptor_ = file->message_type(65);
  static const int DbArena_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbArena, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbArena, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbArena, bestrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbArena, top3time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbArena, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbArena, enemysrank_),
  };
  DbArena_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbArena_descriptor_,
      DbArena::default_instance_,
      DbArena_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbArena, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbArena, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbArena));
  LOBBY2DB_LoadArenaReq_descriptor_ = file->message_type(66);
  static const int LOBBY2DB_LoadArenaReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadArenaReq, cmdid_),
  };
  LOBBY2DB_LoadArenaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_LoadArenaReq_descriptor_,
      LOBBY2DB_LoadArenaReq::default_instance_,
      LOBBY2DB_LoadArenaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadArenaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadArenaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_LoadArenaReq));
  DB2LOBBY_LoadArenaRet_descriptor_ = file->message_type(67);
  static const int DB2LOBBY_LoadArenaRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadArenaRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadArenaRet, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadArenaRet, ret_),
  };
  DB2LOBBY_LoadArenaRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_LoadArenaRet_descriptor_,
      DB2LOBBY_LoadArenaRet::default_instance_,
      DB2LOBBY_LoadArenaRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadArenaRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadArenaRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_LoadArenaRet));
  LOBBY2DB_UpdateArenaReq_descriptor_ = file->message_type(68);
  static const int LOBBY2DB_UpdateArenaReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaReq, item_),
  };
  LOBBY2DB_UpdateArenaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateArenaReq_descriptor_,
      LOBBY2DB_UpdateArenaReq::default_instance_,
      LOBBY2DB_UpdateArenaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateArenaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateArenaReq));
  DBServerCompare_descriptor_ = file->message_type(69);
  static const int DBServerCompare_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerCompare, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerCompare, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerCompare, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerCompare, value_),
  };
  DBServerCompare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBServerCompare_descriptor_,
      DBServerCompare::default_instance_,
      DBServerCompare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerCompare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerCompare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBServerCompare));
  LOBBY2DB_LoadServerCompare_Req_descriptor_ = file->message_type(70);
  static const int LOBBY2DB_LoadServerCompare_Req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadServerCompare_Req, cmdid_),
  };
  LOBBY2DB_LoadServerCompare_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_LoadServerCompare_Req_descriptor_,
      LOBBY2DB_LoadServerCompare_Req::default_instance_,
      LOBBY2DB_LoadServerCompare_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadServerCompare_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadServerCompare_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_LoadServerCompare_Req));
  DB2LOBBY_LoadServerCompare_Ret_descriptor_ = file->message_type(71);
  static const int DB2LOBBY_LoadServerCompare_Ret_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadServerCompare_Ret, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadServerCompare_Ret, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadServerCompare_Ret, compare_info_),
  };
  DB2LOBBY_LoadServerCompare_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_LoadServerCompare_Ret_descriptor_,
      DB2LOBBY_LoadServerCompare_Ret::default_instance_,
      DB2LOBBY_LoadServerCompare_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadServerCompare_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_LoadServerCompare_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_LoadServerCompare_Ret));
  LOBBY2DB_UpdateServerCompare_Req_descriptor_ = file->message_type(72);
  static const int LOBBY2DB_UpdateServerCompare_Req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateServerCompare_Req, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateServerCompare_Req, compare_info_),
  };
  LOBBY2DB_UpdateServerCompare_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateServerCompare_Req_descriptor_,
      LOBBY2DB_UpdateServerCompare_Req::default_instance_,
      LOBBY2DB_UpdateServerCompare_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateServerCompare_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateServerCompare_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateServerCompare_Req));
  LOBBY2DB_ClearServerCompare_Req_descriptor_ = file->message_type(73);
  static const int LOBBY2DB_ClearServerCompare_Req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearServerCompare_Req, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearServerCompare_Req, type_),
  };
  LOBBY2DB_ClearServerCompare_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_ClearServerCompare_Req_descriptor_,
      LOBBY2DB_ClearServerCompare_Req::default_instance_,
      LOBBY2DB_ClearServerCompare_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearServerCompare_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_ClearServerCompare_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_ClearServerCompare_Req));
  DBGuildPlayer_descriptor_ = file->message_type(74);
  static const int DBGuildPlayer_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, jointime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, ritual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, rewardgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, ritualtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, ratereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, territory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, skill_level_),
  };
  DBGuildPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBGuildPlayer_descriptor_,
      DBGuildPlayer::default_instance_,
      DBGuildPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBGuildPlayer));
  DBGuildApply_descriptor_ = file->message_type(75);
  static const int DBGuildApply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildApply, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildApply, guildid_),
  };
  DBGuildApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBGuildApply_descriptor_,
      DBGuildApply::default_instance_,
      DBGuildApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBGuildApply));
  DBGuildInfo_descriptor_ = file->message_type(76);
  static const int DBGuildInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildInfo, guild_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildInfo, passed_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildInfo, chapter_),
  };
  DBGuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBGuildInfo_descriptor_,
      DBGuildInfo::default_instance_,
      DBGuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBGuildInfo));
  LOBBY2DB_LoadGuild_Req_descriptor_ = file->message_type(77);
  static const int LOBBY2DB_LoadGuild_Req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadGuild_Req, cmdid_),
  };
  LOBBY2DB_LoadGuild_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_LoadGuild_Req_descriptor_,
      LOBBY2DB_LoadGuild_Req::default_instance_,
      LOBBY2DB_LoadGuild_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadGuild_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_LoadGuild_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_LoadGuild_Req));
  DB2LOBBY_GuildInfo_Ret_descriptor_ = file->message_type(78);
  static const int DB2LOBBY_GuildInfo_Ret_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildInfo_Ret, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildInfo_Ret, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildInfo_Ret, ret_),
  };
  DB2LOBBY_GuildInfo_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_GuildInfo_Ret_descriptor_,
      DB2LOBBY_GuildInfo_Ret::default_instance_,
      DB2LOBBY_GuildInfo_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildInfo_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildInfo_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_GuildInfo_Ret));
  DB2LOBBY_GuildPlayers_Ret_descriptor_ = file->message_type(79);
  static const int DB2LOBBY_GuildPlayers_Ret_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildPlayers_Ret, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildPlayers_Ret, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildPlayers_Ret, ret_),
  };
  DB2LOBBY_GuildPlayers_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_GuildPlayers_Ret_descriptor_,
      DB2LOBBY_GuildPlayers_Ret::default_instance_,
      DB2LOBBY_GuildPlayers_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildPlayers_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildPlayers_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_GuildPlayers_Ret));
  DB2LOBBY_GuildApplys_Ret_descriptor_ = file->message_type(80);
  static const int DB2LOBBY_GuildApplys_Ret_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildApplys_Ret, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildApplys_Ret, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildApplys_Ret, ret_),
  };
  DB2LOBBY_GuildApplys_Ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBY_GuildApplys_Ret_descriptor_,
      DB2LOBBY_GuildApplys_Ret::default_instance_,
      DB2LOBBY_GuildApplys_Ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildApplys_Ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBY_GuildApplys_Ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBY_GuildApplys_Ret));
  LOBBY2DB_UpdateGuildInfo_Req_descriptor_ = file->message_type(81);
  static const int LOBBY2DB_UpdateGuildInfo_Req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildInfo_Req, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildInfo_Req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildInfo_Req, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildInfo_Req, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildInfo_Req, guild_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildInfo_Req, passed_chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildInfo_Req, chapter_),
  };
  LOBBY2DB_UpdateGuildInfo_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateGuildInfo_Req_descriptor_,
      LOBBY2DB_UpdateGuildInfo_Req::default_instance_,
      LOBBY2DB_UpdateGuildInfo_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildInfo_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildInfo_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateGuildInfo_Req));
  LOBBY2DB_UpdateGuildPlayer_Req_descriptor_ = file->message_type(82);
  static const int LOBBY2DB_UpdateGuildPlayer_Req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildPlayer_Req, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildPlayer_Req, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildPlayer_Req, territory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildPlayer_Req, territory_charid_),
  };
  LOBBY2DB_UpdateGuildPlayer_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateGuildPlayer_Req_descriptor_,
      LOBBY2DB_UpdateGuildPlayer_Req::default_instance_,
      LOBBY2DB_UpdateGuildPlayer_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildPlayer_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildPlayer_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateGuildPlayer_Req));
  LOBBY2DB_UpdateGuildApply_Req_descriptor_ = file->message_type(83);
  static const int LOBBY2DB_UpdateGuildApply_Req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildApply_Req, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildApply_Req, item_),
  };
  LOBBY2DB_UpdateGuildApply_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateGuildApply_Req_descriptor_,
      LOBBY2DB_UpdateGuildApply_Req::default_instance_,
      LOBBY2DB_UpdateGuildApply_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildApply_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildApply_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateGuildApply_Req));
  LOBBY2DB_UpdateGuildRitual_Req_descriptor_ = file->message_type(84);
  static const int LOBBY2DB_UpdateGuildRitual_Req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildRitual_Req, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildRitual_Req, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildRitual_Req, rate_),
  };
  LOBBY2DB_UpdateGuildRitual_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateGuildRitual_Req_descriptor_,
      LOBBY2DB_UpdateGuildRitual_Req::default_instance_,
      LOBBY2DB_UpdateGuildRitual_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildRitual_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildRitual_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateGuildRitual_Req));
  LOBBY2DB_UpdateGuildNewDay_Req_descriptor_ = file->message_type(85);
  static const int LOBBY2DB_UpdateGuildNewDay_Req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildNewDay_Req, cmdid_),
  };
  LOBBY2DB_UpdateGuildNewDay_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DB_UpdateGuildNewDay_Req_descriptor_,
      LOBBY2DB_UpdateGuildNewDay_Req::default_instance_,
      LOBBY2DB_UpdateGuildNewDay_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildNewDay_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DB_UpdateGuildNewDay_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DB_UpdateGuildNewDay_Req));
  LOBBY2DBLoadTreasureReq_descriptor_ = file->message_type(86);
  static const int LOBBY2DBLoadTreasureReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBLoadTreasureReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBLoadTreasureReq, level_),
  };
  LOBBY2DBLoadTreasureReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DBLoadTreasureReq_descriptor_,
      LOBBY2DBLoadTreasureReq::default_instance_,
      LOBBY2DBLoadTreasureReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBLoadTreasureReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBLoadTreasureReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DBLoadTreasureReq));
  DB2LOBBYLoadTreasureRet_descriptor_ = file->message_type(87);
  static const int DB2LOBBYLoadTreasureRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadTreasureRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadTreasureRet, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadTreasureRet, ret_),
  };
  DB2LOBBYLoadTreasureRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBYLoadTreasureRet_descriptor_,
      DB2LOBBYLoadTreasureRet::default_instance_,
      DB2LOBBYLoadTreasureRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadTreasureRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadTreasureRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBYLoadTreasureRet));
  LOBBY2DBLoadRobotReq_descriptor_ = file->message_type(88);
  static const int LOBBY2DBLoadRobotReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBLoadRobotReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBLoadRobotReq, charid_),
  };
  LOBBY2DBLoadRobotReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DBLoadRobotReq_descriptor_,
      LOBBY2DBLoadRobotReq::default_instance_,
      LOBBY2DBLoadRobotReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBLoadRobotReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBLoadRobotReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DBLoadRobotReq));
  DB2LOBBYLoadRobotRet_descriptor_ = file->message_type(89);
  static const int DB2LOBBYLoadRobotRet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadRobotRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadRobotRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadRobotRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadRobotRet, charinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadRobotRet, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadRobotRet, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadRobotRet, growupindex_),
  };
  DB2LOBBYLoadRobotRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBYLoadRobotRet_descriptor_,
      DB2LOBBYLoadRobotRet::default_instance_,
      DB2LOBBYLoadRobotRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadRobotRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYLoadRobotRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBYLoadRobotRet));
  LOBBY2DBCreateRobotReq_descriptor_ = file->message_type(90);
  static const int LOBBY2DBCreateRobotReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBCreateRobotReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBCreateRobotReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBCreateRobotReq, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBCreateRobotReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBCreateRobotReq, ownerid_),
  };
  LOBBY2DBCreateRobotReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DBCreateRobotReq_descriptor_,
      LOBBY2DBCreateRobotReq::default_instance_,
      LOBBY2DBCreateRobotReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBCreateRobotReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBCreateRobotReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DBCreateRobotReq));
  DB2LOBBYCreateRobotRet_descriptor_ = file->message_type(91);
  static const int DB2LOBBYCreateRobotRet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYCreateRobotRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYCreateRobotRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYCreateRobotRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYCreateRobotRet, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYCreateRobotRet, ownerid_),
  };
  DB2LOBBYCreateRobotRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBYCreateRobotRet_descriptor_,
      DB2LOBBYCreateRobotRet::default_instance_,
      DB2LOBBYCreateRobotRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYCreateRobotRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYCreateRobotRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBYCreateRobotRet));
  LOBBY2DBSaveRobotReq_descriptor_ = file->message_type(92);
  static const int LOBBY2DBSaveRobotReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBSaveRobotReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBSaveRobotReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBSaveRobotReq, charinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBSaveRobotReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBSaveRobotReq, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBSaveRobotReq, growupindex_),
  };
  LOBBY2DBSaveRobotReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOBBY2DBSaveRobotReq_descriptor_,
      LOBBY2DBSaveRobotReq::default_instance_,
      LOBBY2DBSaveRobotReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBSaveRobotReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOBBY2DBSaveRobotReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOBBY2DBSaveRobotReq));
  DB2LOBBYSaveRobotRet_descriptor_ = file->message_type(93);
  static const int DB2LOBBYSaveRobotRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYSaveRobotRet, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYSaveRobotRet, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYSaveRobotRet, charid_),
  };
  DB2LOBBYSaveRobotRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB2LOBBYSaveRobotRet_descriptor_,
      DB2LOBBYSaveRobotRet::default_instance_,
      DB2LOBBYSaveRobotRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYSaveRobotRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB2LOBBYSaveRobotRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB2LOBBYSaveRobotRet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_5flobby_5fdb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbSystemSetting_descriptor_, &DbSystemSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_LoadCharReq_descriptor_, &LOBBY2DB_LoadCharReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NationalDB_descriptor_, &NationalDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_LoadCharRet_descriptor_, &DB2LOBBY_LoadCharRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_CharAdvancedInfo_descriptor_, &LOBBY2DB_CharAdvancedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbSevenDayActive_descriptor_, &DbSevenDayActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbSevenDayActiveElement_descriptor_, &DbSevenDayActiveElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbRebelArmy_descriptor_, &DbRebelArmy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbActionRecord_descriptor_, &DbActionRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbRaidTeam_descriptor_, &DbRaidTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBServerCompareGot_descriptor_, &DBServerCompareGot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_CharAdvancedInfo_descriptor_, &DB2LOBBY_CharAdvancedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_LoadCharListReq_descriptor_, &LOBBY2DB_LoadCharListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleDBCharInfo_descriptor_, &SimpleDBCharInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_LoadCharListRet_descriptor_, &DB2LOBBY_LoadCharListRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_CreateCharReq_descriptor_, &LOBBY2DB_CreateCharReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_CreateCharRet_descriptor_, &DB2LOBBY_CreateCharRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_SaveCharReq_descriptor_, &LOBBY2DB_SaveCharReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_SaveCharRet_descriptor_, &DB2LOBBY_SaveCharRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_SaveAdvancedCharReq_descriptor_, &LOBBY2DB_SaveAdvancedCharReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetrieveDB_descriptor_, &RetrieveDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_SaveAdvancedCharRet_descriptor_, &DB2LOBBY_SaveAdvancedCharRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_LoadBagReq_descriptor_, &LOBBY2DB_LoadBagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_LoadBagRet_descriptor_, &DB2LOBBY_LoadBagRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_CheckTokenRet_descriptor_, &DB2LOBBY_CheckTokenRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_SaveBagReq_descriptor_, &LOBBY2DB_SaveBagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_AddDiamondReq_descriptor_, &LOBBY2DB_AddDiamondReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_ChangeNameCheckReq_descriptor_, &LOBBY2DB_ChangeNameCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_ChangeNameCheckRet_descriptor_, &DB2LOBBY_ChangeNameCheckRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DBLoadWorldReq_descriptor_, &LOBBY2DBLoadWorldReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBYLoadWorldRet_descriptor_, &DB2LOBBYLoadWorldRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_Server_descriptor_, &DB2LOBBY_Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateSupremeHotBox_descriptor_, &LOBBY2DB_UpdateSupremeHotBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateArenaRank_descriptor_, &LOBBY2DB_UpdateArenaRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateArenaLog_descriptor_, &LOBBY2DB_UpdateArenaLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_OfflineMail_descriptor_, &LOBBY2DB_OfflineMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_LoadOfflineMail_descriptor_, &DB2LOBBY_LoadOfflineMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_LoadOfflineMail_descriptor_, &LOBBY2DB_LoadOfflineMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_CheckTokenReq_descriptor_, &LOBBY2DB_CheckTokenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_Server_descriptor_, &LOBBY2DB_Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_ApplyFriend_descriptor_, &LOBBY2DB_ApplyFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_ApplyFriend_descriptor_, &DB2LOBBY_ApplyFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_AddFriend_descriptor_, &LOBBY2DB_AddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_AddFriend_descriptor_, &DB2LOBBY_AddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_DelFriend_descriptor_, &LOBBY2DB_DelFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_DelFriend_descriptor_, &DB2LOBBY_DelFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_SendEnergy_descriptor_, &LOBBY2DB_SendEnergy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_PurchaseInfo_descriptor_, &LOBBY2DB_PurchaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_Shop_descriptor_, &DB2LOBBY_Shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_GetTargetFriendInfo_descriptor_, &LOBBY2DB_GetTargetFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_GetTargetFriendInfo_descriptor_, &DB2LOBBY_GetTargetFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DBGetTargetUserinfoReq_descriptor_, &LOBBY2DBGetTargetUserinfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBYGetTargetUserinfoRet_descriptor_, &DB2LOBBYGetTargetUserinfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DBGetRecommandFriendReq_descriptor_, &LOBBY2DBGetRecommandFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBYGetRecommandFriendRet_descriptor_, &DB2LOBBYGetRecommandFriendRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbActivity_descriptor_, &DbActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_LoadActivityReq_descriptor_, &LOBBY2DB_LoadActivityReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_LoadActivityRet_descriptor_, &DB2LOBBY_LoadActivityRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateActivityReq_descriptor_, &LOBBY2DB_UpdateActivityReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbRank_descriptor_, &DbRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_LoadRankReq_descriptor_, &LOBBY2DB_LoadRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_LoadRankRet_descriptor_, &DB2LOBBY_LoadRankRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateRankReq_descriptor_, &LOBBY2DB_UpdateRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_ClearRankReq_descriptor_, &LOBBY2DB_ClearRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_ClearPlayerRank_Req_descriptor_, &LOBBY2DB_ClearPlayerRank_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbArena_descriptor_, &DbArena::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_LoadArenaReq_descriptor_, &LOBBY2DB_LoadArenaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_LoadArenaRet_descriptor_, &DB2LOBBY_LoadArenaRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateArenaReq_descriptor_, &LOBBY2DB_UpdateArenaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBServerCompare_descriptor_, &DBServerCompare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_LoadServerCompare_Req_descriptor_, &LOBBY2DB_LoadServerCompare_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_LoadServerCompare_Ret_descriptor_, &DB2LOBBY_LoadServerCompare_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateServerCompare_Req_descriptor_, &LOBBY2DB_UpdateServerCompare_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_ClearServerCompare_Req_descriptor_, &LOBBY2DB_ClearServerCompare_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBGuildPlayer_descriptor_, &DBGuildPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBGuildApply_descriptor_, &DBGuildApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBGuildInfo_descriptor_, &DBGuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_LoadGuild_Req_descriptor_, &LOBBY2DB_LoadGuild_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_GuildInfo_Ret_descriptor_, &DB2LOBBY_GuildInfo_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_GuildPlayers_Ret_descriptor_, &DB2LOBBY_GuildPlayers_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBY_GuildApplys_Ret_descriptor_, &DB2LOBBY_GuildApplys_Ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateGuildInfo_Req_descriptor_, &LOBBY2DB_UpdateGuildInfo_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateGuildPlayer_Req_descriptor_, &LOBBY2DB_UpdateGuildPlayer_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateGuildApply_Req_descriptor_, &LOBBY2DB_UpdateGuildApply_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateGuildRitual_Req_descriptor_, &LOBBY2DB_UpdateGuildRitual_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DB_UpdateGuildNewDay_Req_descriptor_, &LOBBY2DB_UpdateGuildNewDay_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DBLoadTreasureReq_descriptor_, &LOBBY2DBLoadTreasureReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBYLoadTreasureRet_descriptor_, &DB2LOBBYLoadTreasureRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DBLoadRobotReq_descriptor_, &LOBBY2DBLoadRobotReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBYLoadRobotRet_descriptor_, &DB2LOBBYLoadRobotRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DBCreateRobotReq_descriptor_, &LOBBY2DBCreateRobotReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBYCreateRobotRet_descriptor_, &DB2LOBBYCreateRobotRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOBBY2DBSaveRobotReq_descriptor_, &LOBBY2DBSaveRobotReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB2LOBBYSaveRobotRet_descriptor_, &DB2LOBBYSaveRobotRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_5flobby_5fdb_2eproto() {
  delete DbSystemSetting::default_instance_;
  delete DbSystemSetting_reflection_;
  delete LOBBY2DB_LoadCharReq::default_instance_;
  delete LOBBY2DB_LoadCharReq_reflection_;
  delete NationalDB::default_instance_;
  delete NationalDB_reflection_;
  delete DB2LOBBY_LoadCharRet::default_instance_;
  delete DB2LOBBY_LoadCharRet_reflection_;
  delete LOBBY2DB_CharAdvancedInfo::default_instance_;
  delete LOBBY2DB_CharAdvancedInfo_reflection_;
  delete DbSevenDayActive::default_instance_;
  delete DbSevenDayActive_reflection_;
  delete DbSevenDayActiveElement::default_instance_;
  delete DbSevenDayActiveElement_reflection_;
  delete DbRebelArmy::default_instance_;
  delete DbRebelArmy_reflection_;
  delete DbActionRecord::default_instance_;
  delete DbActionRecord_reflection_;
  delete DbRaidTeam::default_instance_;
  delete DbRaidTeam_reflection_;
  delete DBServerCompareGot::default_instance_;
  delete DBServerCompareGot_reflection_;
  delete DB2LOBBY_CharAdvancedInfo::default_instance_;
  delete DB2LOBBY_CharAdvancedInfo_reflection_;
  delete LOBBY2DB_LoadCharListReq::default_instance_;
  delete LOBBY2DB_LoadCharListReq_reflection_;
  delete SimpleDBCharInfo::default_instance_;
  delete SimpleDBCharInfo_reflection_;
  delete DB2LOBBY_LoadCharListRet::default_instance_;
  delete DB2LOBBY_LoadCharListRet_reflection_;
  delete LOBBY2DB_CreateCharReq::default_instance_;
  delete LOBBY2DB_CreateCharReq_reflection_;
  delete DB2LOBBY_CreateCharRet::default_instance_;
  delete DB2LOBBY_CreateCharRet_reflection_;
  delete LOBBY2DB_SaveCharReq::default_instance_;
  delete LOBBY2DB_SaveCharReq_reflection_;
  delete DB2LOBBY_SaveCharRet::default_instance_;
  delete DB2LOBBY_SaveCharRet_reflection_;
  delete LOBBY2DB_SaveAdvancedCharReq::default_instance_;
  delete LOBBY2DB_SaveAdvancedCharReq_reflection_;
  delete RetrieveDB::default_instance_;
  delete RetrieveDB_reflection_;
  delete DB2LOBBY_SaveAdvancedCharRet::default_instance_;
  delete DB2LOBBY_SaveAdvancedCharRet_reflection_;
  delete LOBBY2DB_LoadBagReq::default_instance_;
  delete LOBBY2DB_LoadBagReq_reflection_;
  delete DB2LOBBY_LoadBagRet::default_instance_;
  delete DB2LOBBY_LoadBagRet_reflection_;
  delete DB2LOBBY_CheckTokenRet::default_instance_;
  delete DB2LOBBY_CheckTokenRet_reflection_;
  delete LOBBY2DB_SaveBagReq::default_instance_;
  delete LOBBY2DB_SaveBagReq_reflection_;
  delete LOBBY2DB_AddDiamondReq::default_instance_;
  delete LOBBY2DB_AddDiamondReq_reflection_;
  delete LOBBY2DB_ChangeNameCheckReq::default_instance_;
  delete LOBBY2DB_ChangeNameCheckReq_reflection_;
  delete DB2LOBBY_ChangeNameCheckRet::default_instance_;
  delete DB2LOBBY_ChangeNameCheckRet_reflection_;
  delete LOBBY2DBLoadWorldReq::default_instance_;
  delete LOBBY2DBLoadWorldReq_reflection_;
  delete DB2LOBBYLoadWorldRet::default_instance_;
  delete DB2LOBBYLoadWorldRet_reflection_;
  delete DB2LOBBY_Server::default_instance_;
  delete DB2LOBBY_Server_reflection_;
  delete LOBBY2DB_UpdateSupremeHotBox::default_instance_;
  delete LOBBY2DB_UpdateSupremeHotBox_reflection_;
  delete LOBBY2DB_UpdateArenaRank::default_instance_;
  delete LOBBY2DB_UpdateArenaRank_reflection_;
  delete LOBBY2DB_UpdateArenaLog::default_instance_;
  delete LOBBY2DB_UpdateArenaLog_reflection_;
  delete LOBBY2DB_OfflineMail::default_instance_;
  delete LOBBY2DB_OfflineMail_reflection_;
  delete DB2LOBBY_LoadOfflineMail::default_instance_;
  delete DB2LOBBY_LoadOfflineMail_reflection_;
  delete LOBBY2DB_LoadOfflineMail::default_instance_;
  delete LOBBY2DB_LoadOfflineMail_reflection_;
  delete LOBBY2DB_CheckTokenReq::default_instance_;
  delete LOBBY2DB_CheckTokenReq_reflection_;
  delete LOBBY2DB_Server::default_instance_;
  delete LOBBY2DB_Server_reflection_;
  delete LOBBY2DB_ApplyFriend::default_instance_;
  delete LOBBY2DB_ApplyFriend_reflection_;
  delete DB2LOBBY_ApplyFriend::default_instance_;
  delete DB2LOBBY_ApplyFriend_reflection_;
  delete LOBBY2DB_AddFriend::default_instance_;
  delete LOBBY2DB_AddFriend_reflection_;
  delete DB2LOBBY_AddFriend::default_instance_;
  delete DB2LOBBY_AddFriend_reflection_;
  delete LOBBY2DB_DelFriend::default_instance_;
  delete LOBBY2DB_DelFriend_reflection_;
  delete DB2LOBBY_DelFriend::default_instance_;
  delete DB2LOBBY_DelFriend_reflection_;
  delete LOBBY2DB_SendEnergy::default_instance_;
  delete LOBBY2DB_SendEnergy_reflection_;
  delete LOBBY2DB_PurchaseInfo::default_instance_;
  delete LOBBY2DB_PurchaseInfo_reflection_;
  delete DB2LOBBY_Shop::default_instance_;
  delete DB2LOBBY_Shop_reflection_;
  delete LOBBY2DB_GetTargetFriendInfo::default_instance_;
  delete LOBBY2DB_GetTargetFriendInfo_reflection_;
  delete DB2LOBBY_GetTargetFriendInfo::default_instance_;
  delete DB2LOBBY_GetTargetFriendInfo_reflection_;
  delete LOBBY2DBGetTargetUserinfoReq::default_instance_;
  delete LOBBY2DBGetTargetUserinfoReq_reflection_;
  delete DB2LOBBYGetTargetUserinfoRet::default_instance_;
  delete DB2LOBBYGetTargetUserinfoRet_reflection_;
  delete LOBBY2DBGetRecommandFriendReq::default_instance_;
  delete LOBBY2DBGetRecommandFriendReq_reflection_;
  delete DB2LOBBYGetRecommandFriendRet::default_instance_;
  delete DB2LOBBYGetRecommandFriendRet_reflection_;
  delete DbActivity::default_instance_;
  delete DbActivity_reflection_;
  delete LOBBY2DB_LoadActivityReq::default_instance_;
  delete LOBBY2DB_LoadActivityReq_reflection_;
  delete DB2LOBBY_LoadActivityRet::default_instance_;
  delete DB2LOBBY_LoadActivityRet_reflection_;
  delete LOBBY2DB_UpdateActivityReq::default_instance_;
  delete LOBBY2DB_UpdateActivityReq_reflection_;
  delete DbRank::default_instance_;
  delete DbRank_reflection_;
  delete LOBBY2DB_LoadRankReq::default_instance_;
  delete LOBBY2DB_LoadRankReq_reflection_;
  delete DB2LOBBY_LoadRankRet::default_instance_;
  delete DB2LOBBY_LoadRankRet_reflection_;
  delete LOBBY2DB_UpdateRankReq::default_instance_;
  delete LOBBY2DB_UpdateRankReq_reflection_;
  delete LOBBY2DB_ClearRankReq::default_instance_;
  delete LOBBY2DB_ClearRankReq_reflection_;
  delete LOBBY2DB_ClearPlayerRank_Req::default_instance_;
  delete LOBBY2DB_ClearPlayerRank_Req_reflection_;
  delete DbArena::default_instance_;
  delete DbArena_reflection_;
  delete LOBBY2DB_LoadArenaReq::default_instance_;
  delete LOBBY2DB_LoadArenaReq_reflection_;
  delete DB2LOBBY_LoadArenaRet::default_instance_;
  delete DB2LOBBY_LoadArenaRet_reflection_;
  delete LOBBY2DB_UpdateArenaReq::default_instance_;
  delete LOBBY2DB_UpdateArenaReq_reflection_;
  delete DBServerCompare::default_instance_;
  delete DBServerCompare_reflection_;
  delete LOBBY2DB_LoadServerCompare_Req::default_instance_;
  delete LOBBY2DB_LoadServerCompare_Req_reflection_;
  delete DB2LOBBY_LoadServerCompare_Ret::default_instance_;
  delete DB2LOBBY_LoadServerCompare_Ret_reflection_;
  delete LOBBY2DB_UpdateServerCompare_Req::default_instance_;
  delete LOBBY2DB_UpdateServerCompare_Req_reflection_;
  delete LOBBY2DB_ClearServerCompare_Req::default_instance_;
  delete LOBBY2DB_ClearServerCompare_Req_reflection_;
  delete DBGuildPlayer::default_instance_;
  delete DBGuildPlayer_reflection_;
  delete DBGuildApply::default_instance_;
  delete DBGuildApply_reflection_;
  delete DBGuildInfo::default_instance_;
  delete DBGuildInfo_reflection_;
  delete LOBBY2DB_LoadGuild_Req::default_instance_;
  delete LOBBY2DB_LoadGuild_Req_reflection_;
  delete DB2LOBBY_GuildInfo_Ret::default_instance_;
  delete DB2LOBBY_GuildInfo_Ret_reflection_;
  delete DB2LOBBY_GuildPlayers_Ret::default_instance_;
  delete DB2LOBBY_GuildPlayers_Ret_reflection_;
  delete DB2LOBBY_GuildApplys_Ret::default_instance_;
  delete DB2LOBBY_GuildApplys_Ret_reflection_;
  delete LOBBY2DB_UpdateGuildInfo_Req::default_instance_;
  delete LOBBY2DB_UpdateGuildInfo_Req_reflection_;
  delete LOBBY2DB_UpdateGuildPlayer_Req::default_instance_;
  delete LOBBY2DB_UpdateGuildPlayer_Req_reflection_;
  delete LOBBY2DB_UpdateGuildApply_Req::default_instance_;
  delete LOBBY2DB_UpdateGuildApply_Req_reflection_;
  delete LOBBY2DB_UpdateGuildRitual_Req::default_instance_;
  delete LOBBY2DB_UpdateGuildRitual_Req_reflection_;
  delete LOBBY2DB_UpdateGuildNewDay_Req::default_instance_;
  delete LOBBY2DB_UpdateGuildNewDay_Req_reflection_;
  delete LOBBY2DBLoadTreasureReq::default_instance_;
  delete LOBBY2DBLoadTreasureReq_reflection_;
  delete DB2LOBBYLoadTreasureRet::default_instance_;
  delete DB2LOBBYLoadTreasureRet_reflection_;
  delete LOBBY2DBLoadRobotReq::default_instance_;
  delete LOBBY2DBLoadRobotReq_reflection_;
  delete DB2LOBBYLoadRobotRet::default_instance_;
  delete DB2LOBBYLoadRobotRet_reflection_;
  delete LOBBY2DBCreateRobotReq::default_instance_;
  delete LOBBY2DBCreateRobotReq_reflection_;
  delete DB2LOBBYCreateRobotRet::default_instance_;
  delete DB2LOBBYCreateRobotRet_reflection_;
  delete LOBBY2DBSaveRobotReq::default_instance_;
  delete LOBBY2DBSaveRobotReq_reflection_;
  delete DB2LOBBYSaveRobotRet::default_instance_;
  delete DB2LOBBYSaveRobotRet_reflection_;
}

void protobuf_AddDesc_protocol_5flobby_5fdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TgsProtocol::protobuf_AddDesc_PacketDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027protocol_lobby_db.proto\022\013TgsProtocol\032\017"
    "PacketDef.proto\"\306\001\n\017DbSystemSetting\022\020\n\010m"
    "odeMask\030\001 \002(\004\022\024\n\014modeReserver\030\002 \002(\004\022\022\n\ns"
    "howCharId\030\003 \002(\r\022\021\n\trcvInvite\030\004 \002(\r\022\024\n\014sh"
    "owAudioeff\030\005 \002(\r\022\021\n\tshowMusic\030\006 \002(\r\022\022\n\ns"
    "howEffect\030\007 \002(\r\022\022\n\nhidDensuit\030\010 \002(\r\022\023\n\013r"
    "eserveBuff\030\t \002(\014\"j\n\024LOBBY2DB_LoadCharReq"
    "\022B\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:"
    "\033LOBBY2DB_LOAD_CHARACTER_REQ\022\016\n\006CharId\030\002"
    " \002(\004\"8\n\nNationalDB\022\022\n\nnationalId\030\001 \002(\r\022\026"
    "\n\016lastChangeTime\030\002 \002(\r\"\255\n\n\024DB2LOBBY_Load"
    "CharRet\022B\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Pac"
    "ketDef:\033DB2LOBBY_LOAD_CHARACTER_RET\022\013\n\003r"
    "et\030\002 \002(\r\022\016\n\006charId\030\003 \002(\004\022\020\n\010charName\030\004 \001"
    "(\014\022\014\n\004cash\030\005 \001(\r\022\014\n\004gold\030\006 \001(\r\022\r\n\005level\030"
    "\007 \001(\r\022\013\n\003exp\030\010 \001(\r\022\022\n\ncurStamina\030\t \001(\r\022\022"
    "\n\nmaxStamina\030\n \001(\r\022\022\n\ncreateTime\030\013 \001(\r\022\023"
    "\n\013offlineTime\030\014 \001(\r\022\031\n\021updateStaminaTime"
    "\030\r \001(\r\022\017\n\007bitFlag\030\016 \001(\r\022\r\n\005quest\030\017 \001(\014\022\022"
    "\n\nevaluation\030\020 \001(\014\022\025\n\rchapterReward\030\021 \001("
    "\014\022\016\n\006vipExp\030\022 \001(\r\022\020\n\010vipLevel\030\023 \001(\r\022\021\n\tf"
    "ormation\030\024 \003(\r\022\022\n\nheroBagNum\030\025 \001(\r\022\020\n\010he"
    "roList\030\026 \001(\014\022\016\n\006gender\030\027 \001(\r\022\r\n\005photo\030\030 "
    "\001(\r\022\023\n\013essenceItem\030\031 \001(\014\022\024\n\014RefreshPrice"
    "\030\032 \003(\r\022\021\n\tfestivity\030\033 \001(\014\022\027\n\017lockChatEnd"
    "Time\030\034 \001(\r\022\024\n\014dayChatTimes\030\035 \001(\r\022\022\n\nskil"
    "lPoint\030\036 \001(\r\022\034\n\024updateSkillPointTime\030\037 \001"
    "(\r\022\016\n\006energy\030  \001(\r\022\030\n\020updateEnergyTime\030!"
    " \001(\r\022\020\n\010equipNew\030\" \001(\014\022\026\n\016arenaFormation"
    "\030# \003(\r\022\020\n\010recharge\030$ \001(\r\022\020\n\010progress\030% \001"
    "(\r\022\020\n\010activity\030& \001(\014\022\027\n\017assistFormation\030"
    "\' \001(\t\022\022\n\nchapterBox\030( \001(\014\022\r\n\005coins\030) \001(\t"
    "\022\022\n\nleavePoint\030* \001(\r\022\022\n\nonlinetime\030+ \001(\r"
    "\022\023\n\013gmFlushTime\030, \001(\r\022\021\n\tisshopbuy\030- \001(\r"
    "\022\020\n\010deviceid\030. \001(\t\022\022\n\ndiamondPay\030/ \001(\r\022\025"
    "\n\rrecommfriends\0300 \001(\t\022\021\n\tprizeInfo\0301 \001(\014"
    "\022\023\n\013avoidBattle\0302 \001(\r\022\025\n\raccOnlineTime\0303"
    " \001(\r\022\017\n\007itemGot\0304 \001(\t\022\022\n\nbuyedPrice\0305 \003("
    "\r\022\020\n\010position\0306 \001(\r\022\026\n\016lastUpdateTime\0307 "
    "\001(\r\022\024\n\014crusadeMaxId\0308 \001(\r\022\024\n\014crusadeCurI"
    "d\0309 \001(\r\022\021\n\tint32attr\030: \001(\t\022\023\n\013AwakeHeroe"
    "s\030; \001(\t\022\020\n\010tombinfo\030< \001(\t\022\020\n\010markList\030= "
    "\003(\r\022\026\n\016rechargeChoose\030> \001(\t\022)\n\010national\030"
    "\? \001(\0132\027.TgsProtocol.NationalDB\"v\n\031LOBBY2"
    "DB_CharAdvancedInfo\022I\n\005cmdId\030\001 \001(\0162\026.Tgs"
    "Protocol.PacketDef:\"LOBBY2DB_GET_ADVANCE"
    "D_CHARINFO_REQ\022\016\n\006charId\030\002 \002(\004\"I\n\020DbSeve"
    "nDayActive\0225\n\007mission\030\001 \003(\0132$.TgsProtoco"
    "l.DbSevenDayActiveElement\"F\n\027DbSevenDayA"
    "ctiveElement\022\r\n\005index\030\001 \002(\r\022\016\n\006status\030\002 "
    "\002(\r\022\014\n\004step\030\003 \002(\r\"\345\002\n\013DbRebelArmy\022\023\n\013own"
    "erUserId\030\001 \002(\004\022\021\n\tcurHealth\030\002 \002(\r\022\022\n\ncre"
    "ateTime\030\003 \002(\r\022\r\n\005index\030\004 \002(\r\022\r\n\005state\030\005 "
    "\002(\r\022\022\n\nattackTime\030\006 \002(\r\022\020\n\010bIsShare\030\007 \002("
    "\r\022\n\n\002lv\030\010 \002(\r\022\023\n\013battleValue\030\t \002(\r\022\021\n\tfr"
    "eeCount\030\n \002(\r\022\030\n\020countRecoverTime\030\013 \002(\r\022"
    "\017\n\007startLv\030\014 \002(\r\022\022\n\nhappenTime\030\r \002(\r\022\023\n\013"
    "happenCount\030\016 \002(\r\022\017\n\007dayharm\030\017 \001(\r\022\023\n\013da"
    "yexploits\030\020 \001(\r\022\022\n\ndayharmBig\030\021 \001(\004\022\024\n\014c"
    "urHealthBig\030\022 \001(\004\";\n\016DbActionRecord\022)\n\006a"
    "ction\030\001 \003(\0132\031.TgsProtocol.ActionRecord\"*"
    "\n\nDbRaidTeam\022\r\n\005count\030\001 \002(\r\022\r\n\005lucky\030\002 \002"
    "(\r\"c\n\022DBServerCompareGot\022\014\n\004time\030\001 \002(\r\022\022"
    "\n\nmergeTimes\030\002 \002(\r\022+\n\004gots\030\003 \003(\0132\035.TgsPr"
    "otocol.ServerCompareGot\"\331\016\n\031DB2LOBBY_Cha"
    "rAdvancedInfo\022I\n\005cmdId\030\001 \001(\0162\026.TgsProtoc"
    "ol.PacketDef:\"DB2LOBBY_GET_ADVANCED_CHAR"
    "INFO_RET\022\016\n\006charId\030\002 \002(\004\022\013\n\003ret\030\003 \002(\r\022\r\n"
    "\005goods\030\004 \001(\014\022\030\n\020openCopperBoxNum\030\005 \001(\r\022\035"
    "\n\025lastOpenCopperBoxTime\030\006 \001(\r\022\036\n\026lastOpe"
    "nDiamondBoxTime\030\007 \001(\r\022\037\n\027totalOpenCopper"
    "BoxTimes\030\010 \001(\r\022 \n\030totalOpenDiamondBoxTim"
    "es\030\t \001(\r\022)\n\010mailList\030\n \003(\0132\027.TgsProtocol"
    ".DBMailInfo\022\022\n\nskillPoint\030\013 \001(\r\022\034\n\024updat"
    "eSkillPointTime\030\014 \001(\r\022\023\n\013exFormation\030\r \003"
    "(\r\022\017\n\007myHeros\030\016 \001(\014\022\024\n\014DefenseHeros\030\017 \001("
    "\014\022\022\n\ndifficulty\030\020 \001(\r\022\025\n\rlastArenaTime\030\021"
    " \001(\r\022\027\n\017dailyArenaTimes\030\022 \001(\r\022\025\n\rbestAre"
    "naRank\030\023 \001(\r\022\023\n\013arFormation\030\024 \003(\r\022\025\n\rtot"
    "alArenaWin\030\025 \001(\r\022\020\n\010arenaLog\030\026 \001(\014\022\024\n\014to"
    "pThreeTime\030\027 \001(\r\022\024\n\014ackFormation\030\030 \003(\r\022 "
    "\n\030dailyOpenDiamondBoxTimes\030\031 \001(\r\022\016\n\006sign"
    "In\030\032 \001(\r\022\032\n\022totalCopperMineNum\030\035 \001(\r\022\032\n\022"
    "totalSilverMineNum\030\036 \001(\r\022\033\n\023totalDiamond"
    "MineNum\030\037 \001(\r\022\032\n\022dailyCopperMineNum\030  \001("
    "\r\022\032\n\022dailySilverMineNum\030! \001(\r\022\033\n\023dailyDi"
    "amondMineNum\030\" \001(\r\022\022\n\nfriendInfo\030# \001(\014\022\021"
    "\n\tshopFlush\030$ \001(\014\022/\n\010sevenDay\030% \001(\0132\035.Tg"
    "sProtocol.DbSevenDayActive\022+\n\trebelArmy\030"
    "& \001(\0132\030.TgsProtocol.DbRebelArmy\022+\n\006actio"
    "n\030\' \001(\0132\033.TgsProtocol.DbActionRecord\022)\n\010"
    "raidTeam\030( \001(\0132\027.TgsProtocol.DbRaidTeam\022"
    "&\n\004card\030) \001(\0132\030.TgsProtocol.DbMonthCard\022"
    "!\n\004drop\030* \001(\0132\023.TgsProtocol.DbDrop\022\022\n\ngo"
    "odsBuyed\030+ \001(\t\022\031\n\021firstChargeChoose\030, \001("
    "\r\022\034\n\024continueChargeChoose\030- \001(\r\022\026\n\016conti"
    "nueCharge\030. \001(\t\022)\n\010handbook\030/ \001(\0132\027.TgsP"
    "rotocol.DbHandBook\022-\n\nsecrethole\0300 \001(\0132\031"
    ".TgsProtocol.DBSecretHole\022-\n\nreturntask\030"
    "1 \001(\0132\031.TgsProtocol.DBReturnTask\0223\n\tterr"
    "itory\0302 \001(\0132 .TgsProtocol.PlayerTerritor"
    "yInfo\022+\n\ndiagramMap\0303 \001(\0132\027.TgsProtocol."
    "DiagramMap\022/\n\017ghostActiveList\0304 \001(\0132\026.Tg"
    "sProtocol.GhostList\022\017\n\007cheerId\0305 \001(\r\022\021\n\t"
    "titleList\0306 \003(\r\022/\n\014epicbosslist\0307 \001(\0132\031."
    "TgsProtocol.EpicBossList\022\022\n\nsevengifts\0309"
    " \003(\r\022\025\n\ronlineRewards\030: \003(\r\022)\n\010retrieve\030"
    "; \001(\0132\027.TgsProtocol.RetrieveDB\022.\n\nchatpa"
    "sswd\030< \003(\0132\032.TgsProtocol.PassWordState\022\021"
    "\n\tchatCount\030= \003(\r\0225\n\014compare_gots\030> \001(\0132"
    "\037.TgsProtocol.DBServerCompareGot\022!\n\004farm"
    "\030\? \001(\0132\023.TgsProtocol.FarmDB\"\203\001\n\030LOBBY2DB"
    "_LoadCharListReq\022A\n\005cmdId\030\001 \001(\0162\026.TgsPro"
    "tocol.PacketDef:\032LOBBY2DB_LOAD_CHARLIST_"
    "REQ\022\021\n\taccountId\030\002 \002(\004\022\021\n\tsessionid\030\003 \002("
    "\004\"g\n\020SimpleDBCharInfo\022\016\n\006charId\030\001 \002(\004\022\020\n"
    "\010charName\030\002 \001(\014\022\022\n\nprofession\030\003 \001(\r\022\r\n\005l"
    "evel\030\004 \001(\r\022\016\n\006avatar\030\005 \001(\014\"\256\001\n\030DB2LOBBY_"
    "LoadCharListRet\022A\n\005cmdId\030\001 \001(\0162\026.TgsProt"
    "ocol.PacketDef:\032DB2LOBBY_LOAD_CHARLIST_R"
    "ET\022\013\n\003ret\030\002 \002(\r\022\021\n\tsessionid\030\003 \002(\004\022/\n\010ch"
    "arList\030\004 \003(\0132\035.TgsProtocol.SimpleDBCharI"
    "nfo\"\222\001\n\026LOBBY2DB_CreateCharReq\022D\n\005cmdId\030"
    "\001 \001(\0162\026.TgsProtocol.PacketDef:\035LOBBY2DB_"
    "CREATE_CHARACTER_REQ\022\016\n\006charId\030\002 \002(\004\022\020\n\010"
    "charName\030\003 \002(\014\022\020\n\010deviceId\030\004 \002(\t\"{\n\026DB2L"
    "OBBY_CreateCharRet\022D\n\005cmdId\030\001 \001(\0162\026.TgsP"
    "rotocol.PacketDef:\035DB2LOBBY_CREATE_CHARA"
    "CTER_RET\022\013\n\003ret\030\002 \002(\r\022\016\n\006charId\030\003 \002(\004\"\272\n"
    "\n\024LOBBY2DB_SaveCharReq\022B\n\005cmdId\030\001 \001(\0162\026."
    "TgsProtocol.PacketDef:\033LOBBY2DB_SAVE_CHA"
    "RACTER_REQ\022\020\n\010serialno\030\002 \002(\004\022\016\n\006charid\030\003"
    " \002(\004\022\020\n\010charname\030\004 \002(\014\022\r\n\005level\030\005 \002(\r\022\013\n"
    "\003exp\030\006 \002(\r\022\014\n\004cash\030\007 \002(\r\022\014\n\004gold\030\010 \002(\r\022\022"
    "\n\ncurStamina\030\t \002(\r\022\022\n\nmaxStamina\030\n \002(\r\022\020"
    "\n\010vipLevel\030\013 \002(\r\022\021\n\tformation\030\014 \003(\r\022\016\n\006v"
    "ipExp\030\r \002(\r\022\023\n\013offlinetime\030\016 \002(\r\022\031\n\021upda"
    "teStaminaTime\030\017 \002(\r\022\017\n\007bitFlag\030\020 \002(\r\022\r\n\005"
    "quest\030\021 \001(\014\022\022\n\nevaluation\030\022 \001(\014\022\025\n\rchapt"
    "erReward\030\023 \001(\014\022\022\n\nheroBagNum\030\024 \002(\r\022\020\n\010he"
    "roList\030\025 \001(\014\022\016\n\006gender\030\026 \002(\r\022\r\n\005photo\030\027 "
    "\001(\r\022\023\n\013essenceItem\030\030 \001(\014\022\024\n\014RefreshPrice"
    "\030\031 \003(\r\022\021\n\tfestivity\030\032 \001(\014\022\024\n\014dayChatTime"
    "s\030\033 \001(\r\022\022\n\nskillPoint\030\034 \001(\r\022\034\n\024updateSki"
    "llPointTime\030\035 \001(\r\022\016\n\006energy\030\036 \001(\r\022\030\n\020upd"
    "ateEnergyTime\030\037 \001(\r\022\020\n\010equipNew\030  \001(\014\022\026\n"
    "\016arenaFormation\030! \003(\r\022\020\n\010recharge\030\" \001(\r\022"
    "\020\n\010progress\030# \001(\r\022\020\n\010activity\030$ \001(\014\022\027\n\017a"
    "ssistFormation\030% \001(\t\022\016\n\006effect\030& \001(\004\022\022\n\n"
    "chapterBox\030\' \001(\014\022\r\n\005coins\030( \001(\t\022\032\n\022maxNo"
    "rmalChallenge\030) \002(\r\022\031\n\021maxEliteChallenge"
    "\030* \002(\r\022\022\n\nleavePoint\030+ \002(\r\022\022\n\nonlinetime"
    "\030, \002(\r\022\023\n\013gmflushtime\030- \002(\r\022\021\n\tisshopbuy"
    "\030. \001(\r\022\022\n\ndiamondPay\030/ \002(\r\022\025\n\rrecommfrie"
    "nds\0300 \001(\t\022\021\n\tprizeInfo\0301 \001(\014\022\023\n\013avoidBat"
    "tle\0302 \001(\r\022\025\n\raccOnlineTime\0303 \001(\r\022\017\n\007item"
    "Got\0304 \001(\t\022\022\n\nbuyedPrice\0305 \003(\r\022\020\n\010positio"
    "n\0306 \001(\r\022\026\n\016lastUpdateTime\0307 \001(\r\022\024\n\014crusa"
    "deMaxId\0308 \001(\r\022\024\n\014crusadeCurId\0309 \001(\r\022\021\n\ti"
    "nt32attr\030: \001(\t\022\023\n\013AwakeHeroes\030; \001(\t\022\020\n\010t"
    "ombinfo\030< \001(\t\022\020\n\010markList\030= \003(\r\022\026\n\016recha"
    "rgeChoose\030> \001(\t\022)\n\010national\030\? \001(\0132\027.TgsP"
    "rotocol.NationalDB\"\211\001\n\024DB2LOBBY_SaveChar"
    "Ret\022B\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketD"
    "ef:\033DB2LOBBY_SAVE_CHARACTER_RET\022\020\n\010seria"
    "lno\030\002 \002(\004\022\013\n\003ret\030\003 \002(\r\022\016\n\006charId\030\004 \002(\004\"\325"
    "\016\n\034LOBBY2DB_SaveAdvancedCharReq\022K\n\005cmdId"
    "\030\001 \001(\0162\026.TgsProtocol.PacketDef:$LOBBY2DB"
    "_SAVE_ADVANCED_CHARACTER_REQ\022\016\n\006charId\030\002"
    " \002(\004\022\021\n\tshopGoods\030\003 \001(\014\022\030\n\020openCopperBox"
    "Num\030\004 \002(\r\022\035\n\025lastOpenCopperBoxTime\030\005 \002(\r"
    "\022\036\n\026lastOpenDiamondBoxTime\030\006 \002(\r\022\037\n\027tota"
    "lOpenCopperBoxTimes\030\007 \002(\r\022 \n\030totalOpenDi"
    "amondBoxTimes\030\010 \002(\r\022)\n\010mailList\030\t \003(\0132\027."
    "TgsProtocol.DBMailInfo\022\022\n\nskillPoint\030\n \001"
    "(\r\022\034\n\024updateSkillPointTime\030\013 \001(\r\022\023\n\013exFo"
    "rmation\030\014 \003(\r\022\017\n\007myHeros\030\r \001(\014\022\024\n\014Defens"
    "eHeros\030\016 \001(\014\022\022\n\ndifficulty\030\017 \001(\r\022\025\n\rlast"
    "ArenaTime\030\020 \001(\r\022\027\n\017dailyArenaTimes\030\021 \001(\r"
    "\022\025\n\rbestArenaRank\030\022 \001(\r\022\023\n\013arFormation\030\023"
    " \003(\r\022\025\n\rtotalArenaWin\030\024 \001(\r\022\020\n\010arenaLog\030"
    "\025 \001(\014\022\024\n\014topThreeTime\030\026 \001(\r\022\024\n\014ackFormat"
    "ion\030\027 \003(\r\022 \n\030dailyOpenDiamondBoxTimes\030\030 "
    "\001(\r\022\016\n\006signIn\030\031 \001(\r\022\032\n\022totalCopperMineNu"
    "m\030\034 \001(\r\022\032\n\022totalSilverMineNum\030\035 \001(\r\022\033\n\023t"
    "otalDiamondMineNum\030\036 \001(\r\022\032\n\022dailyCopperM"
    "ineNum\030\037 \001(\r\022\032\n\022dailySilverMineNum\030  \001(\r"
    "\022\033\n\023dailyDiamondMineNum\030! \001(\r\022\022\n\nfriendI"
    "nfo\030\" \001(\014\022\021\n\tshopFlush\030# \001(\014\022/\n\010sevenDay"
    "\030$ \001(\0132\035.TgsProtocol.DbSevenDayActive\022+\n"
    "\trebelArmy\030% \001(\0132\030.TgsProtocol.DbRebelAr"
    "my\022+\n\006action\030& \001(\0132\033.TgsProtocol.DbActio"
    "nRecord\022)\n\010raidTeam\030\' \001(\0132\027.TgsProtocol."
    "DbRaidTeam\022&\n\004card\030( \001(\0132\030.TgsProtocol.D"
    "bMonthCard\022!\n\004drop\030) \001(\0132\023.TgsProtocol.D"
    "bDrop\022\022\n\ngoodsBuyed\030* \001(\t\022\031\n\021firstCharge"
    "Choose\030+ \001(\r\022\034\n\024continueChargeChoose\030, \001"
    "(\r\022\026\n\016continueCharge\030- \001(\t\022)\n\010handbook\030."
    " \001(\0132\027.TgsProtocol.DbHandBook\022-\n\nsecreth"
    "ole\030/ \001(\0132\031.TgsProtocol.DBSecretHole\022-\n\n"
    "returntask\0300 \001(\0132\031.TgsProtocol.DBReturnT"
    "ask\0223\n\tterritory\0301 \001(\0132 .TgsProtocol.Pla"
    "yerTerritoryInfo\022+\n\ndiagramMap\0302 \001(\0132\027.T"
    "gsProtocol.DiagramMap\022/\n\017ghostActiveList"
    "\0303 \001(\0132\026.TgsProtocol.GhostList\022\017\n\007cheerI"
    "d\0304 \001(\r\022\021\n\ttitleList\0305 \003(\r\022/\n\014epicbossli"
    "st\0306 \001(\0132\031.TgsProtocol.EpicBossList\022\022\n\ns"
    "evengifts\0308 \003(\r\022\025\n\ronlineRewards\0309 \003(\r\022)"
    "\n\010retrieve\030: \001(\0132\027.TgsProtocol.RetrieveD"
    "B\022.\n\nchatpasswd\030; \003(\0132\032.TgsProtocol.Pass"
    "WordState\022\021\n\tchatCount\030< \003(\r\0225\n\014compare_"
    "gots\030= \001(\0132\037.TgsProtocol.DBServerCompare"
    "Got\022!\n\004farm\030> \001(\0132\023.TgsProtocol.FarmDB\"f"
    "\n\nRetrieveDB\022)\n\005today\030\001 \003(\0132\032.TgsProtoco"
    "l.RetrieveState\022-\n\tyesterday\030\002 \003(\0132\032.Tgs"
    "Protocol.RetrieveState\"\210\001\n\034DB2LOBBY_Save"
    "AdvancedCharRet\022K\n\005cmdId\030\001 \001(\0162\026.TgsProt"
    "ocol.PacketDef:$DB2LOBBY_SAVE_ADVANCED_C"
    "HARACTER_RET\022\013\n\003ret\030\002 \002(\r\022\016\n\006charId\030\003 \002("
    "\004\"c\n\023LOBBY2DB_LoadBagReq\022<\n\005cmdId\030\001 \001(\0162"
    "\026.TgsProtocol.PacketDef:\025LOBBY2DB_LOAD_B"
    "AG_REQ\022\016\n\006charId\030\002 \002(\004\"\267\001\n\023DB2LOBBY_Load"
    "BagRet\022<\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Pack"
    "etDef:\025DB2LOBBY_LOAD_BAG_RET\022\013\n\003ret\030\002 \002("
    "\r\022\016\n\006charid\030\003 \002(\004\022\021\n\tcurBagNum\030\004 \001(\r\022\013\n\003"
    "bag\030\005 \001(\014\022%\n\007seedBag\030\006 \001(\0132\024.TgsProtocol"
    ".SeedBag\"\260\001\n\026DB2LOBBY_CheckTokenRet\022>\n\005c"
    "mdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\027DB2L"
    "OBBY_CHECKTOKEN_RET\022\013\n\003ret\030\002 \002(\r\022\016\n\006char"
    "Id\030\003 \002(\004\022\022\n\ndeviceName\030\004 \002(\014\022\022\n\ndeviceTy"
    "pe\030\005 \002(\014\022\021\n\tdeviceUid\030\006 \002(\014\"\275\001\n\023LOBBY2DB"
    "_SaveBagReq\022<\n\005cmdId\030\001 \001(\0162\026.TgsProtocol"
    ".PacketDef:\025LOBBY2DB_SAVE_BAG_REQ\022\016\n\006cha"
    "rId\030\002 \002(\004\022\021\n\tisSaveBag\030\003 \001(\r\022\021\n\tcurBagNu"
    "m\030\004 \001(\r\022\013\n\003bag\030\005 \001(\014\022%\n\007seedBag\030\006 \001(\0132\024."
    "TgsProtocol.SeedBag\"|\n\026LOBBY2DB_AddDiamo"
    "ndReq\022>\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Packe"
    "tDef:\027LOBBY2DB_ADDDIAMOND_REQ\022\016\n\006charId\030"
    "\002 \002(\004\022\022\n\naddDiamond\030\003 \001(\r\"\222\001\n\033LOBBY2DB_C"
    "hangeNameCheckReq\022E\n\005cmdId\030\001 \001(\0162\026.TgsPr"
    "otocol.PacketDef:\036LOBBY2DB_CHANGE_NAME_C"
    "HECK_REQ\022\016\n\006charId\030\002 \002(\004\022\017\n\007newName\030\003 \002("
    "\014\022\013\n\003cmd\030\004 \002(\r\"\237\001\n\033DB2LOBBY_ChangeNameCh"
    "eckRet\022E\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Pack"
    "etDef:\036DB2LOBBY_CHANGE_NAME_CHECK_RET\022\013\n"
    "\003ret\030\002 \002(\r\022\016\n\006charId\030\003 \002(\004\022\017\n\007newName\030\004 "
    "\002(\014\022\013\n\003cmd\030\005 \002(\r\"V\n\024LOBBY2DBLoadWorldReq"
    "\022>\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:"
    "\027LOBBY2DB_LOAD_WORLD_REQ\"\320\005\n\024DB2LOBBYLoa"
    "dWorldRet\022>\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.P"
    "acketDef:\027DB2LOBBY_LOAD_WORLD_RET\022\013\n\003ret"
    "\030\002 \002(\r\022\021\n\tweekBoxId\030\003 \002(\r\022\020\n\010dayBox_1\030\004 "
    "\002(\r\022\020\n\010dayBox_2\030\005 \002(\r\022\020\n\010dayBox_3\030\006 \002(\r\022"
    "\022\n\narenaHeros\030\010 \001(\014\022\026\n\016openServerTime\030\t "
    "\001(\r\022%\n\007halfBuy\030\n \001(\0132\024.TgsProtocol.HalfB"
    "uy\022%\n\007achieve\030\013 \001(\0132\024.TgsProtocol.Achiev"
    "e\022\025\n\rglobalItemGot\030\014 \001(\t\022\023\n\013passwordGot\030"
    "\r \001(\t\022\024\n\014sevenDayRank\030\016 \001(\t\022#\n\003opt\030\017 \001(\013"
    "2\026.TgsProtocol.OptGlobal\022\017\n\007boxdrop\030\020 \001("
    "\t\022)\n\010mailList\030\021 \003(\0132\027.TgsProtocol.DBMail"
    "Info\022\030\n\020AstrologyCountry\030\022 \001(\r\022 \n\030Astrol"
    "ogyCountryNextTime\030\023 \001(\r\022\023\n\013rebateCount\030"
    "\024 \001(\r\022\027\n\017heroChangedTime\030\025 \001(\r\022\022\n\nchatpa"
    "sswd\030\026 \003(\r\022\022\n\nmaxRobotId\030\027 \001(\r\022\021\n\trobotN"
    "ame\030\030 \003(\t\022\031\n\021robotIdCollection\030\031 \003(\004\022\022\n\n"
    "robotIndex\030\032 \003(\r\022\021\n\tmonthcard\030\033 \001(\t\022\036\n\026h"
    "eroQualityChangedTime\030\034 \001(\r\"V\n\017DB2LOBBY_"
    "Server\0226\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Pack"
    "etDef:\017DB2LOBBY_SERVER\022\013\n\003ret\030\002 \002(\r\"\274\004\n\034"
    "LOBBY2DB_UpdateSupremeHotBox\022D\n\005cmdId\030\001 "
    "\001(\0162\026.TgsProtocol.PacketDef:\035LOBBY2DB_UP"
    "DATE_SUPREMEHOTBOX\022\021\n\tweekBoxId\030\002 \002(\r\022\020\n"
    "\010dayBox_1\030\003 \002(\r\022\020\n\010dayBox_2\030\004 \002(\r\022\020\n\010day"
    "Box_3\030\005 \002(\r\022\026\n\016openServerTime\030\006 \002(\r\022%\n\007h"
    "alfBuy\030\007 \001(\0132\024.TgsProtocol.HalfBuy\022%\n\007ac"
    "hieve\030\010 \001(\0132\024.TgsProtocol.Achieve\022\025\n\rglo"
    "balItemGot\030\t \001(\t\022\023\n\013passwordGot\030\n \001(\t\022\024\n"
    "\014sevenDayRank\030\013 \001(\t\022#\n\003opt\030\014 \001(\0132\026.TgsPr"
    "otocol.OptGlobal\022\017\n\007boxdrop\030\r \001(\t\022\030\n\020Ast"
    "rologyCountry\030\016 \001(\r\022 \n\030AstrologyCountryN"
    "extTime\030\017 \001(\r\022\023\n\013rebateCount\030\020 \001(\r\022\027\n\017he"
    "roChangedTime\030\021 \001(\r\022\022\n\nchatpasswd\030\022 \003(\r\022"
    "\021\n\tmonthcard\030\023 \001(\t\022\036\n\026heroQualityChanged"
    "Time\030\024 \001(\r\"q\n\030LOBBY2DB_UpdateArenaRank\022A"
    "\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\032L"
    "OBBY2DB_UPDATE_ARENA_RANK\022\022\n\narenaHeros\030"
    "\002 \001(\014\"\226\001\n\027LOBBY2DB_UpdateArenaLog\022@\n\005cmd"
    "Id\030\001 \001(\0162\026.TgsProtocol.PacketDef:\031LOBBY2"
    "DB_UPDATE_ARENA_LOG\022\016\n\006charId\030\002 \002(\004\022)\n\010a"
    "renaLog\030\003 \002(\0132\027.TgsProtocol.DBArenaLog\"\217"
    "\001\n\024LOBBY2DB_OfflineMail\022<\n\005cmdId\030\001 \001(\0162\026"
    ".TgsProtocol.PacketDef:\025LOBBY2DB_OFFLINE"
    "_MAIL\022\016\n\006charId\030\002 \002(\004\022)\n\010mailinfo\030\003 \002(\0132"
    "\027.TgsProtocol.DBMailInfo\"\227\001\n\030DB2LOBBY_Lo"
    "adOfflineMail\022@\n\005cmdId\030\001 \001(\0162\026.TgsProtoc"
    "ol.PacketDef:\031DB2LOBBY_LOADOFFLINE_MAIL\022"
    "\016\n\006charId\030\002 \002(\004\022)\n\010mailList\030\003 \003(\0132\027.TgsP"
    "rotocol.DBMailInfo\"l\n\030LOBBY2DB_LoadOffli"
    "neMail\022@\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Pack"
    "etDef:\031LOBBY2DB_LOADOFFLINE_MAIL\022\016\n\006char"
    "Id\030\002 \002(\004\"\243\001\n\026LOBBY2DB_CheckTokenReq\022>\n\005c"
    "mdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\027LOBB"
    "Y2DB_CHECKTOKEN_REQ\022\016\n\006charId\030\002 \002(\004\022\022\n\nd"
    "eviceName\030\003 \002(\014\022\022\n\ndeviceType\030\004 \002(\014\022\021\n\td"
    "eviceUid\030\005 \002(\014\"\203\003\n\017LOBBY2DB_Server\0226\n\005cm"
    "dId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\017LOBBY"
    "2DB_SERVER\022\020\n\010serverId\030\002 \002(\r\022\017\n\007localIp\030"
    "\003 \002(\014\022\014\n\004port\030\004 \001(\r\022\021\n\tonlineNum\030\005 \001(\r\022\017"
    "\n\007version\030\006 \001(\014\022\014\n\004name\030\007 \001(\t\022\020\n\010sourceI"
    "p\030\010 \001(\t\022\021\n\tsourceDir\030\t \001(\t\022\020\n\010canlogin\030\n"
    " \001(\r\022\016\n\006status\030\013 \001(\r\022\025\n\rsourceVersion\030\014 "
    "\001(\t\022\027\n\017loginStrategyId\030\r \001(\r\022\n\n\002ip\030\016 \001(\014"
    "\022\023\n\013canRegister\030\017 \001(\r\022\022\n\nmergeTimes\030\020 \001("
    "\r\022\025\n\rlastMergetime\030\021 \001(\r\022\022\n\ncenterPort\030\022"
    " \001(\r\"\224\001\n\024LOBBY2DB_ApplyFriend\022<\n\005cmdId\030\001"
    " \001(\0162\026.TgsProtocol.PacketDef:\025LOBBY2DB_A"
    "PPLY_FRIEND\022+\n\010charInfo\030\002 \001(\0132\031.TgsProto"
    "col.DBFriendInfo\022\021\n\tdstCharId\030\003 \002(\004\"q\n\024D"
    "B2LOBBY_ApplyFriend\022<\n\005cmdId\030\001 \001(\0162\026.Tgs"
    "Protocol.PacketDef:\025DB2LOBBY_APPLY_FRIEN"
    "D\022\013\n\003ret\030\002 \002(\r\022\016\n\006charId\030\003 \002(\004\"\262\001\n\022LOBBY"
    "2DB_AddFriend\022:\n\005cmdId\030\001 \001(\0162\026.TgsProtoc"
    "ol.PacketDef:\023LOBBY2DB_ADD_FRIEND\022\020\n\010myC"
    "harId\030\002 \002(\004\022\021\n\tdstCharId\030\003 \002(\004\022+\n\010charIn"
    "fo\030\004 \001(\0132\031.TgsProtocol.DBFriendInfo\022\016\n\006b"
    "Agree\030\005 \002(\010\"\222\001\n\022DB2LOBBY_AddFriend\022:\n\005cm"
    "dId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\023DB2LO"
    "BBY_ADD_FRIEND\022\013\n\003ret\030\002 \002(\r\022\020\n\010myCharId\030"
    "\003 \002(\004\022\021\n\tdstCharId\030\004 \002(\004\022\016\n\006bAgree\030\005 \002(\010"
    "\"u\n\022LOBBY2DB_DelFriend\022:\n\005cmdId\030\001 \001(\0162\026."
    "TgsProtocol.PacketDef:\023LOBBY2DB_DEL_FRIE"
    "ND\022\020\n\010myCharId\030\002 \002(\004\022\021\n\tdstCharId\030\003 \002(\004\""
    "\202\001\n\022DB2LOBBY_DelFriend\022:\n\005cmdId\030\001 \001(\0162\026."
    "TgsProtocol.PacketDef:\023DB2LOBBY_DEL_FRIE"
    "ND\022\013\n\003ret\030\002 \002(\r\022\020\n\010myCharId\030\003 \002(\004\022\021\n\tdst"
    "CharId\030\004 \002(\004\"v\n\023LOBBY2DB_SendEnergy\022:\n\005c"
    "mdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\023LOBB"
    "Y2DB_SENDENERGY\022\021\n\tdstCharId\030\002 \002(\004\022\020\n\010my"
    "CharId\030\003 \002(\004\"\304\001\n\025LOBBY2DB_PurchaseInfo\022<"
    "\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\025L"
    "OBBY2DB_PURCHASEINFO\022\020\n\010myCharId\030\002 \002(\004\022\017"
    "\n\007goodsId\030\003 \002(\r\022\025\n\rgoodsQuantity\030\004 \002(\r\022\r"
    "\n\005value\030\005 \002(\r\022\026\n\016diamondPaidUse\030\006 \002(\r\022\014\n"
    "\004time\030\007 \002(\r\"n\n\rDB2LOBBY_Shop\0224\n\005cmdId\030\001 "
    "\001(\0162\026.TgsProtocol.PacketDef:\rDB2LOBBY_SH"
    "OP\022\'\n\010shopItem\030\002 \003(\0132\025.TgsProtocol.ShopI"
    "nfo\"\212\001\n\034LOBBY2DB_GetTargetFriendInfo\022E\n\005"
    "cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\036LOB"
    "BY2DB_GET_TARGET_FRIENDINFO\022\020\n\010myCharId\030"
    "\002 \002(\004\022\021\n\tdstCharId\030\003 \002(\004\"\265\001\n\034DB2LOBBY_Ge"
    "tTargetFriendInfo\022I\n\005cmdId\030\001 \001(\0162\026.TgsPr"
    "otocol.PacketDef:\"DB2LOBBY_GET_TARGET_FR"
    "IENDINFO_RET\022\013\n\003ret\030\002 \002(\r\022\016\n\006charid\030\003 \002("
    "\004\022\017\n\007bfriend\030\004 \002(\010\022\r\n\005black\030\005 \002(\010\022\r\n\005app"
    "ly\030\006 \002(\010\"\231\001\n\034LOBBY2DBGetTargetUserinfoRe"
    "q\022G\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef"
    ": LOBBY2DB_GET_TARGET_USERINFO_REQ\022\013\n\003cm"
    "d\030\002 \002(\r\022\020\n\010myCharId\030\003 \002(\004\022\021\n\tdstCharId\030\004"
    " \002(\004\"\321\001\n\034DB2LOBBYGetTargetUserinfoRet\022G\n"
    "\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef: DB"
    "2LOBBY_GET_TARGET_USERINFO_RET\022\013\n\003ret\030\002 "
    "\002(\r\022\013\n\003cmd\030\003 \002(\r\022\020\n\010myCharId\030\004 \002(\004\022\021\n\tds"
    "tCharId\030\005 \002(\004\022)\n\005other\030\006 \001(\0132\032.TgsProtoc"
    "ol.OtherUserInfo\"\210\001\n\035LOBBY2DBGetRecomman"
    "dFriendReq\022H\n\005cmdId\030\001 \001(\0162\026.TgsProtocol."
    "PacketDef:!LOBBY2DB_GET_RECOMMAND_FRIEND"
    "_REQ\022\016\n\006charId\030\002 \002(\004\022\r\n\005level\030\003 \002(\004\"\350\001\n\035"
    "DB2LOBBYGetRecommandFriendRet\022H\n\005cmdId\030\001"
    " \001(\0162\026.TgsProtocol.PacketDef:!DB2LOBBY_G"
    "ET_RECOMMAND_FRIEND_RET\022\016\n\006charId\030\002 \002(\004\022"
    "4\n\rrecommandList\030\003 \003(\0132\035.TgsProtocol.Cli"
    "entFriendInfo\0227\n\020recommandBigList\030\004 \003(\0132"
    "\035.TgsProtocol.ClientFriendInfo\"\311\002\n\nDbAct"
    "ivity\022\n\n\002id\030\001 \002(\r\022\016\n\006closed\030\002 \001(\r\022\020\n\010ope"
    "ntype\030\003 \001(\r\022\016\n\006actype\030\004 \001(\r\022\025\n\rshowBegin"
    "Time\030\005 \001(\r\022\023\n\013showEndTime\030\006 \001(\r\022\021\n\tbegin"
    "Time\030\007 \001(\r\022\017\n\007endTime\030\010 \001(\r\022\021\n\tplayerLev"
    "\030\t \001(\r\022\022\n\ntodayTimes\030\n \001(\014\022\016\n\006values\030\013 \001"
    "(\014\022\017\n\007rewards\030\014 \001(\014\022\014\n\004name\030\r \001(\014\022\014\n\004des"
    "c\030\016 \001(\014\022\021\n\tchildDesc\030\017 \001(\014\022\017\n\007values2\030\020 "
    "\001(\014\022\022\n\nactivetime\030\021 \001(\r\022\021\n\tcountdown\030\022 \001"
    "(\r\"[\n\030LOBBY2DB_LoadActivityReq\022\?\n\005cmdId\030"
    "\001 \001(\0162\026.TgsProtocol.PacketDef:\030LOBBY2DB_"
    "LOADACTIVITYREQ\"\203\001\n\030DB2LOBBY_LoadActivit"
    "yRet\022\?\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Packet"
    "Def:\030DB2LOBBY_LOADACTIVITYRET\022&\n\005items\030\002"
    " \003(\0132\027.TgsProtocol.DbActivity\"\224\001\n\032LOBBY2"
    "DB_UpdateActivityReq\022A\n\005cmdId\030\001 \001(\0162\026.Tg"
    "sProtocol.PacketDef:\032LOBBY2DB_UPDATEACTI"
    "VITYREQ\022\014\n\004type\030\002 \002(\r\022%\n\004item\030\003 \003(\0132\027.Tg"
    "sProtocol.DbActivity\"t\n\006DbRank\022\014\n\004type\030\001"
    " \002(\r\022\016\n\006charid\030\003 \002(\004\022\r\n\005value\030\004 \002(\004\022\022\n\nt"
    "emplateId\030\005 \001(\r\022\022\n\ninstanceId\030\006 \001(\004\022\025\n\ri"
    "nstanceValue\030\007 \001(\r\"S\n\024LOBBY2DB_LoadRankR"
    "eq\022;\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDe"
    "f:\024LOBBY2DB_LOADRANKREQ\"\204\001\n\024DB2LOBBY_Loa"
    "dRankRet\022;\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Pa"
    "cketDef:\024DB2LOBBY_LOADRANKRET\022\"\n\005items\030\002"
    " \003(\0132\023.TgsProtocol.DbRank\022\013\n\003ret\030\003 \001(\005\"z"
    "\n\026LOBBY2DB_UpdateRankReq\022=\n\005cmdId\030\001 \001(\0162"
    "\026.TgsProtocol.PacketDef:\026LOBBY2DB_UPDATE"
    "RANKREQ\022!\n\004item\030\002 \003(\0132\023.TgsProtocol.DbRa"
    "nk\"c\n\025LOBBY2DB_ClearRankReq\022<\n\005cmdId\030\001 \001"
    "(\0162\026.TgsProtocol.PacketDef:\025LOBBY2DB_CLE"
    "ARRANKREQ\022\014\n\004type\030\002 \002(\r\"s\n\034LOBBY2DB_Clea"
    "rPlayerRank_Req\022C\n\005cmdId\030\001 \001(\0162\026.TgsProt"
    "ocol.PacketDef:\034LOBBY2DB_CLEARPLAYERRANK"
    "_REQ\022\016\n\006charid\030\002 \002(\004\"o\n\007DbArena\022\014\n\004rank\030"
    "\001 \002(\r\022\016\n\006charid\030\002 \002(\004\022\020\n\010bestrank\030\003 \002(\r\022"
    "\020\n\010top3time\030\004 \002(\r\022\016\n\006winnum\030\005 \002(\004\022\022\n\nene"
    "mysrank\030\006 \002(\t\"U\n\025LOBBY2DB_LoadArenaReq\022<"
    "\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\025L"
    "OBBY2DB_LOADARENAREQ\"\207\001\n\025DB2LOBBY_LoadAr"
    "enaRet\022<\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Pack"
    "etDef:\025DB2LOBBY_LOADARENARET\022#\n\005items\030\002 "
    "\003(\0132\024.TgsProtocol.DbArena\022\013\n\003ret\030\003 \001(\005\"}"
    "\n\027LOBBY2DB_UpdateArenaReq\022>\n\005cmdId\030\001 \001(\016"
    "2\026.TgsProtocol.PacketDef:\027LOBBY2DB_UPDAT"
    "EARENAREQ\022\"\n\004item\030\002 \003(\0132\024.TgsProtocol.Db"
    "Arena\"l\n\017DBServerCompare\022\014\n\004rank\030\001 \002(\r\022,"
    "\n\004type\030\002 \002(\0162\036.TgsProtocol.ServerCompare"
    "Type\022\016\n\006charid\030\003 \002(\004\022\r\n\005value\030\004 \002(\004\"g\n\036L"
    "OBBY2DB_LoadServerCompare_Req\022E\n\005cmdId\030\001"
    " \001(\0162\026.TgsProtocol.PacketDef:\036LOBBY2DB_L"
    "OADSERVERCOMPARE_REQ\"\250\001\n\036DB2LOBBY_LoadSe"
    "rverCompare_Ret\022E\n\005cmdId\030\001 \001(\0162\026.TgsProt"
    "ocol.PacketDef:\036DB2LOBBY_LOADSERVERCOMPA"
    "RE_RET\022\013\n\003ret\030\002 \002(\r\0222\n\014compare_info\030\003 \003("
    "\0132\034.TgsProtocol.DBServerCompare\"\237\001\n LOBB"
    "Y2DB_UpdateServerCompare_Req\022G\n\005cmdId\030\001 "
    "\001(\0162\026.TgsProtocol.PacketDef: LOBBY2DB_UP"
    "DATESERVERCOMPARE_REQ\0222\n\014compare_info\030\002 "
    "\003(\0132\034.TgsProtocol.DBServerCompare\"\227\001\n\037LO"
    "BBY2DB_ClearServerCompare_Req\022F\n\005cmdId\030\001"
    " \001(\0162\026.TgsProtocol.PacketDef:\037LOBBY2DB_C"
    "LEARSERVERCOMPARE_REQ\022,\n\004type\030\002 \002(\0162\036.Tg"
    "sProtocol.ServerCompareType\"\320\001\n\rDBGuildP"
    "layer\022\016\n\006charid\030\001 \002(\004\022\017\n\007guildid\030\002 \002(\r\022\013"
    "\n\003job\030\003 \002(\r\022\020\n\010jointime\030\004 \002(\r\022\016\n\006ritual\030"
    "\005 \001(\r\022\014\n\004days\030\006 \001(\r\022\021\n\trewardgot\030\007 \001(\r\022\022"
    "\n\nritualtime\030\010 \001(\r\022\022\n\nratereward\030\t \001(\r\022\021"
    "\n\tterritory\030\n \001(\014\022\023\n\013skill_level\030\013 \001(\t\"/"
    "\n\014DBGuildApply\022\016\n\006charid\030\001 \002(\004\022\017\n\007guildi"
    "d\030\002 \003(\r\"\220\001\n\013DBGuildInfo\022$\n\004info\030\001 \002(\0132\026."
    "TgsProtocol.GuildInfo\022\021\n\tguild_map\030\002 \001(\014"
    "\022\030\n\020passed_chapterid\030\003 \001(\r\022.\n\007chapter\030\004 "
    "\001(\0132\035.TgsProtocol.GuildChapterInfo\"W\n\026LO"
    "BBY2DB_LoadGuild_Req\022=\n\005cmdId\030\001 \001(\0162\026.Tg"
    "sProtocol.PacketDef:\026LOBBY2DB_LOADGUILD_"
    "REQ\"\214\001\n\026DB2LOBBY_GuildInfo_Ret\022=\n\005cmdId\030"
    "\001 \001(\0162\026.TgsProtocol.PacketDef:\026DB2LOBBY_"
    "GUILDINFO_RET\022&\n\004item\030\002 \003(\0132\030.TgsProtoco"
    "l.DBGuildInfo\022\013\n\003ret\030\003 \001(\005\"\224\001\n\031DB2LOBBY_"
    "GuildPlayers_Ret\022@\n\005cmdId\030\001 \001(\0162\026.TgsPro"
    "tocol.PacketDef:\031DB2LOBBY_GUILDPlAYERS_R"
    "ET\022(\n\004item\030\002 \003(\0132\032.TgsProtocol.DBGuildPl"
    "ayer\022\013\n\003ret\030\003 \001(\005\"\221\001\n\030DB2LOBBY_GuildAppl"
    "ys_Ret\022\?\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.Pack"
    "etDef:\030DB2LOBBY_GUILDAPPLYS_RET\022\'\n\004item\030"
    "\002 \003(\0132\031.TgsProtocol.DBGuildApply\022\013\n\003ret\030"
    "\003 \001(\005\"\206\002\n\034LOBBY2DB_UpdateGuildInfo_Req\022C"
    "\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\034L"
    "OBBY2DB_UPDATEGUILDINFO_REQ\022\014\n\004type\030\002 \002("
    "\r\022\020\n\010guild_id\030\003 \002(\r\022$\n\004item\030\004 \001(\0132\026.TgsP"
    "rotocol.GuildInfo\022\021\n\tguild_map\030\005 \001(\014\022\030\n\020"
    "passed_chapterid\030\006 \001(\r\022.\n\007chapter\030\007 \001(\0132"
    "\035.TgsProtocol.GuildChapterInfo\"\276\001\n\036LOBBY"
    "2DB_UpdateGuildPlayer_Req\022E\n\005cmdId\030\001 \001(\016"
    "2\026.TgsProtocol.PacketDef:\036LOBBY2DB_UPDAT"
    "EGUILDPLAYER_REQ\022(\n\004item\030\002 \003(\0132\032.TgsProt"
    "ocol.DBGuildPlayer\022\021\n\tterritory\030\003 \001(\014\022\030\n"
    "\020territory_charid\030\004 \001(\004\"\216\001\n\035LOBBY2DB_Upd"
    "ateGuildApply_Req\022D\n\005cmdId\030\001 \001(\0162\026.TgsPr"
    "otocol.PacketDef:\035LOBBY2DB_UPDATEGUILDAP"
    "PLY_REQ\022\'\n\004item\030\002 \003(\0132\031.TgsProtocol.DBGu"
    "ildApply\"\206\001\n\036LOBBY2DB_UpdateGuildRitual_"
    "Req\022E\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketD"
    "ef:\036LOBBY2DB_UPDATEGUILDRITUAL_REQ\022\017\n\007gu"
    "ildid\030\002 \002(\r\022\014\n\004rate\030\003 \002(\r\"g\n\036LOBBY2DB_Up"
    "dateGuildNewDay_Req\022E\n\005cmdId\030\001 \001(\0162\026.Tgs"
    "Protocol.PacketDef:\036LOBBY2DB_UPDATEGUILD"
    "NEWDAY_REQ\"k\n\027LOBBY2DBLoadTreasureReq\022A\n"
    "\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef:\032LO"
    "BBY2DB_LOAD_TREASURE_REQ\022\r\n\005level\030\002 \002(\r\""
    "\226\001\n\027DB2LOBBYLoadTreasureRet\022A\n\005cmdId\030\001 \001"
    "(\0162\026.TgsProtocol.PacketDef:\032DB2LOBBY_LOA"
    "D_TREASURE_RET\022+\n\006player\030\002 \003(\0132\033.TgsProt"
    "ocol.DbTreasureInfo\022\013\n\003ret\030\003 \001(\r\"f\n\024LOBB"
    "Y2DBLoadRobotReq\022>\n\005cmdId\030\001 \001(\0162\026.TgsPro"
    "tocol.PacketDef:\027LOBBY2DB_LOAD_ROBOT_REQ"
    "\022\016\n\006CharId\030\002 \002(\004\"\335\001\n\024DB2LOBBYLoadRobotRe"
    "t\022>\n\005cmdId\030\001 \001(\0162\026.TgsProtocol.PacketDef"
    ":\027DB2LOBBY_LOAD_ROBOT_RET\022\013\n\003ret\030\002 \002(\r\022\016"
    "\n\006charId\030\003 \002(\004\0223\n\010charInfo\030\004 \002(\0132!.TgsPr"
    "otocol.DB2LOBBY_LoadCharRet\022\r\n\005index\030\005 \002"
    "(\r\022\017\n\007ownerId\030\006 \002(\004\022\023\n\013growupIndex\030\007 \002(\r"
    "\"\234\001\n\026LOBBY2DBCreateRobotReq\022@\n\005cmdId\030\001 \001"
    "(\0162\026.TgsProtocol.PacketDef:\031LOBBY2DB_CRE"
    "ATE_ROBOT_REQ\022\016\n\006charid\030\002 \002(\004\022\020\n\010charNam"
    "e\030\003 \002(\t\022\r\n\005index\030\004 \002(\r\022\017\n\007ownerId\030\005 \002(\004\""
    "\227\001\n\026DB2LOBBYCreateRobotRet\022@\n\005cmdId\030\001 \001("
    "\0162\026.TgsProtocol.PacketDef:\031DB2LOBBY_CREA"
    "TE_ROBOT_RET\022\013\n\003ret\030\002 \002(\r\022\016\n\006charid\030\003 \002("
    "\004\022\r\n\005index\030\004 \002(\r\022\017\n\007ownerId\030\005 \002(\004\"\320\001\n\024LO"
    "BBY2DBSaveRobotReq\022>\n\005cmdId\030\001 \001(\0162\026.TgsP"
    "rotocol.PacketDef:\027LOBBY2DB_SAVE_ROBOT_R"
    "EQ\022\016\n\006CharId\030\002 \002(\004\0223\n\010charInfo\030\003 \002(\0132!.T"
    "gsProtocol.LOBBY2DB_SaveCharReq\022\r\n\005index"
    "\030\004 \002(\r\022\017\n\007ownerId\030\005 \002(\004\022\023\n\013growupIndex\030\006"
    " \002(\r\"s\n\024DB2LOBBYSaveRobotRet\022>\n\005cmdId\030\001 "
    "\001(\0162\026.TgsProtocol.PacketDef:\027DB2LOBBY_SA"
    "VE_ROBOT_RET\022\013\n\003ret\030\002 \002(\r\022\016\n\006charId\030\003 \002("
    "\004", 20481);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol_lobby_db.proto", &protobuf_RegisterTypes);
  DbSystemSetting::default_instance_ = new DbSystemSetting();
  LOBBY2DB_LoadCharReq::default_instance_ = new LOBBY2DB_LoadCharReq();
  NationalDB::default_instance_ = new NationalDB();
  DB2LOBBY_LoadCharRet::default_instance_ = new DB2LOBBY_LoadCharRet();
  LOBBY2DB_CharAdvancedInfo::default_instance_ = new LOBBY2DB_CharAdvancedInfo();
  DbSevenDayActive::default_instance_ = new DbSevenDayActive();
  DbSevenDayActiveElement::default_instance_ = new DbSevenDayActiveElement();
  DbRebelArmy::default_instance_ = new DbRebelArmy();
  DbActionRecord::default_instance_ = new DbActionRecord();
  DbRaidTeam::default_instance_ = new DbRaidTeam();
  DBServerCompareGot::default_instance_ = new DBServerCompareGot();
  DB2LOBBY_CharAdvancedInfo::default_instance_ = new DB2LOBBY_CharAdvancedInfo();
  LOBBY2DB_LoadCharListReq::default_instance_ = new LOBBY2DB_LoadCharListReq();
  SimpleDBCharInfo::default_instance_ = new SimpleDBCharInfo();
  DB2LOBBY_LoadCharListRet::default_instance_ = new DB2LOBBY_LoadCharListRet();
  LOBBY2DB_CreateCharReq::default_instance_ = new LOBBY2DB_CreateCharReq();
  DB2LOBBY_CreateCharRet::default_instance_ = new DB2LOBBY_CreateCharRet();
  LOBBY2DB_SaveCharReq::default_instance_ = new LOBBY2DB_SaveCharReq();
  DB2LOBBY_SaveCharRet::default_instance_ = new DB2LOBBY_SaveCharRet();
  LOBBY2DB_SaveAdvancedCharReq::default_instance_ = new LOBBY2DB_SaveAdvancedCharReq();
  RetrieveDB::default_instance_ = new RetrieveDB();
  DB2LOBBY_SaveAdvancedCharRet::default_instance_ = new DB2LOBBY_SaveAdvancedCharRet();
  LOBBY2DB_LoadBagReq::default_instance_ = new LOBBY2DB_LoadBagReq();
  DB2LOBBY_LoadBagRet::default_instance_ = new DB2LOBBY_LoadBagRet();
  DB2LOBBY_CheckTokenRet::default_instance_ = new DB2LOBBY_CheckTokenRet();
  LOBBY2DB_SaveBagReq::default_instance_ = new LOBBY2DB_SaveBagReq();
  LOBBY2DB_AddDiamondReq::default_instance_ = new LOBBY2DB_AddDiamondReq();
  LOBBY2DB_ChangeNameCheckReq::default_instance_ = new LOBBY2DB_ChangeNameCheckReq();
  DB2LOBBY_ChangeNameCheckRet::default_instance_ = new DB2LOBBY_ChangeNameCheckRet();
  LOBBY2DBLoadWorldReq::default_instance_ = new LOBBY2DBLoadWorldReq();
  DB2LOBBYLoadWorldRet::default_instance_ = new DB2LOBBYLoadWorldRet();
  DB2LOBBY_Server::default_instance_ = new DB2LOBBY_Server();
  LOBBY2DB_UpdateSupremeHotBox::default_instance_ = new LOBBY2DB_UpdateSupremeHotBox();
  LOBBY2DB_UpdateArenaRank::default_instance_ = new LOBBY2DB_UpdateArenaRank();
  LOBBY2DB_UpdateArenaLog::default_instance_ = new LOBBY2DB_UpdateArenaLog();
  LOBBY2DB_OfflineMail::default_instance_ = new LOBBY2DB_OfflineMail();
  DB2LOBBY_LoadOfflineMail::default_instance_ = new DB2LOBBY_LoadOfflineMail();
  LOBBY2DB_LoadOfflineMail::default_instance_ = new LOBBY2DB_LoadOfflineMail();
  LOBBY2DB_CheckTokenReq::default_instance_ = new LOBBY2DB_CheckTokenReq();
  LOBBY2DB_Server::default_instance_ = new LOBBY2DB_Server();
  LOBBY2DB_ApplyFriend::default_instance_ = new LOBBY2DB_ApplyFriend();
  DB2LOBBY_ApplyFriend::default_instance_ = new DB2LOBBY_ApplyFriend();
  LOBBY2DB_AddFriend::default_instance_ = new LOBBY2DB_AddFriend();
  DB2LOBBY_AddFriend::default_instance_ = new DB2LOBBY_AddFriend();
  LOBBY2DB_DelFriend::default_instance_ = new LOBBY2DB_DelFriend();
  DB2LOBBY_DelFriend::default_instance_ = new DB2LOBBY_DelFriend();
  LOBBY2DB_SendEnergy::default_instance_ = new LOBBY2DB_SendEnergy();
  LOBBY2DB_PurchaseInfo::default_instance_ = new LOBBY2DB_PurchaseInfo();
  DB2LOBBY_Shop::default_instance_ = new DB2LOBBY_Shop();
  LOBBY2DB_GetTargetFriendInfo::default_instance_ = new LOBBY2DB_GetTargetFriendInfo();
  DB2LOBBY_GetTargetFriendInfo::default_instance_ = new DB2LOBBY_GetTargetFriendInfo();
  LOBBY2DBGetTargetUserinfoReq::default_instance_ = new LOBBY2DBGetTargetUserinfoReq();
  DB2LOBBYGetTargetUserinfoRet::default_instance_ = new DB2LOBBYGetTargetUserinfoRet();
  LOBBY2DBGetRecommandFriendReq::default_instance_ = new LOBBY2DBGetRecommandFriendReq();
  DB2LOBBYGetRecommandFriendRet::default_instance_ = new DB2LOBBYGetRecommandFriendRet();
  DbActivity::default_instance_ = new DbActivity();
  LOBBY2DB_LoadActivityReq::default_instance_ = new LOBBY2DB_LoadActivityReq();
  DB2LOBBY_LoadActivityRet::default_instance_ = new DB2LOBBY_LoadActivityRet();
  LOBBY2DB_UpdateActivityReq::default_instance_ = new LOBBY2DB_UpdateActivityReq();
  DbRank::default_instance_ = new DbRank();
  LOBBY2DB_LoadRankReq::default_instance_ = new LOBBY2DB_LoadRankReq();
  DB2LOBBY_LoadRankRet::default_instance_ = new DB2LOBBY_LoadRankRet();
  LOBBY2DB_UpdateRankReq::default_instance_ = new LOBBY2DB_UpdateRankReq();
  LOBBY2DB_ClearRankReq::default_instance_ = new LOBBY2DB_ClearRankReq();
  LOBBY2DB_ClearPlayerRank_Req::default_instance_ = new LOBBY2DB_ClearPlayerRank_Req();
  DbArena::default_instance_ = new DbArena();
  LOBBY2DB_LoadArenaReq::default_instance_ = new LOBBY2DB_LoadArenaReq();
  DB2LOBBY_LoadArenaRet::default_instance_ = new DB2LOBBY_LoadArenaRet();
  LOBBY2DB_UpdateArenaReq::default_instance_ = new LOBBY2DB_UpdateArenaReq();
  DBServerCompare::default_instance_ = new DBServerCompare();
  LOBBY2DB_LoadServerCompare_Req::default_instance_ = new LOBBY2DB_LoadServerCompare_Req();
  DB2LOBBY_LoadServerCompare_Ret::default_instance_ = new DB2LOBBY_LoadServerCompare_Ret();
  LOBBY2DB_UpdateServerCompare_Req::default_instance_ = new LOBBY2DB_UpdateServerCompare_Req();
  LOBBY2DB_ClearServerCompare_Req::default_instance_ = new LOBBY2DB_ClearServerCompare_Req();
  DBGuildPlayer::default_instance_ = new DBGuildPlayer();
  DBGuildApply::default_instance_ = new DBGuildApply();
  DBGuildInfo::default_instance_ = new DBGuildInfo();
  LOBBY2DB_LoadGuild_Req::default_instance_ = new LOBBY2DB_LoadGuild_Req();
  DB2LOBBY_GuildInfo_Ret::default_instance_ = new DB2LOBBY_GuildInfo_Ret();
  DB2LOBBY_GuildPlayers_Ret::default_instance_ = new DB2LOBBY_GuildPlayers_Ret();
  DB2LOBBY_GuildApplys_Ret::default_instance_ = new DB2LOBBY_GuildApplys_Ret();
  LOBBY2DB_UpdateGuildInfo_Req::default_instance_ = new LOBBY2DB_UpdateGuildInfo_Req();
  LOBBY2DB_UpdateGuildPlayer_Req::default_instance_ = new LOBBY2DB_UpdateGuildPlayer_Req();
  LOBBY2DB_UpdateGuildApply_Req::default_instance_ = new LOBBY2DB_UpdateGuildApply_Req();
  LOBBY2DB_UpdateGuildRitual_Req::default_instance_ = new LOBBY2DB_UpdateGuildRitual_Req();
  LOBBY2DB_UpdateGuildNewDay_Req::default_instance_ = new LOBBY2DB_UpdateGuildNewDay_Req();
  LOBBY2DBLoadTreasureReq::default_instance_ = new LOBBY2DBLoadTreasureReq();
  DB2LOBBYLoadTreasureRet::default_instance_ = new DB2LOBBYLoadTreasureRet();
  LOBBY2DBLoadRobotReq::default_instance_ = new LOBBY2DBLoadRobotReq();
  DB2LOBBYLoadRobotRet::default_instance_ = new DB2LOBBYLoadRobotRet();
  LOBBY2DBCreateRobotReq::default_instance_ = new LOBBY2DBCreateRobotReq();
  DB2LOBBYCreateRobotRet::default_instance_ = new DB2LOBBYCreateRobotRet();
  LOBBY2DBSaveRobotReq::default_instance_ = new LOBBY2DBSaveRobotReq();
  DB2LOBBYSaveRobotRet::default_instance_ = new DB2LOBBYSaveRobotRet();
  DbSystemSetting::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_LoadCharReq::default_instance_->InitAsDefaultInstance();
  NationalDB::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_LoadCharRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_CharAdvancedInfo::default_instance_->InitAsDefaultInstance();
  DbSevenDayActive::default_instance_->InitAsDefaultInstance();
  DbSevenDayActiveElement::default_instance_->InitAsDefaultInstance();
  DbRebelArmy::default_instance_->InitAsDefaultInstance();
  DbActionRecord::default_instance_->InitAsDefaultInstance();
  DbRaidTeam::default_instance_->InitAsDefaultInstance();
  DBServerCompareGot::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_CharAdvancedInfo::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_LoadCharListReq::default_instance_->InitAsDefaultInstance();
  SimpleDBCharInfo::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_LoadCharListRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_CreateCharReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_CreateCharRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_SaveCharReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_SaveCharRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_SaveAdvancedCharReq::default_instance_->InitAsDefaultInstance();
  RetrieveDB::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_SaveAdvancedCharRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_LoadBagReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_LoadBagRet::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_CheckTokenRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_SaveBagReq::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_AddDiamondReq::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_ChangeNameCheckReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_ChangeNameCheckRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DBLoadWorldReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBYLoadWorldRet::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_Server::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateSupremeHotBox::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateArenaRank::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateArenaLog::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_OfflineMail::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_LoadOfflineMail::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_LoadOfflineMail::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_CheckTokenReq::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_Server::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_ApplyFriend::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_ApplyFriend::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_AddFriend::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_AddFriend::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_DelFriend::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_DelFriend::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_SendEnergy::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_PurchaseInfo::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_Shop::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_GetTargetFriendInfo::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_GetTargetFriendInfo::default_instance_->InitAsDefaultInstance();
  LOBBY2DBGetTargetUserinfoReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBYGetTargetUserinfoRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DBGetRecommandFriendReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBYGetRecommandFriendRet::default_instance_->InitAsDefaultInstance();
  DbActivity::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_LoadActivityReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_LoadActivityRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateActivityReq::default_instance_->InitAsDefaultInstance();
  DbRank::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_LoadRankReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_LoadRankRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateRankReq::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_ClearRankReq::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_ClearPlayerRank_Req::default_instance_->InitAsDefaultInstance();
  DbArena::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_LoadArenaReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_LoadArenaRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateArenaReq::default_instance_->InitAsDefaultInstance();
  DBServerCompare::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_LoadServerCompare_Req::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_LoadServerCompare_Ret::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateServerCompare_Req::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_ClearServerCompare_Req::default_instance_->InitAsDefaultInstance();
  DBGuildPlayer::default_instance_->InitAsDefaultInstance();
  DBGuildApply::default_instance_->InitAsDefaultInstance();
  DBGuildInfo::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_LoadGuild_Req::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_GuildInfo_Ret::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_GuildPlayers_Ret::default_instance_->InitAsDefaultInstance();
  DB2LOBBY_GuildApplys_Ret::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateGuildInfo_Req::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateGuildPlayer_Req::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateGuildApply_Req::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateGuildRitual_Req::default_instance_->InitAsDefaultInstance();
  LOBBY2DB_UpdateGuildNewDay_Req::default_instance_->InitAsDefaultInstance();
  LOBBY2DBLoadTreasureReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBYLoadTreasureRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DBLoadRobotReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBYLoadRobotRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DBCreateRobotReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBYCreateRobotRet::default_instance_->InitAsDefaultInstance();
  LOBBY2DBSaveRobotReq::default_instance_->InitAsDefaultInstance();
  DB2LOBBYSaveRobotRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_5flobby_5fdb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_5flobby_5fdb_2eproto {
  StaticDescriptorInitializer_protocol_5flobby_5fdb_2eproto() {
    protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  }
} static_descriptor_initializer_protocol_5flobby_5fdb_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DbSystemSetting::kModeMaskFieldNumber;
const int DbSystemSetting::kModeReserverFieldNumber;
const int DbSystemSetting::kShowCharIdFieldNumber;
const int DbSystemSetting::kRcvInviteFieldNumber;
const int DbSystemSetting::kShowAudioeffFieldNumber;
const int DbSystemSetting::kShowMusicFieldNumber;
const int DbSystemSetting::kShowEffectFieldNumber;
const int DbSystemSetting::kHidDensuitFieldNumber;
const int DbSystemSetting::kReserveBuffFieldNumber;
#endif  // !_MSC_VER

DbSystemSetting::DbSystemSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbSystemSetting)
}

void DbSystemSetting::InitAsDefaultInstance() {
}

DbSystemSetting::DbSystemSetting(const DbSystemSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbSystemSetting)
}

void DbSystemSetting::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  modemask_ = GOOGLE_ULONGLONG(0);
  modereserver_ = GOOGLE_ULONGLONG(0);
  showcharid_ = 0u;
  rcvinvite_ = 0u;
  showaudioeff_ = 0u;
  showmusic_ = 0u;
  showeffect_ = 0u;
  hiddensuit_ = 0u;
  reservebuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbSystemSetting::~DbSystemSetting() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbSystemSetting)
  SharedDtor();
}

void DbSystemSetting::SharedDtor() {
  if (reservebuff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reservebuff_;
  }
  if (this != default_instance_) {
  }
}

void DbSystemSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbSystemSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbSystemSetting_descriptor_;
}

const DbSystemSetting& DbSystemSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DbSystemSetting* DbSystemSetting::default_instance_ = NULL;

DbSystemSetting* DbSystemSetting::New() const {
  return new DbSystemSetting;
}

void DbSystemSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbSystemSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(modemask_, hiddensuit_);
  }
  if (has_reservebuff()) {
    if (reservebuff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      reservebuff_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbSystemSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbSystemSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 modeMask = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modemask_)));
          set_has_modemask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_modeReserver;
        break;
      }

      // required uint64 modeReserver = 2;
      case 2: {
        if (tag == 16) {
         parse_modeReserver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modereserver_)));
          set_has_modereserver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_showCharId;
        break;
      }

      // required uint32 showCharId = 3;
      case 3: {
        if (tag == 24) {
         parse_showCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showcharid_)));
          set_has_showcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rcvInvite;
        break;
      }

      // required uint32 rcvInvite = 4;
      case 4: {
        if (tag == 32) {
         parse_rcvInvite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcvinvite_)));
          set_has_rcvinvite();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_showAudioeff;
        break;
      }

      // required uint32 showAudioeff = 5;
      case 5: {
        if (tag == 40) {
         parse_showAudioeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showaudioeff_)));
          set_has_showaudioeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_showMusic;
        break;
      }

      // required uint32 showMusic = 6;
      case 6: {
        if (tag == 48) {
         parse_showMusic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showmusic_)));
          set_has_showmusic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_showEffect;
        break;
      }

      // required uint32 showEffect = 7;
      case 7: {
        if (tag == 56) {
         parse_showEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showeffect_)));
          set_has_showeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hidDensuit;
        break;
      }

      // required uint32 hidDensuit = 8;
      case 8: {
        if (tag == 64) {
         parse_hidDensuit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hiddensuit_)));
          set_has_hiddensuit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_reserveBuff;
        break;
      }

      // required bytes reserveBuff = 9;
      case 9: {
        if (tag == 74) {
         parse_reserveBuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reservebuff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbSystemSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbSystemSetting)
  return false;
#undef DO_
}

void DbSystemSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbSystemSetting)
  // required uint64 modeMask = 1;
  if (has_modemask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->modemask(), output);
  }

  // required uint64 modeReserver = 2;
  if (has_modereserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->modereserver(), output);
  }

  // required uint32 showCharId = 3;
  if (has_showcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->showcharid(), output);
  }

  // required uint32 rcvInvite = 4;
  if (has_rcvinvite()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rcvinvite(), output);
  }

  // required uint32 showAudioeff = 5;
  if (has_showaudioeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->showaudioeff(), output);
  }

  // required uint32 showMusic = 6;
  if (has_showmusic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->showmusic(), output);
  }

  // required uint32 showEffect = 7;
  if (has_showeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->showeffect(), output);
  }

  // required uint32 hidDensuit = 8;
  if (has_hiddensuit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hiddensuit(), output);
  }

  // required bytes reserveBuff = 9;
  if (has_reservebuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->reservebuff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbSystemSetting)
}

::google::protobuf::uint8* DbSystemSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbSystemSetting)
  // required uint64 modeMask = 1;
  if (has_modemask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->modemask(), target);
  }

  // required uint64 modeReserver = 2;
  if (has_modereserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->modereserver(), target);
  }

  // required uint32 showCharId = 3;
  if (has_showcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->showcharid(), target);
  }

  // required uint32 rcvInvite = 4;
  if (has_rcvinvite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rcvinvite(), target);
  }

  // required uint32 showAudioeff = 5;
  if (has_showaudioeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->showaudioeff(), target);
  }

  // required uint32 showMusic = 6;
  if (has_showmusic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->showmusic(), target);
  }

  // required uint32 showEffect = 7;
  if (has_showeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->showeffect(), target);
  }

  // required uint32 hidDensuit = 8;
  if (has_hiddensuit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hiddensuit(), target);
  }

  // required bytes reserveBuff = 9;
  if (has_reservebuff()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->reservebuff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbSystemSetting)
  return target;
}

int DbSystemSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 modeMask = 1;
    if (has_modemask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->modemask());
    }

    // required uint64 modeReserver = 2;
    if (has_modereserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->modereserver());
    }

    // required uint32 showCharId = 3;
    if (has_showcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showcharid());
    }

    // required uint32 rcvInvite = 4;
    if (has_rcvinvite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcvinvite());
    }

    // required uint32 showAudioeff = 5;
    if (has_showaudioeff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showaudioeff());
    }

    // required uint32 showMusic = 6;
    if (has_showmusic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showmusic());
    }

    // required uint32 showEffect = 7;
    if (has_showeffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showeffect());
    }

    // required uint32 hidDensuit = 8;
    if (has_hiddensuit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hiddensuit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes reserveBuff = 9;
    if (has_reservebuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reservebuff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbSystemSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbSystemSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbSystemSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbSystemSetting::MergeFrom(const DbSystemSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modemask()) {
      set_modemask(from.modemask());
    }
    if (from.has_modereserver()) {
      set_modereserver(from.modereserver());
    }
    if (from.has_showcharid()) {
      set_showcharid(from.showcharid());
    }
    if (from.has_rcvinvite()) {
      set_rcvinvite(from.rcvinvite());
    }
    if (from.has_showaudioeff()) {
      set_showaudioeff(from.showaudioeff());
    }
    if (from.has_showmusic()) {
      set_showmusic(from.showmusic());
    }
    if (from.has_showeffect()) {
      set_showeffect(from.showeffect());
    }
    if (from.has_hiddensuit()) {
      set_hiddensuit(from.hiddensuit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reservebuff()) {
      set_reservebuff(from.reservebuff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbSystemSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbSystemSetting::CopyFrom(const DbSystemSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbSystemSetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void DbSystemSetting::Swap(DbSystemSetting* other) {
  if (other != this) {
    std::swap(modemask_, other->modemask_);
    std::swap(modereserver_, other->modereserver_);
    std::swap(showcharid_, other->showcharid_);
    std::swap(rcvinvite_, other->rcvinvite_);
    std::swap(showaudioeff_, other->showaudioeff_);
    std::swap(showmusic_, other->showmusic_);
    std::swap(showeffect_, other->showeffect_);
    std::swap(hiddensuit_, other->hiddensuit_);
    std::swap(reservebuff_, other->reservebuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbSystemSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbSystemSetting_descriptor_;
  metadata.reflection = DbSystemSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_LoadCharReq::kCmdIdFieldNumber;
const int LOBBY2DB_LoadCharReq::kCharIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_LoadCharReq::LOBBY2DB_LoadCharReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_LoadCharReq)
}

void LOBBY2DB_LoadCharReq::InitAsDefaultInstance() {
}

LOBBY2DB_LoadCharReq::LOBBY2DB_LoadCharReq(const LOBBY2DB_LoadCharReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_LoadCharReq)
}

void LOBBY2DB_LoadCharReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300000;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_LoadCharReq::~LOBBY2DB_LoadCharReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_LoadCharReq)
  SharedDtor();
}

void LOBBY2DB_LoadCharReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_LoadCharReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_LoadCharReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_LoadCharReq_descriptor_;
}

const LOBBY2DB_LoadCharReq& LOBBY2DB_LoadCharReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_LoadCharReq* LOBBY2DB_LoadCharReq::default_instance_ = NULL;

LOBBY2DB_LoadCharReq* LOBBY2DB_LoadCharReq::New() const {
  return new LOBBY2DB_LoadCharReq;
}

void LOBBY2DB_LoadCharReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 300000;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_LoadCharReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_LoadCharReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_CHARACTER_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CharId;
        break;
      }

      // required uint64 CharId = 2;
      case 2: {
        if (tag == 16) {
         parse_CharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_LoadCharReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_LoadCharReq)
  return false;
#undef DO_
}

void LOBBY2DB_LoadCharReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_LoadCharReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_CHARACTER_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 CharId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_LoadCharReq)
}

::google::protobuf::uint8* LOBBY2DB_LoadCharReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_LoadCharReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_CHARACTER_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 CharId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_LoadCharReq)
  return target;
}

int LOBBY2DB_LoadCharReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_CHARACTER_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 CharId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_LoadCharReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_LoadCharReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_LoadCharReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_LoadCharReq::MergeFrom(const LOBBY2DB_LoadCharReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_LoadCharReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_LoadCharReq::CopyFrom(const LOBBY2DB_LoadCharReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_LoadCharReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LOBBY2DB_LoadCharReq::Swap(LOBBY2DB_LoadCharReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_LoadCharReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_LoadCharReq_descriptor_;
  metadata.reflection = LOBBY2DB_LoadCharReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NationalDB::kNationalIdFieldNumber;
const int NationalDB::kLastChangeTimeFieldNumber;
#endif  // !_MSC_VER

NationalDB::NationalDB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.NationalDB)
}

void NationalDB::InitAsDefaultInstance() {
}

NationalDB::NationalDB(const NationalDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.NationalDB)
}

void NationalDB::SharedCtor() {
  _cached_size_ = 0;
  nationalid_ = 0u;
  lastchangetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NationalDB::~NationalDB() {
  // @@protoc_insertion_point(destructor:TgsProtocol.NationalDB)
  SharedDtor();
}

void NationalDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NationalDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NationalDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NationalDB_descriptor_;
}

const NationalDB& NationalDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

NationalDB* NationalDB::default_instance_ = NULL;

NationalDB* NationalDB::New() const {
  return new NationalDB;
}

void NationalDB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NationalDB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(nationalid_, lastchangetime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NationalDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.NationalDB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nationalId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nationalid_)));
          set_has_nationalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lastChangeTime;
        break;
      }

      // required uint32 lastChangeTime = 2;
      case 2: {
        if (tag == 16) {
         parse_lastChangeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastchangetime_)));
          set_has_lastchangetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.NationalDB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.NationalDB)
  return false;
#undef DO_
}

void NationalDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.NationalDB)
  // required uint32 nationalId = 1;
  if (has_nationalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nationalid(), output);
  }

  // required uint32 lastChangeTime = 2;
  if (has_lastchangetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lastchangetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.NationalDB)
}

::google::protobuf::uint8* NationalDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.NationalDB)
  // required uint32 nationalId = 1;
  if (has_nationalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nationalid(), target);
  }

  // required uint32 lastChangeTime = 2;
  if (has_lastchangetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lastchangetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.NationalDB)
  return target;
}

int NationalDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nationalId = 1;
    if (has_nationalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nationalid());
    }

    // required uint32 lastChangeTime = 2;
    if (has_lastchangetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastchangetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NationalDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NationalDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NationalDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NationalDB::MergeFrom(const NationalDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nationalid()) {
      set_nationalid(from.nationalid());
    }
    if (from.has_lastchangetime()) {
      set_lastchangetime(from.lastchangetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NationalDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NationalDB::CopyFrom(const NationalDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NationalDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NationalDB::Swap(NationalDB* other) {
  if (other != this) {
    std::swap(nationalid_, other->nationalid_);
    std::swap(lastchangetime_, other->lastchangetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NationalDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NationalDB_descriptor_;
  metadata.reflection = NationalDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_LoadCharRet::kCmdIdFieldNumber;
const int DB2LOBBY_LoadCharRet::kRetFieldNumber;
const int DB2LOBBY_LoadCharRet::kCharIdFieldNumber;
const int DB2LOBBY_LoadCharRet::kCharNameFieldNumber;
const int DB2LOBBY_LoadCharRet::kCashFieldNumber;
const int DB2LOBBY_LoadCharRet::kGoldFieldNumber;
const int DB2LOBBY_LoadCharRet::kLevelFieldNumber;
const int DB2LOBBY_LoadCharRet::kExpFieldNumber;
const int DB2LOBBY_LoadCharRet::kCurStaminaFieldNumber;
const int DB2LOBBY_LoadCharRet::kMaxStaminaFieldNumber;
const int DB2LOBBY_LoadCharRet::kCreateTimeFieldNumber;
const int DB2LOBBY_LoadCharRet::kOfflineTimeFieldNumber;
const int DB2LOBBY_LoadCharRet::kUpdateStaminaTimeFieldNumber;
const int DB2LOBBY_LoadCharRet::kBitFlagFieldNumber;
const int DB2LOBBY_LoadCharRet::kQuestFieldNumber;
const int DB2LOBBY_LoadCharRet::kEvaluationFieldNumber;
const int DB2LOBBY_LoadCharRet::kChapterRewardFieldNumber;
const int DB2LOBBY_LoadCharRet::kVipExpFieldNumber;
const int DB2LOBBY_LoadCharRet::kVipLevelFieldNumber;
const int DB2LOBBY_LoadCharRet::kFormationFieldNumber;
const int DB2LOBBY_LoadCharRet::kHeroBagNumFieldNumber;
const int DB2LOBBY_LoadCharRet::kHeroListFieldNumber;
const int DB2LOBBY_LoadCharRet::kGenderFieldNumber;
const int DB2LOBBY_LoadCharRet::kPhotoFieldNumber;
const int DB2LOBBY_LoadCharRet::kEssenceItemFieldNumber;
const int DB2LOBBY_LoadCharRet::kRefreshPriceFieldNumber;
const int DB2LOBBY_LoadCharRet::kFestivityFieldNumber;
const int DB2LOBBY_LoadCharRet::kLockChatEndTimeFieldNumber;
const int DB2LOBBY_LoadCharRet::kDayChatTimesFieldNumber;
const int DB2LOBBY_LoadCharRet::kSkillPointFieldNumber;
const int DB2LOBBY_LoadCharRet::kUpdateSkillPointTimeFieldNumber;
const int DB2LOBBY_LoadCharRet::kEnergyFieldNumber;
const int DB2LOBBY_LoadCharRet::kUpdateEnergyTimeFieldNumber;
const int DB2LOBBY_LoadCharRet::kEquipNewFieldNumber;
const int DB2LOBBY_LoadCharRet::kArenaFormationFieldNumber;
const int DB2LOBBY_LoadCharRet::kRechargeFieldNumber;
const int DB2LOBBY_LoadCharRet::kProgressFieldNumber;
const int DB2LOBBY_LoadCharRet::kActivityFieldNumber;
const int DB2LOBBY_LoadCharRet::kAssistFormationFieldNumber;
const int DB2LOBBY_LoadCharRet::kChapterBoxFieldNumber;
const int DB2LOBBY_LoadCharRet::kCoinsFieldNumber;
const int DB2LOBBY_LoadCharRet::kLeavePointFieldNumber;
const int DB2LOBBY_LoadCharRet::kOnlinetimeFieldNumber;
const int DB2LOBBY_LoadCharRet::kGmFlushTimeFieldNumber;
const int DB2LOBBY_LoadCharRet::kIsshopbuyFieldNumber;
const int DB2LOBBY_LoadCharRet::kDeviceidFieldNumber;
const int DB2LOBBY_LoadCharRet::kDiamondPayFieldNumber;
const int DB2LOBBY_LoadCharRet::kRecommfriendsFieldNumber;
const int DB2LOBBY_LoadCharRet::kPrizeInfoFieldNumber;
const int DB2LOBBY_LoadCharRet::kAvoidBattleFieldNumber;
const int DB2LOBBY_LoadCharRet::kAccOnlineTimeFieldNumber;
const int DB2LOBBY_LoadCharRet::kItemGotFieldNumber;
const int DB2LOBBY_LoadCharRet::kBuyedPriceFieldNumber;
const int DB2LOBBY_LoadCharRet::kPositionFieldNumber;
const int DB2LOBBY_LoadCharRet::kLastUpdateTimeFieldNumber;
const int DB2LOBBY_LoadCharRet::kCrusadeMaxIdFieldNumber;
const int DB2LOBBY_LoadCharRet::kCrusadeCurIdFieldNumber;
const int DB2LOBBY_LoadCharRet::kInt32AttrFieldNumber;
const int DB2LOBBY_LoadCharRet::kAwakeHeroesFieldNumber;
const int DB2LOBBY_LoadCharRet::kTombinfoFieldNumber;
const int DB2LOBBY_LoadCharRet::kMarkListFieldNumber;
const int DB2LOBBY_LoadCharRet::kRechargeChooseFieldNumber;
const int DB2LOBBY_LoadCharRet::kNationalFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_LoadCharRet::DB2LOBBY_LoadCharRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_LoadCharRet)
}

void DB2LOBBY_LoadCharRet::InitAsDefaultInstance() {
  national_ = const_cast< ::TgsProtocol::NationalDB*>(&::TgsProtocol::NationalDB::default_instance());
}

DB2LOBBY_LoadCharRet::DB2LOBBY_LoadCharRet(const DB2LOBBY_LoadCharRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_LoadCharRet)
}

void DB2LOBBY_LoadCharRet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 350000;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cash_ = 0u;
  gold_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  curstamina_ = 0u;
  maxstamina_ = 0u;
  createtime_ = 0u;
  offlinetime_ = 0u;
  updatestaminatime_ = 0u;
  bitflag_ = 0u;
  quest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evaluation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chapterreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vipexp_ = 0u;
  viplevel_ = 0u;
  herobagnum_ = 0u;
  herolist_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0u;
  photo_ = 0u;
  essenceitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  festivity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lockchatendtime_ = 0u;
  daychattimes_ = 0u;
  skillpoint_ = 0u;
  updateskillpointtime_ = 0u;
  energy_ = 0u;
  updateenergytime_ = 0u;
  equipnew_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recharge_ = 0u;
  progress_ = 0u;
  activity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assistformation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chapterbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coins_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leavepoint_ = 0u;
  onlinetime_ = 0u;
  gmflushtime_ = 0u;
  isshopbuy_ = 0u;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diamondpay_ = 0u;
  recommfriends_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prizeinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avoidbattle_ = 0u;
  acconlinetime_ = 0u;
  itemgot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = 0u;
  lastupdatetime_ = 0u;
  crusademaxid_ = 0u;
  crusadecurid_ = 0u;
  int32attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  awakeheroes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tombinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rechargechoose_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_LoadCharRet::~DB2LOBBY_LoadCharRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_LoadCharRet)
  SharedDtor();
}

void DB2LOBBY_LoadCharRet::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (quest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quest_;
  }
  if (evaluation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete evaluation_;
  }
  if (chapterreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chapterreward_;
  }
  if (herolist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete herolist_;
  }
  if (essenceitem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete essenceitem_;
  }
  if (festivity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete festivity_;
  }
  if (equipnew_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipnew_;
  }
  if (activity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activity_;
  }
  if (assistformation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assistformation_;
  }
  if (chapterbox_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chapterbox_;
  }
  if (coins_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete coins_;
  }
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (recommfriends_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recommfriends_;
  }
  if (prizeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prizeinfo_;
  }
  if (itemgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemgot_;
  }
  if (int32attr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete int32attr_;
  }
  if (awakeheroes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete awakeheroes_;
  }
  if (tombinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tombinfo_;
  }
  if (rechargechoose_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rechargechoose_;
  }
  if (this != default_instance_) {
    delete national_;
  }
}

void DB2LOBBY_LoadCharRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_LoadCharRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_LoadCharRet_descriptor_;
}

const DB2LOBBY_LoadCharRet& DB2LOBBY_LoadCharRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_LoadCharRet* DB2LOBBY_LoadCharRet::default_instance_ = NULL;

DB2LOBBY_LoadCharRet* DB2LOBBY_LoadCharRet::New() const {
  return new DB2LOBBY_LoadCharRet;
}

void DB2LOBBY_LoadCharRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_LoadCharRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ret_, charid_);
    ZR_(cash_, exp_);
    cmdid_ = 350000;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(curstamina_, bitflag_);
    if (has_quest()) {
      if (quest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quest_->clear();
      }
    }
    if (has_evaluation()) {
      if (evaluation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        evaluation_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16187392) {
    ZR_(vipexp_, viplevel_);
    ZR_(herobagnum_, gender_);
    if (has_chapterreward()) {
      if (chapterreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chapterreward_->clear();
      }
    }
    if (has_herolist()) {
      if (herolist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        herolist_->clear();
      }
    }
    photo_ = 0u;
  }
  if (_has_bits_[24 / 32] & 4244635648) {
    ZR_(daychattimes_, energy_);
    if (has_essenceitem()) {
      if (essenceitem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        essenceitem_->clear();
      }
    }
    if (has_festivity()) {
      if (festivity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        festivity_->clear();
      }
    }
    lockchatendtime_ = 0u;
  }
  if (_has_bits_[32 / 32] & 251) {
    ZR_(updateenergytime_, recharge_);
    if (has_equipnew()) {
      if (equipnew_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        equipnew_->clear();
      }
    }
    progress_ = 0u;
    if (has_activity()) {
      if (activity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        activity_->clear();
      }
    }
    if (has_assistformation()) {
      if (assistformation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assistformation_->clear();
      }
    }
    if (has_chapterbox()) {
      if (chapterbox_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chapterbox_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(onlinetime_, gmflushtime_);
    ZR_(isshopbuy_, diamondpay_);
    if (has_coins()) {
      if (coins_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        coins_->clear();
      }
    }
    leavepoint_ = 0u;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceid_->clear();
      }
    }
    if (has_recommfriends()) {
      if (recommfriends_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recommfriends_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & 15663104) {
    ZR_(avoidbattle_, acconlinetime_);
    ZR_(position_, crusademaxid_);
    if (has_prizeinfo()) {
      if (prizeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        prizeinfo_->clear();
      }
    }
    if (has_itemgot()) {
      if (itemgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemgot_->clear();
      }
    }
  }
  if (_has_bits_[56 / 32] & 1862270976) {
    crusadecurid_ = 0u;
    if (has_int32attr()) {
      if (int32attr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        int32attr_->clear();
      }
    }
    if (has_awakeheroes()) {
      if (awakeheroes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        awakeheroes_->clear();
      }
    }
    if (has_tombinfo()) {
      if (tombinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tombinfo_->clear();
      }
    }
    if (has_rechargechoose()) {
      if (rechargechoose_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rechargechoose_->clear();
      }
    }
    if (has_national()) {
      if (national_ != NULL) national_->::TgsProtocol::NationalDB::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  formation_.Clear();
  refreshprice_.Clear();
  arenaformation_.Clear();
  buyedprice_.Clear();
  marklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_LoadCharRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_LoadCharRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_CHARACTER_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charId;
        break;
      }

      // required uint64 charId = 3;
      case 3: {
        if (tag == 24) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charName;
        break;
      }

      // optional bytes charName = 4;
      case 4: {
        if (tag == 34) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cash;
        break;
      }

      // optional uint32 cash = 5;
      case 5: {
        if (tag == 40) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 6;
      case 6: {
        if (tag == 48) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 8;
      case 8: {
        if (tag == 64) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_curStamina;
        break;
      }

      // optional uint32 curStamina = 9;
      case 9: {
        if (tag == 72) {
         parse_curStamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstamina_)));
          set_has_curstamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxStamina;
        break;
      }

      // optional uint32 maxStamina = 10;
      case 10: {
        if (tag == 80) {
         parse_maxStamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxstamina_)));
          set_has_maxstamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_createTime;
        break;
      }

      // optional uint32 createTime = 11;
      case 11: {
        if (tag == 88) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_offlineTime;
        break;
      }

      // optional uint32 offlineTime = 12;
      case 12: {
        if (tag == 96) {
         parse_offlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_updateStaminaTime;
        break;
      }

      // optional uint32 updateStaminaTime = 13;
      case 13: {
        if (tag == 104) {
         parse_updateStaminaTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatestaminatime_)));
          set_has_updatestaminatime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_bitFlag;
        break;
      }

      // optional uint32 bitFlag = 14;
      case 14: {
        if (tag == 112) {
         parse_bitFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitflag_)));
          set_has_bitflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_quest;
        break;
      }

      // optional bytes quest = 15;
      case 15: {
        if (tag == 122) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_evaluation;
        break;
      }

      // optional bytes evaluation = 16;
      case 16: {
        if (tag == 130) {
         parse_evaluation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_evaluation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_chapterReward;
        break;
      }

      // optional bytes chapterReward = 17;
      case 17: {
        if (tag == 138) {
         parse_chapterReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chapterreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_vipExp;
        break;
      }

      // optional uint32 vipExp = 18;
      case 18: {
        if (tag == 144) {
         parse_vipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_vipLevel;
        break;
      }

      // optional uint32 vipLevel = 19;
      case 19: {
        if (tag == 152) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_formation;
        break;
      }

      // repeated uint32 formation = 20;
      case 20: {
        if (tag == 160) {
         parse_formation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_formation())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_formation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_formation;
        if (input->ExpectTag(168)) goto parse_heroBagNum;
        break;
      }

      // optional uint32 heroBagNum = 21;
      case 21: {
        if (tag == 168) {
         parse_heroBagNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herobagnum_)));
          set_has_herobagnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_heroList;
        break;
      }

      // optional bytes heroList = 22;
      case 22: {
        if (tag == 178) {
         parse_heroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_herolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 23;
      case 23: {
        if (tag == 184) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_photo;
        break;
      }

      // optional uint32 photo = 24;
      case 24: {
        if (tag == 192) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_essenceItem;
        break;
      }

      // optional bytes essenceItem = 25;
      case 25: {
        if (tag == 202) {
         parse_essenceItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_essenceitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_RefreshPrice;
        break;
      }

      // repeated uint32 RefreshPrice = 26;
      case 26: {
        if (tag == 208) {
         parse_RefreshPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208, input, this->mutable_refreshprice())));
        } else if (tag == 210) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_refreshprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_RefreshPrice;
        if (input->ExpectTag(218)) goto parse_festivity;
        break;
      }

      // optional bytes festivity = 27;
      case 27: {
        if (tag == 218) {
         parse_festivity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_festivity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_lockChatEndTime;
        break;
      }

      // optional uint32 lockChatEndTime = 28;
      case 28: {
        if (tag == 224) {
         parse_lockChatEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lockchatendtime_)));
          set_has_lockchatendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_dayChatTimes;
        break;
      }

      // optional uint32 dayChatTimes = 29;
      case 29: {
        if (tag == 232) {
         parse_dayChatTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daychattimes_)));
          set_has_daychattimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_skillPoint;
        break;
      }

      // optional uint32 skillPoint = 30;
      case 30: {
        if (tag == 240) {
         parse_skillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_updateSkillPointTime;
        break;
      }

      // optional uint32 updateSkillPointTime = 31;
      case 31: {
        if (tag == 248) {
         parse_updateSkillPointTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateskillpointtime_)));
          set_has_updateskillpointtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_energy;
        break;
      }

      // optional uint32 energy = 32;
      case 32: {
        if (tag == 256) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_updateEnergyTime;
        break;
      }

      // optional uint32 updateEnergyTime = 33;
      case 33: {
        if (tag == 264) {
         parse_updateEnergyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateenergytime_)));
          set_has_updateenergytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_equipNew;
        break;
      }

      // optional bytes equipNew = 34;
      case 34: {
        if (tag == 274) {
         parse_equipNew:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_equipnew()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_arenaFormation;
        break;
      }

      // repeated uint32 arenaFormation = 35;
      case 35: {
        if (tag == 280) {
         parse_arenaFormation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 280, input, this->mutable_arenaformation())));
        } else if (tag == 282) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arenaformation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_arenaFormation;
        if (input->ExpectTag(288)) goto parse_recharge;
        break;
      }

      // optional uint32 recharge = 36;
      case 36: {
        if (tag == 288) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 37;
      case 37: {
        if (tag == 296) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_activity;
        break;
      }

      // optional bytes activity = 38;
      case 38: {
        if (tag == 306) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_assistFormation;
        break;
      }

      // optional string assistFormation = 39;
      case 39: {
        if (tag == 314) {
         parse_assistFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assistformation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assistformation().data(), this->assistformation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assistformation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_chapterBox;
        break;
      }

      // optional bytes chapterBox = 40;
      case 40: {
        if (tag == 322) {
         parse_chapterBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chapterbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_coins;
        break;
      }

      // optional string coins = 41;
      case 41: {
        if (tag == 330) {
         parse_coins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coins()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coins().data(), this->coins().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "coins");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_leavePoint;
        break;
      }

      // optional uint32 leavePoint = 42;
      case 42: {
        if (tag == 336) {
         parse_leavePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leavepoint_)));
          set_has_leavepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_onlinetime;
        break;
      }

      // optional uint32 onlinetime = 43;
      case 43: {
        if (tag == 344) {
         parse_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_gmFlushTime;
        break;
      }

      // optional uint32 gmFlushTime = 44;
      case 44: {
        if (tag == 352) {
         parse_gmFlushTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmflushtime_)));
          set_has_gmflushtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_isshopbuy;
        break;
      }

      // optional uint32 isshopbuy = 45;
      case 45: {
        if (tag == 360) {
         parse_isshopbuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isshopbuy_)));
          set_has_isshopbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_deviceid;
        break;
      }

      // optional string deviceid = 46;
      case 46: {
        if (tag == 370) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_diamondPay;
        break;
      }

      // optional uint32 diamondPay = 47;
      case 47: {
        if (tag == 376) {
         parse_diamondPay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamondpay_)));
          set_has_diamondpay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_recommfriends;
        break;
      }

      // optional string recommfriends = 48;
      case 48: {
        if (tag == 386) {
         parse_recommfriends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recommfriends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recommfriends().data(), this->recommfriends().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recommfriends");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_prizeInfo;
        break;
      }

      // optional bytes prizeInfo = 49;
      case 49: {
        if (tag == 394) {
         parse_prizeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prizeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_avoidBattle;
        break;
      }

      // optional uint32 avoidBattle = 50;
      case 50: {
        if (tag == 400) {
         parse_avoidBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avoidbattle_)));
          set_has_avoidbattle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_accOnlineTime;
        break;
      }

      // optional uint32 accOnlineTime = 51;
      case 51: {
        if (tag == 408) {
         parse_accOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acconlinetime_)));
          set_has_acconlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_itemGot;
        break;
      }

      // optional string itemGot = 52;
      case 52: {
        if (tag == 418) {
         parse_itemGot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemgot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemgot().data(), this->itemgot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemgot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_buyedPrice;
        break;
      }

      // repeated uint32 buyedPrice = 53;
      case 53: {
        if (tag == 424) {
         parse_buyedPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 424, input, this->mutable_buyedprice())));
        } else if (tag == 426) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buyedprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_buyedPrice;
        if (input->ExpectTag(432)) goto parse_position;
        break;
      }

      // optional uint32 position = 54;
      case 54: {
        if (tag == 432) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_lastUpdateTime;
        break;
      }

      // optional uint32 lastUpdateTime = 55;
      case 55: {
        if (tag == 440) {
         parse_lastUpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastupdatetime_)));
          set_has_lastupdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_crusadeMaxId;
        break;
      }

      // optional uint32 crusadeMaxId = 56;
      case 56: {
        if (tag == 448) {
         parse_crusadeMaxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crusademaxid_)));
          set_has_crusademaxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_crusadeCurId;
        break;
      }

      // optional uint32 crusadeCurId = 57;
      case 57: {
        if (tag == 456) {
         parse_crusadeCurId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crusadecurid_)));
          set_has_crusadecurid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_int32attr;
        break;
      }

      // optional string int32attr = 58;
      case 58: {
        if (tag == 466) {
         parse_int32attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_int32attr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->int32attr().data(), this->int32attr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "int32attr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_AwakeHeroes;
        break;
      }

      // optional string AwakeHeroes = 59;
      case 59: {
        if (tag == 474) {
         parse_AwakeHeroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awakeheroes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->awakeheroes().data(), this->awakeheroes().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "awakeheroes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_tombinfo;
        break;
      }

      // optional string tombinfo = 60;
      case 60: {
        if (tag == 482) {
         parse_tombinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tombinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tombinfo().data(), this->tombinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tombinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_markList;
        break;
      }

      // repeated uint32 markList = 61;
      case 61: {
        if (tag == 488) {
         parse_markList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 488, input, this->mutable_marklist())));
        } else if (tag == 490) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_marklist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_markList;
        if (input->ExpectTag(498)) goto parse_rechargeChoose;
        break;
      }

      // optional string rechargeChoose = 62;
      case 62: {
        if (tag == 498) {
         parse_rechargeChoose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rechargechoose()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rechargechoose().data(), this->rechargechoose().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rechargechoose");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_national;
        break;
      }

      // optional .TgsProtocol.NationalDB national = 63;
      case 63: {
        if (tag == 506) {
         parse_national:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_national()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_LoadCharRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_LoadCharRet)
  return false;
#undef DO_
}

void DB2LOBBY_LoadCharRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_LoadCharRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_CHARACTER_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes charName = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->charname(), output);
  }

  // optional uint32 cash = 5;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cash(), output);
  }

  // optional uint32 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gold(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->exp(), output);
  }

  // optional uint32 curStamina = 9;
  if (has_curstamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curstamina(), output);
  }

  // optional uint32 maxStamina = 10;
  if (has_maxstamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxstamina(), output);
  }

  // optional uint32 createTime = 11;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->createtime(), output);
  }

  // optional uint32 offlineTime = 12;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->offlinetime(), output);
  }

  // optional uint32 updateStaminaTime = 13;
  if (has_updatestaminatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->updatestaminatime(), output);
  }

  // optional uint32 bitFlag = 14;
  if (has_bitflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->bitflag(), output);
  }

  // optional bytes quest = 15;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->quest(), output);
  }

  // optional bytes evaluation = 16;
  if (has_evaluation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->evaluation(), output);
  }

  // optional bytes chapterReward = 17;
  if (has_chapterreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->chapterreward(), output);
  }

  // optional uint32 vipExp = 18;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->vipexp(), output);
  }

  // optional uint32 vipLevel = 19;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->viplevel(), output);
  }

  // repeated uint32 formation = 20;
  for (int i = 0; i < this->formation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->formation(i), output);
  }

  // optional uint32 heroBagNum = 21;
  if (has_herobagnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->herobagnum(), output);
  }

  // optional bytes heroList = 22;
  if (has_herolist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->herolist(), output);
  }

  // optional uint32 gender = 23;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gender(), output);
  }

  // optional uint32 photo = 24;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->photo(), output);
  }

  // optional bytes essenceItem = 25;
  if (has_essenceitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->essenceitem(), output);
  }

  // repeated uint32 RefreshPrice = 26;
  for (int i = 0; i < this->refreshprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->refreshprice(i), output);
  }

  // optional bytes festivity = 27;
  if (has_festivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      27, this->festivity(), output);
  }

  // optional uint32 lockChatEndTime = 28;
  if (has_lockchatendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->lockchatendtime(), output);
  }

  // optional uint32 dayChatTimes = 29;
  if (has_daychattimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->daychattimes(), output);
  }

  // optional uint32 skillPoint = 30;
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->skillpoint(), output);
  }

  // optional uint32 updateSkillPointTime = 31;
  if (has_updateskillpointtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->updateskillpointtime(), output);
  }

  // optional uint32 energy = 32;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->energy(), output);
  }

  // optional uint32 updateEnergyTime = 33;
  if (has_updateenergytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->updateenergytime(), output);
  }

  // optional bytes equipNew = 34;
  if (has_equipnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      34, this->equipnew(), output);
  }

  // repeated uint32 arenaFormation = 35;
  for (int i = 0; i < this->arenaformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      35, this->arenaformation(i), output);
  }

  // optional uint32 recharge = 36;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->recharge(), output);
  }

  // optional uint32 progress = 37;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->progress(), output);
  }

  // optional bytes activity = 38;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      38, this->activity(), output);
  }

  // optional string assistFormation = 39;
  if (has_assistformation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assistformation().data(), this->assistformation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assistformation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->assistformation(), output);
  }

  // optional bytes chapterBox = 40;
  if (has_chapterbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      40, this->chapterbox(), output);
  }

  // optional string coins = 41;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coins().data(), this->coins().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "coins");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      41, this->coins(), output);
  }

  // optional uint32 leavePoint = 42;
  if (has_leavepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->leavepoint(), output);
  }

  // optional uint32 onlinetime = 43;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->onlinetime(), output);
  }

  // optional uint32 gmFlushTime = 44;
  if (has_gmflushtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->gmflushtime(), output);
  }

  // optional uint32 isshopbuy = 45;
  if (has_isshopbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->isshopbuy(), output);
  }

  // optional string deviceid = 46;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->deviceid(), output);
  }

  // optional uint32 diamondPay = 47;
  if (has_diamondpay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->diamondpay(), output);
  }

  // optional string recommfriends = 48;
  if (has_recommfriends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recommfriends().data(), this->recommfriends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recommfriends");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->recommfriends(), output);
  }

  // optional bytes prizeInfo = 49;
  if (has_prizeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      49, this->prizeinfo(), output);
  }

  // optional uint32 avoidBattle = 50;
  if (has_avoidbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->avoidbattle(), output);
  }

  // optional uint32 accOnlineTime = 51;
  if (has_acconlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->acconlinetime(), output);
  }

  // optional string itemGot = 52;
  if (has_itemgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemgot().data(), this->itemgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemgot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->itemgot(), output);
  }

  // repeated uint32 buyedPrice = 53;
  for (int i = 0; i < this->buyedprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      53, this->buyedprice(i), output);
  }

  // optional uint32 position = 54;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->position(), output);
  }

  // optional uint32 lastUpdateTime = 55;
  if (has_lastupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->lastupdatetime(), output);
  }

  // optional uint32 crusadeMaxId = 56;
  if (has_crusademaxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->crusademaxid(), output);
  }

  // optional uint32 crusadeCurId = 57;
  if (has_crusadecurid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->crusadecurid(), output);
  }

  // optional string int32attr = 58;
  if (has_int32attr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->int32attr().data(), this->int32attr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "int32attr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      58, this->int32attr(), output);
  }

  // optional string AwakeHeroes = 59;
  if (has_awakeheroes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->awakeheroes().data(), this->awakeheroes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "awakeheroes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->awakeheroes(), output);
  }

  // optional string tombinfo = 60;
  if (has_tombinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tombinfo().data(), this->tombinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tombinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->tombinfo(), output);
  }

  // repeated uint32 markList = 61;
  for (int i = 0; i < this->marklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      61, this->marklist(i), output);
  }

  // optional string rechargeChoose = 62;
  if (has_rechargechoose()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rechargechoose().data(), this->rechargechoose().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rechargechoose");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      62, this->rechargechoose(), output);
  }

  // optional .TgsProtocol.NationalDB national = 63;
  if (has_national()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->national(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_LoadCharRet)
}

::google::protobuf::uint8* DB2LOBBY_LoadCharRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_LoadCharRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_CHARACTER_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes charName = 4;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->charname(), target);
  }

  // optional uint32 cash = 5;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cash(), target);
  }

  // optional uint32 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gold(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->exp(), target);
  }

  // optional uint32 curStamina = 9;
  if (has_curstamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curstamina(), target);
  }

  // optional uint32 maxStamina = 10;
  if (has_maxstamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxstamina(), target);
  }

  // optional uint32 createTime = 11;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->createtime(), target);
  }

  // optional uint32 offlineTime = 12;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->offlinetime(), target);
  }

  // optional uint32 updateStaminaTime = 13;
  if (has_updatestaminatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->updatestaminatime(), target);
  }

  // optional uint32 bitFlag = 14;
  if (has_bitflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->bitflag(), target);
  }

  // optional bytes quest = 15;
  if (has_quest()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->quest(), target);
  }

  // optional bytes evaluation = 16;
  if (has_evaluation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->evaluation(), target);
  }

  // optional bytes chapterReward = 17;
  if (has_chapterreward()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->chapterreward(), target);
  }

  // optional uint32 vipExp = 18;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->vipexp(), target);
  }

  // optional uint32 vipLevel = 19;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->viplevel(), target);
  }

  // repeated uint32 formation = 20;
  for (int i = 0; i < this->formation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->formation(i), target);
  }

  // optional uint32 heroBagNum = 21;
  if (has_herobagnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->herobagnum(), target);
  }

  // optional bytes heroList = 22;
  if (has_herolist()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->herolist(), target);
  }

  // optional uint32 gender = 23;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gender(), target);
  }

  // optional uint32 photo = 24;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->photo(), target);
  }

  // optional bytes essenceItem = 25;
  if (has_essenceitem()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->essenceitem(), target);
  }

  // repeated uint32 RefreshPrice = 26;
  for (int i = 0; i < this->refreshprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(26, this->refreshprice(i), target);
  }

  // optional bytes festivity = 27;
  if (has_festivity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        27, this->festivity(), target);
  }

  // optional uint32 lockChatEndTime = 28;
  if (has_lockchatendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->lockchatendtime(), target);
  }

  // optional uint32 dayChatTimes = 29;
  if (has_daychattimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->daychattimes(), target);
  }

  // optional uint32 skillPoint = 30;
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->skillpoint(), target);
  }

  // optional uint32 updateSkillPointTime = 31;
  if (has_updateskillpointtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->updateskillpointtime(), target);
  }

  // optional uint32 energy = 32;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->energy(), target);
  }

  // optional uint32 updateEnergyTime = 33;
  if (has_updateenergytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->updateenergytime(), target);
  }

  // optional bytes equipNew = 34;
  if (has_equipnew()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        34, this->equipnew(), target);
  }

  // repeated uint32 arenaFormation = 35;
  for (int i = 0; i < this->arenaformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(35, this->arenaformation(i), target);
  }

  // optional uint32 recharge = 36;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->recharge(), target);
  }

  // optional uint32 progress = 37;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->progress(), target);
  }

  // optional bytes activity = 38;
  if (has_activity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        38, this->activity(), target);
  }

  // optional string assistFormation = 39;
  if (has_assistformation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assistformation().data(), this->assistformation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assistformation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->assistformation(), target);
  }

  // optional bytes chapterBox = 40;
  if (has_chapterbox()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->chapterbox(), target);
  }

  // optional string coins = 41;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coins().data(), this->coins().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "coins");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->coins(), target);
  }

  // optional uint32 leavePoint = 42;
  if (has_leavepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->leavepoint(), target);
  }

  // optional uint32 onlinetime = 43;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->onlinetime(), target);
  }

  // optional uint32 gmFlushTime = 44;
  if (has_gmflushtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->gmflushtime(), target);
  }

  // optional uint32 isshopbuy = 45;
  if (has_isshopbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->isshopbuy(), target);
  }

  // optional string deviceid = 46;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->deviceid(), target);
  }

  // optional uint32 diamondPay = 47;
  if (has_diamondpay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->diamondpay(), target);
  }

  // optional string recommfriends = 48;
  if (has_recommfriends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recommfriends().data(), this->recommfriends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recommfriends");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->recommfriends(), target);
  }

  // optional bytes prizeInfo = 49;
  if (has_prizeinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        49, this->prizeinfo(), target);
  }

  // optional uint32 avoidBattle = 50;
  if (has_avoidbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->avoidbattle(), target);
  }

  // optional uint32 accOnlineTime = 51;
  if (has_acconlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->acconlinetime(), target);
  }

  // optional string itemGot = 52;
  if (has_itemgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemgot().data(), this->itemgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemgot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->itemgot(), target);
  }

  // repeated uint32 buyedPrice = 53;
  for (int i = 0; i < this->buyedprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(53, this->buyedprice(i), target);
  }

  // optional uint32 position = 54;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->position(), target);
  }

  // optional uint32 lastUpdateTime = 55;
  if (has_lastupdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->lastupdatetime(), target);
  }

  // optional uint32 crusadeMaxId = 56;
  if (has_crusademaxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->crusademaxid(), target);
  }

  // optional uint32 crusadeCurId = 57;
  if (has_crusadecurid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->crusadecurid(), target);
  }

  // optional string int32attr = 58;
  if (has_int32attr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->int32attr().data(), this->int32attr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "int32attr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        58, this->int32attr(), target);
  }

  // optional string AwakeHeroes = 59;
  if (has_awakeheroes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->awakeheroes().data(), this->awakeheroes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "awakeheroes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->awakeheroes(), target);
  }

  // optional string tombinfo = 60;
  if (has_tombinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tombinfo().data(), this->tombinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tombinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->tombinfo(), target);
  }

  // repeated uint32 markList = 61;
  for (int i = 0; i < this->marklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(61, this->marklist(i), target);
  }

  // optional string rechargeChoose = 62;
  if (has_rechargechoose()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rechargechoose().data(), this->rechargechoose().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rechargechoose");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        62, this->rechargechoose(), target);
  }

  // optional .TgsProtocol.NationalDB national = 63;
  if (has_national()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->national(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_LoadCharRet)
  return target;
}

int DB2LOBBY_LoadCharRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_CHARACTER_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes charName = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // optional uint32 cash = 5;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // optional uint32 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 curStamina = 9;
    if (has_curstamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstamina());
    }

    // optional uint32 maxStamina = 10;
    if (has_maxstamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxstamina());
    }

    // optional uint32 createTime = 11;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional uint32 offlineTime = 12;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offlinetime());
    }

    // optional uint32 updateStaminaTime = 13;
    if (has_updatestaminatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatestaminatime());
    }

    // optional uint32 bitFlag = 14;
    if (has_bitflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitflag());
    }

    // optional bytes quest = 15;
    if (has_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->quest());
    }

    // optional bytes evaluation = 16;
    if (has_evaluation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->evaluation());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes chapterReward = 17;
    if (has_chapterreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chapterreward());
    }

    // optional uint32 vipExp = 18;
    if (has_vipexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipexp());
    }

    // optional uint32 vipLevel = 19;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint32 heroBagNum = 21;
    if (has_herobagnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herobagnum());
    }

    // optional bytes heroList = 22;
    if (has_herolist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->herolist());
    }

    // optional uint32 gender = 23;
    if (has_gender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 photo = 24;
    if (has_photo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes essenceItem = 25;
    if (has_essenceitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->essenceitem());
    }

    // optional bytes festivity = 27;
    if (has_festivity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->festivity());
    }

    // optional uint32 lockChatEndTime = 28;
    if (has_lockchatendtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lockchatendtime());
    }

    // optional uint32 dayChatTimes = 29;
    if (has_daychattimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daychattimes());
    }

    // optional uint32 skillPoint = 30;
    if (has_skillpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpoint());
    }

    // optional uint32 updateSkillPointTime = 31;
    if (has_updateskillpointtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updateskillpointtime());
    }

    // optional uint32 energy = 32;
    if (has_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 updateEnergyTime = 33;
    if (has_updateenergytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updateenergytime());
    }

    // optional bytes equipNew = 34;
    if (has_equipnew()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->equipnew());
    }

    // optional uint32 recharge = 36;
    if (has_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge());
    }

    // optional uint32 progress = 37;
    if (has_progress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional bytes activity = 38;
    if (has_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->activity());
    }

    // optional string assistFormation = 39;
    if (has_assistformation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assistformation());
    }

    // optional bytes chapterBox = 40;
    if (has_chapterbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chapterbox());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string coins = 41;
    if (has_coins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coins());
    }

    // optional uint32 leavePoint = 42;
    if (has_leavepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leavepoint());
    }

    // optional uint32 onlinetime = 43;
    if (has_onlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }

    // optional uint32 gmFlushTime = 44;
    if (has_gmflushtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmflushtime());
    }

    // optional uint32 isshopbuy = 45;
    if (has_isshopbuy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isshopbuy());
    }

    // optional string deviceid = 46;
    if (has_deviceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional uint32 diamondPay = 47;
    if (has_diamondpay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamondpay());
    }

    // optional string recommfriends = 48;
    if (has_recommfriends()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recommfriends());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bytes prizeInfo = 49;
    if (has_prizeinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prizeinfo());
    }

    // optional uint32 avoidBattle = 50;
    if (has_avoidbattle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avoidbattle());
    }

    // optional uint32 accOnlineTime = 51;
    if (has_acconlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acconlinetime());
    }

    // optional string itemGot = 52;
    if (has_itemgot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemgot());
    }

    // optional uint32 position = 54;
    if (has_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint32 lastUpdateTime = 55;
    if (has_lastupdatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastupdatetime());
    }

    // optional uint32 crusadeMaxId = 56;
    if (has_crusademaxid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crusademaxid());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 crusadeCurId = 57;
    if (has_crusadecurid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crusadecurid());
    }

    // optional string int32attr = 58;
    if (has_int32attr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->int32attr());
    }

    // optional string AwakeHeroes = 59;
    if (has_awakeheroes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awakeheroes());
    }

    // optional string tombinfo = 60;
    if (has_tombinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tombinfo());
    }

    // optional string rechargeChoose = 62;
    if (has_rechargechoose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rechargechoose());
    }

    // optional .TgsProtocol.NationalDB national = 63;
    if (has_national()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->national());
    }

  }
  // repeated uint32 formation = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->formation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->formation(i));
    }
    total_size += 2 * this->formation_size() + data_size;
  }

  // repeated uint32 RefreshPrice = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->refreshprice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->refreshprice(i));
    }
    total_size += 2 * this->refreshprice_size() + data_size;
  }

  // repeated uint32 arenaFormation = 35;
  {
    int data_size = 0;
    for (int i = 0; i < this->arenaformation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arenaformation(i));
    }
    total_size += 2 * this->arenaformation_size() + data_size;
  }

  // repeated uint32 buyedPrice = 53;
  {
    int data_size = 0;
    for (int i = 0; i < this->buyedprice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buyedprice(i));
    }
    total_size += 2 * this->buyedprice_size() + data_size;
  }

  // repeated uint32 markList = 61;
  {
    int data_size = 0;
    for (int i = 0; i < this->marklist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->marklist(i));
    }
    total_size += 2 * this->marklist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_LoadCharRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_LoadCharRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_LoadCharRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_LoadCharRet::MergeFrom(const DB2LOBBY_LoadCharRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  formation_.MergeFrom(from.formation_);
  refreshprice_.MergeFrom(from.refreshprice_);
  arenaformation_.MergeFrom(from.arenaformation_);
  buyedprice_.MergeFrom(from.buyedprice_);
  marklist_.MergeFrom(from.marklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curstamina()) {
      set_curstamina(from.curstamina());
    }
    if (from.has_maxstamina()) {
      set_maxstamina(from.maxstamina());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_updatestaminatime()) {
      set_updatestaminatime(from.updatestaminatime());
    }
    if (from.has_bitflag()) {
      set_bitflag(from.bitflag());
    }
    if (from.has_quest()) {
      set_quest(from.quest());
    }
    if (from.has_evaluation()) {
      set_evaluation(from.evaluation());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_chapterreward()) {
      set_chapterreward(from.chapterreward());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_herobagnum()) {
      set_herobagnum(from.herobagnum());
    }
    if (from.has_herolist()) {
      set_herolist(from.herolist());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_essenceitem()) {
      set_essenceitem(from.essenceitem());
    }
    if (from.has_festivity()) {
      set_festivity(from.festivity());
    }
    if (from.has_lockchatendtime()) {
      set_lockchatendtime(from.lockchatendtime());
    }
    if (from.has_daychattimes()) {
      set_daychattimes(from.daychattimes());
    }
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
    if (from.has_updateskillpointtime()) {
      set_updateskillpointtime(from.updateskillpointtime());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_updateenergytime()) {
      set_updateenergytime(from.updateenergytime());
    }
    if (from.has_equipnew()) {
      set_equipnew(from.equipnew());
    }
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_assistformation()) {
      set_assistformation(from.assistformation());
    }
    if (from.has_chapterbox()) {
      set_chapterbox(from.chapterbox());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_leavepoint()) {
      set_leavepoint(from.leavepoint());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_gmflushtime()) {
      set_gmflushtime(from.gmflushtime());
    }
    if (from.has_isshopbuy()) {
      set_isshopbuy(from.isshopbuy());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_diamondpay()) {
      set_diamondpay(from.diamondpay());
    }
    if (from.has_recommfriends()) {
      set_recommfriends(from.recommfriends());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_prizeinfo()) {
      set_prizeinfo(from.prizeinfo());
    }
    if (from.has_avoidbattle()) {
      set_avoidbattle(from.avoidbattle());
    }
    if (from.has_acconlinetime()) {
      set_acconlinetime(from.acconlinetime());
    }
    if (from.has_itemgot()) {
      set_itemgot(from.itemgot());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_lastupdatetime()) {
      set_lastupdatetime(from.lastupdatetime());
    }
    if (from.has_crusademaxid()) {
      set_crusademaxid(from.crusademaxid());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_crusadecurid()) {
      set_crusadecurid(from.crusadecurid());
    }
    if (from.has_int32attr()) {
      set_int32attr(from.int32attr());
    }
    if (from.has_awakeheroes()) {
      set_awakeheroes(from.awakeheroes());
    }
    if (from.has_tombinfo()) {
      set_tombinfo(from.tombinfo());
    }
    if (from.has_rechargechoose()) {
      set_rechargechoose(from.rechargechoose());
    }
    if (from.has_national()) {
      mutable_national()->::TgsProtocol::NationalDB::MergeFrom(from.national());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_LoadCharRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_LoadCharRet::CopyFrom(const DB2LOBBY_LoadCharRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_LoadCharRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_national()) {
    if (!this->national().IsInitialized()) return false;
  }
  return true;
}

void DB2LOBBY_LoadCharRet::Swap(DB2LOBBY_LoadCharRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(cash_, other->cash_);
    std::swap(gold_, other->gold_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(curstamina_, other->curstamina_);
    std::swap(maxstamina_, other->maxstamina_);
    std::swap(createtime_, other->createtime_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(updatestaminatime_, other->updatestaminatime_);
    std::swap(bitflag_, other->bitflag_);
    std::swap(quest_, other->quest_);
    std::swap(evaluation_, other->evaluation_);
    std::swap(chapterreward_, other->chapterreward_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(viplevel_, other->viplevel_);
    formation_.Swap(&other->formation_);
    std::swap(herobagnum_, other->herobagnum_);
    std::swap(herolist_, other->herolist_);
    std::swap(gender_, other->gender_);
    std::swap(photo_, other->photo_);
    std::swap(essenceitem_, other->essenceitem_);
    refreshprice_.Swap(&other->refreshprice_);
    std::swap(festivity_, other->festivity_);
    std::swap(lockchatendtime_, other->lockchatendtime_);
    std::swap(daychattimes_, other->daychattimes_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(updateskillpointtime_, other->updateskillpointtime_);
    std::swap(energy_, other->energy_);
    std::swap(updateenergytime_, other->updateenergytime_);
    std::swap(equipnew_, other->equipnew_);
    arenaformation_.Swap(&other->arenaformation_);
    std::swap(recharge_, other->recharge_);
    std::swap(progress_, other->progress_);
    std::swap(activity_, other->activity_);
    std::swap(assistformation_, other->assistformation_);
    std::swap(chapterbox_, other->chapterbox_);
    std::swap(coins_, other->coins_);
    std::swap(leavepoint_, other->leavepoint_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(gmflushtime_, other->gmflushtime_);
    std::swap(isshopbuy_, other->isshopbuy_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(diamondpay_, other->diamondpay_);
    std::swap(recommfriends_, other->recommfriends_);
    std::swap(prizeinfo_, other->prizeinfo_);
    std::swap(avoidbattle_, other->avoidbattle_);
    std::swap(acconlinetime_, other->acconlinetime_);
    std::swap(itemgot_, other->itemgot_);
    buyedprice_.Swap(&other->buyedprice_);
    std::swap(position_, other->position_);
    std::swap(lastupdatetime_, other->lastupdatetime_);
    std::swap(crusademaxid_, other->crusademaxid_);
    std::swap(crusadecurid_, other->crusadecurid_);
    std::swap(int32attr_, other->int32attr_);
    std::swap(awakeheroes_, other->awakeheroes_);
    std::swap(tombinfo_, other->tombinfo_);
    marklist_.Swap(&other->marklist_);
    std::swap(rechargechoose_, other->rechargechoose_);
    std::swap(national_, other->national_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_LoadCharRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_LoadCharRet_descriptor_;
  metadata.reflection = DB2LOBBY_LoadCharRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_CharAdvancedInfo::kCmdIdFieldNumber;
const int LOBBY2DB_CharAdvancedInfo::kCharIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_CharAdvancedInfo::LOBBY2DB_CharAdvancedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_CharAdvancedInfo)
}

void LOBBY2DB_CharAdvancedInfo::InitAsDefaultInstance() {
}

LOBBY2DB_CharAdvancedInfo::LOBBY2DB_CharAdvancedInfo(const LOBBY2DB_CharAdvancedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_CharAdvancedInfo)
}

void LOBBY2DB_CharAdvancedInfo::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300009;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_CharAdvancedInfo::~LOBBY2DB_CharAdvancedInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_CharAdvancedInfo)
  SharedDtor();
}

void LOBBY2DB_CharAdvancedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_CharAdvancedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_CharAdvancedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_CharAdvancedInfo_descriptor_;
}

const LOBBY2DB_CharAdvancedInfo& LOBBY2DB_CharAdvancedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_CharAdvancedInfo* LOBBY2DB_CharAdvancedInfo::default_instance_ = NULL;

LOBBY2DB_CharAdvancedInfo* LOBBY2DB_CharAdvancedInfo::New() const {
  return new LOBBY2DB_CharAdvancedInfo;
}

void LOBBY2DB_CharAdvancedInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 300009;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_CharAdvancedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_CharAdvancedInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_ADVANCED_CHARINFO_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_CharAdvancedInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_CharAdvancedInfo)
  return false;
#undef DO_
}

void LOBBY2DB_CharAdvancedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_CharAdvancedInfo)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_ADVANCED_CHARINFO_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_CharAdvancedInfo)
}

::google::protobuf::uint8* LOBBY2DB_CharAdvancedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_CharAdvancedInfo)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_ADVANCED_CHARINFO_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_CharAdvancedInfo)
  return target;
}

int LOBBY2DB_CharAdvancedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_ADVANCED_CHARINFO_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_CharAdvancedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_CharAdvancedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_CharAdvancedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_CharAdvancedInfo::MergeFrom(const LOBBY2DB_CharAdvancedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_CharAdvancedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_CharAdvancedInfo::CopyFrom(const LOBBY2DB_CharAdvancedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_CharAdvancedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LOBBY2DB_CharAdvancedInfo::Swap(LOBBY2DB_CharAdvancedInfo* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_CharAdvancedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_CharAdvancedInfo_descriptor_;
  metadata.reflection = LOBBY2DB_CharAdvancedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbSevenDayActive::kMissionFieldNumber;
#endif  // !_MSC_VER

DbSevenDayActive::DbSevenDayActive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbSevenDayActive)
}

void DbSevenDayActive::InitAsDefaultInstance() {
}

DbSevenDayActive::DbSevenDayActive(const DbSevenDayActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbSevenDayActive)
}

void DbSevenDayActive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbSevenDayActive::~DbSevenDayActive() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbSevenDayActive)
  SharedDtor();
}

void DbSevenDayActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbSevenDayActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbSevenDayActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbSevenDayActive_descriptor_;
}

const DbSevenDayActive& DbSevenDayActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DbSevenDayActive* DbSevenDayActive::default_instance_ = NULL;

DbSevenDayActive* DbSevenDayActive::New() const {
  return new DbSevenDayActive;
}

void DbSevenDayActive::Clear() {
  mission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbSevenDayActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbSevenDayActive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.DbSevenDayActiveElement mission = 1;
      case 1: {
        if (tag == 10) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mission;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbSevenDayActive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbSevenDayActive)
  return false;
#undef DO_
}

void DbSevenDayActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbSevenDayActive)
  // repeated .TgsProtocol.DbSevenDayActiveElement mission = 1;
  for (int i = 0; i < this->mission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbSevenDayActive)
}

::google::protobuf::uint8* DbSevenDayActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbSevenDayActive)
  // repeated .TgsProtocol.DbSevenDayActiveElement mission = 1;
  for (int i = 0; i < this->mission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbSevenDayActive)
  return target;
}

int DbSevenDayActive::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.DbSevenDayActiveElement mission = 1;
  total_size += 1 * this->mission_size();
  for (int i = 0; i < this->mission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbSevenDayActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbSevenDayActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbSevenDayActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbSevenDayActive::MergeFrom(const DbSevenDayActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  mission_.MergeFrom(from.mission_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbSevenDayActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbSevenDayActive::CopyFrom(const DbSevenDayActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbSevenDayActive::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->mission())) return false;
  return true;
}

void DbSevenDayActive::Swap(DbSevenDayActive* other) {
  if (other != this) {
    mission_.Swap(&other->mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbSevenDayActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbSevenDayActive_descriptor_;
  metadata.reflection = DbSevenDayActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbSevenDayActiveElement::kIndexFieldNumber;
const int DbSevenDayActiveElement::kStatusFieldNumber;
const int DbSevenDayActiveElement::kStepFieldNumber;
#endif  // !_MSC_VER

DbSevenDayActiveElement::DbSevenDayActiveElement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbSevenDayActiveElement)
}

void DbSevenDayActiveElement::InitAsDefaultInstance() {
}

DbSevenDayActiveElement::DbSevenDayActiveElement(const DbSevenDayActiveElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbSevenDayActiveElement)
}

void DbSevenDayActiveElement::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  status_ = 0u;
  step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbSevenDayActiveElement::~DbSevenDayActiveElement() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbSevenDayActiveElement)
  SharedDtor();
}

void DbSevenDayActiveElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbSevenDayActiveElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbSevenDayActiveElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbSevenDayActiveElement_descriptor_;
}

const DbSevenDayActiveElement& DbSevenDayActiveElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DbSevenDayActiveElement* DbSevenDayActiveElement::default_instance_ = NULL;

DbSevenDayActiveElement* DbSevenDayActiveElement::New() const {
  return new DbSevenDayActiveElement;
}

void DbSevenDayActiveElement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbSevenDayActiveElement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, step_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbSevenDayActiveElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbSevenDayActiveElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // required uint32 step = 3;
      case 3: {
        if (tag == 24) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbSevenDayActiveElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbSevenDayActiveElement)
  return false;
#undef DO_
}

void DbSevenDayActiveElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbSevenDayActiveElement)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbSevenDayActiveElement)
}

::google::protobuf::uint8* DbSevenDayActiveElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbSevenDayActiveElement)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbSevenDayActiveElement)
  return target;
}

int DbSevenDayActiveElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 step = 3;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbSevenDayActiveElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbSevenDayActiveElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbSevenDayActiveElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbSevenDayActiveElement::MergeFrom(const DbSevenDayActiveElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbSevenDayActiveElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbSevenDayActiveElement::CopyFrom(const DbSevenDayActiveElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbSevenDayActiveElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DbSevenDayActiveElement::Swap(DbSevenDayActiveElement* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(status_, other->status_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbSevenDayActiveElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbSevenDayActiveElement_descriptor_;
  metadata.reflection = DbSevenDayActiveElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbRebelArmy::kOwnerUserIdFieldNumber;
const int DbRebelArmy::kCurHealthFieldNumber;
const int DbRebelArmy::kCreateTimeFieldNumber;
const int DbRebelArmy::kIndexFieldNumber;
const int DbRebelArmy::kStateFieldNumber;
const int DbRebelArmy::kAttackTimeFieldNumber;
const int DbRebelArmy::kBIsShareFieldNumber;
const int DbRebelArmy::kLvFieldNumber;
const int DbRebelArmy::kBattleValueFieldNumber;
const int DbRebelArmy::kFreeCountFieldNumber;
const int DbRebelArmy::kCountRecoverTimeFieldNumber;
const int DbRebelArmy::kStartLvFieldNumber;
const int DbRebelArmy::kHappenTimeFieldNumber;
const int DbRebelArmy::kHappenCountFieldNumber;
const int DbRebelArmy::kDayharmFieldNumber;
const int DbRebelArmy::kDayexploitsFieldNumber;
const int DbRebelArmy::kDayharmBigFieldNumber;
const int DbRebelArmy::kCurHealthBigFieldNumber;
#endif  // !_MSC_VER

DbRebelArmy::DbRebelArmy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbRebelArmy)
}

void DbRebelArmy::InitAsDefaultInstance() {
}

DbRebelArmy::DbRebelArmy(const DbRebelArmy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbRebelArmy)
}

void DbRebelArmy::SharedCtor() {
  _cached_size_ = 0;
  owneruserid_ = GOOGLE_ULONGLONG(0);
  curhealth_ = 0u;
  createtime_ = 0u;
  index_ = 0u;
  state_ = 0u;
  attacktime_ = 0u;
  bisshare_ = 0u;
  lv_ = 0u;
  battlevalue_ = 0u;
  freecount_ = 0u;
  countrecovertime_ = 0u;
  startlv_ = 0u;
  happentime_ = 0u;
  happencount_ = 0u;
  dayharm_ = 0u;
  dayexploits_ = 0u;
  dayharmbig_ = GOOGLE_ULONGLONG(0);
  curhealthbig_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbRebelArmy::~DbRebelArmy() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbRebelArmy)
  SharedDtor();
}

void DbRebelArmy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbRebelArmy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbRebelArmy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbRebelArmy_descriptor_;
}

const DbRebelArmy& DbRebelArmy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DbRebelArmy* DbRebelArmy::default_instance_ = NULL;

DbRebelArmy* DbRebelArmy::New() const {
  return new DbRebelArmy;
}

void DbRebelArmy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbRebelArmy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(owneruserid_, lv_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(battlevalue_, dayharm_);
    dayexploits_ = 0u;
  }
  ZR_(dayharmbig_, curhealthbig_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbRebelArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbRebelArmy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ownerUserId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owneruserid_)));
          set_has_owneruserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curHealth;
        break;
      }

      // required uint32 curHealth = 2;
      case 2: {
        if (tag == 16) {
         parse_curHealth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhealth_)));
          set_has_curhealth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_createTime;
        break;
      }

      // required uint32 createTime = 3;
      case 3: {
        if (tag == 24) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // required uint32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_attackTime;
        break;
      }

      // required uint32 attackTime = 6;
      case 6: {
        if (tag == 48) {
         parse_attackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacktime_)));
          set_has_attacktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bIsShare;
        break;
      }

      // required uint32 bIsShare = 7;
      case 7: {
        if (tag == 56) {
         parse_bIsShare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bisshare_)));
          set_has_bisshare();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lv;
        break;
      }

      // required uint32 lv = 8;
      case 8: {
        if (tag == 64) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_battleValue;
        break;
      }

      // required uint32 battleValue = 9;
      case 9: {
        if (tag == 72) {
         parse_battleValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlevalue_)));
          set_has_battlevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_freeCount;
        break;
      }

      // required uint32 freeCount = 10;
      case 10: {
        if (tag == 80) {
         parse_freeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freecount_)));
          set_has_freecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_countRecoverTime;
        break;
      }

      // required uint32 countRecoverTime = 11;
      case 11: {
        if (tag == 88) {
         parse_countRecoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countrecovertime_)));
          set_has_countrecovertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_startLv;
        break;
      }

      // required uint32 startLv = 12;
      case 12: {
        if (tag == 96) {
         parse_startLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startlv_)));
          set_has_startlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_happenTime;
        break;
      }

      // required uint32 happenTime = 13;
      case 13: {
        if (tag == 104) {
         parse_happenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &happentime_)));
          set_has_happentime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_happenCount;
        break;
      }

      // required uint32 happenCount = 14;
      case 14: {
        if (tag == 112) {
         parse_happenCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &happencount_)));
          set_has_happencount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_dayharm;
        break;
      }

      // optional uint32 dayharm = 15;
      case 15: {
        if (tag == 120) {
         parse_dayharm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayharm_)));
          set_has_dayharm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_dayexploits;
        break;
      }

      // optional uint32 dayexploits = 16;
      case 16: {
        if (tag == 128) {
         parse_dayexploits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayexploits_)));
          set_has_dayexploits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_dayharmBig;
        break;
      }

      // optional uint64 dayharmBig = 17;
      case 17: {
        if (tag == 136) {
         parse_dayharmBig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dayharmbig_)));
          set_has_dayharmbig();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_curHealthBig;
        break;
      }

      // optional uint64 curHealthBig = 18;
      case 18: {
        if (tag == 144) {
         parse_curHealthBig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhealthbig_)));
          set_has_curhealthbig();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbRebelArmy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbRebelArmy)
  return false;
#undef DO_
}

void DbRebelArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbRebelArmy)
  // required uint64 ownerUserId = 1;
  if (has_owneruserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->owneruserid(), output);
  }

  // required uint32 curHealth = 2;
  if (has_curhealth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curhealth(), output);
  }

  // required uint32 createTime = 3;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->createtime(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // required uint32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->state(), output);
  }

  // required uint32 attackTime = 6;
  if (has_attacktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->attacktime(), output);
  }

  // required uint32 bIsShare = 7;
  if (has_bisshare()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bisshare(), output);
  }

  // required uint32 lv = 8;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lv(), output);
  }

  // required uint32 battleValue = 9;
  if (has_battlevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->battlevalue(), output);
  }

  // required uint32 freeCount = 10;
  if (has_freecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->freecount(), output);
  }

  // required uint32 countRecoverTime = 11;
  if (has_countrecovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->countrecovertime(), output);
  }

  // required uint32 startLv = 12;
  if (has_startlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->startlv(), output);
  }

  // required uint32 happenTime = 13;
  if (has_happentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->happentime(), output);
  }

  // required uint32 happenCount = 14;
  if (has_happencount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->happencount(), output);
  }

  // optional uint32 dayharm = 15;
  if (has_dayharm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dayharm(), output);
  }

  // optional uint32 dayexploits = 16;
  if (has_dayexploits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dayexploits(), output);
  }

  // optional uint64 dayharmBig = 17;
  if (has_dayharmbig()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->dayharmbig(), output);
  }

  // optional uint64 curHealthBig = 18;
  if (has_curhealthbig()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->curhealthbig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbRebelArmy)
}

::google::protobuf::uint8* DbRebelArmy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbRebelArmy)
  // required uint64 ownerUserId = 1;
  if (has_owneruserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->owneruserid(), target);
  }

  // required uint32 curHealth = 2;
  if (has_curhealth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curhealth(), target);
  }

  // required uint32 createTime = 3;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->createtime(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // required uint32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->state(), target);
  }

  // required uint32 attackTime = 6;
  if (has_attacktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->attacktime(), target);
  }

  // required uint32 bIsShare = 7;
  if (has_bisshare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bisshare(), target);
  }

  // required uint32 lv = 8;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lv(), target);
  }

  // required uint32 battleValue = 9;
  if (has_battlevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->battlevalue(), target);
  }

  // required uint32 freeCount = 10;
  if (has_freecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->freecount(), target);
  }

  // required uint32 countRecoverTime = 11;
  if (has_countrecovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->countrecovertime(), target);
  }

  // required uint32 startLv = 12;
  if (has_startlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->startlv(), target);
  }

  // required uint32 happenTime = 13;
  if (has_happentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->happentime(), target);
  }

  // required uint32 happenCount = 14;
  if (has_happencount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->happencount(), target);
  }

  // optional uint32 dayharm = 15;
  if (has_dayharm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dayharm(), target);
  }

  // optional uint32 dayexploits = 16;
  if (has_dayexploits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dayexploits(), target);
  }

  // optional uint64 dayharmBig = 17;
  if (has_dayharmbig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->dayharmbig(), target);
  }

  // optional uint64 curHealthBig = 18;
  if (has_curhealthbig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->curhealthbig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbRebelArmy)
  return target;
}

int DbRebelArmy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ownerUserId = 1;
    if (has_owneruserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->owneruserid());
    }

    // required uint32 curHealth = 2;
    if (has_curhealth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhealth());
    }

    // required uint32 createTime = 3;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required uint32 attackTime = 6;
    if (has_attacktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacktime());
    }

    // required uint32 bIsShare = 7;
    if (has_bisshare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bisshare());
    }

    // required uint32 lv = 8;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 battleValue = 9;
    if (has_battlevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlevalue());
    }

    // required uint32 freeCount = 10;
    if (has_freecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freecount());
    }

    // required uint32 countRecoverTime = 11;
    if (has_countrecovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countrecovertime());
    }

    // required uint32 startLv = 12;
    if (has_startlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startlv());
    }

    // required uint32 happenTime = 13;
    if (has_happentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->happentime());
    }

    // required uint32 happenCount = 14;
    if (has_happencount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->happencount());
    }

    // optional uint32 dayharm = 15;
    if (has_dayharm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayharm());
    }

    // optional uint32 dayexploits = 16;
    if (has_dayexploits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayexploits());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 dayharmBig = 17;
    if (has_dayharmbig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dayharmbig());
    }

    // optional uint64 curHealthBig = 18;
    if (has_curhealthbig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhealthbig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbRebelArmy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbRebelArmy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbRebelArmy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbRebelArmy::MergeFrom(const DbRebelArmy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owneruserid()) {
      set_owneruserid(from.owneruserid());
    }
    if (from.has_curhealth()) {
      set_curhealth(from.curhealth());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_attacktime()) {
      set_attacktime(from.attacktime());
    }
    if (from.has_bisshare()) {
      set_bisshare(from.bisshare());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battlevalue()) {
      set_battlevalue(from.battlevalue());
    }
    if (from.has_freecount()) {
      set_freecount(from.freecount());
    }
    if (from.has_countrecovertime()) {
      set_countrecovertime(from.countrecovertime());
    }
    if (from.has_startlv()) {
      set_startlv(from.startlv());
    }
    if (from.has_happentime()) {
      set_happentime(from.happentime());
    }
    if (from.has_happencount()) {
      set_happencount(from.happencount());
    }
    if (from.has_dayharm()) {
      set_dayharm(from.dayharm());
    }
    if (from.has_dayexploits()) {
      set_dayexploits(from.dayexploits());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dayharmbig()) {
      set_dayharmbig(from.dayharmbig());
    }
    if (from.has_curhealthbig()) {
      set_curhealthbig(from.curhealthbig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbRebelArmy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbRebelArmy::CopyFrom(const DbRebelArmy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbRebelArmy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void DbRebelArmy::Swap(DbRebelArmy* other) {
  if (other != this) {
    std::swap(owneruserid_, other->owneruserid_);
    std::swap(curhealth_, other->curhealth_);
    std::swap(createtime_, other->createtime_);
    std::swap(index_, other->index_);
    std::swap(state_, other->state_);
    std::swap(attacktime_, other->attacktime_);
    std::swap(bisshare_, other->bisshare_);
    std::swap(lv_, other->lv_);
    std::swap(battlevalue_, other->battlevalue_);
    std::swap(freecount_, other->freecount_);
    std::swap(countrecovertime_, other->countrecovertime_);
    std::swap(startlv_, other->startlv_);
    std::swap(happentime_, other->happentime_);
    std::swap(happencount_, other->happencount_);
    std::swap(dayharm_, other->dayharm_);
    std::swap(dayexploits_, other->dayexploits_);
    std::swap(dayharmbig_, other->dayharmbig_);
    std::swap(curhealthbig_, other->curhealthbig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbRebelArmy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbRebelArmy_descriptor_;
  metadata.reflection = DbRebelArmy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbActionRecord::kActionFieldNumber;
#endif  // !_MSC_VER

DbActionRecord::DbActionRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbActionRecord)
}

void DbActionRecord::InitAsDefaultInstance() {
}

DbActionRecord::DbActionRecord(const DbActionRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbActionRecord)
}

void DbActionRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbActionRecord::~DbActionRecord() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbActionRecord)
  SharedDtor();
}

void DbActionRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbActionRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbActionRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbActionRecord_descriptor_;
}

const DbActionRecord& DbActionRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DbActionRecord* DbActionRecord::default_instance_ = NULL;

DbActionRecord* DbActionRecord::New() const {
  return new DbActionRecord;
}

void DbActionRecord::Clear() {
  action_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbActionRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbActionRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.ActionRecord action = 1;
      case 1: {
        if (tag == 10) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_action;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbActionRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbActionRecord)
  return false;
#undef DO_
}

void DbActionRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbActionRecord)
  // repeated .TgsProtocol.ActionRecord action = 1;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->action(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbActionRecord)
}

::google::protobuf::uint8* DbActionRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbActionRecord)
  // repeated .TgsProtocol.ActionRecord action = 1;
  for (int i = 0; i < this->action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->action(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbActionRecord)
  return target;
}

int DbActionRecord::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.ActionRecord action = 1;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbActionRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbActionRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbActionRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbActionRecord::MergeFrom(const DbActionRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbActionRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbActionRecord::CopyFrom(const DbActionRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbActionRecord::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->action())) return false;
  return true;
}

void DbActionRecord::Swap(DbActionRecord* other) {
  if (other != this) {
    action_.Swap(&other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbActionRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbActionRecord_descriptor_;
  metadata.reflection = DbActionRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbRaidTeam::kCountFieldNumber;
const int DbRaidTeam::kLuckyFieldNumber;
#endif  // !_MSC_VER

DbRaidTeam::DbRaidTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbRaidTeam)
}

void DbRaidTeam::InitAsDefaultInstance() {
}

DbRaidTeam::DbRaidTeam(const DbRaidTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbRaidTeam)
}

void DbRaidTeam::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  lucky_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbRaidTeam::~DbRaidTeam() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbRaidTeam)
  SharedDtor();
}

void DbRaidTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbRaidTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbRaidTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbRaidTeam_descriptor_;
}

const DbRaidTeam& DbRaidTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DbRaidTeam* DbRaidTeam::default_instance_ = NULL;

DbRaidTeam* DbRaidTeam::New() const {
  return new DbRaidTeam;
}

void DbRaidTeam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbRaidTeam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(count_, lucky_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbRaidTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbRaidTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lucky;
        break;
      }

      // required uint32 lucky = 2;
      case 2: {
        if (tag == 16) {
         parse_lucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lucky_)));
          set_has_lucky();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbRaidTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbRaidTeam)
  return false;
#undef DO_
}

void DbRaidTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbRaidTeam)
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint32 lucky = 2;
  if (has_lucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lucky(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbRaidTeam)
}

::google::protobuf::uint8* DbRaidTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbRaidTeam)
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // required uint32 lucky = 2;
  if (has_lucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lucky(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbRaidTeam)
  return target;
}

int DbRaidTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 lucky = 2;
    if (has_lucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lucky());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbRaidTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbRaidTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbRaidTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbRaidTeam::MergeFrom(const DbRaidTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_lucky()) {
      set_lucky(from.lucky());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbRaidTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbRaidTeam::CopyFrom(const DbRaidTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbRaidTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DbRaidTeam::Swap(DbRaidTeam* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(lucky_, other->lucky_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbRaidTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbRaidTeam_descriptor_;
  metadata.reflection = DbRaidTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBServerCompareGot::kTimeFieldNumber;
const int DBServerCompareGot::kMergeTimesFieldNumber;
const int DBServerCompareGot::kGotsFieldNumber;
#endif  // !_MSC_VER

DBServerCompareGot::DBServerCompareGot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBServerCompareGot)
}

void DBServerCompareGot::InitAsDefaultInstance() {
}

DBServerCompareGot::DBServerCompareGot(const DBServerCompareGot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBServerCompareGot)
}

void DBServerCompareGot::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  mergetimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBServerCompareGot::~DBServerCompareGot() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBServerCompareGot)
  SharedDtor();
}

void DBServerCompareGot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBServerCompareGot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBServerCompareGot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBServerCompareGot_descriptor_;
}

const DBServerCompareGot& DBServerCompareGot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DBServerCompareGot* DBServerCompareGot::default_instance_ = NULL;

DBServerCompareGot* DBServerCompareGot::New() const {
  return new DBServerCompareGot;
}

void DBServerCompareGot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBServerCompareGot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, mergetimes_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  gots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBServerCompareGot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBServerCompareGot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mergeTimes;
        break;
      }

      // required uint32 mergeTimes = 2;
      case 2: {
        if (tag == 16) {
         parse_mergeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mergetimes_)));
          set_has_mergetimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gots;
        break;
      }

      // repeated .TgsProtocol.ServerCompareGot gots = 3;
      case 3: {
        if (tag == 26) {
         parse_gots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gots;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBServerCompareGot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBServerCompareGot)
  return false;
#undef DO_
}

void DBServerCompareGot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBServerCompareGot)
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required uint32 mergeTimes = 2;
  if (has_mergetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mergetimes(), output);
  }

  // repeated .TgsProtocol.ServerCompareGot gots = 3;
  for (int i = 0; i < this->gots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBServerCompareGot)
}

::google::protobuf::uint8* DBServerCompareGot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBServerCompareGot)
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required uint32 mergeTimes = 2;
  if (has_mergetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mergetimes(), target);
  }

  // repeated .TgsProtocol.ServerCompareGot gots = 3;
  for (int i = 0; i < this->gots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBServerCompareGot)
  return target;
}

int DBServerCompareGot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 mergeTimes = 2;
    if (has_mergetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mergetimes());
    }

  }
  // repeated .TgsProtocol.ServerCompareGot gots = 3;
  total_size += 1 * this->gots_size();
  for (int i = 0; i < this->gots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBServerCompareGot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBServerCompareGot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBServerCompareGot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBServerCompareGot::MergeFrom(const DBServerCompareGot& from) {
  GOOGLE_CHECK_NE(&from, this);
  gots_.MergeFrom(from.gots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_mergetimes()) {
      set_mergetimes(from.mergetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBServerCompareGot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBServerCompareGot::CopyFrom(const DBServerCompareGot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBServerCompareGot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->gots())) return false;
  return true;
}

void DBServerCompareGot::Swap(DBServerCompareGot* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(mergetimes_, other->mergetimes_);
    gots_.Swap(&other->gots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBServerCompareGot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBServerCompareGot_descriptor_;
  metadata.reflection = DBServerCompareGot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_CharAdvancedInfo::kCmdIdFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kCharIdFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kRetFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kGoodsFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kOpenCopperBoxNumFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kLastOpenCopperBoxTimeFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kLastOpenDiamondBoxTimeFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kTotalOpenCopperBoxTimesFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kTotalOpenDiamondBoxTimesFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kMailListFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kSkillPointFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kUpdateSkillPointTimeFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kExFormationFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kMyHerosFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kDefenseHerosFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kDifficultyFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kLastArenaTimeFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kDailyArenaTimesFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kBestArenaRankFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kArFormationFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kTotalArenaWinFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kArenaLogFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kTopThreeTimeFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kAckFormationFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kDailyOpenDiamondBoxTimesFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kSignInFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kTotalCopperMineNumFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kTotalSilverMineNumFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kTotalDiamondMineNumFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kDailyCopperMineNumFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kDailySilverMineNumFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kDailyDiamondMineNumFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kFriendInfoFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kShopFlushFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kSevenDayFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kRebelArmyFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kActionFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kRaidTeamFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kCardFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kDropFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kGoodsBuyedFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kFirstChargeChooseFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kContinueChargeChooseFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kContinueChargeFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kHandbookFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kSecretholeFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kReturntaskFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kTerritoryFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kDiagramMapFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kGhostActiveListFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kCheerIdFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kTitleListFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kEpicbosslistFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kSevengiftsFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kOnlineRewardsFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kRetrieveFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kChatpasswdFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kChatCountFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kCompareGotsFieldNumber;
const int DB2LOBBY_CharAdvancedInfo::kFarmFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_CharAdvancedInfo::DB2LOBBY_CharAdvancedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_CharAdvancedInfo)
}

void DB2LOBBY_CharAdvancedInfo::InitAsDefaultInstance() {
  sevenday_ = const_cast< ::TgsProtocol::DbSevenDayActive*>(&::TgsProtocol::DbSevenDayActive::default_instance());
  rebelarmy_ = const_cast< ::TgsProtocol::DbRebelArmy*>(&::TgsProtocol::DbRebelArmy::default_instance());
  action_ = const_cast< ::TgsProtocol::DbActionRecord*>(&::TgsProtocol::DbActionRecord::default_instance());
  raidteam_ = const_cast< ::TgsProtocol::DbRaidTeam*>(&::TgsProtocol::DbRaidTeam::default_instance());
  card_ = const_cast< ::TgsProtocol::DbMonthCard*>(&::TgsProtocol::DbMonthCard::default_instance());
  drop_ = const_cast< ::TgsProtocol::DbDrop*>(&::TgsProtocol::DbDrop::default_instance());
  handbook_ = const_cast< ::TgsProtocol::DbHandBook*>(&::TgsProtocol::DbHandBook::default_instance());
  secrethole_ = const_cast< ::TgsProtocol::DBSecretHole*>(&::TgsProtocol::DBSecretHole::default_instance());
  returntask_ = const_cast< ::TgsProtocol::DBReturnTask*>(&::TgsProtocol::DBReturnTask::default_instance());
  territory_ = const_cast< ::TgsProtocol::PlayerTerritoryInfo*>(&::TgsProtocol::PlayerTerritoryInfo::default_instance());
  diagrammap_ = const_cast< ::TgsProtocol::DiagramMap*>(&::TgsProtocol::DiagramMap::default_instance());
  ghostactivelist_ = const_cast< ::TgsProtocol::GhostList*>(&::TgsProtocol::GhostList::default_instance());
  epicbosslist_ = const_cast< ::TgsProtocol::EpicBossList*>(&::TgsProtocol::EpicBossList::default_instance());
  retrieve_ = const_cast< ::TgsProtocol::RetrieveDB*>(&::TgsProtocol::RetrieveDB::default_instance());
  compare_gots_ = const_cast< ::TgsProtocol::DBServerCompareGot*>(&::TgsProtocol::DBServerCompareGot::default_instance());
  farm_ = const_cast< ::TgsProtocol::FarmDB*>(&::TgsProtocol::FarmDB::default_instance());
}

DB2LOBBY_CharAdvancedInfo::DB2LOBBY_CharAdvancedInfo(const DB2LOBBY_CharAdvancedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_CharAdvancedInfo)
}

void DB2LOBBY_CharAdvancedInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 350008;
  charid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  goods_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opencopperboxnum_ = 0u;
  lastopencopperboxtime_ = 0u;
  lastopendiamondboxtime_ = 0u;
  totalopencopperboxtimes_ = 0u;
  totalopendiamondboxtimes_ = 0u;
  skillpoint_ = 0u;
  updateskillpointtime_ = 0u;
  myheros_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defenseheros_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  difficulty_ = 0u;
  lastarenatime_ = 0u;
  dailyarenatimes_ = 0u;
  bestarenarank_ = 0u;
  totalarenawin_ = 0u;
  arenalog_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topthreetime_ = 0u;
  dailyopendiamondboxtimes_ = 0u;
  signin_ = 0u;
  totalcopperminenum_ = 0u;
  totalsilverminenum_ = 0u;
  totaldiamondminenum_ = 0u;
  dailycopperminenum_ = 0u;
  dailysilverminenum_ = 0u;
  dailydiamondminenum_ = 0u;
  friendinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shopflush_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sevenday_ = NULL;
  rebelarmy_ = NULL;
  action_ = NULL;
  raidteam_ = NULL;
  card_ = NULL;
  drop_ = NULL;
  goodsbuyed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstchargechoose_ = 0u;
  continuechargechoose_ = 0u;
  continuecharge_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handbook_ = NULL;
  secrethole_ = NULL;
  returntask_ = NULL;
  territory_ = NULL;
  diagrammap_ = NULL;
  ghostactivelist_ = NULL;
  cheerid_ = 0u;
  epicbosslist_ = NULL;
  retrieve_ = NULL;
  compare_gots_ = NULL;
  farm_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_CharAdvancedInfo::~DB2LOBBY_CharAdvancedInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_CharAdvancedInfo)
  SharedDtor();
}

void DB2LOBBY_CharAdvancedInfo::SharedDtor() {
  if (goods_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete goods_;
  }
  if (myheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete myheros_;
  }
  if (defenseheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defenseheros_;
  }
  if (arenalog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arenalog_;
  }
  if (friendinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendinfo_;
  }
  if (shopflush_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shopflush_;
  }
  if (goodsbuyed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete goodsbuyed_;
  }
  if (continuecharge_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuecharge_;
  }
  if (this != default_instance_) {
    delete sevenday_;
    delete rebelarmy_;
    delete action_;
    delete raidteam_;
    delete card_;
    delete drop_;
    delete handbook_;
    delete secrethole_;
    delete returntask_;
    delete territory_;
    delete diagrammap_;
    delete ghostactivelist_;
    delete epicbosslist_;
    delete retrieve_;
    delete compare_gots_;
    delete farm_;
  }
}

void DB2LOBBY_CharAdvancedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_CharAdvancedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_CharAdvancedInfo_descriptor_;
}

const DB2LOBBY_CharAdvancedInfo& DB2LOBBY_CharAdvancedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_CharAdvancedInfo* DB2LOBBY_CharAdvancedInfo::default_instance_ = NULL;

DB2LOBBY_CharAdvancedInfo* DB2LOBBY_CharAdvancedInfo::New() const {
  return new DB2LOBBY_CharAdvancedInfo;
}

void DB2LOBBY_CharAdvancedInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_CharAdvancedInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(opencopperboxnum_, totalopencopperboxtimes_);
    cmdid_ = 350008;
    charid_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
    if (has_goods()) {
      if (goods_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        goods_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 60672) {
    ZR_(totalopendiamondboxtimes_, skillpoint_);
    ZR_(updateskillpointtime_, difficulty_);
    if (has_myheros()) {
      if (myheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        myheros_->clear();
      }
    }
    if (has_defenseheros()) {
      if (defenseheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defenseheros_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 7798784) {
    ZR_(lastarenatime_, dailyarenatimes_);
    ZR_(bestarenarank_, totalarenawin_);
    if (has_arenalog()) {
      if (arenalog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        arenalog_->clear();
      }
    }
    topthreetime_ = 0u;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(dailyopendiamondboxtimes_, dailysilverminenum_);
    dailydiamondminenum_ = 0u;
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_friendinfo()) {
      if (friendinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friendinfo_->clear();
      }
    }
    if (has_shopflush()) {
      if (shopflush_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shopflush_->clear();
      }
    }
    if (has_sevenday()) {
      if (sevenday_ != NULL) sevenday_->::TgsProtocol::DbSevenDayActive::Clear();
    }
    if (has_rebelarmy()) {
      if (rebelarmy_ != NULL) rebelarmy_->::TgsProtocol::DbRebelArmy::Clear();
    }
    if (has_action()) {
      if (action_ != NULL) action_->::TgsProtocol::DbActionRecord::Clear();
    }
    if (has_raidteam()) {
      if (raidteam_ != NULL) raidteam_->::TgsProtocol::DbRaidTeam::Clear();
    }
    if (has_card()) {
      if (card_ != NULL) card_->::TgsProtocol::DbMonthCard::Clear();
    }
    if (has_drop()) {
      if (drop_ != NULL) drop_->::TgsProtocol::DbDrop::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_goodsbuyed()) {
      if (goodsbuyed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        goodsbuyed_->clear();
      }
    }
    firstchargechoose_ = 0u;
    continuechargechoose_ = 0u;
    if (has_continuecharge()) {
      if (continuecharge_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuecharge_->clear();
      }
    }
    if (has_handbook()) {
      if (handbook_ != NULL) handbook_->::TgsProtocol::DbHandBook::Clear();
    }
    if (has_secrethole()) {
      if (secrethole_ != NULL) secrethole_->::TgsProtocol::DBSecretHole::Clear();
    }
    if (has_returntask()) {
      if (returntask_ != NULL) returntask_->::TgsProtocol::DBReturnTask::Clear();
    }
    if (has_territory()) {
      if (territory_ != NULL) territory_->::TgsProtocol::PlayerTerritoryInfo::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 9895936) {
    if (has_diagrammap()) {
      if (diagrammap_ != NULL) diagrammap_->::TgsProtocol::DiagramMap::Clear();
    }
    if (has_ghostactivelist()) {
      if (ghostactivelist_ != NULL) ghostactivelist_->::TgsProtocol::GhostList::Clear();
    }
    cheerid_ = 0u;
    if (has_epicbosslist()) {
      if (epicbosslist_ != NULL) epicbosslist_->::TgsProtocol::EpicBossList::Clear();
    }
    if (has_retrieve()) {
      if (retrieve_ != NULL) retrieve_->::TgsProtocol::RetrieveDB::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 201326592) {
    if (has_compare_gots()) {
      if (compare_gots_ != NULL) compare_gots_->::TgsProtocol::DBServerCompareGot::Clear();
    }
    if (has_farm()) {
      if (farm_ != NULL) farm_->::TgsProtocol::FarmDB::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  maillist_.Clear();
  exformation_.Clear();
  arformation_.Clear();
  ackformation_.Clear();
  titlelist_.Clear();
  sevengifts_.Clear();
  onlinerewards_.Clear();
  chatpasswd_.Clear();
  chatcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_CharAdvancedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_CharAdvancedInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_ADVANCED_CHARINFO_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required uint32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_goods;
        break;
      }

      // optional bytes goods = 4;
      case 4: {
        if (tag == 34) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_openCopperBoxNum;
        break;
      }

      // optional uint32 openCopperBoxNum = 5;
      case 5: {
        if (tag == 40) {
         parse_openCopperBoxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opencopperboxnum_)));
          set_has_opencopperboxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lastOpenCopperBoxTime;
        break;
      }

      // optional uint32 lastOpenCopperBoxTime = 6;
      case 6: {
        if (tag == 48) {
         parse_lastOpenCopperBoxTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastopencopperboxtime_)));
          set_has_lastopencopperboxtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lastOpenDiamondBoxTime;
        break;
      }

      // optional uint32 lastOpenDiamondBoxTime = 7;
      case 7: {
        if (tag == 56) {
         parse_lastOpenDiamondBoxTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastopendiamondboxtime_)));
          set_has_lastopendiamondboxtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_totalOpenCopperBoxTimes;
        break;
      }

      // optional uint32 totalOpenCopperBoxTimes = 8;
      case 8: {
        if (tag == 64) {
         parse_totalOpenCopperBoxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalopencopperboxtimes_)));
          set_has_totalopencopperboxtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_totalOpenDiamondBoxTimes;
        break;
      }

      // optional uint32 totalOpenDiamondBoxTimes = 9;
      case 9: {
        if (tag == 72) {
         parse_totalOpenDiamondBoxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalopendiamondboxtimes_)));
          set_has_totalopendiamondboxtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mailList;
        break;
      }

      // repeated .TgsProtocol.DBMailInfo mailList = 10;
      case 10: {
        if (tag == 82) {
         parse_mailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mailList;
        if (input->ExpectTag(88)) goto parse_skillPoint;
        break;
      }

      // optional uint32 skillPoint = 11;
      case 11: {
        if (tag == 88) {
         parse_skillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_updateSkillPointTime;
        break;
      }

      // optional uint32 updateSkillPointTime = 12;
      case 12: {
        if (tag == 96) {
         parse_updateSkillPointTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateskillpointtime_)));
          set_has_updateskillpointtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_exFormation;
        break;
      }

      // repeated uint32 exFormation = 13;
      case 13: {
        if (tag == 104) {
         parse_exFormation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_exformation())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exformation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_exFormation;
        if (input->ExpectTag(114)) goto parse_myHeros;
        break;
      }

      // optional bytes myHeros = 14;
      case 14: {
        if (tag == 114) {
         parse_myHeros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_myheros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_DefenseHeros;
        break;
      }

      // optional bytes DefenseHeros = 15;
      case 15: {
        if (tag == 122) {
         parse_DefenseHeros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_defenseheros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_difficulty;
        break;
      }

      // optional uint32 difficulty = 16;
      case 16: {
        if (tag == 128) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_lastArenaTime;
        break;
      }

      // optional uint32 lastArenaTime = 17;
      case 17: {
        if (tag == 136) {
         parse_lastArenaTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastarenatime_)));
          set_has_lastarenatime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_dailyArenaTimes;
        break;
      }

      // optional uint32 dailyArenaTimes = 18;
      case 18: {
        if (tag == 144) {
         parse_dailyArenaTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyarenatimes_)));
          set_has_dailyarenatimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_bestArenaRank;
        break;
      }

      // optional uint32 bestArenaRank = 19;
      case 19: {
        if (tag == 152) {
         parse_bestArenaRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bestarenarank_)));
          set_has_bestarenarank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_arFormation;
        break;
      }

      // repeated uint32 arFormation = 20;
      case 20: {
        if (tag == 160) {
         parse_arFormation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_arformation())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arformation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_arFormation;
        if (input->ExpectTag(168)) goto parse_totalArenaWin;
        break;
      }

      // optional uint32 totalArenaWin = 21;
      case 21: {
        if (tag == 168) {
         parse_totalArenaWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalarenawin_)));
          set_has_totalarenawin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_arenaLog;
        break;
      }

      // optional bytes arenaLog = 22;
      case 22: {
        if (tag == 178) {
         parse_arenaLog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_arenalog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_topThreeTime;
        break;
      }

      // optional uint32 topThreeTime = 23;
      case 23: {
        if (tag == 184) {
         parse_topThreeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &topthreetime_)));
          set_has_topthreetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_ackFormation;
        break;
      }

      // repeated uint32 ackFormation = 24;
      case 24: {
        if (tag == 192) {
         parse_ackFormation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 192, input, this->mutable_ackformation())));
        } else if (tag == 194) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ackformation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_ackFormation;
        if (input->ExpectTag(200)) goto parse_dailyOpenDiamondBoxTimes;
        break;
      }

      // optional uint32 dailyOpenDiamondBoxTimes = 25;
      case 25: {
        if (tag == 200) {
         parse_dailyOpenDiamondBoxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyopendiamondboxtimes_)));
          set_has_dailyopendiamondboxtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_signIn;
        break;
      }

      // optional uint32 signIn = 26;
      case 26: {
        if (tag == 208) {
         parse_signIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signin_)));
          set_has_signin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_totalCopperMineNum;
        break;
      }

      // optional uint32 totalCopperMineNum = 29;
      case 29: {
        if (tag == 232) {
         parse_totalCopperMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcopperminenum_)));
          set_has_totalcopperminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_totalSilverMineNum;
        break;
      }

      // optional uint32 totalSilverMineNum = 30;
      case 30: {
        if (tag == 240) {
         parse_totalSilverMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalsilverminenum_)));
          set_has_totalsilverminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_totalDiamondMineNum;
        break;
      }

      // optional uint32 totalDiamondMineNum = 31;
      case 31: {
        if (tag == 248) {
         parse_totalDiamondMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaldiamondminenum_)));
          set_has_totaldiamondminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_dailyCopperMineNum;
        break;
      }

      // optional uint32 dailyCopperMineNum = 32;
      case 32: {
        if (tag == 256) {
         parse_dailyCopperMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailycopperminenum_)));
          set_has_dailycopperminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_dailySilverMineNum;
        break;
      }

      // optional uint32 dailySilverMineNum = 33;
      case 33: {
        if (tag == 264) {
         parse_dailySilverMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailysilverminenum_)));
          set_has_dailysilverminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_dailyDiamondMineNum;
        break;
      }

      // optional uint32 dailyDiamondMineNum = 34;
      case 34: {
        if (tag == 272) {
         parse_dailyDiamondMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailydiamondminenum_)));
          set_has_dailydiamondminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_friendInfo;
        break;
      }

      // optional bytes friendInfo = 35;
      case 35: {
        if (tag == 282) {
         parse_friendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friendinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_shopFlush;
        break;
      }

      // optional bytes shopFlush = 36;
      case 36: {
        if (tag == 290) {
         parse_shopFlush:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shopflush()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_sevenDay;
        break;
      }

      // optional .TgsProtocol.DbSevenDayActive sevenDay = 37;
      case 37: {
        if (tag == 298) {
         parse_sevenDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sevenday()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_rebelArmy;
        break;
      }

      // optional .TgsProtocol.DbRebelArmy rebelArmy = 38;
      case 38: {
        if (tag == 306) {
         parse_rebelArmy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rebelarmy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_action;
        break;
      }

      // optional .TgsProtocol.DbActionRecord action = 39;
      case 39: {
        if (tag == 314) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_raidTeam;
        break;
      }

      // optional .TgsProtocol.DbRaidTeam raidTeam = 40;
      case 40: {
        if (tag == 322) {
         parse_raidTeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raidteam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_card;
        break;
      }

      // optional .TgsProtocol.DbMonthCard card = 41;
      case 41: {
        if (tag == 330) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_drop;
        break;
      }

      // optional .TgsProtocol.DbDrop drop = 42;
      case 42: {
        if (tag == 338) {
         parse_drop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_goodsBuyed;
        break;
      }

      // optional string goodsBuyed = 43;
      case 43: {
        if (tag == 346) {
         parse_goodsBuyed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goodsbuyed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->goodsbuyed().data(), this->goodsbuyed().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "goodsbuyed");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_firstChargeChoose;
        break;
      }

      // optional uint32 firstChargeChoose = 44;
      case 44: {
        if (tag == 352) {
         parse_firstChargeChoose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstchargechoose_)));
          set_has_firstchargechoose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_continueChargeChoose;
        break;
      }

      // optional uint32 continueChargeChoose = 45;
      case 45: {
        if (tag == 360) {
         parse_continueChargeChoose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continuechargechoose_)));
          set_has_continuechargechoose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_continueCharge;
        break;
      }

      // optional string continueCharge = 46;
      case 46: {
        if (tag == 370) {
         parse_continueCharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continuecharge()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->continuecharge().data(), this->continuecharge().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "continuecharge");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_handbook;
        break;
      }

      // optional .TgsProtocol.DbHandBook handbook = 47;
      case 47: {
        if (tag == 378) {
         parse_handbook:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handbook()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_secrethole;
        break;
      }

      // optional .TgsProtocol.DBSecretHole secrethole = 48;
      case 48: {
        if (tag == 386) {
         parse_secrethole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secrethole()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_returntask;
        break;
      }

      // optional .TgsProtocol.DBReturnTask returntask = 49;
      case 49: {
        if (tag == 394) {
         parse_returntask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_returntask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_territory;
        break;
      }

      // optional .TgsProtocol.PlayerTerritoryInfo territory = 50;
      case 50: {
        if (tag == 402) {
         parse_territory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_territory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_diagramMap;
        break;
      }

      // optional .TgsProtocol.DiagramMap diagramMap = 51;
      case 51: {
        if (tag == 410) {
         parse_diagramMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diagrammap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_ghostActiveList;
        break;
      }

      // optional .TgsProtocol.GhostList ghostActiveList = 52;
      case 52: {
        if (tag == 418) {
         parse_ghostActiveList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ghostactivelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_cheerId;
        break;
      }

      // optional uint32 cheerId = 53;
      case 53: {
        if (tag == 424) {
         parse_cheerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheerid_)));
          set_has_cheerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_titleList;
        break;
      }

      // repeated uint32 titleList = 54;
      case 54: {
        if (tag == 432) {
         parse_titleList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 432, input, this->mutable_titlelist())));
        } else if (tag == 434) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_titlelist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_titleList;
        if (input->ExpectTag(442)) goto parse_epicbosslist;
        break;
      }

      // optional .TgsProtocol.EpicBossList epicbosslist = 55;
      case 55: {
        if (tag == 442) {
         parse_epicbosslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epicbosslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_sevengifts;
        break;
      }

      // repeated uint32 sevengifts = 57;
      case 57: {
        if (tag == 456) {
         parse_sevengifts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 456, input, this->mutable_sevengifts())));
        } else if (tag == 458) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sevengifts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_sevengifts;
        if (input->ExpectTag(464)) goto parse_onlineRewards;
        break;
      }

      // repeated uint32 onlineRewards = 58;
      case 58: {
        if (tag == 464) {
         parse_onlineRewards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 464, input, this->mutable_onlinerewards())));
        } else if (tag == 466) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_onlinerewards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_onlineRewards;
        if (input->ExpectTag(474)) goto parse_retrieve;
        break;
      }

      // optional .TgsProtocol.RetrieveDB retrieve = 59;
      case 59: {
        if (tag == 474) {
         parse_retrieve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retrieve()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_chatpasswd;
        break;
      }

      // repeated .TgsProtocol.PassWordState chatpasswd = 60;
      case 60: {
        if (tag == 482) {
         parse_chatpasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatpasswd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_chatpasswd;
        if (input->ExpectTag(488)) goto parse_chatCount;
        break;
      }

      // repeated uint32 chatCount = 61;
      case 61: {
        if (tag == 488) {
         parse_chatCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 488, input, this->mutable_chatcount())));
        } else if (tag == 490) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chatcount())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_chatCount;
        if (input->ExpectTag(498)) goto parse_compare_gots;
        break;
      }

      // optional .TgsProtocol.DBServerCompareGot compare_gots = 62;
      case 62: {
        if (tag == 498) {
         parse_compare_gots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compare_gots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_farm;
        break;
      }

      // optional .TgsProtocol.FarmDB farm = 63;
      case 63: {
        if (tag == 506) {
         parse_farm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_farm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_CharAdvancedInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_CharAdvancedInfo)
  return false;
#undef DO_
}

void DB2LOBBY_CharAdvancedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_CharAdvancedInfo)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_ADVANCED_CHARINFO_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional bytes goods = 4;
  if (has_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->goods(), output);
  }

  // optional uint32 openCopperBoxNum = 5;
  if (has_opencopperboxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->opencopperboxnum(), output);
  }

  // optional uint32 lastOpenCopperBoxTime = 6;
  if (has_lastopencopperboxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lastopencopperboxtime(), output);
  }

  // optional uint32 lastOpenDiamondBoxTime = 7;
  if (has_lastopendiamondboxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lastopendiamondboxtime(), output);
  }

  // optional uint32 totalOpenCopperBoxTimes = 8;
  if (has_totalopencopperboxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->totalopencopperboxtimes(), output);
  }

  // optional uint32 totalOpenDiamondBoxTimes = 9;
  if (has_totalopendiamondboxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->totalopendiamondboxtimes(), output);
  }

  // repeated .TgsProtocol.DBMailInfo mailList = 10;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->maillist(i), output);
  }

  // optional uint32 skillPoint = 11;
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->skillpoint(), output);
  }

  // optional uint32 updateSkillPointTime = 12;
  if (has_updateskillpointtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->updateskillpointtime(), output);
  }

  // repeated uint32 exFormation = 13;
  for (int i = 0; i < this->exformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->exformation(i), output);
  }

  // optional bytes myHeros = 14;
  if (has_myheros()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->myheros(), output);
  }

  // optional bytes DefenseHeros = 15;
  if (has_defenseheros()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->defenseheros(), output);
  }

  // optional uint32 difficulty = 16;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->difficulty(), output);
  }

  // optional uint32 lastArenaTime = 17;
  if (has_lastarenatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->lastarenatime(), output);
  }

  // optional uint32 dailyArenaTimes = 18;
  if (has_dailyarenatimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->dailyarenatimes(), output);
  }

  // optional uint32 bestArenaRank = 19;
  if (has_bestarenarank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->bestarenarank(), output);
  }

  // repeated uint32 arFormation = 20;
  for (int i = 0; i < this->arformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->arformation(i), output);
  }

  // optional uint32 totalArenaWin = 21;
  if (has_totalarenawin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->totalarenawin(), output);
  }

  // optional bytes arenaLog = 22;
  if (has_arenalog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->arenalog(), output);
  }

  // optional uint32 topThreeTime = 23;
  if (has_topthreetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->topthreetime(), output);
  }

  // repeated uint32 ackFormation = 24;
  for (int i = 0; i < this->ackformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      24, this->ackformation(i), output);
  }

  // optional uint32 dailyOpenDiamondBoxTimes = 25;
  if (has_dailyopendiamondboxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->dailyopendiamondboxtimes(), output);
  }

  // optional uint32 signIn = 26;
  if (has_signin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->signin(), output);
  }

  // optional uint32 totalCopperMineNum = 29;
  if (has_totalcopperminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->totalcopperminenum(), output);
  }

  // optional uint32 totalSilverMineNum = 30;
  if (has_totalsilverminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->totalsilverminenum(), output);
  }

  // optional uint32 totalDiamondMineNum = 31;
  if (has_totaldiamondminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->totaldiamondminenum(), output);
  }

  // optional uint32 dailyCopperMineNum = 32;
  if (has_dailycopperminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->dailycopperminenum(), output);
  }

  // optional uint32 dailySilverMineNum = 33;
  if (has_dailysilverminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->dailysilverminenum(), output);
  }

  // optional uint32 dailyDiamondMineNum = 34;
  if (has_dailydiamondminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->dailydiamondminenum(), output);
  }

  // optional bytes friendInfo = 35;
  if (has_friendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      35, this->friendinfo(), output);
  }

  // optional bytes shopFlush = 36;
  if (has_shopflush()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      36, this->shopflush(), output);
  }

  // optional .TgsProtocol.DbSevenDayActive sevenDay = 37;
  if (has_sevenday()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->sevenday(), output);
  }

  // optional .TgsProtocol.DbRebelArmy rebelArmy = 38;
  if (has_rebelarmy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->rebelarmy(), output);
  }

  // optional .TgsProtocol.DbActionRecord action = 39;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->action(), output);
  }

  // optional .TgsProtocol.DbRaidTeam raidTeam = 40;
  if (has_raidteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->raidteam(), output);
  }

  // optional .TgsProtocol.DbMonthCard card = 41;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->card(), output);
  }

  // optional .TgsProtocol.DbDrop drop = 42;
  if (has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->drop(), output);
  }

  // optional string goodsBuyed = 43;
  if (has_goodsbuyed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->goodsbuyed().data(), this->goodsbuyed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "goodsbuyed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->goodsbuyed(), output);
  }

  // optional uint32 firstChargeChoose = 44;
  if (has_firstchargechoose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->firstchargechoose(), output);
  }

  // optional uint32 continueChargeChoose = 45;
  if (has_continuechargechoose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->continuechargechoose(), output);
  }

  // optional string continueCharge = 46;
  if (has_continuecharge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continuecharge().data(), this->continuecharge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "continuecharge");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->continuecharge(), output);
  }

  // optional .TgsProtocol.DbHandBook handbook = 47;
  if (has_handbook()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->handbook(), output);
  }

  // optional .TgsProtocol.DBSecretHole secrethole = 48;
  if (has_secrethole()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->secrethole(), output);
  }

  // optional .TgsProtocol.DBReturnTask returntask = 49;
  if (has_returntask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->returntask(), output);
  }

  // optional .TgsProtocol.PlayerTerritoryInfo territory = 50;
  if (has_territory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->territory(), output);
  }

  // optional .TgsProtocol.DiagramMap diagramMap = 51;
  if (has_diagrammap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->diagrammap(), output);
  }

  // optional .TgsProtocol.GhostList ghostActiveList = 52;
  if (has_ghostactivelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->ghostactivelist(), output);
  }

  // optional uint32 cheerId = 53;
  if (has_cheerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->cheerid(), output);
  }

  // repeated uint32 titleList = 54;
  for (int i = 0; i < this->titlelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      54, this->titlelist(i), output);
  }

  // optional .TgsProtocol.EpicBossList epicbosslist = 55;
  if (has_epicbosslist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->epicbosslist(), output);
  }

  // repeated uint32 sevengifts = 57;
  for (int i = 0; i < this->sevengifts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      57, this->sevengifts(i), output);
  }

  // repeated uint32 onlineRewards = 58;
  for (int i = 0; i < this->onlinerewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      58, this->onlinerewards(i), output);
  }

  // optional .TgsProtocol.RetrieveDB retrieve = 59;
  if (has_retrieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->retrieve(), output);
  }

  // repeated .TgsProtocol.PassWordState chatpasswd = 60;
  for (int i = 0; i < this->chatpasswd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->chatpasswd(i), output);
  }

  // repeated uint32 chatCount = 61;
  for (int i = 0; i < this->chatcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      61, this->chatcount(i), output);
  }

  // optional .TgsProtocol.DBServerCompareGot compare_gots = 62;
  if (has_compare_gots()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->compare_gots(), output);
  }

  // optional .TgsProtocol.FarmDB farm = 63;
  if (has_farm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->farm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_CharAdvancedInfo)
}

::google::protobuf::uint8* DB2LOBBY_CharAdvancedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_CharAdvancedInfo)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_ADVANCED_CHARINFO_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional bytes goods = 4;
  if (has_goods()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->goods(), target);
  }

  // optional uint32 openCopperBoxNum = 5;
  if (has_opencopperboxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->opencopperboxnum(), target);
  }

  // optional uint32 lastOpenCopperBoxTime = 6;
  if (has_lastopencopperboxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lastopencopperboxtime(), target);
  }

  // optional uint32 lastOpenDiamondBoxTime = 7;
  if (has_lastopendiamondboxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lastopendiamondboxtime(), target);
  }

  // optional uint32 totalOpenCopperBoxTimes = 8;
  if (has_totalopencopperboxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->totalopencopperboxtimes(), target);
  }

  // optional uint32 totalOpenDiamondBoxTimes = 9;
  if (has_totalopendiamondboxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->totalopendiamondboxtimes(), target);
  }

  // repeated .TgsProtocol.DBMailInfo mailList = 10;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->maillist(i), target);
  }

  // optional uint32 skillPoint = 11;
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->skillpoint(), target);
  }

  // optional uint32 updateSkillPointTime = 12;
  if (has_updateskillpointtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->updateskillpointtime(), target);
  }

  // repeated uint32 exFormation = 13;
  for (int i = 0; i < this->exformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->exformation(i), target);
  }

  // optional bytes myHeros = 14;
  if (has_myheros()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->myheros(), target);
  }

  // optional bytes DefenseHeros = 15;
  if (has_defenseheros()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->defenseheros(), target);
  }

  // optional uint32 difficulty = 16;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->difficulty(), target);
  }

  // optional uint32 lastArenaTime = 17;
  if (has_lastarenatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->lastarenatime(), target);
  }

  // optional uint32 dailyArenaTimes = 18;
  if (has_dailyarenatimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->dailyarenatimes(), target);
  }

  // optional uint32 bestArenaRank = 19;
  if (has_bestarenarank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->bestarenarank(), target);
  }

  // repeated uint32 arFormation = 20;
  for (int i = 0; i < this->arformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->arformation(i), target);
  }

  // optional uint32 totalArenaWin = 21;
  if (has_totalarenawin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->totalarenawin(), target);
  }

  // optional bytes arenaLog = 22;
  if (has_arenalog()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->arenalog(), target);
  }

  // optional uint32 topThreeTime = 23;
  if (has_topthreetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->topthreetime(), target);
  }

  // repeated uint32 ackFormation = 24;
  for (int i = 0; i < this->ackformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(24, this->ackformation(i), target);
  }

  // optional uint32 dailyOpenDiamondBoxTimes = 25;
  if (has_dailyopendiamondboxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->dailyopendiamondboxtimes(), target);
  }

  // optional uint32 signIn = 26;
  if (has_signin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->signin(), target);
  }

  // optional uint32 totalCopperMineNum = 29;
  if (has_totalcopperminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->totalcopperminenum(), target);
  }

  // optional uint32 totalSilverMineNum = 30;
  if (has_totalsilverminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->totalsilverminenum(), target);
  }

  // optional uint32 totalDiamondMineNum = 31;
  if (has_totaldiamondminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->totaldiamondminenum(), target);
  }

  // optional uint32 dailyCopperMineNum = 32;
  if (has_dailycopperminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->dailycopperminenum(), target);
  }

  // optional uint32 dailySilverMineNum = 33;
  if (has_dailysilverminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->dailysilverminenum(), target);
  }

  // optional uint32 dailyDiamondMineNum = 34;
  if (has_dailydiamondminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->dailydiamondminenum(), target);
  }

  // optional bytes friendInfo = 35;
  if (has_friendinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        35, this->friendinfo(), target);
  }

  // optional bytes shopFlush = 36;
  if (has_shopflush()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        36, this->shopflush(), target);
  }

  // optional .TgsProtocol.DbSevenDayActive sevenDay = 37;
  if (has_sevenday()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->sevenday(), target);
  }

  // optional .TgsProtocol.DbRebelArmy rebelArmy = 38;
  if (has_rebelarmy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->rebelarmy(), target);
  }

  // optional .TgsProtocol.DbActionRecord action = 39;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->action(), target);
  }

  // optional .TgsProtocol.DbRaidTeam raidTeam = 40;
  if (has_raidteam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->raidteam(), target);
  }

  // optional .TgsProtocol.DbMonthCard card = 41;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->card(), target);
  }

  // optional .TgsProtocol.DbDrop drop = 42;
  if (has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->drop(), target);
  }

  // optional string goodsBuyed = 43;
  if (has_goodsbuyed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->goodsbuyed().data(), this->goodsbuyed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "goodsbuyed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->goodsbuyed(), target);
  }

  // optional uint32 firstChargeChoose = 44;
  if (has_firstchargechoose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->firstchargechoose(), target);
  }

  // optional uint32 continueChargeChoose = 45;
  if (has_continuechargechoose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->continuechargechoose(), target);
  }

  // optional string continueCharge = 46;
  if (has_continuecharge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continuecharge().data(), this->continuecharge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "continuecharge");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->continuecharge(), target);
  }

  // optional .TgsProtocol.DbHandBook handbook = 47;
  if (has_handbook()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->handbook(), target);
  }

  // optional .TgsProtocol.DBSecretHole secrethole = 48;
  if (has_secrethole()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->secrethole(), target);
  }

  // optional .TgsProtocol.DBReturnTask returntask = 49;
  if (has_returntask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->returntask(), target);
  }

  // optional .TgsProtocol.PlayerTerritoryInfo territory = 50;
  if (has_territory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->territory(), target);
  }

  // optional .TgsProtocol.DiagramMap diagramMap = 51;
  if (has_diagrammap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->diagrammap(), target);
  }

  // optional .TgsProtocol.GhostList ghostActiveList = 52;
  if (has_ghostactivelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->ghostactivelist(), target);
  }

  // optional uint32 cheerId = 53;
  if (has_cheerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->cheerid(), target);
  }

  // repeated uint32 titleList = 54;
  for (int i = 0; i < this->titlelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(54, this->titlelist(i), target);
  }

  // optional .TgsProtocol.EpicBossList epicbosslist = 55;
  if (has_epicbosslist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->epicbosslist(), target);
  }

  // repeated uint32 sevengifts = 57;
  for (int i = 0; i < this->sevengifts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(57, this->sevengifts(i), target);
  }

  // repeated uint32 onlineRewards = 58;
  for (int i = 0; i < this->onlinerewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(58, this->onlinerewards(i), target);
  }

  // optional .TgsProtocol.RetrieveDB retrieve = 59;
  if (has_retrieve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->retrieve(), target);
  }

  // repeated .TgsProtocol.PassWordState chatpasswd = 60;
  for (int i = 0; i < this->chatpasswd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->chatpasswd(i), target);
  }

  // repeated uint32 chatCount = 61;
  for (int i = 0; i < this->chatcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(61, this->chatcount(i), target);
  }

  // optional .TgsProtocol.DBServerCompareGot compare_gots = 62;
  if (has_compare_gots()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->compare_gots(), target);
  }

  // optional .TgsProtocol.FarmDB farm = 63;
  if (has_farm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->farm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_CharAdvancedInfo)
  return target;
}

int DB2LOBBY_CharAdvancedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_ADVANCED_CHARINFO_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional bytes goods = 4;
    if (has_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->goods());
    }

    // optional uint32 openCopperBoxNum = 5;
    if (has_opencopperboxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opencopperboxnum());
    }

    // optional uint32 lastOpenCopperBoxTime = 6;
    if (has_lastopencopperboxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastopencopperboxtime());
    }

    // optional uint32 lastOpenDiamondBoxTime = 7;
    if (has_lastopendiamondboxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastopendiamondboxtime());
    }

    // optional uint32 totalOpenCopperBoxTimes = 8;
    if (has_totalopencopperboxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalopencopperboxtimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 totalOpenDiamondBoxTimes = 9;
    if (has_totalopendiamondboxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalopendiamondboxtimes());
    }

    // optional uint32 skillPoint = 11;
    if (has_skillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpoint());
    }

    // optional uint32 updateSkillPointTime = 12;
    if (has_updateskillpointtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updateskillpointtime());
    }

    // optional bytes myHeros = 14;
    if (has_myheros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->myheros());
    }

    // optional bytes DefenseHeros = 15;
    if (has_defenseheros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->defenseheros());
    }

    // optional uint32 difficulty = 16;
    if (has_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 lastArenaTime = 17;
    if (has_lastarenatime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastarenatime());
    }

    // optional uint32 dailyArenaTimes = 18;
    if (has_dailyarenatimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyarenatimes());
    }

    // optional uint32 bestArenaRank = 19;
    if (has_bestarenarank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bestarenarank());
    }

    // optional uint32 totalArenaWin = 21;
    if (has_totalarenawin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalarenawin());
    }

    // optional bytes arenaLog = 22;
    if (has_arenalog()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->arenalog());
    }

    // optional uint32 topThreeTime = 23;
    if (has_topthreetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->topthreetime());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 dailyOpenDiamondBoxTimes = 25;
    if (has_dailyopendiamondboxtimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyopendiamondboxtimes());
    }

    // optional uint32 signIn = 26;
    if (has_signin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signin());
    }

    // optional uint32 totalCopperMineNum = 29;
    if (has_totalcopperminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalcopperminenum());
    }

    // optional uint32 totalSilverMineNum = 30;
    if (has_totalsilverminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalsilverminenum());
    }

    // optional uint32 totalDiamondMineNum = 31;
    if (has_totaldiamondminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaldiamondminenum());
    }

    // optional uint32 dailyCopperMineNum = 32;
    if (has_dailycopperminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailycopperminenum());
    }

    // optional uint32 dailySilverMineNum = 33;
    if (has_dailysilverminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailysilverminenum());
    }

    // optional uint32 dailyDiamondMineNum = 34;
    if (has_dailydiamondminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailydiamondminenum());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bytes friendInfo = 35;
    if (has_friendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friendinfo());
    }

    // optional bytes shopFlush = 36;
    if (has_shopflush()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shopflush());
    }

    // optional .TgsProtocol.DbSevenDayActive sevenDay = 37;
    if (has_sevenday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sevenday());
    }

    // optional .TgsProtocol.DbRebelArmy rebelArmy = 38;
    if (has_rebelarmy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rebelarmy());
    }

    // optional .TgsProtocol.DbActionRecord action = 39;
    if (has_action()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

    // optional .TgsProtocol.DbRaidTeam raidTeam = 40;
    if (has_raidteam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raidteam());
    }

    // optional .TgsProtocol.DbMonthCard card = 41;
    if (has_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }

    // optional .TgsProtocol.DbDrop drop = 42;
    if (has_drop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drop());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string goodsBuyed = 43;
    if (has_goodsbuyed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goodsbuyed());
    }

    // optional uint32 firstChargeChoose = 44;
    if (has_firstchargechoose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstchargechoose());
    }

    // optional uint32 continueChargeChoose = 45;
    if (has_continuechargechoose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->continuechargechoose());
    }

    // optional string continueCharge = 46;
    if (has_continuecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continuecharge());
    }

    // optional .TgsProtocol.DbHandBook handbook = 47;
    if (has_handbook()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handbook());
    }

    // optional .TgsProtocol.DBSecretHole secrethole = 48;
    if (has_secrethole()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->secrethole());
    }

    // optional .TgsProtocol.DBReturnTask returntask = 49;
    if (has_returntask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->returntask());
    }

    // optional .TgsProtocol.PlayerTerritoryInfo territory = 50;
    if (has_territory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->territory());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .TgsProtocol.DiagramMap diagramMap = 51;
    if (has_diagrammap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diagrammap());
    }

    // optional .TgsProtocol.GhostList ghostActiveList = 52;
    if (has_ghostactivelist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ghostactivelist());
    }

    // optional uint32 cheerId = 53;
    if (has_cheerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheerid());
    }

    // optional .TgsProtocol.EpicBossList epicbosslist = 55;
    if (has_epicbosslist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->epicbosslist());
    }

    // optional .TgsProtocol.RetrieveDB retrieve = 59;
    if (has_retrieve()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retrieve());
    }

  }
  if (_has_bits_[58 / 32] & (0xffu << (58 % 32))) {
    // optional .TgsProtocol.DBServerCompareGot compare_gots = 62;
    if (has_compare_gots()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compare_gots());
    }

    // optional .TgsProtocol.FarmDB farm = 63;
    if (has_farm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->farm());
    }

  }
  // repeated .TgsProtocol.DBMailInfo mailList = 10;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  // repeated uint32 exFormation = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->exformation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->exformation(i));
    }
    total_size += 1 * this->exformation_size() + data_size;
  }

  // repeated uint32 arFormation = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->arformation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arformation(i));
    }
    total_size += 2 * this->arformation_size() + data_size;
  }

  // repeated uint32 ackFormation = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->ackformation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ackformation(i));
    }
    total_size += 2 * this->ackformation_size() + data_size;
  }

  // repeated uint32 titleList = 54;
  {
    int data_size = 0;
    for (int i = 0; i < this->titlelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->titlelist(i));
    }
    total_size += 2 * this->titlelist_size() + data_size;
  }

  // repeated uint32 sevengifts = 57;
  {
    int data_size = 0;
    for (int i = 0; i < this->sevengifts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sevengifts(i));
    }
    total_size += 2 * this->sevengifts_size() + data_size;
  }

  // repeated uint32 onlineRewards = 58;
  {
    int data_size = 0;
    for (int i = 0; i < this->onlinerewards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->onlinerewards(i));
    }
    total_size += 2 * this->onlinerewards_size() + data_size;
  }

  // repeated .TgsProtocol.PassWordState chatpasswd = 60;
  total_size += 2 * this->chatpasswd_size();
  for (int i = 0; i < this->chatpasswd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatpasswd(i));
  }

  // repeated uint32 chatCount = 61;
  {
    int data_size = 0;
    for (int i = 0; i < this->chatcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chatcount(i));
    }
    total_size += 2 * this->chatcount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_CharAdvancedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_CharAdvancedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_CharAdvancedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_CharAdvancedInfo::MergeFrom(const DB2LOBBY_CharAdvancedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  exformation_.MergeFrom(from.exformation_);
  arformation_.MergeFrom(from.arformation_);
  ackformation_.MergeFrom(from.ackformation_);
  titlelist_.MergeFrom(from.titlelist_);
  sevengifts_.MergeFrom(from.sevengifts_);
  onlinerewards_.MergeFrom(from.onlinerewards_);
  chatpasswd_.MergeFrom(from.chatpasswd_);
  chatcount_.MergeFrom(from.chatcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_goods()) {
      set_goods(from.goods());
    }
    if (from.has_opencopperboxnum()) {
      set_opencopperboxnum(from.opencopperboxnum());
    }
    if (from.has_lastopencopperboxtime()) {
      set_lastopencopperboxtime(from.lastopencopperboxtime());
    }
    if (from.has_lastopendiamondboxtime()) {
      set_lastopendiamondboxtime(from.lastopendiamondboxtime());
    }
    if (from.has_totalopencopperboxtimes()) {
      set_totalopencopperboxtimes(from.totalopencopperboxtimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_totalopendiamondboxtimes()) {
      set_totalopendiamondboxtimes(from.totalopendiamondboxtimes());
    }
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
    if (from.has_updateskillpointtime()) {
      set_updateskillpointtime(from.updateskillpointtime());
    }
    if (from.has_myheros()) {
      set_myheros(from.myheros());
    }
    if (from.has_defenseheros()) {
      set_defenseheros(from.defenseheros());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lastarenatime()) {
      set_lastarenatime(from.lastarenatime());
    }
    if (from.has_dailyarenatimes()) {
      set_dailyarenatimes(from.dailyarenatimes());
    }
    if (from.has_bestarenarank()) {
      set_bestarenarank(from.bestarenarank());
    }
    if (from.has_totalarenawin()) {
      set_totalarenawin(from.totalarenawin());
    }
    if (from.has_arenalog()) {
      set_arenalog(from.arenalog());
    }
    if (from.has_topthreetime()) {
      set_topthreetime(from.topthreetime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_dailyopendiamondboxtimes()) {
      set_dailyopendiamondboxtimes(from.dailyopendiamondboxtimes());
    }
    if (from.has_signin()) {
      set_signin(from.signin());
    }
    if (from.has_totalcopperminenum()) {
      set_totalcopperminenum(from.totalcopperminenum());
    }
    if (from.has_totalsilverminenum()) {
      set_totalsilverminenum(from.totalsilverminenum());
    }
    if (from.has_totaldiamondminenum()) {
      set_totaldiamondminenum(from.totaldiamondminenum());
    }
    if (from.has_dailycopperminenum()) {
      set_dailycopperminenum(from.dailycopperminenum());
    }
    if (from.has_dailysilverminenum()) {
      set_dailysilverminenum(from.dailysilverminenum());
    }
    if (from.has_dailydiamondminenum()) {
      set_dailydiamondminenum(from.dailydiamondminenum());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_friendinfo()) {
      set_friendinfo(from.friendinfo());
    }
    if (from.has_shopflush()) {
      set_shopflush(from.shopflush());
    }
    if (from.has_sevenday()) {
      mutable_sevenday()->::TgsProtocol::DbSevenDayActive::MergeFrom(from.sevenday());
    }
    if (from.has_rebelarmy()) {
      mutable_rebelarmy()->::TgsProtocol::DbRebelArmy::MergeFrom(from.rebelarmy());
    }
    if (from.has_action()) {
      mutable_action()->::TgsProtocol::DbActionRecord::MergeFrom(from.action());
    }
    if (from.has_raidteam()) {
      mutable_raidteam()->::TgsProtocol::DbRaidTeam::MergeFrom(from.raidteam());
    }
    if (from.has_card()) {
      mutable_card()->::TgsProtocol::DbMonthCard::MergeFrom(from.card());
    }
    if (from.has_drop()) {
      mutable_drop()->::TgsProtocol::DbDrop::MergeFrom(from.drop());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_goodsbuyed()) {
      set_goodsbuyed(from.goodsbuyed());
    }
    if (from.has_firstchargechoose()) {
      set_firstchargechoose(from.firstchargechoose());
    }
    if (from.has_continuechargechoose()) {
      set_continuechargechoose(from.continuechargechoose());
    }
    if (from.has_continuecharge()) {
      set_continuecharge(from.continuecharge());
    }
    if (from.has_handbook()) {
      mutable_handbook()->::TgsProtocol::DbHandBook::MergeFrom(from.handbook());
    }
    if (from.has_secrethole()) {
      mutable_secrethole()->::TgsProtocol::DBSecretHole::MergeFrom(from.secrethole());
    }
    if (from.has_returntask()) {
      mutable_returntask()->::TgsProtocol::DBReturnTask::MergeFrom(from.returntask());
    }
    if (from.has_territory()) {
      mutable_territory()->::TgsProtocol::PlayerTerritoryInfo::MergeFrom(from.territory());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_diagrammap()) {
      mutable_diagrammap()->::TgsProtocol::DiagramMap::MergeFrom(from.diagrammap());
    }
    if (from.has_ghostactivelist()) {
      mutable_ghostactivelist()->::TgsProtocol::GhostList::MergeFrom(from.ghostactivelist());
    }
    if (from.has_cheerid()) {
      set_cheerid(from.cheerid());
    }
    if (from.has_epicbosslist()) {
      mutable_epicbosslist()->::TgsProtocol::EpicBossList::MergeFrom(from.epicbosslist());
    }
    if (from.has_retrieve()) {
      mutable_retrieve()->::TgsProtocol::RetrieveDB::MergeFrom(from.retrieve());
    }
  }
  if (from._has_bits_[58 / 32] & (0xffu << (58 % 32))) {
    if (from.has_compare_gots()) {
      mutable_compare_gots()->::TgsProtocol::DBServerCompareGot::MergeFrom(from.compare_gots());
    }
    if (from.has_farm()) {
      mutable_farm()->::TgsProtocol::FarmDB::MergeFrom(from.farm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_CharAdvancedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_CharAdvancedInfo::CopyFrom(const DB2LOBBY_CharAdvancedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_CharAdvancedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->maillist())) return false;
  if (has_sevenday()) {
    if (!this->sevenday().IsInitialized()) return false;
  }
  if (has_rebelarmy()) {
    if (!this->rebelarmy().IsInitialized()) return false;
  }
  if (has_action()) {
    if (!this->action().IsInitialized()) return false;
  }
  if (has_raidteam()) {
    if (!this->raidteam().IsInitialized()) return false;
  }
  if (has_card()) {
    if (!this->card().IsInitialized()) return false;
  }
  if (has_drop()) {
    if (!this->drop().IsInitialized()) return false;
  }
  if (has_handbook()) {
    if (!this->handbook().IsInitialized()) return false;
  }
  if (has_secrethole()) {
    if (!this->secrethole().IsInitialized()) return false;
  }
  if (has_returntask()) {
    if (!this->returntask().IsInitialized()) return false;
  }
  if (has_territory()) {
    if (!this->territory().IsInitialized()) return false;
  }
  if (has_diagrammap()) {
    if (!this->diagrammap().IsInitialized()) return false;
  }
  if (has_ghostactivelist()) {
    if (!this->ghostactivelist().IsInitialized()) return false;
  }
  if (has_epicbosslist()) {
    if (!this->epicbosslist().IsInitialized()) return false;
  }
  if (has_retrieve()) {
    if (!this->retrieve().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->chatpasswd())) return false;
  if (has_compare_gots()) {
    if (!this->compare_gots().IsInitialized()) return false;
  }
  if (has_farm()) {
    if (!this->farm().IsInitialized()) return false;
  }
  return true;
}

void DB2LOBBY_CharAdvancedInfo::Swap(DB2LOBBY_CharAdvancedInfo* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(ret_, other->ret_);
    std::swap(goods_, other->goods_);
    std::swap(opencopperboxnum_, other->opencopperboxnum_);
    std::swap(lastopencopperboxtime_, other->lastopencopperboxtime_);
    std::swap(lastopendiamondboxtime_, other->lastopendiamondboxtime_);
    std::swap(totalopencopperboxtimes_, other->totalopencopperboxtimes_);
    std::swap(totalopendiamondboxtimes_, other->totalopendiamondboxtimes_);
    maillist_.Swap(&other->maillist_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(updateskillpointtime_, other->updateskillpointtime_);
    exformation_.Swap(&other->exformation_);
    std::swap(myheros_, other->myheros_);
    std::swap(defenseheros_, other->defenseheros_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(lastarenatime_, other->lastarenatime_);
    std::swap(dailyarenatimes_, other->dailyarenatimes_);
    std::swap(bestarenarank_, other->bestarenarank_);
    arformation_.Swap(&other->arformation_);
    std::swap(totalarenawin_, other->totalarenawin_);
    std::swap(arenalog_, other->arenalog_);
    std::swap(topthreetime_, other->topthreetime_);
    ackformation_.Swap(&other->ackformation_);
    std::swap(dailyopendiamondboxtimes_, other->dailyopendiamondboxtimes_);
    std::swap(signin_, other->signin_);
    std::swap(totalcopperminenum_, other->totalcopperminenum_);
    std::swap(totalsilverminenum_, other->totalsilverminenum_);
    std::swap(totaldiamondminenum_, other->totaldiamondminenum_);
    std::swap(dailycopperminenum_, other->dailycopperminenum_);
    std::swap(dailysilverminenum_, other->dailysilverminenum_);
    std::swap(dailydiamondminenum_, other->dailydiamondminenum_);
    std::swap(friendinfo_, other->friendinfo_);
    std::swap(shopflush_, other->shopflush_);
    std::swap(sevenday_, other->sevenday_);
    std::swap(rebelarmy_, other->rebelarmy_);
    std::swap(action_, other->action_);
    std::swap(raidteam_, other->raidteam_);
    std::swap(card_, other->card_);
    std::swap(drop_, other->drop_);
    std::swap(goodsbuyed_, other->goodsbuyed_);
    std::swap(firstchargechoose_, other->firstchargechoose_);
    std::swap(continuechargechoose_, other->continuechargechoose_);
    std::swap(continuecharge_, other->continuecharge_);
    std::swap(handbook_, other->handbook_);
    std::swap(secrethole_, other->secrethole_);
    std::swap(returntask_, other->returntask_);
    std::swap(territory_, other->territory_);
    std::swap(diagrammap_, other->diagrammap_);
    std::swap(ghostactivelist_, other->ghostactivelist_);
    std::swap(cheerid_, other->cheerid_);
    titlelist_.Swap(&other->titlelist_);
    std::swap(epicbosslist_, other->epicbosslist_);
    sevengifts_.Swap(&other->sevengifts_);
    onlinerewards_.Swap(&other->onlinerewards_);
    std::swap(retrieve_, other->retrieve_);
    chatpasswd_.Swap(&other->chatpasswd_);
    chatcount_.Swap(&other->chatcount_);
    std::swap(compare_gots_, other->compare_gots_);
    std::swap(farm_, other->farm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_CharAdvancedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_CharAdvancedInfo_descriptor_;
  metadata.reflection = DB2LOBBY_CharAdvancedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_LoadCharListReq::kCmdIdFieldNumber;
const int LOBBY2DB_LoadCharListReq::kAccountIdFieldNumber;
const int LOBBY2DB_LoadCharListReq::kSessionidFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_LoadCharListReq::LOBBY2DB_LoadCharListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_LoadCharListReq)
}

void LOBBY2DB_LoadCharListReq::InitAsDefaultInstance() {
}

LOBBY2DB_LoadCharListReq::LOBBY2DB_LoadCharListReq(const LOBBY2DB_LoadCharListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_LoadCharListReq)
}

void LOBBY2DB_LoadCharListReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300006;
  accountid_ = GOOGLE_ULONGLONG(0);
  sessionid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_LoadCharListReq::~LOBBY2DB_LoadCharListReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_LoadCharListReq)
  SharedDtor();
}

void LOBBY2DB_LoadCharListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_LoadCharListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_LoadCharListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_LoadCharListReq_descriptor_;
}

const LOBBY2DB_LoadCharListReq& LOBBY2DB_LoadCharListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_LoadCharListReq* LOBBY2DB_LoadCharListReq::default_instance_ = NULL;

LOBBY2DB_LoadCharListReq* LOBBY2DB_LoadCharListReq::New() const {
  return new LOBBY2DB_LoadCharListReq;
}

void LOBBY2DB_LoadCharListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_LoadCharListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(accountid_, sessionid_);
    cmdid_ = 300006;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_LoadCharListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_LoadCharListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_CHARLIST_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accountId;
        break;
      }

      // required uint64 accountId = 2;
      case 2: {
        if (tag == 16) {
         parse_accountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sessionid;
        break;
      }

      // required uint64 sessionid = 3;
      case 3: {
        if (tag == 24) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_LoadCharListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_LoadCharListReq)
  return false;
#undef DO_
}

void LOBBY2DB_LoadCharListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_LoadCharListReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_CHARLIST_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 accountId = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accountid(), output);
  }

  // required uint64 sessionid = 3;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_LoadCharListReq)
}

::google::protobuf::uint8* LOBBY2DB_LoadCharListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_LoadCharListReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_CHARLIST_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 accountId = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accountid(), target);
  }

  // required uint64 sessionid = 3;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_LoadCharListReq)
  return target;
}

int LOBBY2DB_LoadCharListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_CHARLIST_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 accountId = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // required uint64 sessionid = 3;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_LoadCharListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_LoadCharListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_LoadCharListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_LoadCharListReq::MergeFrom(const LOBBY2DB_LoadCharListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_LoadCharListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_LoadCharListReq::CopyFrom(const LOBBY2DB_LoadCharListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_LoadCharListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void LOBBY2DB_LoadCharListReq::Swap(LOBBY2DB_LoadCharListReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(accountid_, other->accountid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_LoadCharListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_LoadCharListReq_descriptor_;
  metadata.reflection = LOBBY2DB_LoadCharListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleDBCharInfo::kCharIdFieldNumber;
const int SimpleDBCharInfo::kCharNameFieldNumber;
const int SimpleDBCharInfo::kProfessionFieldNumber;
const int SimpleDBCharInfo::kLevelFieldNumber;
const int SimpleDBCharInfo::kAvatarFieldNumber;
#endif  // !_MSC_VER

SimpleDBCharInfo::SimpleDBCharInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.SimpleDBCharInfo)
}

void SimpleDBCharInfo::InitAsDefaultInstance() {
}

SimpleDBCharInfo::SimpleDBCharInfo(const SimpleDBCharInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.SimpleDBCharInfo)
}

void SimpleDBCharInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profession_ = 0u;
  level_ = 0u;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleDBCharInfo::~SimpleDBCharInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.SimpleDBCharInfo)
  SharedDtor();
}

void SimpleDBCharInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void SimpleDBCharInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleDBCharInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleDBCharInfo_descriptor_;
}

const SimpleDBCharInfo& SimpleDBCharInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

SimpleDBCharInfo* SimpleDBCharInfo::default_instance_ = NULL;

SimpleDBCharInfo* SimpleDBCharInfo::New() const {
  return new SimpleDBCharInfo;
}

void SimpleDBCharInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SimpleDBCharInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(profession_, level_);
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleDBCharInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.SimpleDBCharInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charName;
        break;
      }

      // optional bytes charName = 2;
      case 2: {
        if (tag == 18) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 3;
      case 3: {
        if (tag == 24) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.SimpleDBCharInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.SimpleDBCharInfo)
  return false;
#undef DO_
}

void SimpleDBCharInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.SimpleDBCharInfo)
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional bytes charName = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->charname(), output);
  }

  // optional uint32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->profession(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional bytes avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.SimpleDBCharInfo)
}

::google::protobuf::uint8* SimpleDBCharInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.SimpleDBCharInfo)
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional bytes charName = 2;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->charname(), target);
  }

  // optional uint32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->profession(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional bytes avatar = 5;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.SimpleDBCharInfo)
  return target;
}

int SimpleDBCharInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes charName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // optional uint32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional bytes avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleDBCharInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleDBCharInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleDBCharInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleDBCharInfo::MergeFrom(const SimpleDBCharInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleDBCharInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleDBCharInfo::CopyFrom(const SimpleDBCharInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleDBCharInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SimpleDBCharInfo::Swap(SimpleDBCharInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(profession_, other->profession_);
    std::swap(level_, other->level_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleDBCharInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleDBCharInfo_descriptor_;
  metadata.reflection = SimpleDBCharInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_LoadCharListRet::kCmdIdFieldNumber;
const int DB2LOBBY_LoadCharListRet::kRetFieldNumber;
const int DB2LOBBY_LoadCharListRet::kSessionidFieldNumber;
const int DB2LOBBY_LoadCharListRet::kCharListFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_LoadCharListRet::DB2LOBBY_LoadCharListRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_LoadCharListRet)
}

void DB2LOBBY_LoadCharListRet::InitAsDefaultInstance() {
}

DB2LOBBY_LoadCharListRet::DB2LOBBY_LoadCharListRet(const DB2LOBBY_LoadCharListRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_LoadCharListRet)
}

void DB2LOBBY_LoadCharListRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350005;
  ret_ = 0u;
  sessionid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_LoadCharListRet::~DB2LOBBY_LoadCharListRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_LoadCharListRet)
  SharedDtor();
}

void DB2LOBBY_LoadCharListRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_LoadCharListRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_LoadCharListRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_LoadCharListRet_descriptor_;
}

const DB2LOBBY_LoadCharListRet& DB2LOBBY_LoadCharListRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_LoadCharListRet* DB2LOBBY_LoadCharListRet::default_instance_ = NULL;

DB2LOBBY_LoadCharListRet* DB2LOBBY_LoadCharListRet::New() const {
  return new DB2LOBBY_LoadCharListRet;
}

void DB2LOBBY_LoadCharListRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_LoadCharListRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ret_, sessionid_);
    cmdid_ = 350005;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  charlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_LoadCharListRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_LoadCharListRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_CHARLIST_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sessionid;
        break;
      }

      // required uint64 sessionid = 3;
      case 3: {
        if (tag == 24) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charList;
        break;
      }

      // repeated .TgsProtocol.SimpleDBCharInfo charList = 4;
      case 4: {
        if (tag == 34) {
         parse_charList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_LoadCharListRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_LoadCharListRet)
  return false;
#undef DO_
}

void DB2LOBBY_LoadCharListRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_LoadCharListRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_CHARLIST_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 sessionid = 3;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sessionid(), output);
  }

  // repeated .TgsProtocol.SimpleDBCharInfo charList = 4;
  for (int i = 0; i < this->charlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->charlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_LoadCharListRet)
}

::google::protobuf::uint8* DB2LOBBY_LoadCharListRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_LoadCharListRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_CHARLIST_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 sessionid = 3;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sessionid(), target);
  }

  // repeated .TgsProtocol.SimpleDBCharInfo charList = 4;
  for (int i = 0; i < this->charlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->charlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_LoadCharListRet)
  return target;
}

int DB2LOBBY_LoadCharListRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_CHARLIST_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 sessionid = 3;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

  }
  // repeated .TgsProtocol.SimpleDBCharInfo charList = 4;
  total_size += 1 * this->charlist_size();
  for (int i = 0; i < this->charlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_LoadCharListRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_LoadCharListRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_LoadCharListRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_LoadCharListRet::MergeFrom(const DB2LOBBY_LoadCharListRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  charlist_.MergeFrom(from.charlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_LoadCharListRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_LoadCharListRet::CopyFrom(const DB2LOBBY_LoadCharListRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_LoadCharListRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->charlist())) return false;
  return true;
}

void DB2LOBBY_LoadCharListRet::Swap(DB2LOBBY_LoadCharListRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(sessionid_, other->sessionid_);
    charlist_.Swap(&other->charlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_LoadCharListRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_LoadCharListRet_descriptor_;
  metadata.reflection = DB2LOBBY_LoadCharListRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_CreateCharReq::kCmdIdFieldNumber;
const int LOBBY2DB_CreateCharReq::kCharIdFieldNumber;
const int LOBBY2DB_CreateCharReq::kCharNameFieldNumber;
const int LOBBY2DB_CreateCharReq::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_CreateCharReq::LOBBY2DB_CreateCharReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_CreateCharReq)
}

void LOBBY2DB_CreateCharReq::InitAsDefaultInstance() {
}

LOBBY2DB_CreateCharReq::LOBBY2DB_CreateCharReq(const LOBBY2DB_CreateCharReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_CreateCharReq)
}

void LOBBY2DB_CreateCharReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 300001;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_CreateCharReq::~LOBBY2DB_CreateCharReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_CreateCharReq)
  SharedDtor();
}

void LOBBY2DB_CreateCharReq::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void LOBBY2DB_CreateCharReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_CreateCharReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_CreateCharReq_descriptor_;
}

const LOBBY2DB_CreateCharReq& LOBBY2DB_CreateCharReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_CreateCharReq* LOBBY2DB_CreateCharReq::default_instance_ = NULL;

LOBBY2DB_CreateCharReq* LOBBY2DB_CreateCharReq::New() const {
  return new LOBBY2DB_CreateCharReq;
}

void LOBBY2DB_CreateCharReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmdid_ = 300001;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_CreateCharReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_CreateCharReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CREATE_CHARACTER_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_charName;
        break;
      }

      // required bytes charName = 3;
      case 3: {
        if (tag == 26) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_deviceId;
        break;
      }

      // required string deviceId = 4;
      case 4: {
        if (tag == 34) {
         parse_deviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_CreateCharReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_CreateCharReq)
  return false;
#undef DO_
}

void LOBBY2DB_CreateCharReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_CreateCharReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CREATE_CHARACTER_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required bytes charName = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->charname(), output);
  }

  // required string deviceId = 4;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deviceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_CreateCharReq)
}

::google::protobuf::uint8* LOBBY2DB_CreateCharReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_CreateCharReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CREATE_CHARACTER_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required bytes charName = 3;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->charname(), target);
  }

  // required string deviceId = 4;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deviceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_CreateCharReq)
  return target;
}

int LOBBY2DB_CreateCharReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CREATE_CHARACTER_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bytes charName = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // required string deviceId = 4;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_CreateCharReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_CreateCharReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_CreateCharReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_CreateCharReq::MergeFrom(const LOBBY2DB_CreateCharReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_CreateCharReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_CreateCharReq::CopyFrom(const LOBBY2DB_CreateCharReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_CreateCharReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void LOBBY2DB_CreateCharReq::Swap(LOBBY2DB_CreateCharReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_CreateCharReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_CreateCharReq_descriptor_;
  metadata.reflection = LOBBY2DB_CreateCharReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_CreateCharRet::kCmdIdFieldNumber;
const int DB2LOBBY_CreateCharRet::kRetFieldNumber;
const int DB2LOBBY_CreateCharRet::kCharIdFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_CreateCharRet::DB2LOBBY_CreateCharRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_CreateCharRet)
}

void DB2LOBBY_CreateCharRet::InitAsDefaultInstance() {
}

DB2LOBBY_CreateCharRet::DB2LOBBY_CreateCharRet(const DB2LOBBY_CreateCharRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_CreateCharRet)
}

void DB2LOBBY_CreateCharRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350001;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_CreateCharRet::~DB2LOBBY_CreateCharRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_CreateCharRet)
  SharedDtor();
}

void DB2LOBBY_CreateCharRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_CreateCharRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_CreateCharRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_CreateCharRet_descriptor_;
}

const DB2LOBBY_CreateCharRet& DB2LOBBY_CreateCharRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_CreateCharRet* DB2LOBBY_CreateCharRet::default_instance_ = NULL;

DB2LOBBY_CreateCharRet* DB2LOBBY_CreateCharRet::New() const {
  return new DB2LOBBY_CreateCharRet;
}

void DB2LOBBY_CreateCharRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_CreateCharRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ret_, charid_);
    cmdid_ = 350001;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_CreateCharRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_CreateCharRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CREATE_CHARACTER_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charId;
        break;
      }

      // required uint64 charId = 3;
      case 3: {
        if (tag == 24) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_CreateCharRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_CreateCharRet)
  return false;
#undef DO_
}

void DB2LOBBY_CreateCharRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_CreateCharRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CREATE_CHARACTER_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_CreateCharRet)
}

::google::protobuf::uint8* DB2LOBBY_CreateCharRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_CreateCharRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CREATE_CHARACTER_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_CreateCharRet)
  return target;
}

int DB2LOBBY_CreateCharRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CREATE_CHARACTER_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_CreateCharRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_CreateCharRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_CreateCharRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_CreateCharRet::MergeFrom(const DB2LOBBY_CreateCharRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_CreateCharRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_CreateCharRet::CopyFrom(const DB2LOBBY_CreateCharRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_CreateCharRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void DB2LOBBY_CreateCharRet::Swap(DB2LOBBY_CreateCharRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_CreateCharRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_CreateCharRet_descriptor_;
  metadata.reflection = DB2LOBBY_CreateCharRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_SaveCharReq::kCmdIdFieldNumber;
const int LOBBY2DB_SaveCharReq::kSerialnoFieldNumber;
const int LOBBY2DB_SaveCharReq::kCharidFieldNumber;
const int LOBBY2DB_SaveCharReq::kCharnameFieldNumber;
const int LOBBY2DB_SaveCharReq::kLevelFieldNumber;
const int LOBBY2DB_SaveCharReq::kExpFieldNumber;
const int LOBBY2DB_SaveCharReq::kCashFieldNumber;
const int LOBBY2DB_SaveCharReq::kGoldFieldNumber;
const int LOBBY2DB_SaveCharReq::kCurStaminaFieldNumber;
const int LOBBY2DB_SaveCharReq::kMaxStaminaFieldNumber;
const int LOBBY2DB_SaveCharReq::kVipLevelFieldNumber;
const int LOBBY2DB_SaveCharReq::kFormationFieldNumber;
const int LOBBY2DB_SaveCharReq::kVipExpFieldNumber;
const int LOBBY2DB_SaveCharReq::kOfflinetimeFieldNumber;
const int LOBBY2DB_SaveCharReq::kUpdateStaminaTimeFieldNumber;
const int LOBBY2DB_SaveCharReq::kBitFlagFieldNumber;
const int LOBBY2DB_SaveCharReq::kQuestFieldNumber;
const int LOBBY2DB_SaveCharReq::kEvaluationFieldNumber;
const int LOBBY2DB_SaveCharReq::kChapterRewardFieldNumber;
const int LOBBY2DB_SaveCharReq::kHeroBagNumFieldNumber;
const int LOBBY2DB_SaveCharReq::kHeroListFieldNumber;
const int LOBBY2DB_SaveCharReq::kGenderFieldNumber;
const int LOBBY2DB_SaveCharReq::kPhotoFieldNumber;
const int LOBBY2DB_SaveCharReq::kEssenceItemFieldNumber;
const int LOBBY2DB_SaveCharReq::kRefreshPriceFieldNumber;
const int LOBBY2DB_SaveCharReq::kFestivityFieldNumber;
const int LOBBY2DB_SaveCharReq::kDayChatTimesFieldNumber;
const int LOBBY2DB_SaveCharReq::kSkillPointFieldNumber;
const int LOBBY2DB_SaveCharReq::kUpdateSkillPointTimeFieldNumber;
const int LOBBY2DB_SaveCharReq::kEnergyFieldNumber;
const int LOBBY2DB_SaveCharReq::kUpdateEnergyTimeFieldNumber;
const int LOBBY2DB_SaveCharReq::kEquipNewFieldNumber;
const int LOBBY2DB_SaveCharReq::kArenaFormationFieldNumber;
const int LOBBY2DB_SaveCharReq::kRechargeFieldNumber;
const int LOBBY2DB_SaveCharReq::kProgressFieldNumber;
const int LOBBY2DB_SaveCharReq::kActivityFieldNumber;
const int LOBBY2DB_SaveCharReq::kAssistFormationFieldNumber;
const int LOBBY2DB_SaveCharReq::kEffectFieldNumber;
const int LOBBY2DB_SaveCharReq::kChapterBoxFieldNumber;
const int LOBBY2DB_SaveCharReq::kCoinsFieldNumber;
const int LOBBY2DB_SaveCharReq::kMaxNormalChallengeFieldNumber;
const int LOBBY2DB_SaveCharReq::kMaxEliteChallengeFieldNumber;
const int LOBBY2DB_SaveCharReq::kLeavePointFieldNumber;
const int LOBBY2DB_SaveCharReq::kOnlinetimeFieldNumber;
const int LOBBY2DB_SaveCharReq::kGmflushtimeFieldNumber;
const int LOBBY2DB_SaveCharReq::kIsshopbuyFieldNumber;
const int LOBBY2DB_SaveCharReq::kDiamondPayFieldNumber;
const int LOBBY2DB_SaveCharReq::kRecommfriendsFieldNumber;
const int LOBBY2DB_SaveCharReq::kPrizeInfoFieldNumber;
const int LOBBY2DB_SaveCharReq::kAvoidBattleFieldNumber;
const int LOBBY2DB_SaveCharReq::kAccOnlineTimeFieldNumber;
const int LOBBY2DB_SaveCharReq::kItemGotFieldNumber;
const int LOBBY2DB_SaveCharReq::kBuyedPriceFieldNumber;
const int LOBBY2DB_SaveCharReq::kPositionFieldNumber;
const int LOBBY2DB_SaveCharReq::kLastUpdateTimeFieldNumber;
const int LOBBY2DB_SaveCharReq::kCrusadeMaxIdFieldNumber;
const int LOBBY2DB_SaveCharReq::kCrusadeCurIdFieldNumber;
const int LOBBY2DB_SaveCharReq::kInt32AttrFieldNumber;
const int LOBBY2DB_SaveCharReq::kAwakeHeroesFieldNumber;
const int LOBBY2DB_SaveCharReq::kTombinfoFieldNumber;
const int LOBBY2DB_SaveCharReq::kMarkListFieldNumber;
const int LOBBY2DB_SaveCharReq::kRechargeChooseFieldNumber;
const int LOBBY2DB_SaveCharReq::kNationalFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_SaveCharReq::LOBBY2DB_SaveCharReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_SaveCharReq)
}

void LOBBY2DB_SaveCharReq::InitAsDefaultInstance() {
  national_ = const_cast< ::TgsProtocol::NationalDB*>(&::TgsProtocol::NationalDB::default_instance());
}

LOBBY2DB_SaveCharReq::LOBBY2DB_SaveCharReq(const LOBBY2DB_SaveCharReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_SaveCharReq)
}

void LOBBY2DB_SaveCharReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 300002;
  serialno_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  exp_ = 0u;
  cash_ = 0u;
  gold_ = 0u;
  curstamina_ = 0u;
  maxstamina_ = 0u;
  viplevel_ = 0u;
  vipexp_ = 0u;
  offlinetime_ = 0u;
  updatestaminatime_ = 0u;
  bitflag_ = 0u;
  quest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evaluation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chapterreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  herobagnum_ = 0u;
  herolist_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0u;
  photo_ = 0u;
  essenceitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  festivity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  daychattimes_ = 0u;
  skillpoint_ = 0u;
  updateskillpointtime_ = 0u;
  energy_ = 0u;
  updateenergytime_ = 0u;
  equipnew_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recharge_ = 0u;
  progress_ = 0u;
  activity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assistformation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_ = GOOGLE_ULONGLONG(0);
  chapterbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coins_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxnormalchallenge_ = 0u;
  maxelitechallenge_ = 0u;
  leavepoint_ = 0u;
  onlinetime_ = 0u;
  gmflushtime_ = 0u;
  isshopbuy_ = 0u;
  diamondpay_ = 0u;
  recommfriends_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prizeinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avoidbattle_ = 0u;
  acconlinetime_ = 0u;
  itemgot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = 0u;
  lastupdatetime_ = 0u;
  crusademaxid_ = 0u;
  crusadecurid_ = 0u;
  int32attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  awakeheroes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tombinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rechargechoose_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_SaveCharReq::~LOBBY2DB_SaveCharReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_SaveCharReq)
  SharedDtor();
}

void LOBBY2DB_SaveCharReq::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (quest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quest_;
  }
  if (evaluation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete evaluation_;
  }
  if (chapterreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chapterreward_;
  }
  if (herolist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete herolist_;
  }
  if (essenceitem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete essenceitem_;
  }
  if (festivity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete festivity_;
  }
  if (equipnew_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipnew_;
  }
  if (activity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activity_;
  }
  if (assistformation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assistformation_;
  }
  if (chapterbox_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chapterbox_;
  }
  if (coins_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete coins_;
  }
  if (recommfriends_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recommfriends_;
  }
  if (prizeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prizeinfo_;
  }
  if (itemgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemgot_;
  }
  if (int32attr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete int32attr_;
  }
  if (awakeheroes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete awakeheroes_;
  }
  if (tombinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tombinfo_;
  }
  if (rechargechoose_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rechargechoose_;
  }
  if (this != default_instance_) {
    delete national_;
  }
}

void LOBBY2DB_SaveCharReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_SaveCharReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_SaveCharReq_descriptor_;
}

const LOBBY2DB_SaveCharReq& LOBBY2DB_SaveCharReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_SaveCharReq* LOBBY2DB_SaveCharReq::default_instance_ = NULL;

LOBBY2DB_SaveCharReq* LOBBY2DB_SaveCharReq::New() const {
  return new LOBBY2DB_SaveCharReq;
}

void LOBBY2DB_SaveCharReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_SaveCharReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(serialno_, charid_);
    ZR_(exp_, gold_);
    cmdid_ = 300002;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    level_ = 0u;
  }
  if (_has_bits_[8 / 32] & 63232) {
    ZR_(curstamina_, viplevel_);
    ZR_(vipexp_, bitflag_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(herobagnum_, gender_);
    if (has_quest()) {
      if (quest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quest_->clear();
      }
    }
    if (has_evaluation()) {
      if (evaluation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        evaluation_->clear();
      }
    }
    if (has_chapterreward()) {
      if (chapterreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chapterreward_->clear();
      }
    }
    if (has_herolist()) {
      if (herolist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        herolist_->clear();
      }
    }
    photo_ = 0u;
    if (has_essenceitem()) {
      if (essenceitem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        essenceitem_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4261412864) {
    ZR_(skillpoint_, updateenergytime_);
    if (has_festivity()) {
      if (festivity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        festivity_->clear();
      }
    }
    daychattimes_ = 0u;
    if (has_equipnew()) {
      if (equipnew_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        equipnew_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 254) {
    ZR_(recharge_, progress_);
    if (has_activity()) {
      if (activity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        activity_->clear();
      }
    }
    if (has_assistformation()) {
      if (assistformation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assistformation_->clear();
      }
    }
    effect_ = GOOGLE_ULONGLONG(0);
    if (has_chapterbox()) {
      if (chapterbox_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chapterbox_->clear();
      }
    }
    if (has_coins()) {
      if (coins_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        coins_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(maxnormalchallenge_, isshopbuy_);
    diamondpay_ = 0u;
    if (has_recommfriends()) {
      if (recommfriends_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recommfriends_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & 15663104) {
    ZR_(acconlinetime_, position_);
    ZR_(lastupdatetime_, crusademaxid_);
    if (has_prizeinfo()) {
      if (prizeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        prizeinfo_->clear();
      }
    }
    avoidbattle_ = 0u;
    if (has_itemgot()) {
      if (itemgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemgot_->clear();
      }
    }
  }
  if (_has_bits_[56 / 32] & 1862270976) {
    crusadecurid_ = 0u;
    if (has_int32attr()) {
      if (int32attr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        int32attr_->clear();
      }
    }
    if (has_awakeheroes()) {
      if (awakeheroes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        awakeheroes_->clear();
      }
    }
    if (has_tombinfo()) {
      if (tombinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tombinfo_->clear();
      }
    }
    if (has_rechargechoose()) {
      if (rechargechoose_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rechargechoose_->clear();
      }
    }
    if (has_national()) {
      if (national_ != NULL) national_->::TgsProtocol::NationalDB::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  formation_.Clear();
  refreshprice_.Clear();
  arenaformation_.Clear();
  buyedprice_.Clear();
  marklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_SaveCharReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_SaveCharReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_CHARACTER_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serialno;
        break;
      }

      // required uint64 serialno = 2;
      case 2: {
        if (tag == 16) {
         parse_serialno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serialno_)));
          set_has_serialno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // required bytes charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // required uint32 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cash;
        break;
      }

      // required uint32 cash = 7;
      case 7: {
        if (tag == 56) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gold;
        break;
      }

      // required uint32 gold = 8;
      case 8: {
        if (tag == 64) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_curStamina;
        break;
      }

      // required uint32 curStamina = 9;
      case 9: {
        if (tag == 72) {
         parse_curStamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstamina_)));
          set_has_curstamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxStamina;
        break;
      }

      // required uint32 maxStamina = 10;
      case 10: {
        if (tag == 80) {
         parse_maxStamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxstamina_)));
          set_has_maxstamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_vipLevel;
        break;
      }

      // required uint32 vipLevel = 11;
      case 11: {
        if (tag == 88) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_formation;
        break;
      }

      // repeated uint32 formation = 12;
      case 12: {
        if (tag == 96) {
         parse_formation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_formation())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_formation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_formation;
        if (input->ExpectTag(104)) goto parse_vipExp;
        break;
      }

      // required uint32 vipExp = 13;
      case 13: {
        if (tag == 104) {
         parse_vipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_offlinetime;
        break;
      }

      // required uint32 offlinetime = 14;
      case 14: {
        if (tag == 112) {
         parse_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_updateStaminaTime;
        break;
      }

      // required uint32 updateStaminaTime = 15;
      case 15: {
        if (tag == 120) {
         parse_updateStaminaTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatestaminatime_)));
          set_has_updatestaminatime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_bitFlag;
        break;
      }

      // required uint32 bitFlag = 16;
      case 16: {
        if (tag == 128) {
         parse_bitFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitflag_)));
          set_has_bitflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_quest;
        break;
      }

      // optional bytes quest = 17;
      case 17: {
        if (tag == 138) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_evaluation;
        break;
      }

      // optional bytes evaluation = 18;
      case 18: {
        if (tag == 146) {
         parse_evaluation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_evaluation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_chapterReward;
        break;
      }

      // optional bytes chapterReward = 19;
      case 19: {
        if (tag == 154) {
         parse_chapterReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chapterreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_heroBagNum;
        break;
      }

      // required uint32 heroBagNum = 20;
      case 20: {
        if (tag == 160) {
         parse_heroBagNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herobagnum_)));
          set_has_herobagnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_heroList;
        break;
      }

      // optional bytes heroList = 21;
      case 21: {
        if (tag == 170) {
         parse_heroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_herolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_gender;
        break;
      }

      // required uint32 gender = 22;
      case 22: {
        if (tag == 176) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_photo;
        break;
      }

      // optional uint32 photo = 23;
      case 23: {
        if (tag == 184) {
         parse_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photo_)));
          set_has_photo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_essenceItem;
        break;
      }

      // optional bytes essenceItem = 24;
      case 24: {
        if (tag == 194) {
         parse_essenceItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_essenceitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_RefreshPrice;
        break;
      }

      // repeated uint32 RefreshPrice = 25;
      case 25: {
        if (tag == 200) {
         parse_RefreshPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 200, input, this->mutable_refreshprice())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_refreshprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_RefreshPrice;
        if (input->ExpectTag(210)) goto parse_festivity;
        break;
      }

      // optional bytes festivity = 26;
      case 26: {
        if (tag == 210) {
         parse_festivity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_festivity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_dayChatTimes;
        break;
      }

      // optional uint32 dayChatTimes = 27;
      case 27: {
        if (tag == 216) {
         parse_dayChatTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daychattimes_)));
          set_has_daychattimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_skillPoint;
        break;
      }

      // optional uint32 skillPoint = 28;
      case 28: {
        if (tag == 224) {
         parse_skillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_updateSkillPointTime;
        break;
      }

      // optional uint32 updateSkillPointTime = 29;
      case 29: {
        if (tag == 232) {
         parse_updateSkillPointTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateskillpointtime_)));
          set_has_updateskillpointtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_energy;
        break;
      }

      // optional uint32 energy = 30;
      case 30: {
        if (tag == 240) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_updateEnergyTime;
        break;
      }

      // optional uint32 updateEnergyTime = 31;
      case 31: {
        if (tag == 248) {
         parse_updateEnergyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateenergytime_)));
          set_has_updateenergytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_equipNew;
        break;
      }

      // optional bytes equipNew = 32;
      case 32: {
        if (tag == 258) {
         parse_equipNew:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_equipnew()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_arenaFormation;
        break;
      }

      // repeated uint32 arenaFormation = 33;
      case 33: {
        if (tag == 264) {
         parse_arenaFormation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 264, input, this->mutable_arenaformation())));
        } else if (tag == 266) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arenaformation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_arenaFormation;
        if (input->ExpectTag(272)) goto parse_recharge;
        break;
      }

      // optional uint32 recharge = 34;
      case 34: {
        if (tag == 272) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 35;
      case 35: {
        if (tag == 280) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_activity;
        break;
      }

      // optional bytes activity = 36;
      case 36: {
        if (tag == 290) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_assistFormation;
        break;
      }

      // optional string assistFormation = 37;
      case 37: {
        if (tag == 298) {
         parse_assistFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assistformation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assistformation().data(), this->assistformation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assistformation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_effect;
        break;
      }

      // optional uint64 effect = 38;
      case 38: {
        if (tag == 304) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_chapterBox;
        break;
      }

      // optional bytes chapterBox = 39;
      case 39: {
        if (tag == 314) {
         parse_chapterBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chapterbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_coins;
        break;
      }

      // optional string coins = 40;
      case 40: {
        if (tag == 322) {
         parse_coins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coins()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coins().data(), this->coins().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "coins");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_maxNormalChallenge;
        break;
      }

      // required uint32 maxNormalChallenge = 41;
      case 41: {
        if (tag == 328) {
         parse_maxNormalChallenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnormalchallenge_)));
          set_has_maxnormalchallenge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_maxEliteChallenge;
        break;
      }

      // required uint32 maxEliteChallenge = 42;
      case 42: {
        if (tag == 336) {
         parse_maxEliteChallenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxelitechallenge_)));
          set_has_maxelitechallenge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_leavePoint;
        break;
      }

      // required uint32 leavePoint = 43;
      case 43: {
        if (tag == 344) {
         parse_leavePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leavepoint_)));
          set_has_leavepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_onlinetime;
        break;
      }

      // required uint32 onlinetime = 44;
      case 44: {
        if (tag == 352) {
         parse_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_gmflushtime;
        break;
      }

      // required uint32 gmflushtime = 45;
      case 45: {
        if (tag == 360) {
         parse_gmflushtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmflushtime_)));
          set_has_gmflushtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_isshopbuy;
        break;
      }

      // optional uint32 isshopbuy = 46;
      case 46: {
        if (tag == 368) {
         parse_isshopbuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isshopbuy_)));
          set_has_isshopbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_diamondPay;
        break;
      }

      // required uint32 diamondPay = 47;
      case 47: {
        if (tag == 376) {
         parse_diamondPay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamondpay_)));
          set_has_diamondpay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_recommfriends;
        break;
      }

      // optional string recommfriends = 48;
      case 48: {
        if (tag == 386) {
         parse_recommfriends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recommfriends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recommfriends().data(), this->recommfriends().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recommfriends");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_prizeInfo;
        break;
      }

      // optional bytes prizeInfo = 49;
      case 49: {
        if (tag == 394) {
         parse_prizeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prizeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_avoidBattle;
        break;
      }

      // optional uint32 avoidBattle = 50;
      case 50: {
        if (tag == 400) {
         parse_avoidBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avoidbattle_)));
          set_has_avoidbattle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_accOnlineTime;
        break;
      }

      // optional uint32 accOnlineTime = 51;
      case 51: {
        if (tag == 408) {
         parse_accOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acconlinetime_)));
          set_has_acconlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_itemGot;
        break;
      }

      // optional string itemGot = 52;
      case 52: {
        if (tag == 418) {
         parse_itemGot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemgot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemgot().data(), this->itemgot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemgot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_buyedPrice;
        break;
      }

      // repeated uint32 buyedPrice = 53;
      case 53: {
        if (tag == 424) {
         parse_buyedPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 424, input, this->mutable_buyedprice())));
        } else if (tag == 426) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buyedprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_buyedPrice;
        if (input->ExpectTag(432)) goto parse_position;
        break;
      }

      // optional uint32 position = 54;
      case 54: {
        if (tag == 432) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_lastUpdateTime;
        break;
      }

      // optional uint32 lastUpdateTime = 55;
      case 55: {
        if (tag == 440) {
         parse_lastUpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastupdatetime_)));
          set_has_lastupdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_crusadeMaxId;
        break;
      }

      // optional uint32 crusadeMaxId = 56;
      case 56: {
        if (tag == 448) {
         parse_crusadeMaxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crusademaxid_)));
          set_has_crusademaxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_crusadeCurId;
        break;
      }

      // optional uint32 crusadeCurId = 57;
      case 57: {
        if (tag == 456) {
         parse_crusadeCurId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crusadecurid_)));
          set_has_crusadecurid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_int32attr;
        break;
      }

      // optional string int32attr = 58;
      case 58: {
        if (tag == 466) {
         parse_int32attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_int32attr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->int32attr().data(), this->int32attr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "int32attr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_AwakeHeroes;
        break;
      }

      // optional string AwakeHeroes = 59;
      case 59: {
        if (tag == 474) {
         parse_AwakeHeroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awakeheroes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->awakeheroes().data(), this->awakeheroes().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "awakeheroes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_tombinfo;
        break;
      }

      // optional string tombinfo = 60;
      case 60: {
        if (tag == 482) {
         parse_tombinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tombinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tombinfo().data(), this->tombinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tombinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_markList;
        break;
      }

      // repeated uint32 markList = 61;
      case 61: {
        if (tag == 488) {
         parse_markList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 488, input, this->mutable_marklist())));
        } else if (tag == 490) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_marklist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_markList;
        if (input->ExpectTag(498)) goto parse_rechargeChoose;
        break;
      }

      // optional string rechargeChoose = 62;
      case 62: {
        if (tag == 498) {
         parse_rechargeChoose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rechargechoose()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rechargechoose().data(), this->rechargechoose().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rechargechoose");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_national;
        break;
      }

      // optional .TgsProtocol.NationalDB national = 63;
      case 63: {
        if (tag == 506) {
         parse_national:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_national()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_SaveCharReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_SaveCharReq)
  return false;
#undef DO_
}

void LOBBY2DB_SaveCharReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_SaveCharReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_CHARACTER_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 serialno = 2;
  if (has_serialno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->serialno(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required bytes charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->charname(), output);
  }

  // required uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // required uint32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }

  // required uint32 cash = 7;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cash(), output);
  }

  // required uint32 gold = 8;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gold(), output);
  }

  // required uint32 curStamina = 9;
  if (has_curstamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curstamina(), output);
  }

  // required uint32 maxStamina = 10;
  if (has_maxstamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxstamina(), output);
  }

  // required uint32 vipLevel = 11;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->viplevel(), output);
  }

  // repeated uint32 formation = 12;
  for (int i = 0; i < this->formation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->formation(i), output);
  }

  // required uint32 vipExp = 13;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->vipexp(), output);
  }

  // required uint32 offlinetime = 14;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->offlinetime(), output);
  }

  // required uint32 updateStaminaTime = 15;
  if (has_updatestaminatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->updatestaminatime(), output);
  }

  // required uint32 bitFlag = 16;
  if (has_bitflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->bitflag(), output);
  }

  // optional bytes quest = 17;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->quest(), output);
  }

  // optional bytes evaluation = 18;
  if (has_evaluation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->evaluation(), output);
  }

  // optional bytes chapterReward = 19;
  if (has_chapterreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->chapterreward(), output);
  }

  // required uint32 heroBagNum = 20;
  if (has_herobagnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->herobagnum(), output);
  }

  // optional bytes heroList = 21;
  if (has_herolist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->herolist(), output);
  }

  // required uint32 gender = 22;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->gender(), output);
  }

  // optional uint32 photo = 23;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->photo(), output);
  }

  // optional bytes essenceItem = 24;
  if (has_essenceitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->essenceitem(), output);
  }

  // repeated uint32 RefreshPrice = 25;
  for (int i = 0; i < this->refreshprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      25, this->refreshprice(i), output);
  }

  // optional bytes festivity = 26;
  if (has_festivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->festivity(), output);
  }

  // optional uint32 dayChatTimes = 27;
  if (has_daychattimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->daychattimes(), output);
  }

  // optional uint32 skillPoint = 28;
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->skillpoint(), output);
  }

  // optional uint32 updateSkillPointTime = 29;
  if (has_updateskillpointtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->updateskillpointtime(), output);
  }

  // optional uint32 energy = 30;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->energy(), output);
  }

  // optional uint32 updateEnergyTime = 31;
  if (has_updateenergytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->updateenergytime(), output);
  }

  // optional bytes equipNew = 32;
  if (has_equipnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      32, this->equipnew(), output);
  }

  // repeated uint32 arenaFormation = 33;
  for (int i = 0; i < this->arenaformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      33, this->arenaformation(i), output);
  }

  // optional uint32 recharge = 34;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->recharge(), output);
  }

  // optional uint32 progress = 35;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->progress(), output);
  }

  // optional bytes activity = 36;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      36, this->activity(), output);
  }

  // optional string assistFormation = 37;
  if (has_assistformation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assistformation().data(), this->assistformation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assistformation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->assistformation(), output);
  }

  // optional uint64 effect = 38;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->effect(), output);
  }

  // optional bytes chapterBox = 39;
  if (has_chapterbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      39, this->chapterbox(), output);
  }

  // optional string coins = 40;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coins().data(), this->coins().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "coins");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->coins(), output);
  }

  // required uint32 maxNormalChallenge = 41;
  if (has_maxnormalchallenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->maxnormalchallenge(), output);
  }

  // required uint32 maxEliteChallenge = 42;
  if (has_maxelitechallenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->maxelitechallenge(), output);
  }

  // required uint32 leavePoint = 43;
  if (has_leavepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->leavepoint(), output);
  }

  // required uint32 onlinetime = 44;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->onlinetime(), output);
  }

  // required uint32 gmflushtime = 45;
  if (has_gmflushtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->gmflushtime(), output);
  }

  // optional uint32 isshopbuy = 46;
  if (has_isshopbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->isshopbuy(), output);
  }

  // required uint32 diamondPay = 47;
  if (has_diamondpay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->diamondpay(), output);
  }

  // optional string recommfriends = 48;
  if (has_recommfriends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recommfriends().data(), this->recommfriends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recommfriends");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->recommfriends(), output);
  }

  // optional bytes prizeInfo = 49;
  if (has_prizeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      49, this->prizeinfo(), output);
  }

  // optional uint32 avoidBattle = 50;
  if (has_avoidbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->avoidbattle(), output);
  }

  // optional uint32 accOnlineTime = 51;
  if (has_acconlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->acconlinetime(), output);
  }

  // optional string itemGot = 52;
  if (has_itemgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemgot().data(), this->itemgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemgot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->itemgot(), output);
  }

  // repeated uint32 buyedPrice = 53;
  for (int i = 0; i < this->buyedprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      53, this->buyedprice(i), output);
  }

  // optional uint32 position = 54;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->position(), output);
  }

  // optional uint32 lastUpdateTime = 55;
  if (has_lastupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->lastupdatetime(), output);
  }

  // optional uint32 crusadeMaxId = 56;
  if (has_crusademaxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->crusademaxid(), output);
  }

  // optional uint32 crusadeCurId = 57;
  if (has_crusadecurid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->crusadecurid(), output);
  }

  // optional string int32attr = 58;
  if (has_int32attr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->int32attr().data(), this->int32attr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "int32attr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      58, this->int32attr(), output);
  }

  // optional string AwakeHeroes = 59;
  if (has_awakeheroes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->awakeheroes().data(), this->awakeheroes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "awakeheroes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->awakeheroes(), output);
  }

  // optional string tombinfo = 60;
  if (has_tombinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tombinfo().data(), this->tombinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tombinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->tombinfo(), output);
  }

  // repeated uint32 markList = 61;
  for (int i = 0; i < this->marklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      61, this->marklist(i), output);
  }

  // optional string rechargeChoose = 62;
  if (has_rechargechoose()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rechargechoose().data(), this->rechargechoose().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rechargechoose");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      62, this->rechargechoose(), output);
  }

  // optional .TgsProtocol.NationalDB national = 63;
  if (has_national()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->national(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_SaveCharReq)
}

::google::protobuf::uint8* LOBBY2DB_SaveCharReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_SaveCharReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_CHARACTER_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 serialno = 2;
  if (has_serialno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->serialno(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required bytes charname = 4;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->charname(), target);
  }

  // required uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // required uint32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }

  // required uint32 cash = 7;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cash(), target);
  }

  // required uint32 gold = 8;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gold(), target);
  }

  // required uint32 curStamina = 9;
  if (has_curstamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curstamina(), target);
  }

  // required uint32 maxStamina = 10;
  if (has_maxstamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxstamina(), target);
  }

  // required uint32 vipLevel = 11;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->viplevel(), target);
  }

  // repeated uint32 formation = 12;
  for (int i = 0; i < this->formation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->formation(i), target);
  }

  // required uint32 vipExp = 13;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->vipexp(), target);
  }

  // required uint32 offlinetime = 14;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->offlinetime(), target);
  }

  // required uint32 updateStaminaTime = 15;
  if (has_updatestaminatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->updatestaminatime(), target);
  }

  // required uint32 bitFlag = 16;
  if (has_bitflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->bitflag(), target);
  }

  // optional bytes quest = 17;
  if (has_quest()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->quest(), target);
  }

  // optional bytes evaluation = 18;
  if (has_evaluation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->evaluation(), target);
  }

  // optional bytes chapterReward = 19;
  if (has_chapterreward()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->chapterreward(), target);
  }

  // required uint32 heroBagNum = 20;
  if (has_herobagnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->herobagnum(), target);
  }

  // optional bytes heroList = 21;
  if (has_herolist()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->herolist(), target);
  }

  // required uint32 gender = 22;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->gender(), target);
  }

  // optional uint32 photo = 23;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->photo(), target);
  }

  // optional bytes essenceItem = 24;
  if (has_essenceitem()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->essenceitem(), target);
  }

  // repeated uint32 RefreshPrice = 25;
  for (int i = 0; i < this->refreshprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(25, this->refreshprice(i), target);
  }

  // optional bytes festivity = 26;
  if (has_festivity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->festivity(), target);
  }

  // optional uint32 dayChatTimes = 27;
  if (has_daychattimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->daychattimes(), target);
  }

  // optional uint32 skillPoint = 28;
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->skillpoint(), target);
  }

  // optional uint32 updateSkillPointTime = 29;
  if (has_updateskillpointtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->updateskillpointtime(), target);
  }

  // optional uint32 energy = 30;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->energy(), target);
  }

  // optional uint32 updateEnergyTime = 31;
  if (has_updateenergytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->updateenergytime(), target);
  }

  // optional bytes equipNew = 32;
  if (has_equipnew()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        32, this->equipnew(), target);
  }

  // repeated uint32 arenaFormation = 33;
  for (int i = 0; i < this->arenaformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(33, this->arenaformation(i), target);
  }

  // optional uint32 recharge = 34;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->recharge(), target);
  }

  // optional uint32 progress = 35;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->progress(), target);
  }

  // optional bytes activity = 36;
  if (has_activity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        36, this->activity(), target);
  }

  // optional string assistFormation = 37;
  if (has_assistformation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assistformation().data(), this->assistformation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assistformation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->assistformation(), target);
  }

  // optional uint64 effect = 38;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->effect(), target);
  }

  // optional bytes chapterBox = 39;
  if (has_chapterbox()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        39, this->chapterbox(), target);
  }

  // optional string coins = 40;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coins().data(), this->coins().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "coins");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->coins(), target);
  }

  // required uint32 maxNormalChallenge = 41;
  if (has_maxnormalchallenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->maxnormalchallenge(), target);
  }

  // required uint32 maxEliteChallenge = 42;
  if (has_maxelitechallenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->maxelitechallenge(), target);
  }

  // required uint32 leavePoint = 43;
  if (has_leavepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->leavepoint(), target);
  }

  // required uint32 onlinetime = 44;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->onlinetime(), target);
  }

  // required uint32 gmflushtime = 45;
  if (has_gmflushtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->gmflushtime(), target);
  }

  // optional uint32 isshopbuy = 46;
  if (has_isshopbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->isshopbuy(), target);
  }

  // required uint32 diamondPay = 47;
  if (has_diamondpay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->diamondpay(), target);
  }

  // optional string recommfriends = 48;
  if (has_recommfriends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recommfriends().data(), this->recommfriends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recommfriends");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->recommfriends(), target);
  }

  // optional bytes prizeInfo = 49;
  if (has_prizeinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        49, this->prizeinfo(), target);
  }

  // optional uint32 avoidBattle = 50;
  if (has_avoidbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->avoidbattle(), target);
  }

  // optional uint32 accOnlineTime = 51;
  if (has_acconlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->acconlinetime(), target);
  }

  // optional string itemGot = 52;
  if (has_itemgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemgot().data(), this->itemgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemgot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->itemgot(), target);
  }

  // repeated uint32 buyedPrice = 53;
  for (int i = 0; i < this->buyedprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(53, this->buyedprice(i), target);
  }

  // optional uint32 position = 54;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->position(), target);
  }

  // optional uint32 lastUpdateTime = 55;
  if (has_lastupdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->lastupdatetime(), target);
  }

  // optional uint32 crusadeMaxId = 56;
  if (has_crusademaxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->crusademaxid(), target);
  }

  // optional uint32 crusadeCurId = 57;
  if (has_crusadecurid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->crusadecurid(), target);
  }

  // optional string int32attr = 58;
  if (has_int32attr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->int32attr().data(), this->int32attr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "int32attr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        58, this->int32attr(), target);
  }

  // optional string AwakeHeroes = 59;
  if (has_awakeheroes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->awakeheroes().data(), this->awakeheroes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "awakeheroes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->awakeheroes(), target);
  }

  // optional string tombinfo = 60;
  if (has_tombinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tombinfo().data(), this->tombinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tombinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->tombinfo(), target);
  }

  // repeated uint32 markList = 61;
  for (int i = 0; i < this->marklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(61, this->marklist(i), target);
  }

  // optional string rechargeChoose = 62;
  if (has_rechargechoose()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rechargechoose().data(), this->rechargechoose().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rechargechoose");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        62, this->rechargechoose(), target);
  }

  // optional .TgsProtocol.NationalDB national = 63;
  if (has_national()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->national(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_SaveCharReq)
  return target;
}

int LOBBY2DB_SaveCharReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_CHARACTER_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 serialno = 2;
    if (has_serialno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serialno());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bytes charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // required uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 cash = 7;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 gold = 8;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 curStamina = 9;
    if (has_curstamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstamina());
    }

    // required uint32 maxStamina = 10;
    if (has_maxstamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxstamina());
    }

    // required uint32 vipLevel = 11;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required uint32 vipExp = 13;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipexp());
    }

    // required uint32 offlinetime = 14;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offlinetime());
    }

    // required uint32 updateStaminaTime = 15;
    if (has_updatestaminatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatestaminatime());
    }

    // required uint32 bitFlag = 16;
    if (has_bitflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitflag());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes quest = 17;
    if (has_quest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->quest());
    }

    // optional bytes evaluation = 18;
    if (has_evaluation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->evaluation());
    }

    // optional bytes chapterReward = 19;
    if (has_chapterreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chapterreward());
    }

    // required uint32 heroBagNum = 20;
    if (has_herobagnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herobagnum());
    }

    // optional bytes heroList = 21;
    if (has_herolist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->herolist());
    }

    // required uint32 gender = 22;
    if (has_gender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 photo = 23;
    if (has_photo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photo());
    }

    // optional bytes essenceItem = 24;
    if (has_essenceitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->essenceitem());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional bytes festivity = 26;
    if (has_festivity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->festivity());
    }

    // optional uint32 dayChatTimes = 27;
    if (has_daychattimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daychattimes());
    }

    // optional uint32 skillPoint = 28;
    if (has_skillpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpoint());
    }

    // optional uint32 updateSkillPointTime = 29;
    if (has_updateskillpointtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updateskillpointtime());
    }

    // optional uint32 energy = 30;
    if (has_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy());
    }

    // optional uint32 updateEnergyTime = 31;
    if (has_updateenergytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updateenergytime());
    }

    // optional bytes equipNew = 32;
    if (has_equipnew()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->equipnew());
    }

  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    // optional uint32 recharge = 34;
    if (has_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge());
    }

    // optional uint32 progress = 35;
    if (has_progress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional bytes activity = 36;
    if (has_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->activity());
    }

    // optional string assistFormation = 37;
    if (has_assistformation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assistformation());
    }

    // optional uint64 effect = 38;
    if (has_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->effect());
    }

    // optional bytes chapterBox = 39;
    if (has_chapterbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chapterbox());
    }

    // optional string coins = 40;
    if (has_coins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coins());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required uint32 maxNormalChallenge = 41;
    if (has_maxnormalchallenge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnormalchallenge());
    }

    // required uint32 maxEliteChallenge = 42;
    if (has_maxelitechallenge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxelitechallenge());
    }

    // required uint32 leavePoint = 43;
    if (has_leavepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leavepoint());
    }

    // required uint32 onlinetime = 44;
    if (has_onlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }

    // required uint32 gmflushtime = 45;
    if (has_gmflushtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmflushtime());
    }

    // optional uint32 isshopbuy = 46;
    if (has_isshopbuy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isshopbuy());
    }

    // required uint32 diamondPay = 47;
    if (has_diamondpay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamondpay());
    }

    // optional string recommfriends = 48;
    if (has_recommfriends()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recommfriends());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bytes prizeInfo = 49;
    if (has_prizeinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prizeinfo());
    }

    // optional uint32 avoidBattle = 50;
    if (has_avoidbattle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avoidbattle());
    }

    // optional uint32 accOnlineTime = 51;
    if (has_acconlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acconlinetime());
    }

    // optional string itemGot = 52;
    if (has_itemgot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemgot());
    }

    // optional uint32 position = 54;
    if (has_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint32 lastUpdateTime = 55;
    if (has_lastupdatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastupdatetime());
    }

    // optional uint32 crusadeMaxId = 56;
    if (has_crusademaxid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crusademaxid());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 crusadeCurId = 57;
    if (has_crusadecurid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crusadecurid());
    }

    // optional string int32attr = 58;
    if (has_int32attr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->int32attr());
    }

    // optional string AwakeHeroes = 59;
    if (has_awakeheroes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awakeheroes());
    }

    // optional string tombinfo = 60;
    if (has_tombinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tombinfo());
    }

    // optional string rechargeChoose = 62;
    if (has_rechargechoose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rechargechoose());
    }

    // optional .TgsProtocol.NationalDB national = 63;
    if (has_national()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->national());
    }

  }
  // repeated uint32 formation = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->formation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->formation(i));
    }
    total_size += 1 * this->formation_size() + data_size;
  }

  // repeated uint32 RefreshPrice = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->refreshprice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->refreshprice(i));
    }
    total_size += 2 * this->refreshprice_size() + data_size;
  }

  // repeated uint32 arenaFormation = 33;
  {
    int data_size = 0;
    for (int i = 0; i < this->arenaformation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arenaformation(i));
    }
    total_size += 2 * this->arenaformation_size() + data_size;
  }

  // repeated uint32 buyedPrice = 53;
  {
    int data_size = 0;
    for (int i = 0; i < this->buyedprice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buyedprice(i));
    }
    total_size += 2 * this->buyedprice_size() + data_size;
  }

  // repeated uint32 markList = 61;
  {
    int data_size = 0;
    for (int i = 0; i < this->marklist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->marklist(i));
    }
    total_size += 2 * this->marklist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_SaveCharReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_SaveCharReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_SaveCharReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_SaveCharReq::MergeFrom(const LOBBY2DB_SaveCharReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  formation_.MergeFrom(from.formation_);
  refreshprice_.MergeFrom(from.refreshprice_);
  arenaformation_.MergeFrom(from.arenaformation_);
  buyedprice_.MergeFrom(from.buyedprice_);
  marklist_.MergeFrom(from.marklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_serialno()) {
      set_serialno(from.serialno());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curstamina()) {
      set_curstamina(from.curstamina());
    }
    if (from.has_maxstamina()) {
      set_maxstamina(from.maxstamina());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_updatestaminatime()) {
      set_updatestaminatime(from.updatestaminatime());
    }
    if (from.has_bitflag()) {
      set_bitflag(from.bitflag());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_quest()) {
      set_quest(from.quest());
    }
    if (from.has_evaluation()) {
      set_evaluation(from.evaluation());
    }
    if (from.has_chapterreward()) {
      set_chapterreward(from.chapterreward());
    }
    if (from.has_herobagnum()) {
      set_herobagnum(from.herobagnum());
    }
    if (from.has_herolist()) {
      set_herolist(from.herolist());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_photo()) {
      set_photo(from.photo());
    }
    if (from.has_essenceitem()) {
      set_essenceitem(from.essenceitem());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_festivity()) {
      set_festivity(from.festivity());
    }
    if (from.has_daychattimes()) {
      set_daychattimes(from.daychattimes());
    }
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
    if (from.has_updateskillpointtime()) {
      set_updateskillpointtime(from.updateskillpointtime());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_updateenergytime()) {
      set_updateenergytime(from.updateenergytime());
    }
    if (from.has_equipnew()) {
      set_equipnew(from.equipnew());
    }
  }
  if (from._has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_assistformation()) {
      set_assistformation(from.assistformation());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_chapterbox()) {
      set_chapterbox(from.chapterbox());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_maxnormalchallenge()) {
      set_maxnormalchallenge(from.maxnormalchallenge());
    }
    if (from.has_maxelitechallenge()) {
      set_maxelitechallenge(from.maxelitechallenge());
    }
    if (from.has_leavepoint()) {
      set_leavepoint(from.leavepoint());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_gmflushtime()) {
      set_gmflushtime(from.gmflushtime());
    }
    if (from.has_isshopbuy()) {
      set_isshopbuy(from.isshopbuy());
    }
    if (from.has_diamondpay()) {
      set_diamondpay(from.diamondpay());
    }
    if (from.has_recommfriends()) {
      set_recommfriends(from.recommfriends());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_prizeinfo()) {
      set_prizeinfo(from.prizeinfo());
    }
    if (from.has_avoidbattle()) {
      set_avoidbattle(from.avoidbattle());
    }
    if (from.has_acconlinetime()) {
      set_acconlinetime(from.acconlinetime());
    }
    if (from.has_itemgot()) {
      set_itemgot(from.itemgot());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_lastupdatetime()) {
      set_lastupdatetime(from.lastupdatetime());
    }
    if (from.has_crusademaxid()) {
      set_crusademaxid(from.crusademaxid());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_crusadecurid()) {
      set_crusadecurid(from.crusadecurid());
    }
    if (from.has_int32attr()) {
      set_int32attr(from.int32attr());
    }
    if (from.has_awakeheroes()) {
      set_awakeheroes(from.awakeheroes());
    }
    if (from.has_tombinfo()) {
      set_tombinfo(from.tombinfo());
    }
    if (from.has_rechargechoose()) {
      set_rechargechoose(from.rechargechoose());
    }
    if (from.has_national()) {
      mutable_national()->::TgsProtocol::NationalDB::MergeFrom(from.national());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_SaveCharReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_SaveCharReq::CopyFrom(const LOBBY2DB_SaveCharReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_SaveCharReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0028f7fe) != 0x0028f7fe) return false;
  if ((_has_bits_[1] & 0x00005f00) != 0x00005f00) return false;

  if (has_national()) {
    if (!this->national().IsInitialized()) return false;
  }
  return true;
}

void LOBBY2DB_SaveCharReq::Swap(LOBBY2DB_SaveCharReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(serialno_, other->serialno_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(cash_, other->cash_);
    std::swap(gold_, other->gold_);
    std::swap(curstamina_, other->curstamina_);
    std::swap(maxstamina_, other->maxstamina_);
    std::swap(viplevel_, other->viplevel_);
    formation_.Swap(&other->formation_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(updatestaminatime_, other->updatestaminatime_);
    std::swap(bitflag_, other->bitflag_);
    std::swap(quest_, other->quest_);
    std::swap(evaluation_, other->evaluation_);
    std::swap(chapterreward_, other->chapterreward_);
    std::swap(herobagnum_, other->herobagnum_);
    std::swap(herolist_, other->herolist_);
    std::swap(gender_, other->gender_);
    std::swap(photo_, other->photo_);
    std::swap(essenceitem_, other->essenceitem_);
    refreshprice_.Swap(&other->refreshprice_);
    std::swap(festivity_, other->festivity_);
    std::swap(daychattimes_, other->daychattimes_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(updateskillpointtime_, other->updateskillpointtime_);
    std::swap(energy_, other->energy_);
    std::swap(updateenergytime_, other->updateenergytime_);
    std::swap(equipnew_, other->equipnew_);
    arenaformation_.Swap(&other->arenaformation_);
    std::swap(recharge_, other->recharge_);
    std::swap(progress_, other->progress_);
    std::swap(activity_, other->activity_);
    std::swap(assistformation_, other->assistformation_);
    std::swap(effect_, other->effect_);
    std::swap(chapterbox_, other->chapterbox_);
    std::swap(coins_, other->coins_);
    std::swap(maxnormalchallenge_, other->maxnormalchallenge_);
    std::swap(maxelitechallenge_, other->maxelitechallenge_);
    std::swap(leavepoint_, other->leavepoint_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(gmflushtime_, other->gmflushtime_);
    std::swap(isshopbuy_, other->isshopbuy_);
    std::swap(diamondpay_, other->diamondpay_);
    std::swap(recommfriends_, other->recommfriends_);
    std::swap(prizeinfo_, other->prizeinfo_);
    std::swap(avoidbattle_, other->avoidbattle_);
    std::swap(acconlinetime_, other->acconlinetime_);
    std::swap(itemgot_, other->itemgot_);
    buyedprice_.Swap(&other->buyedprice_);
    std::swap(position_, other->position_);
    std::swap(lastupdatetime_, other->lastupdatetime_);
    std::swap(crusademaxid_, other->crusademaxid_);
    std::swap(crusadecurid_, other->crusadecurid_);
    std::swap(int32attr_, other->int32attr_);
    std::swap(awakeheroes_, other->awakeheroes_);
    std::swap(tombinfo_, other->tombinfo_);
    marklist_.Swap(&other->marklist_);
    std::swap(rechargechoose_, other->rechargechoose_);
    std::swap(national_, other->national_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_SaveCharReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_SaveCharReq_descriptor_;
  metadata.reflection = LOBBY2DB_SaveCharReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_SaveCharRet::kCmdIdFieldNumber;
const int DB2LOBBY_SaveCharRet::kSerialnoFieldNumber;
const int DB2LOBBY_SaveCharRet::kRetFieldNumber;
const int DB2LOBBY_SaveCharRet::kCharIdFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_SaveCharRet::DB2LOBBY_SaveCharRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_SaveCharRet)
}

void DB2LOBBY_SaveCharRet::InitAsDefaultInstance() {
}

DB2LOBBY_SaveCharRet::DB2LOBBY_SaveCharRet(const DB2LOBBY_SaveCharRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_SaveCharRet)
}

void DB2LOBBY_SaveCharRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350002;
  serialno_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_SaveCharRet::~DB2LOBBY_SaveCharRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_SaveCharRet)
  SharedDtor();
}

void DB2LOBBY_SaveCharRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_SaveCharRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_SaveCharRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_SaveCharRet_descriptor_;
}

const DB2LOBBY_SaveCharRet& DB2LOBBY_SaveCharRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_SaveCharRet* DB2LOBBY_SaveCharRet::default_instance_ = NULL;

DB2LOBBY_SaveCharRet* DB2LOBBY_SaveCharRet::New() const {
  return new DB2LOBBY_SaveCharRet;
}

void DB2LOBBY_SaveCharRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_SaveCharRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ret_, charid_);
    cmdid_ = 350002;
    serialno_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_SaveCharRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_SaveCharRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_CHARACTER_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serialno;
        break;
      }

      // required uint64 serialno = 2;
      case 2: {
        if (tag == 16) {
         parse_serialno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serialno_)));
          set_has_serialno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required uint32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charId;
        break;
      }

      // required uint64 charId = 4;
      case 4: {
        if (tag == 32) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_SaveCharRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_SaveCharRet)
  return false;
#undef DO_
}

void DB2LOBBY_SaveCharRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_SaveCharRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_CHARACTER_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 serialno = 2;
  if (has_serialno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->serialno(), output);
  }

  // required uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // required uint64 charId = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_SaveCharRet)
}

::google::protobuf::uint8* DB2LOBBY_SaveCharRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_SaveCharRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_CHARACTER_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 serialno = 2;
  if (has_serialno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->serialno(), target);
  }

  // required uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // required uint64 charId = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_SaveCharRet)
  return target;
}

int DB2LOBBY_SaveCharRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_CHARACTER_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 serialno = 2;
    if (has_serialno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serialno());
    }

    // required uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charId = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_SaveCharRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_SaveCharRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_SaveCharRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_SaveCharRet::MergeFrom(const DB2LOBBY_SaveCharRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_serialno()) {
      set_serialno(from.serialno());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_SaveCharRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_SaveCharRet::CopyFrom(const DB2LOBBY_SaveCharRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_SaveCharRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void DB2LOBBY_SaveCharRet::Swap(DB2LOBBY_SaveCharRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(serialno_, other->serialno_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_SaveCharRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_SaveCharRet_descriptor_;
  metadata.reflection = DB2LOBBY_SaveCharRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_SaveAdvancedCharReq::kCmdIdFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kCharIdFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kShopGoodsFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kOpenCopperBoxNumFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kLastOpenCopperBoxTimeFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kLastOpenDiamondBoxTimeFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kTotalOpenCopperBoxTimesFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kTotalOpenDiamondBoxTimesFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kMailListFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kSkillPointFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kUpdateSkillPointTimeFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kExFormationFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kMyHerosFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kDefenseHerosFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kDifficultyFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kLastArenaTimeFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kDailyArenaTimesFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kBestArenaRankFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kArFormationFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kTotalArenaWinFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kArenaLogFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kTopThreeTimeFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kAckFormationFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kDailyOpenDiamondBoxTimesFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kSignInFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kTotalCopperMineNumFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kTotalSilverMineNumFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kTotalDiamondMineNumFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kDailyCopperMineNumFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kDailySilverMineNumFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kDailyDiamondMineNumFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kFriendInfoFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kShopFlushFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kSevenDayFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kRebelArmyFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kActionFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kRaidTeamFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kCardFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kDropFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kGoodsBuyedFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kFirstChargeChooseFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kContinueChargeChooseFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kContinueChargeFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kHandbookFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kSecretholeFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kReturntaskFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kTerritoryFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kDiagramMapFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kGhostActiveListFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kCheerIdFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kTitleListFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kEpicbosslistFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kSevengiftsFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kOnlineRewardsFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kRetrieveFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kChatpasswdFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kChatCountFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kCompareGotsFieldNumber;
const int LOBBY2DB_SaveAdvancedCharReq::kFarmFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_SaveAdvancedCharReq::LOBBY2DB_SaveAdvancedCharReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_SaveAdvancedCharReq)
}

void LOBBY2DB_SaveAdvancedCharReq::InitAsDefaultInstance() {
  sevenday_ = const_cast< ::TgsProtocol::DbSevenDayActive*>(&::TgsProtocol::DbSevenDayActive::default_instance());
  rebelarmy_ = const_cast< ::TgsProtocol::DbRebelArmy*>(&::TgsProtocol::DbRebelArmy::default_instance());
  action_ = const_cast< ::TgsProtocol::DbActionRecord*>(&::TgsProtocol::DbActionRecord::default_instance());
  raidteam_ = const_cast< ::TgsProtocol::DbRaidTeam*>(&::TgsProtocol::DbRaidTeam::default_instance());
  card_ = const_cast< ::TgsProtocol::DbMonthCard*>(&::TgsProtocol::DbMonthCard::default_instance());
  drop_ = const_cast< ::TgsProtocol::DbDrop*>(&::TgsProtocol::DbDrop::default_instance());
  handbook_ = const_cast< ::TgsProtocol::DbHandBook*>(&::TgsProtocol::DbHandBook::default_instance());
  secrethole_ = const_cast< ::TgsProtocol::DBSecretHole*>(&::TgsProtocol::DBSecretHole::default_instance());
  returntask_ = const_cast< ::TgsProtocol::DBReturnTask*>(&::TgsProtocol::DBReturnTask::default_instance());
  territory_ = const_cast< ::TgsProtocol::PlayerTerritoryInfo*>(&::TgsProtocol::PlayerTerritoryInfo::default_instance());
  diagrammap_ = const_cast< ::TgsProtocol::DiagramMap*>(&::TgsProtocol::DiagramMap::default_instance());
  ghostactivelist_ = const_cast< ::TgsProtocol::GhostList*>(&::TgsProtocol::GhostList::default_instance());
  epicbosslist_ = const_cast< ::TgsProtocol::EpicBossList*>(&::TgsProtocol::EpicBossList::default_instance());
  retrieve_ = const_cast< ::TgsProtocol::RetrieveDB*>(&::TgsProtocol::RetrieveDB::default_instance());
  compare_gots_ = const_cast< ::TgsProtocol::DBServerCompareGot*>(&::TgsProtocol::DBServerCompareGot::default_instance());
  farm_ = const_cast< ::TgsProtocol::FarmDB*>(&::TgsProtocol::FarmDB::default_instance());
}

LOBBY2DB_SaveAdvancedCharReq::LOBBY2DB_SaveAdvancedCharReq(const LOBBY2DB_SaveAdvancedCharReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_SaveAdvancedCharReq)
}

void LOBBY2DB_SaveAdvancedCharReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 300010;
  charid_ = GOOGLE_ULONGLONG(0);
  shopgoods_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opencopperboxnum_ = 0u;
  lastopencopperboxtime_ = 0u;
  lastopendiamondboxtime_ = 0u;
  totalopencopperboxtimes_ = 0u;
  totalopendiamondboxtimes_ = 0u;
  skillpoint_ = 0u;
  updateskillpointtime_ = 0u;
  myheros_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defenseheros_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  difficulty_ = 0u;
  lastarenatime_ = 0u;
  dailyarenatimes_ = 0u;
  bestarenarank_ = 0u;
  totalarenawin_ = 0u;
  arenalog_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topthreetime_ = 0u;
  dailyopendiamondboxtimes_ = 0u;
  signin_ = 0u;
  totalcopperminenum_ = 0u;
  totalsilverminenum_ = 0u;
  totaldiamondminenum_ = 0u;
  dailycopperminenum_ = 0u;
  dailysilverminenum_ = 0u;
  dailydiamondminenum_ = 0u;
  friendinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shopflush_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sevenday_ = NULL;
  rebelarmy_ = NULL;
  action_ = NULL;
  raidteam_ = NULL;
  card_ = NULL;
  drop_ = NULL;
  goodsbuyed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstchargechoose_ = 0u;
  continuechargechoose_ = 0u;
  continuecharge_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handbook_ = NULL;
  secrethole_ = NULL;
  returntask_ = NULL;
  territory_ = NULL;
  diagrammap_ = NULL;
  ghostactivelist_ = NULL;
  cheerid_ = 0u;
  epicbosslist_ = NULL;
  retrieve_ = NULL;
  compare_gots_ = NULL;
  farm_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_SaveAdvancedCharReq::~LOBBY2DB_SaveAdvancedCharReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_SaveAdvancedCharReq)
  SharedDtor();
}

void LOBBY2DB_SaveAdvancedCharReq::SharedDtor() {
  if (shopgoods_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shopgoods_;
  }
  if (myheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete myheros_;
  }
  if (defenseheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defenseheros_;
  }
  if (arenalog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arenalog_;
  }
  if (friendinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendinfo_;
  }
  if (shopflush_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shopflush_;
  }
  if (goodsbuyed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete goodsbuyed_;
  }
  if (continuecharge_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuecharge_;
  }
  if (this != default_instance_) {
    delete sevenday_;
    delete rebelarmy_;
    delete action_;
    delete raidteam_;
    delete card_;
    delete drop_;
    delete handbook_;
    delete secrethole_;
    delete returntask_;
    delete territory_;
    delete diagrammap_;
    delete ghostactivelist_;
    delete epicbosslist_;
    delete retrieve_;
    delete compare_gots_;
    delete farm_;
  }
}

void LOBBY2DB_SaveAdvancedCharReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_SaveAdvancedCharReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_SaveAdvancedCharReq_descriptor_;
}

const LOBBY2DB_SaveAdvancedCharReq& LOBBY2DB_SaveAdvancedCharReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_SaveAdvancedCharReq* LOBBY2DB_SaveAdvancedCharReq::default_instance_ = NULL;

LOBBY2DB_SaveAdvancedCharReq* LOBBY2DB_SaveAdvancedCharReq::New() const {
  return new LOBBY2DB_SaveAdvancedCharReq;
}

void LOBBY2DB_SaveAdvancedCharReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_SaveAdvancedCharReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(lastopencopperboxtime_, totalopendiamondboxtimes_);
    cmdid_ = 300010;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_shopgoods()) {
      if (shopgoods_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shopgoods_->clear();
      }
    }
    opencopperboxnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & 62976) {
    ZR_(skillpoint_, updateskillpointtime_);
    ZR_(difficulty_, lastarenatime_);
    if (has_myheros()) {
      if (myheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        myheros_->clear();
      }
    }
    if (has_defenseheros()) {
      if (defenseheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defenseheros_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 12255232) {
    ZR_(dailyarenatimes_, bestarenarank_);
    ZR_(totalarenawin_, topthreetime_);
    if (has_arenalog()) {
      if (arenalog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        arenalog_->clear();
      }
    }
    dailyopendiamondboxtimes_ = 0u;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(signin_, dailydiamondminenum_);
    if (has_friendinfo()) {
      if (friendinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friendinfo_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_shopflush()) {
      if (shopflush_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shopflush_->clear();
      }
    }
    if (has_sevenday()) {
      if (sevenday_ != NULL) sevenday_->::TgsProtocol::DbSevenDayActive::Clear();
    }
    if (has_rebelarmy()) {
      if (rebelarmy_ != NULL) rebelarmy_->::TgsProtocol::DbRebelArmy::Clear();
    }
    if (has_action()) {
      if (action_ != NULL) action_->::TgsProtocol::DbActionRecord::Clear();
    }
    if (has_raidteam()) {
      if (raidteam_ != NULL) raidteam_->::TgsProtocol::DbRaidTeam::Clear();
    }
    if (has_card()) {
      if (card_ != NULL) card_->::TgsProtocol::DbMonthCard::Clear();
    }
    if (has_drop()) {
      if (drop_ != NULL) drop_->::TgsProtocol::DbDrop::Clear();
    }
    if (has_goodsbuyed()) {
      if (goodsbuyed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        goodsbuyed_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(firstchargechoose_, continuechargechoose_);
    if (has_continuecharge()) {
      if (continuecharge_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuecharge_->clear();
      }
    }
    if (has_handbook()) {
      if (handbook_ != NULL) handbook_->::TgsProtocol::DbHandBook::Clear();
    }
    if (has_secrethole()) {
      if (secrethole_ != NULL) secrethole_->::TgsProtocol::DBSecretHole::Clear();
    }
    if (has_returntask()) {
      if (returntask_ != NULL) returntask_->::TgsProtocol::DBReturnTask::Clear();
    }
    if (has_territory()) {
      if (territory_ != NULL) territory_->::TgsProtocol::PlayerTerritoryInfo::Clear();
    }
    if (has_diagrammap()) {
      if (diagrammap_ != NULL) diagrammap_->::TgsProtocol::DiagramMap::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 4915200) {
    if (has_ghostactivelist()) {
      if (ghostactivelist_ != NULL) ghostactivelist_->::TgsProtocol::GhostList::Clear();
    }
    cheerid_ = 0u;
    if (has_epicbosslist()) {
      if (epicbosslist_ != NULL) epicbosslist_->::TgsProtocol::EpicBossList::Clear();
    }
    if (has_retrieve()) {
      if (retrieve_ != NULL) retrieve_->::TgsProtocol::RetrieveDB::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 100663296) {
    if (has_compare_gots()) {
      if (compare_gots_ != NULL) compare_gots_->::TgsProtocol::DBServerCompareGot::Clear();
    }
    if (has_farm()) {
      if (farm_ != NULL) farm_->::TgsProtocol::FarmDB::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  maillist_.Clear();
  exformation_.Clear();
  arformation_.Clear();
  ackformation_.Clear();
  titlelist_.Clear();
  sevengifts_.Clear();
  onlinerewards_.Clear();
  chatpasswd_.Clear();
  chatcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_SaveAdvancedCharReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_SaveAdvancedCharReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_ADVANCED_CHARACTER_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shopGoods;
        break;
      }

      // optional bytes shopGoods = 3;
      case 3: {
        if (tag == 26) {
         parse_shopGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shopgoods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_openCopperBoxNum;
        break;
      }

      // required uint32 openCopperBoxNum = 4;
      case 4: {
        if (tag == 32) {
         parse_openCopperBoxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opencopperboxnum_)));
          set_has_opencopperboxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lastOpenCopperBoxTime;
        break;
      }

      // required uint32 lastOpenCopperBoxTime = 5;
      case 5: {
        if (tag == 40) {
         parse_lastOpenCopperBoxTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastopencopperboxtime_)));
          set_has_lastopencopperboxtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lastOpenDiamondBoxTime;
        break;
      }

      // required uint32 lastOpenDiamondBoxTime = 6;
      case 6: {
        if (tag == 48) {
         parse_lastOpenDiamondBoxTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastopendiamondboxtime_)));
          set_has_lastopendiamondboxtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_totalOpenCopperBoxTimes;
        break;
      }

      // required uint32 totalOpenCopperBoxTimes = 7;
      case 7: {
        if (tag == 56) {
         parse_totalOpenCopperBoxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalopencopperboxtimes_)));
          set_has_totalopencopperboxtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_totalOpenDiamondBoxTimes;
        break;
      }

      // required uint32 totalOpenDiamondBoxTimes = 8;
      case 8: {
        if (tag == 64) {
         parse_totalOpenDiamondBoxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalopendiamondboxtimes_)));
          set_has_totalopendiamondboxtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_mailList;
        break;
      }

      // repeated .TgsProtocol.DBMailInfo mailList = 9;
      case 9: {
        if (tag == 74) {
         parse_mailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_mailList;
        if (input->ExpectTag(80)) goto parse_skillPoint;
        break;
      }

      // optional uint32 skillPoint = 10;
      case 10: {
        if (tag == 80) {
         parse_skillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_updateSkillPointTime;
        break;
      }

      // optional uint32 updateSkillPointTime = 11;
      case 11: {
        if (tag == 88) {
         parse_updateSkillPointTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateskillpointtime_)));
          set_has_updateskillpointtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_exFormation;
        break;
      }

      // repeated uint32 exFormation = 12;
      case 12: {
        if (tag == 96) {
         parse_exFormation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_exformation())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exformation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_exFormation;
        if (input->ExpectTag(106)) goto parse_myHeros;
        break;
      }

      // optional bytes myHeros = 13;
      case 13: {
        if (tag == 106) {
         parse_myHeros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_myheros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_DefenseHeros;
        break;
      }

      // optional bytes DefenseHeros = 14;
      case 14: {
        if (tag == 114) {
         parse_DefenseHeros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_defenseheros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_difficulty;
        break;
      }

      // optional uint32 difficulty = 15;
      case 15: {
        if (tag == 120) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_lastArenaTime;
        break;
      }

      // optional uint32 lastArenaTime = 16;
      case 16: {
        if (tag == 128) {
         parse_lastArenaTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastarenatime_)));
          set_has_lastarenatime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_dailyArenaTimes;
        break;
      }

      // optional uint32 dailyArenaTimes = 17;
      case 17: {
        if (tag == 136) {
         parse_dailyArenaTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyarenatimes_)));
          set_has_dailyarenatimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_bestArenaRank;
        break;
      }

      // optional uint32 bestArenaRank = 18;
      case 18: {
        if (tag == 144) {
         parse_bestArenaRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bestarenarank_)));
          set_has_bestarenarank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_arFormation;
        break;
      }

      // repeated uint32 arFormation = 19;
      case 19: {
        if (tag == 152) {
         parse_arFormation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_arformation())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arformation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_arFormation;
        if (input->ExpectTag(160)) goto parse_totalArenaWin;
        break;
      }

      // optional uint32 totalArenaWin = 20;
      case 20: {
        if (tag == 160) {
         parse_totalArenaWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalarenawin_)));
          set_has_totalarenawin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_arenaLog;
        break;
      }

      // optional bytes arenaLog = 21;
      case 21: {
        if (tag == 170) {
         parse_arenaLog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_arenalog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_topThreeTime;
        break;
      }

      // optional uint32 topThreeTime = 22;
      case 22: {
        if (tag == 176) {
         parse_topThreeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &topthreetime_)));
          set_has_topthreetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_ackFormation;
        break;
      }

      // repeated uint32 ackFormation = 23;
      case 23: {
        if (tag == 184) {
         parse_ackFormation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 184, input, this->mutable_ackformation())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ackformation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_ackFormation;
        if (input->ExpectTag(192)) goto parse_dailyOpenDiamondBoxTimes;
        break;
      }

      // optional uint32 dailyOpenDiamondBoxTimes = 24;
      case 24: {
        if (tag == 192) {
         parse_dailyOpenDiamondBoxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyopendiamondboxtimes_)));
          set_has_dailyopendiamondboxtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_signIn;
        break;
      }

      // optional uint32 signIn = 25;
      case 25: {
        if (tag == 200) {
         parse_signIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signin_)));
          set_has_signin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_totalCopperMineNum;
        break;
      }

      // optional uint32 totalCopperMineNum = 28;
      case 28: {
        if (tag == 224) {
         parse_totalCopperMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcopperminenum_)));
          set_has_totalcopperminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_totalSilverMineNum;
        break;
      }

      // optional uint32 totalSilverMineNum = 29;
      case 29: {
        if (tag == 232) {
         parse_totalSilverMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalsilverminenum_)));
          set_has_totalsilverminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_totalDiamondMineNum;
        break;
      }

      // optional uint32 totalDiamondMineNum = 30;
      case 30: {
        if (tag == 240) {
         parse_totalDiamondMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaldiamondminenum_)));
          set_has_totaldiamondminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_dailyCopperMineNum;
        break;
      }

      // optional uint32 dailyCopperMineNum = 31;
      case 31: {
        if (tag == 248) {
         parse_dailyCopperMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailycopperminenum_)));
          set_has_dailycopperminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_dailySilverMineNum;
        break;
      }

      // optional uint32 dailySilverMineNum = 32;
      case 32: {
        if (tag == 256) {
         parse_dailySilverMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailysilverminenum_)));
          set_has_dailysilverminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_dailyDiamondMineNum;
        break;
      }

      // optional uint32 dailyDiamondMineNum = 33;
      case 33: {
        if (tag == 264) {
         parse_dailyDiamondMineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailydiamondminenum_)));
          set_has_dailydiamondminenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_friendInfo;
        break;
      }

      // optional bytes friendInfo = 34;
      case 34: {
        if (tag == 274) {
         parse_friendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friendinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_shopFlush;
        break;
      }

      // optional bytes shopFlush = 35;
      case 35: {
        if (tag == 282) {
         parse_shopFlush:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shopflush()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_sevenDay;
        break;
      }

      // optional .TgsProtocol.DbSevenDayActive sevenDay = 36;
      case 36: {
        if (tag == 290) {
         parse_sevenDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sevenday()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_rebelArmy;
        break;
      }

      // optional .TgsProtocol.DbRebelArmy rebelArmy = 37;
      case 37: {
        if (tag == 298) {
         parse_rebelArmy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rebelarmy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_action;
        break;
      }

      // optional .TgsProtocol.DbActionRecord action = 38;
      case 38: {
        if (tag == 306) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_raidTeam;
        break;
      }

      // optional .TgsProtocol.DbRaidTeam raidTeam = 39;
      case 39: {
        if (tag == 314) {
         parse_raidTeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raidteam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_card;
        break;
      }

      // optional .TgsProtocol.DbMonthCard card = 40;
      case 40: {
        if (tag == 322) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_drop;
        break;
      }

      // optional .TgsProtocol.DbDrop drop = 41;
      case 41: {
        if (tag == 330) {
         parse_drop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_goodsBuyed;
        break;
      }

      // optional string goodsBuyed = 42;
      case 42: {
        if (tag == 338) {
         parse_goodsBuyed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goodsbuyed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->goodsbuyed().data(), this->goodsbuyed().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "goodsbuyed");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_firstChargeChoose;
        break;
      }

      // optional uint32 firstChargeChoose = 43;
      case 43: {
        if (tag == 344) {
         parse_firstChargeChoose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstchargechoose_)));
          set_has_firstchargechoose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_continueChargeChoose;
        break;
      }

      // optional uint32 continueChargeChoose = 44;
      case 44: {
        if (tag == 352) {
         parse_continueChargeChoose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continuechargechoose_)));
          set_has_continuechargechoose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_continueCharge;
        break;
      }

      // optional string continueCharge = 45;
      case 45: {
        if (tag == 362) {
         parse_continueCharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continuecharge()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->continuecharge().data(), this->continuecharge().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "continuecharge");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_handbook;
        break;
      }

      // optional .TgsProtocol.DbHandBook handbook = 46;
      case 46: {
        if (tag == 370) {
         parse_handbook:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handbook()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_secrethole;
        break;
      }

      // optional .TgsProtocol.DBSecretHole secrethole = 47;
      case 47: {
        if (tag == 378) {
         parse_secrethole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secrethole()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_returntask;
        break;
      }

      // optional .TgsProtocol.DBReturnTask returntask = 48;
      case 48: {
        if (tag == 386) {
         parse_returntask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_returntask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_territory;
        break;
      }

      // optional .TgsProtocol.PlayerTerritoryInfo territory = 49;
      case 49: {
        if (tag == 394) {
         parse_territory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_territory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_diagramMap;
        break;
      }

      // optional .TgsProtocol.DiagramMap diagramMap = 50;
      case 50: {
        if (tag == 402) {
         parse_diagramMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diagrammap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_ghostActiveList;
        break;
      }

      // optional .TgsProtocol.GhostList ghostActiveList = 51;
      case 51: {
        if (tag == 410) {
         parse_ghostActiveList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ghostactivelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_cheerId;
        break;
      }

      // optional uint32 cheerId = 52;
      case 52: {
        if (tag == 416) {
         parse_cheerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheerid_)));
          set_has_cheerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_titleList;
        break;
      }

      // repeated uint32 titleList = 53;
      case 53: {
        if (tag == 424) {
         parse_titleList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 424, input, this->mutable_titlelist())));
        } else if (tag == 426) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_titlelist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_titleList;
        if (input->ExpectTag(434)) goto parse_epicbosslist;
        break;
      }

      // optional .TgsProtocol.EpicBossList epicbosslist = 54;
      case 54: {
        if (tag == 434) {
         parse_epicbosslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epicbosslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_sevengifts;
        break;
      }

      // repeated uint32 sevengifts = 56;
      case 56: {
        if (tag == 448) {
         parse_sevengifts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 448, input, this->mutable_sevengifts())));
        } else if (tag == 450) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sevengifts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_sevengifts;
        if (input->ExpectTag(456)) goto parse_onlineRewards;
        break;
      }

      // repeated uint32 onlineRewards = 57;
      case 57: {
        if (tag == 456) {
         parse_onlineRewards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 456, input, this->mutable_onlinerewards())));
        } else if (tag == 458) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_onlinerewards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_onlineRewards;
        if (input->ExpectTag(466)) goto parse_retrieve;
        break;
      }

      // optional .TgsProtocol.RetrieveDB retrieve = 58;
      case 58: {
        if (tag == 466) {
         parse_retrieve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retrieve()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_chatpasswd;
        break;
      }

      // repeated .TgsProtocol.PassWordState chatpasswd = 59;
      case 59: {
        if (tag == 474) {
         parse_chatpasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatpasswd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_chatpasswd;
        if (input->ExpectTag(480)) goto parse_chatCount;
        break;
      }

      // repeated uint32 chatCount = 60;
      case 60: {
        if (tag == 480) {
         parse_chatCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 480, input, this->mutable_chatcount())));
        } else if (tag == 482) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chatcount())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_chatCount;
        if (input->ExpectTag(490)) goto parse_compare_gots;
        break;
      }

      // optional .TgsProtocol.DBServerCompareGot compare_gots = 61;
      case 61: {
        if (tag == 490) {
         parse_compare_gots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compare_gots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_farm;
        break;
      }

      // optional .TgsProtocol.FarmDB farm = 62;
      case 62: {
        if (tag == 498) {
         parse_farm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_farm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_SaveAdvancedCharReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_SaveAdvancedCharReq)
  return false;
#undef DO_
}

void LOBBY2DB_SaveAdvancedCharReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_SaveAdvancedCharReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_ADVANCED_CHARACTER_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional bytes shopGoods = 3;
  if (has_shopgoods()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->shopgoods(), output);
  }

  // required uint32 openCopperBoxNum = 4;
  if (has_opencopperboxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opencopperboxnum(), output);
  }

  // required uint32 lastOpenCopperBoxTime = 5;
  if (has_lastopencopperboxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastopencopperboxtime(), output);
  }

  // required uint32 lastOpenDiamondBoxTime = 6;
  if (has_lastopendiamondboxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lastopendiamondboxtime(), output);
  }

  // required uint32 totalOpenCopperBoxTimes = 7;
  if (has_totalopencopperboxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->totalopencopperboxtimes(), output);
  }

  // required uint32 totalOpenDiamondBoxTimes = 8;
  if (has_totalopendiamondboxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->totalopendiamondboxtimes(), output);
  }

  // repeated .TgsProtocol.DBMailInfo mailList = 9;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->maillist(i), output);
  }

  // optional uint32 skillPoint = 10;
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->skillpoint(), output);
  }

  // optional uint32 updateSkillPointTime = 11;
  if (has_updateskillpointtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->updateskillpointtime(), output);
  }

  // repeated uint32 exFormation = 12;
  for (int i = 0; i < this->exformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->exformation(i), output);
  }

  // optional bytes myHeros = 13;
  if (has_myheros()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->myheros(), output);
  }

  // optional bytes DefenseHeros = 14;
  if (has_defenseheros()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->defenseheros(), output);
  }

  // optional uint32 difficulty = 15;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->difficulty(), output);
  }

  // optional uint32 lastArenaTime = 16;
  if (has_lastarenatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->lastarenatime(), output);
  }

  // optional uint32 dailyArenaTimes = 17;
  if (has_dailyarenatimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->dailyarenatimes(), output);
  }

  // optional uint32 bestArenaRank = 18;
  if (has_bestarenarank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->bestarenarank(), output);
  }

  // repeated uint32 arFormation = 19;
  for (int i = 0; i < this->arformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->arformation(i), output);
  }

  // optional uint32 totalArenaWin = 20;
  if (has_totalarenawin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->totalarenawin(), output);
  }

  // optional bytes arenaLog = 21;
  if (has_arenalog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->arenalog(), output);
  }

  // optional uint32 topThreeTime = 22;
  if (has_topthreetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->topthreetime(), output);
  }

  // repeated uint32 ackFormation = 23;
  for (int i = 0; i < this->ackformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      23, this->ackformation(i), output);
  }

  // optional uint32 dailyOpenDiamondBoxTimes = 24;
  if (has_dailyopendiamondboxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->dailyopendiamondboxtimes(), output);
  }

  // optional uint32 signIn = 25;
  if (has_signin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->signin(), output);
  }

  // optional uint32 totalCopperMineNum = 28;
  if (has_totalcopperminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->totalcopperminenum(), output);
  }

  // optional uint32 totalSilverMineNum = 29;
  if (has_totalsilverminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->totalsilverminenum(), output);
  }

  // optional uint32 totalDiamondMineNum = 30;
  if (has_totaldiamondminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->totaldiamondminenum(), output);
  }

  // optional uint32 dailyCopperMineNum = 31;
  if (has_dailycopperminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->dailycopperminenum(), output);
  }

  // optional uint32 dailySilverMineNum = 32;
  if (has_dailysilverminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->dailysilverminenum(), output);
  }

  // optional uint32 dailyDiamondMineNum = 33;
  if (has_dailydiamondminenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->dailydiamondminenum(), output);
  }

  // optional bytes friendInfo = 34;
  if (has_friendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      34, this->friendinfo(), output);
  }

  // optional bytes shopFlush = 35;
  if (has_shopflush()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      35, this->shopflush(), output);
  }

  // optional .TgsProtocol.DbSevenDayActive sevenDay = 36;
  if (has_sevenday()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->sevenday(), output);
  }

  // optional .TgsProtocol.DbRebelArmy rebelArmy = 37;
  if (has_rebelarmy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->rebelarmy(), output);
  }

  // optional .TgsProtocol.DbActionRecord action = 38;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->action(), output);
  }

  // optional .TgsProtocol.DbRaidTeam raidTeam = 39;
  if (has_raidteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->raidteam(), output);
  }

  // optional .TgsProtocol.DbMonthCard card = 40;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->card(), output);
  }

  // optional .TgsProtocol.DbDrop drop = 41;
  if (has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->drop(), output);
  }

  // optional string goodsBuyed = 42;
  if (has_goodsbuyed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->goodsbuyed().data(), this->goodsbuyed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "goodsbuyed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->goodsbuyed(), output);
  }

  // optional uint32 firstChargeChoose = 43;
  if (has_firstchargechoose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->firstchargechoose(), output);
  }

  // optional uint32 continueChargeChoose = 44;
  if (has_continuechargechoose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->continuechargechoose(), output);
  }

  // optional string continueCharge = 45;
  if (has_continuecharge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continuecharge().data(), this->continuecharge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "continuecharge");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->continuecharge(), output);
  }

  // optional .TgsProtocol.DbHandBook handbook = 46;
  if (has_handbook()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->handbook(), output);
  }

  // optional .TgsProtocol.DBSecretHole secrethole = 47;
  if (has_secrethole()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->secrethole(), output);
  }

  // optional .TgsProtocol.DBReturnTask returntask = 48;
  if (has_returntask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->returntask(), output);
  }

  // optional .TgsProtocol.PlayerTerritoryInfo territory = 49;
  if (has_territory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->territory(), output);
  }

  // optional .TgsProtocol.DiagramMap diagramMap = 50;
  if (has_diagrammap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->diagrammap(), output);
  }

  // optional .TgsProtocol.GhostList ghostActiveList = 51;
  if (has_ghostactivelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->ghostactivelist(), output);
  }

  // optional uint32 cheerId = 52;
  if (has_cheerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->cheerid(), output);
  }

  // repeated uint32 titleList = 53;
  for (int i = 0; i < this->titlelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      53, this->titlelist(i), output);
  }

  // optional .TgsProtocol.EpicBossList epicbosslist = 54;
  if (has_epicbosslist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->epicbosslist(), output);
  }

  // repeated uint32 sevengifts = 56;
  for (int i = 0; i < this->sevengifts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      56, this->sevengifts(i), output);
  }

  // repeated uint32 onlineRewards = 57;
  for (int i = 0; i < this->onlinerewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      57, this->onlinerewards(i), output);
  }

  // optional .TgsProtocol.RetrieveDB retrieve = 58;
  if (has_retrieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->retrieve(), output);
  }

  // repeated .TgsProtocol.PassWordState chatpasswd = 59;
  for (int i = 0; i < this->chatpasswd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->chatpasswd(i), output);
  }

  // repeated uint32 chatCount = 60;
  for (int i = 0; i < this->chatcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      60, this->chatcount(i), output);
  }

  // optional .TgsProtocol.DBServerCompareGot compare_gots = 61;
  if (has_compare_gots()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->compare_gots(), output);
  }

  // optional .TgsProtocol.FarmDB farm = 62;
  if (has_farm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->farm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_SaveAdvancedCharReq)
}

::google::protobuf::uint8* LOBBY2DB_SaveAdvancedCharReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_SaveAdvancedCharReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_ADVANCED_CHARACTER_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional bytes shopGoods = 3;
  if (has_shopgoods()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->shopgoods(), target);
  }

  // required uint32 openCopperBoxNum = 4;
  if (has_opencopperboxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opencopperboxnum(), target);
  }

  // required uint32 lastOpenCopperBoxTime = 5;
  if (has_lastopencopperboxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastopencopperboxtime(), target);
  }

  // required uint32 lastOpenDiamondBoxTime = 6;
  if (has_lastopendiamondboxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lastopendiamondboxtime(), target);
  }

  // required uint32 totalOpenCopperBoxTimes = 7;
  if (has_totalopencopperboxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->totalopencopperboxtimes(), target);
  }

  // required uint32 totalOpenDiamondBoxTimes = 8;
  if (has_totalopendiamondboxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->totalopendiamondboxtimes(), target);
  }

  // repeated .TgsProtocol.DBMailInfo mailList = 9;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->maillist(i), target);
  }

  // optional uint32 skillPoint = 10;
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->skillpoint(), target);
  }

  // optional uint32 updateSkillPointTime = 11;
  if (has_updateskillpointtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->updateskillpointtime(), target);
  }

  // repeated uint32 exFormation = 12;
  for (int i = 0; i < this->exformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->exformation(i), target);
  }

  // optional bytes myHeros = 13;
  if (has_myheros()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->myheros(), target);
  }

  // optional bytes DefenseHeros = 14;
  if (has_defenseheros()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->defenseheros(), target);
  }

  // optional uint32 difficulty = 15;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->difficulty(), target);
  }

  // optional uint32 lastArenaTime = 16;
  if (has_lastarenatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->lastarenatime(), target);
  }

  // optional uint32 dailyArenaTimes = 17;
  if (has_dailyarenatimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->dailyarenatimes(), target);
  }

  // optional uint32 bestArenaRank = 18;
  if (has_bestarenarank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->bestarenarank(), target);
  }

  // repeated uint32 arFormation = 19;
  for (int i = 0; i < this->arformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(19, this->arformation(i), target);
  }

  // optional uint32 totalArenaWin = 20;
  if (has_totalarenawin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->totalarenawin(), target);
  }

  // optional bytes arenaLog = 21;
  if (has_arenalog()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->arenalog(), target);
  }

  // optional uint32 topThreeTime = 22;
  if (has_topthreetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->topthreetime(), target);
  }

  // repeated uint32 ackFormation = 23;
  for (int i = 0; i < this->ackformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(23, this->ackformation(i), target);
  }

  // optional uint32 dailyOpenDiamondBoxTimes = 24;
  if (has_dailyopendiamondboxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->dailyopendiamondboxtimes(), target);
  }

  // optional uint32 signIn = 25;
  if (has_signin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->signin(), target);
  }

  // optional uint32 totalCopperMineNum = 28;
  if (has_totalcopperminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->totalcopperminenum(), target);
  }

  // optional uint32 totalSilverMineNum = 29;
  if (has_totalsilverminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->totalsilverminenum(), target);
  }

  // optional uint32 totalDiamondMineNum = 30;
  if (has_totaldiamondminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->totaldiamondminenum(), target);
  }

  // optional uint32 dailyCopperMineNum = 31;
  if (has_dailycopperminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->dailycopperminenum(), target);
  }

  // optional uint32 dailySilverMineNum = 32;
  if (has_dailysilverminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->dailysilverminenum(), target);
  }

  // optional uint32 dailyDiamondMineNum = 33;
  if (has_dailydiamondminenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->dailydiamondminenum(), target);
  }

  // optional bytes friendInfo = 34;
  if (has_friendinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        34, this->friendinfo(), target);
  }

  // optional bytes shopFlush = 35;
  if (has_shopflush()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        35, this->shopflush(), target);
  }

  // optional .TgsProtocol.DbSevenDayActive sevenDay = 36;
  if (has_sevenday()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->sevenday(), target);
  }

  // optional .TgsProtocol.DbRebelArmy rebelArmy = 37;
  if (has_rebelarmy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->rebelarmy(), target);
  }

  // optional .TgsProtocol.DbActionRecord action = 38;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->action(), target);
  }

  // optional .TgsProtocol.DbRaidTeam raidTeam = 39;
  if (has_raidteam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->raidteam(), target);
  }

  // optional .TgsProtocol.DbMonthCard card = 40;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->card(), target);
  }

  // optional .TgsProtocol.DbDrop drop = 41;
  if (has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->drop(), target);
  }

  // optional string goodsBuyed = 42;
  if (has_goodsbuyed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->goodsbuyed().data(), this->goodsbuyed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "goodsbuyed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->goodsbuyed(), target);
  }

  // optional uint32 firstChargeChoose = 43;
  if (has_firstchargechoose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->firstchargechoose(), target);
  }

  // optional uint32 continueChargeChoose = 44;
  if (has_continuechargechoose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->continuechargechoose(), target);
  }

  // optional string continueCharge = 45;
  if (has_continuecharge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continuecharge().data(), this->continuecharge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "continuecharge");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->continuecharge(), target);
  }

  // optional .TgsProtocol.DbHandBook handbook = 46;
  if (has_handbook()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->handbook(), target);
  }

  // optional .TgsProtocol.DBSecretHole secrethole = 47;
  if (has_secrethole()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->secrethole(), target);
  }

  // optional .TgsProtocol.DBReturnTask returntask = 48;
  if (has_returntask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->returntask(), target);
  }

  // optional .TgsProtocol.PlayerTerritoryInfo territory = 49;
  if (has_territory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->territory(), target);
  }

  // optional .TgsProtocol.DiagramMap diagramMap = 50;
  if (has_diagrammap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->diagrammap(), target);
  }

  // optional .TgsProtocol.GhostList ghostActiveList = 51;
  if (has_ghostactivelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->ghostactivelist(), target);
  }

  // optional uint32 cheerId = 52;
  if (has_cheerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->cheerid(), target);
  }

  // repeated uint32 titleList = 53;
  for (int i = 0; i < this->titlelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(53, this->titlelist(i), target);
  }

  // optional .TgsProtocol.EpicBossList epicbosslist = 54;
  if (has_epicbosslist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->epicbosslist(), target);
  }

  // repeated uint32 sevengifts = 56;
  for (int i = 0; i < this->sevengifts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(56, this->sevengifts(i), target);
  }

  // repeated uint32 onlineRewards = 57;
  for (int i = 0; i < this->onlinerewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(57, this->onlinerewards(i), target);
  }

  // optional .TgsProtocol.RetrieveDB retrieve = 58;
  if (has_retrieve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->retrieve(), target);
  }

  // repeated .TgsProtocol.PassWordState chatpasswd = 59;
  for (int i = 0; i < this->chatpasswd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->chatpasswd(i), target);
  }

  // repeated uint32 chatCount = 60;
  for (int i = 0; i < this->chatcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(60, this->chatcount(i), target);
  }

  // optional .TgsProtocol.DBServerCompareGot compare_gots = 61;
  if (has_compare_gots()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->compare_gots(), target);
  }

  // optional .TgsProtocol.FarmDB farm = 62;
  if (has_farm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->farm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_SaveAdvancedCharReq)
  return target;
}

int LOBBY2DB_SaveAdvancedCharReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_ADVANCED_CHARACTER_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes shopGoods = 3;
    if (has_shopgoods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shopgoods());
    }

    // required uint32 openCopperBoxNum = 4;
    if (has_opencopperboxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opencopperboxnum());
    }

    // required uint32 lastOpenCopperBoxTime = 5;
    if (has_lastopencopperboxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastopencopperboxtime());
    }

    // required uint32 lastOpenDiamondBoxTime = 6;
    if (has_lastopendiamondboxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastopendiamondboxtime());
    }

    // required uint32 totalOpenCopperBoxTimes = 7;
    if (has_totalopencopperboxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalopencopperboxtimes());
    }

    // required uint32 totalOpenDiamondBoxTimes = 8;
    if (has_totalopendiamondboxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalopendiamondboxtimes());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 skillPoint = 10;
    if (has_skillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpoint());
    }

    // optional uint32 updateSkillPointTime = 11;
    if (has_updateskillpointtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updateskillpointtime());
    }

    // optional bytes myHeros = 13;
    if (has_myheros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->myheros());
    }

    // optional bytes DefenseHeros = 14;
    if (has_defenseheros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->defenseheros());
    }

    // optional uint32 difficulty = 15;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // optional uint32 lastArenaTime = 16;
    if (has_lastarenatime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastarenatime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 dailyArenaTimes = 17;
    if (has_dailyarenatimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyarenatimes());
    }

    // optional uint32 bestArenaRank = 18;
    if (has_bestarenarank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bestarenarank());
    }

    // optional uint32 totalArenaWin = 20;
    if (has_totalarenawin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalarenawin());
    }

    // optional bytes arenaLog = 21;
    if (has_arenalog()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->arenalog());
    }

    // optional uint32 topThreeTime = 22;
    if (has_topthreetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->topthreetime());
    }

    // optional uint32 dailyOpenDiamondBoxTimes = 24;
    if (has_dailyopendiamondboxtimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyopendiamondboxtimes());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 signIn = 25;
    if (has_signin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signin());
    }

    // optional uint32 totalCopperMineNum = 28;
    if (has_totalcopperminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalcopperminenum());
    }

    // optional uint32 totalSilverMineNum = 29;
    if (has_totalsilverminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalsilverminenum());
    }

    // optional uint32 totalDiamondMineNum = 30;
    if (has_totaldiamondminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaldiamondminenum());
    }

    // optional uint32 dailyCopperMineNum = 31;
    if (has_dailycopperminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailycopperminenum());
    }

    // optional uint32 dailySilverMineNum = 32;
    if (has_dailysilverminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailysilverminenum());
    }

    // optional uint32 dailyDiamondMineNum = 33;
    if (has_dailydiamondminenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailydiamondminenum());
    }

    // optional bytes friendInfo = 34;
    if (has_friendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friendinfo());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bytes shopFlush = 35;
    if (has_shopflush()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shopflush());
    }

    // optional .TgsProtocol.DbSevenDayActive sevenDay = 36;
    if (has_sevenday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sevenday());
    }

    // optional .TgsProtocol.DbRebelArmy rebelArmy = 37;
    if (has_rebelarmy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rebelarmy());
    }

    // optional .TgsProtocol.DbActionRecord action = 38;
    if (has_action()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

    // optional .TgsProtocol.DbRaidTeam raidTeam = 39;
    if (has_raidteam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raidteam());
    }

    // optional .TgsProtocol.DbMonthCard card = 40;
    if (has_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }

    // optional .TgsProtocol.DbDrop drop = 41;
    if (has_drop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drop());
    }

    // optional string goodsBuyed = 42;
    if (has_goodsbuyed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goodsbuyed());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 firstChargeChoose = 43;
    if (has_firstchargechoose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstchargechoose());
    }

    // optional uint32 continueChargeChoose = 44;
    if (has_continuechargechoose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->continuechargechoose());
    }

    // optional string continueCharge = 45;
    if (has_continuecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continuecharge());
    }

    // optional .TgsProtocol.DbHandBook handbook = 46;
    if (has_handbook()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handbook());
    }

    // optional .TgsProtocol.DBSecretHole secrethole = 47;
    if (has_secrethole()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->secrethole());
    }

    // optional .TgsProtocol.DBReturnTask returntask = 48;
    if (has_returntask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->returntask());
    }

    // optional .TgsProtocol.PlayerTerritoryInfo territory = 49;
    if (has_territory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->territory());
    }

    // optional .TgsProtocol.DiagramMap diagramMap = 50;
    if (has_diagrammap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diagrammap());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .TgsProtocol.GhostList ghostActiveList = 51;
    if (has_ghostactivelist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ghostactivelist());
    }

    // optional uint32 cheerId = 52;
    if (has_cheerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheerid());
    }

    // optional .TgsProtocol.EpicBossList epicbosslist = 54;
    if (has_epicbosslist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->epicbosslist());
    }

    // optional .TgsProtocol.RetrieveDB retrieve = 58;
    if (has_retrieve()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retrieve());
    }

  }
  if (_has_bits_[57 / 32] & (0xffu << (57 % 32))) {
    // optional .TgsProtocol.DBServerCompareGot compare_gots = 61;
    if (has_compare_gots()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compare_gots());
    }

    // optional .TgsProtocol.FarmDB farm = 62;
    if (has_farm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->farm());
    }

  }
  // repeated .TgsProtocol.DBMailInfo mailList = 9;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  // repeated uint32 exFormation = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->exformation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->exformation(i));
    }
    total_size += 1 * this->exformation_size() + data_size;
  }

  // repeated uint32 arFormation = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->arformation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arformation(i));
    }
    total_size += 2 * this->arformation_size() + data_size;
  }

  // repeated uint32 ackFormation = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->ackformation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ackformation(i));
    }
    total_size += 2 * this->ackformation_size() + data_size;
  }

  // repeated uint32 titleList = 53;
  {
    int data_size = 0;
    for (int i = 0; i < this->titlelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->titlelist(i));
    }
    total_size += 2 * this->titlelist_size() + data_size;
  }

  // repeated uint32 sevengifts = 56;
  {
    int data_size = 0;
    for (int i = 0; i < this->sevengifts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sevengifts(i));
    }
    total_size += 2 * this->sevengifts_size() + data_size;
  }

  // repeated uint32 onlineRewards = 57;
  {
    int data_size = 0;
    for (int i = 0; i < this->onlinerewards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->onlinerewards(i));
    }
    total_size += 2 * this->onlinerewards_size() + data_size;
  }

  // repeated .TgsProtocol.PassWordState chatpasswd = 59;
  total_size += 2 * this->chatpasswd_size();
  for (int i = 0; i < this->chatpasswd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatpasswd(i));
  }

  // repeated uint32 chatCount = 60;
  {
    int data_size = 0;
    for (int i = 0; i < this->chatcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chatcount(i));
    }
    total_size += 2 * this->chatcount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_SaveAdvancedCharReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_SaveAdvancedCharReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_SaveAdvancedCharReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_SaveAdvancedCharReq::MergeFrom(const LOBBY2DB_SaveAdvancedCharReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  exformation_.MergeFrom(from.exformation_);
  arformation_.MergeFrom(from.arformation_);
  ackformation_.MergeFrom(from.ackformation_);
  titlelist_.MergeFrom(from.titlelist_);
  sevengifts_.MergeFrom(from.sevengifts_);
  onlinerewards_.MergeFrom(from.onlinerewards_);
  chatpasswd_.MergeFrom(from.chatpasswd_);
  chatcount_.MergeFrom(from.chatcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_shopgoods()) {
      set_shopgoods(from.shopgoods());
    }
    if (from.has_opencopperboxnum()) {
      set_opencopperboxnum(from.opencopperboxnum());
    }
    if (from.has_lastopencopperboxtime()) {
      set_lastopencopperboxtime(from.lastopencopperboxtime());
    }
    if (from.has_lastopendiamondboxtime()) {
      set_lastopendiamondboxtime(from.lastopendiamondboxtime());
    }
    if (from.has_totalopencopperboxtimes()) {
      set_totalopencopperboxtimes(from.totalopencopperboxtimes());
    }
    if (from.has_totalopendiamondboxtimes()) {
      set_totalopendiamondboxtimes(from.totalopendiamondboxtimes());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
    if (from.has_updateskillpointtime()) {
      set_updateskillpointtime(from.updateskillpointtime());
    }
    if (from.has_myheros()) {
      set_myheros(from.myheros());
    }
    if (from.has_defenseheros()) {
      set_defenseheros(from.defenseheros());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_lastarenatime()) {
      set_lastarenatime(from.lastarenatime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dailyarenatimes()) {
      set_dailyarenatimes(from.dailyarenatimes());
    }
    if (from.has_bestarenarank()) {
      set_bestarenarank(from.bestarenarank());
    }
    if (from.has_totalarenawin()) {
      set_totalarenawin(from.totalarenawin());
    }
    if (from.has_arenalog()) {
      set_arenalog(from.arenalog());
    }
    if (from.has_topthreetime()) {
      set_topthreetime(from.topthreetime());
    }
    if (from.has_dailyopendiamondboxtimes()) {
      set_dailyopendiamondboxtimes(from.dailyopendiamondboxtimes());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_signin()) {
      set_signin(from.signin());
    }
    if (from.has_totalcopperminenum()) {
      set_totalcopperminenum(from.totalcopperminenum());
    }
    if (from.has_totalsilverminenum()) {
      set_totalsilverminenum(from.totalsilverminenum());
    }
    if (from.has_totaldiamondminenum()) {
      set_totaldiamondminenum(from.totaldiamondminenum());
    }
    if (from.has_dailycopperminenum()) {
      set_dailycopperminenum(from.dailycopperminenum());
    }
    if (from.has_dailysilverminenum()) {
      set_dailysilverminenum(from.dailysilverminenum());
    }
    if (from.has_dailydiamondminenum()) {
      set_dailydiamondminenum(from.dailydiamondminenum());
    }
    if (from.has_friendinfo()) {
      set_friendinfo(from.friendinfo());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_shopflush()) {
      set_shopflush(from.shopflush());
    }
    if (from.has_sevenday()) {
      mutable_sevenday()->::TgsProtocol::DbSevenDayActive::MergeFrom(from.sevenday());
    }
    if (from.has_rebelarmy()) {
      mutable_rebelarmy()->::TgsProtocol::DbRebelArmy::MergeFrom(from.rebelarmy());
    }
    if (from.has_action()) {
      mutable_action()->::TgsProtocol::DbActionRecord::MergeFrom(from.action());
    }
    if (from.has_raidteam()) {
      mutable_raidteam()->::TgsProtocol::DbRaidTeam::MergeFrom(from.raidteam());
    }
    if (from.has_card()) {
      mutable_card()->::TgsProtocol::DbMonthCard::MergeFrom(from.card());
    }
    if (from.has_drop()) {
      mutable_drop()->::TgsProtocol::DbDrop::MergeFrom(from.drop());
    }
    if (from.has_goodsbuyed()) {
      set_goodsbuyed(from.goodsbuyed());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_firstchargechoose()) {
      set_firstchargechoose(from.firstchargechoose());
    }
    if (from.has_continuechargechoose()) {
      set_continuechargechoose(from.continuechargechoose());
    }
    if (from.has_continuecharge()) {
      set_continuecharge(from.continuecharge());
    }
    if (from.has_handbook()) {
      mutable_handbook()->::TgsProtocol::DbHandBook::MergeFrom(from.handbook());
    }
    if (from.has_secrethole()) {
      mutable_secrethole()->::TgsProtocol::DBSecretHole::MergeFrom(from.secrethole());
    }
    if (from.has_returntask()) {
      mutable_returntask()->::TgsProtocol::DBReturnTask::MergeFrom(from.returntask());
    }
    if (from.has_territory()) {
      mutable_territory()->::TgsProtocol::PlayerTerritoryInfo::MergeFrom(from.territory());
    }
    if (from.has_diagrammap()) {
      mutable_diagrammap()->::TgsProtocol::DiagramMap::MergeFrom(from.diagrammap());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_ghostactivelist()) {
      mutable_ghostactivelist()->::TgsProtocol::GhostList::MergeFrom(from.ghostactivelist());
    }
    if (from.has_cheerid()) {
      set_cheerid(from.cheerid());
    }
    if (from.has_epicbosslist()) {
      mutable_epicbosslist()->::TgsProtocol::EpicBossList::MergeFrom(from.epicbosslist());
    }
    if (from.has_retrieve()) {
      mutable_retrieve()->::TgsProtocol::RetrieveDB::MergeFrom(from.retrieve());
    }
  }
  if (from._has_bits_[57 / 32] & (0xffu << (57 % 32))) {
    if (from.has_compare_gots()) {
      mutable_compare_gots()->::TgsProtocol::DBServerCompareGot::MergeFrom(from.compare_gots());
    }
    if (from.has_farm()) {
      mutable_farm()->::TgsProtocol::FarmDB::MergeFrom(from.farm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_SaveAdvancedCharReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_SaveAdvancedCharReq::CopyFrom(const LOBBY2DB_SaveAdvancedCharReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_SaveAdvancedCharReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fa) != 0x000000fa) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->maillist())) return false;
  if (has_sevenday()) {
    if (!this->sevenday().IsInitialized()) return false;
  }
  if (has_rebelarmy()) {
    if (!this->rebelarmy().IsInitialized()) return false;
  }
  if (has_action()) {
    if (!this->action().IsInitialized()) return false;
  }
  if (has_raidteam()) {
    if (!this->raidteam().IsInitialized()) return false;
  }
  if (has_card()) {
    if (!this->card().IsInitialized()) return false;
  }
  if (has_drop()) {
    if (!this->drop().IsInitialized()) return false;
  }
  if (has_handbook()) {
    if (!this->handbook().IsInitialized()) return false;
  }
  if (has_secrethole()) {
    if (!this->secrethole().IsInitialized()) return false;
  }
  if (has_returntask()) {
    if (!this->returntask().IsInitialized()) return false;
  }
  if (has_territory()) {
    if (!this->territory().IsInitialized()) return false;
  }
  if (has_diagrammap()) {
    if (!this->diagrammap().IsInitialized()) return false;
  }
  if (has_ghostactivelist()) {
    if (!this->ghostactivelist().IsInitialized()) return false;
  }
  if (has_epicbosslist()) {
    if (!this->epicbosslist().IsInitialized()) return false;
  }
  if (has_retrieve()) {
    if (!this->retrieve().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->chatpasswd())) return false;
  if (has_compare_gots()) {
    if (!this->compare_gots().IsInitialized()) return false;
  }
  if (has_farm()) {
    if (!this->farm().IsInitialized()) return false;
  }
  return true;
}

void LOBBY2DB_SaveAdvancedCharReq::Swap(LOBBY2DB_SaveAdvancedCharReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(shopgoods_, other->shopgoods_);
    std::swap(opencopperboxnum_, other->opencopperboxnum_);
    std::swap(lastopencopperboxtime_, other->lastopencopperboxtime_);
    std::swap(lastopendiamondboxtime_, other->lastopendiamondboxtime_);
    std::swap(totalopencopperboxtimes_, other->totalopencopperboxtimes_);
    std::swap(totalopendiamondboxtimes_, other->totalopendiamondboxtimes_);
    maillist_.Swap(&other->maillist_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(updateskillpointtime_, other->updateskillpointtime_);
    exformation_.Swap(&other->exformation_);
    std::swap(myheros_, other->myheros_);
    std::swap(defenseheros_, other->defenseheros_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(lastarenatime_, other->lastarenatime_);
    std::swap(dailyarenatimes_, other->dailyarenatimes_);
    std::swap(bestarenarank_, other->bestarenarank_);
    arformation_.Swap(&other->arformation_);
    std::swap(totalarenawin_, other->totalarenawin_);
    std::swap(arenalog_, other->arenalog_);
    std::swap(topthreetime_, other->topthreetime_);
    ackformation_.Swap(&other->ackformation_);
    std::swap(dailyopendiamondboxtimes_, other->dailyopendiamondboxtimes_);
    std::swap(signin_, other->signin_);
    std::swap(totalcopperminenum_, other->totalcopperminenum_);
    std::swap(totalsilverminenum_, other->totalsilverminenum_);
    std::swap(totaldiamondminenum_, other->totaldiamondminenum_);
    std::swap(dailycopperminenum_, other->dailycopperminenum_);
    std::swap(dailysilverminenum_, other->dailysilverminenum_);
    std::swap(dailydiamondminenum_, other->dailydiamondminenum_);
    std::swap(friendinfo_, other->friendinfo_);
    std::swap(shopflush_, other->shopflush_);
    std::swap(sevenday_, other->sevenday_);
    std::swap(rebelarmy_, other->rebelarmy_);
    std::swap(action_, other->action_);
    std::swap(raidteam_, other->raidteam_);
    std::swap(card_, other->card_);
    std::swap(drop_, other->drop_);
    std::swap(goodsbuyed_, other->goodsbuyed_);
    std::swap(firstchargechoose_, other->firstchargechoose_);
    std::swap(continuechargechoose_, other->continuechargechoose_);
    std::swap(continuecharge_, other->continuecharge_);
    std::swap(handbook_, other->handbook_);
    std::swap(secrethole_, other->secrethole_);
    std::swap(returntask_, other->returntask_);
    std::swap(territory_, other->territory_);
    std::swap(diagrammap_, other->diagrammap_);
    std::swap(ghostactivelist_, other->ghostactivelist_);
    std::swap(cheerid_, other->cheerid_);
    titlelist_.Swap(&other->titlelist_);
    std::swap(epicbosslist_, other->epicbosslist_);
    sevengifts_.Swap(&other->sevengifts_);
    onlinerewards_.Swap(&other->onlinerewards_);
    std::swap(retrieve_, other->retrieve_);
    chatpasswd_.Swap(&other->chatpasswd_);
    chatcount_.Swap(&other->chatcount_);
    std::swap(compare_gots_, other->compare_gots_);
    std::swap(farm_, other->farm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_SaveAdvancedCharReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_SaveAdvancedCharReq_descriptor_;
  metadata.reflection = LOBBY2DB_SaveAdvancedCharReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetrieveDB::kTodayFieldNumber;
const int RetrieveDB::kYesterdayFieldNumber;
#endif  // !_MSC_VER

RetrieveDB::RetrieveDB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.RetrieveDB)
}

void RetrieveDB::InitAsDefaultInstance() {
}

RetrieveDB::RetrieveDB(const RetrieveDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.RetrieveDB)
}

void RetrieveDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetrieveDB::~RetrieveDB() {
  // @@protoc_insertion_point(destructor:TgsProtocol.RetrieveDB)
  SharedDtor();
}

void RetrieveDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetrieveDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetrieveDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetrieveDB_descriptor_;
}

const RetrieveDB& RetrieveDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

RetrieveDB* RetrieveDB::default_instance_ = NULL;

RetrieveDB* RetrieveDB::New() const {
  return new RetrieveDB;
}

void RetrieveDB::Clear() {
  today_.Clear();
  yesterday_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetrieveDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.RetrieveDB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TgsProtocol.RetrieveState today = 1;
      case 1: {
        if (tag == 10) {
         parse_today:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_today()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_today;
        if (input->ExpectTag(18)) goto parse_yesterday;
        break;
      }

      // repeated .TgsProtocol.RetrieveState yesterday = 2;
      case 2: {
        if (tag == 18) {
         parse_yesterday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yesterday()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_yesterday;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.RetrieveDB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.RetrieveDB)
  return false;
#undef DO_
}

void RetrieveDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.RetrieveDB)
  // repeated .TgsProtocol.RetrieveState today = 1;
  for (int i = 0; i < this->today_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->today(i), output);
  }

  // repeated .TgsProtocol.RetrieveState yesterday = 2;
  for (int i = 0; i < this->yesterday_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->yesterday(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.RetrieveDB)
}

::google::protobuf::uint8* RetrieveDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.RetrieveDB)
  // repeated .TgsProtocol.RetrieveState today = 1;
  for (int i = 0; i < this->today_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->today(i), target);
  }

  // repeated .TgsProtocol.RetrieveState yesterday = 2;
  for (int i = 0; i < this->yesterday_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->yesterday(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.RetrieveDB)
  return target;
}

int RetrieveDB::ByteSize() const {
  int total_size = 0;

  // repeated .TgsProtocol.RetrieveState today = 1;
  total_size += 1 * this->today_size();
  for (int i = 0; i < this->today_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->today(i));
  }

  // repeated .TgsProtocol.RetrieveState yesterday = 2;
  total_size += 1 * this->yesterday_size();
  for (int i = 0; i < this->yesterday_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yesterday(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetrieveDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetrieveDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetrieveDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetrieveDB::MergeFrom(const RetrieveDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  today_.MergeFrom(from.today_);
  yesterday_.MergeFrom(from.yesterday_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetrieveDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetrieveDB::CopyFrom(const RetrieveDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveDB::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->today())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->yesterday())) return false;
  return true;
}

void RetrieveDB::Swap(RetrieveDB* other) {
  if (other != this) {
    today_.Swap(&other->today_);
    yesterday_.Swap(&other->yesterday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetrieveDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetrieveDB_descriptor_;
  metadata.reflection = RetrieveDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_SaveAdvancedCharRet::kCmdIdFieldNumber;
const int DB2LOBBY_SaveAdvancedCharRet::kRetFieldNumber;
const int DB2LOBBY_SaveAdvancedCharRet::kCharIdFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_SaveAdvancedCharRet::DB2LOBBY_SaveAdvancedCharRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_SaveAdvancedCharRet)
}

void DB2LOBBY_SaveAdvancedCharRet::InitAsDefaultInstance() {
}

DB2LOBBY_SaveAdvancedCharRet::DB2LOBBY_SaveAdvancedCharRet(const DB2LOBBY_SaveAdvancedCharRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_SaveAdvancedCharRet)
}

void DB2LOBBY_SaveAdvancedCharRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350009;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_SaveAdvancedCharRet::~DB2LOBBY_SaveAdvancedCharRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_SaveAdvancedCharRet)
  SharedDtor();
}

void DB2LOBBY_SaveAdvancedCharRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_SaveAdvancedCharRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_SaveAdvancedCharRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_SaveAdvancedCharRet_descriptor_;
}

const DB2LOBBY_SaveAdvancedCharRet& DB2LOBBY_SaveAdvancedCharRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_SaveAdvancedCharRet* DB2LOBBY_SaveAdvancedCharRet::default_instance_ = NULL;

DB2LOBBY_SaveAdvancedCharRet* DB2LOBBY_SaveAdvancedCharRet::New() const {
  return new DB2LOBBY_SaveAdvancedCharRet;
}

void DB2LOBBY_SaveAdvancedCharRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_SaveAdvancedCharRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ret_, charid_);
    cmdid_ = 350009;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_SaveAdvancedCharRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_SaveAdvancedCharRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_ADVANCED_CHARACTER_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charId;
        break;
      }

      // required uint64 charId = 3;
      case 3: {
        if (tag == 24) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_SaveAdvancedCharRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_SaveAdvancedCharRet)
  return false;
#undef DO_
}

void DB2LOBBY_SaveAdvancedCharRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_SaveAdvancedCharRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_ADVANCED_CHARACTER_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_SaveAdvancedCharRet)
}

::google::protobuf::uint8* DB2LOBBY_SaveAdvancedCharRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_SaveAdvancedCharRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_ADVANCED_CHARACTER_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_SaveAdvancedCharRet)
  return target;
}

int DB2LOBBY_SaveAdvancedCharRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_ADVANCED_CHARACTER_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_SaveAdvancedCharRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_SaveAdvancedCharRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_SaveAdvancedCharRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_SaveAdvancedCharRet::MergeFrom(const DB2LOBBY_SaveAdvancedCharRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_SaveAdvancedCharRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_SaveAdvancedCharRet::CopyFrom(const DB2LOBBY_SaveAdvancedCharRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_SaveAdvancedCharRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void DB2LOBBY_SaveAdvancedCharRet::Swap(DB2LOBBY_SaveAdvancedCharRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_SaveAdvancedCharRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_SaveAdvancedCharRet_descriptor_;
  metadata.reflection = DB2LOBBY_SaveAdvancedCharRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_LoadBagReq::kCmdIdFieldNumber;
const int LOBBY2DB_LoadBagReq::kCharIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_LoadBagReq::LOBBY2DB_LoadBagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_LoadBagReq)
}

void LOBBY2DB_LoadBagReq::InitAsDefaultInstance() {
}

LOBBY2DB_LoadBagReq::LOBBY2DB_LoadBagReq(const LOBBY2DB_LoadBagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_LoadBagReq)
}

void LOBBY2DB_LoadBagReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300004;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_LoadBagReq::~LOBBY2DB_LoadBagReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_LoadBagReq)
  SharedDtor();
}

void LOBBY2DB_LoadBagReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_LoadBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_LoadBagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_LoadBagReq_descriptor_;
}

const LOBBY2DB_LoadBagReq& LOBBY2DB_LoadBagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_LoadBagReq* LOBBY2DB_LoadBagReq::default_instance_ = NULL;

LOBBY2DB_LoadBagReq* LOBBY2DB_LoadBagReq::New() const {
  return new LOBBY2DB_LoadBagReq;
}

void LOBBY2DB_LoadBagReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 300004;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_LoadBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_LoadBagReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_BAG_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_LoadBagReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_LoadBagReq)
  return false;
#undef DO_
}

void LOBBY2DB_LoadBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_LoadBagReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_BAG_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_LoadBagReq)
}

::google::protobuf::uint8* LOBBY2DB_LoadBagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_LoadBagReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_BAG_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_LoadBagReq)
  return target;
}

int LOBBY2DB_LoadBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_BAG_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_LoadBagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_LoadBagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_LoadBagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_LoadBagReq::MergeFrom(const LOBBY2DB_LoadBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_LoadBagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_LoadBagReq::CopyFrom(const LOBBY2DB_LoadBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_LoadBagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LOBBY2DB_LoadBagReq::Swap(LOBBY2DB_LoadBagReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_LoadBagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_LoadBagReq_descriptor_;
  metadata.reflection = LOBBY2DB_LoadBagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_LoadBagRet::kCmdIdFieldNumber;
const int DB2LOBBY_LoadBagRet::kRetFieldNumber;
const int DB2LOBBY_LoadBagRet::kCharidFieldNumber;
const int DB2LOBBY_LoadBagRet::kCurBagNumFieldNumber;
const int DB2LOBBY_LoadBagRet::kBagFieldNumber;
const int DB2LOBBY_LoadBagRet::kSeedBagFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_LoadBagRet::DB2LOBBY_LoadBagRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_LoadBagRet)
}

void DB2LOBBY_LoadBagRet::InitAsDefaultInstance() {
  seedbag_ = const_cast< ::TgsProtocol::SeedBag*>(&::TgsProtocol::SeedBag::default_instance());
}

DB2LOBBY_LoadBagRet::DB2LOBBY_LoadBagRet(const DB2LOBBY_LoadBagRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_LoadBagRet)
}

void DB2LOBBY_LoadBagRet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 350004;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  curbagnum_ = 0u;
  bag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seedbag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_LoadBagRet::~DB2LOBBY_LoadBagRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_LoadBagRet)
  SharedDtor();
}

void DB2LOBBY_LoadBagRet::SharedDtor() {
  if (bag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bag_;
  }
  if (this != default_instance_) {
    delete seedbag_;
  }
}

void DB2LOBBY_LoadBagRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_LoadBagRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_LoadBagRet_descriptor_;
}

const DB2LOBBY_LoadBagRet& DB2LOBBY_LoadBagRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_LoadBagRet* DB2LOBBY_LoadBagRet::default_instance_ = NULL;

DB2LOBBY_LoadBagRet* DB2LOBBY_LoadBagRet::New() const {
  return new DB2LOBBY_LoadBagRet;
}

void DB2LOBBY_LoadBagRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_LoadBagRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ret_, charid_);
    cmdid_ = 350004;
    curbagnum_ = 0u;
    if (has_bag()) {
      if (bag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bag_->clear();
      }
    }
    if (has_seedbag()) {
      if (seedbag_ != NULL) seedbag_->::TgsProtocol::SeedBag::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_LoadBagRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_LoadBagRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_BAG_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curBagNum;
        break;
      }

      // optional uint32 curBagNum = 4;
      case 4: {
        if (tag == 32) {
         parse_curBagNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curbagnum_)));
          set_has_curbagnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bag;
        break;
      }

      // optional bytes bag = 5;
      case 5: {
        if (tag == 42) {
         parse_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_seedBag;
        break;
      }

      // optional .TgsProtocol.SeedBag seedBag = 6;
      case 6: {
        if (tag == 50) {
         parse_seedBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seedbag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_LoadBagRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_LoadBagRet)
  return false;
#undef DO_
}

void DB2LOBBY_LoadBagRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_LoadBagRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_BAG_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 curBagNum = 4;
  if (has_curbagnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curbagnum(), output);
  }

  // optional bytes bag = 5;
  if (has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->bag(), output);
  }

  // optional .TgsProtocol.SeedBag seedBag = 6;
  if (has_seedbag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->seedbag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_LoadBagRet)
}

::google::protobuf::uint8* DB2LOBBY_LoadBagRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_LoadBagRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_BAG_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 curBagNum = 4;
  if (has_curbagnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curbagnum(), target);
  }

  // optional bytes bag = 5;
  if (has_bag()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->bag(), target);
  }

  // optional .TgsProtocol.SeedBag seedBag = 6;
  if (has_seedbag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->seedbag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_LoadBagRet)
  return target;
}

int DB2LOBBY_LoadBagRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_BAG_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 curBagNum = 4;
    if (has_curbagnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curbagnum());
    }

    // optional bytes bag = 5;
    if (has_bag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bag());
    }

    // optional .TgsProtocol.SeedBag seedBag = 6;
    if (has_seedbag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seedbag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_LoadBagRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_LoadBagRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_LoadBagRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_LoadBagRet::MergeFrom(const DB2LOBBY_LoadBagRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_curbagnum()) {
      set_curbagnum(from.curbagnum());
    }
    if (from.has_bag()) {
      set_bag(from.bag());
    }
    if (from.has_seedbag()) {
      mutable_seedbag()->::TgsProtocol::SeedBag::MergeFrom(from.seedbag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_LoadBagRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_LoadBagRet::CopyFrom(const DB2LOBBY_LoadBagRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_LoadBagRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_seedbag()) {
    if (!this->seedbag().IsInitialized()) return false;
  }
  return true;
}

void DB2LOBBY_LoadBagRet::Swap(DB2LOBBY_LoadBagRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(curbagnum_, other->curbagnum_);
    std::swap(bag_, other->bag_);
    std::swap(seedbag_, other->seedbag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_LoadBagRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_LoadBagRet_descriptor_;
  metadata.reflection = DB2LOBBY_LoadBagRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_CheckTokenRet::kCmdIdFieldNumber;
const int DB2LOBBY_CheckTokenRet::kRetFieldNumber;
const int DB2LOBBY_CheckTokenRet::kCharIdFieldNumber;
const int DB2LOBBY_CheckTokenRet::kDeviceNameFieldNumber;
const int DB2LOBBY_CheckTokenRet::kDeviceTypeFieldNumber;
const int DB2LOBBY_CheckTokenRet::kDeviceUidFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_CheckTokenRet::DB2LOBBY_CheckTokenRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_CheckTokenRet)
}

void DB2LOBBY_CheckTokenRet::InitAsDefaultInstance() {
}

DB2LOBBY_CheckTokenRet::DB2LOBBY_CheckTokenRet(const DB2LOBBY_CheckTokenRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_CheckTokenRet)
}

void DB2LOBBY_CheckTokenRet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 350010;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_CheckTokenRet::~DB2LOBBY_CheckTokenRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_CheckTokenRet)
  SharedDtor();
}

void DB2LOBBY_CheckTokenRet::SharedDtor() {
  if (devicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicename_;
  }
  if (devicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicetype_;
  }
  if (deviceuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceuid_;
  }
  if (this != default_instance_) {
  }
}

void DB2LOBBY_CheckTokenRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_CheckTokenRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_CheckTokenRet_descriptor_;
}

const DB2LOBBY_CheckTokenRet& DB2LOBBY_CheckTokenRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_CheckTokenRet* DB2LOBBY_CheckTokenRet::default_instance_ = NULL;

DB2LOBBY_CheckTokenRet* DB2LOBBY_CheckTokenRet::New() const {
  return new DB2LOBBY_CheckTokenRet;
}

void DB2LOBBY_CheckTokenRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_CheckTokenRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ret_, charid_);
    cmdid_ = 350010;
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicename_->clear();
      }
    }
    if (has_devicetype()) {
      if (devicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicetype_->clear();
      }
    }
    if (has_deviceuid()) {
      if (deviceuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceuid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_CheckTokenRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_CheckTokenRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CHECKTOKEN_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charId;
        break;
      }

      // required uint64 charId = 3;
      case 3: {
        if (tag == 24) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_deviceName;
        break;
      }

      // required bytes deviceName = 4;
      case 4: {
        if (tag == 34) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_deviceType;
        break;
      }

      // required bytes deviceType = 5;
      case 5: {
        if (tag == 42) {
         parse_deviceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicetype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_deviceUid;
        break;
      }

      // required bytes deviceUid = 6;
      case 6: {
        if (tag == 50) {
         parse_deviceUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_CheckTokenRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_CheckTokenRet)
  return false;
#undef DO_
}

void DB2LOBBY_CheckTokenRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_CheckTokenRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CHECKTOKEN_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required bytes deviceName = 4;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->devicename(), output);
  }

  // required bytes deviceType = 5;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->devicetype(), output);
  }

  // required bytes deviceUid = 6;
  if (has_deviceuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->deviceuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_CheckTokenRet)
}

::google::protobuf::uint8* DB2LOBBY_CheckTokenRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_CheckTokenRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CHECKTOKEN_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required bytes deviceName = 4;
  if (has_devicename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->devicename(), target);
  }

  // required bytes deviceType = 5;
  if (has_devicetype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->devicetype(), target);
  }

  // required bytes deviceUid = 6;
  if (has_deviceuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->deviceuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_CheckTokenRet)
  return target;
}

int DB2LOBBY_CheckTokenRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CHECKTOKEN_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bytes deviceName = 4;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicename());
    }

    // required bytes deviceType = 5;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicetype());
    }

    // required bytes deviceUid = 6;
    if (has_deviceuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deviceuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_CheckTokenRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_CheckTokenRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_CheckTokenRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_CheckTokenRet::MergeFrom(const DB2LOBBY_CheckTokenRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_deviceuid()) {
      set_deviceuid(from.deviceuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_CheckTokenRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_CheckTokenRet::CopyFrom(const DB2LOBBY_CheckTokenRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_CheckTokenRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  return true;
}

void DB2LOBBY_CheckTokenRet::Swap(DB2LOBBY_CheckTokenRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(devicename_, other->devicename_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(deviceuid_, other->deviceuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_CheckTokenRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_CheckTokenRet_descriptor_;
  metadata.reflection = DB2LOBBY_CheckTokenRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_SaveBagReq::kCmdIdFieldNumber;
const int LOBBY2DB_SaveBagReq::kCharIdFieldNumber;
const int LOBBY2DB_SaveBagReq::kIsSaveBagFieldNumber;
const int LOBBY2DB_SaveBagReq::kCurBagNumFieldNumber;
const int LOBBY2DB_SaveBagReq::kBagFieldNumber;
const int LOBBY2DB_SaveBagReq::kSeedBagFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_SaveBagReq::LOBBY2DB_SaveBagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_SaveBagReq)
}

void LOBBY2DB_SaveBagReq::InitAsDefaultInstance() {
  seedbag_ = const_cast< ::TgsProtocol::SeedBag*>(&::TgsProtocol::SeedBag::default_instance());
}

LOBBY2DB_SaveBagReq::LOBBY2DB_SaveBagReq(const LOBBY2DB_SaveBagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_SaveBagReq)
}

void LOBBY2DB_SaveBagReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 300003;
  charid_ = GOOGLE_ULONGLONG(0);
  issavebag_ = 0u;
  curbagnum_ = 0u;
  bag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seedbag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_SaveBagReq::~LOBBY2DB_SaveBagReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_SaveBagReq)
  SharedDtor();
}

void LOBBY2DB_SaveBagReq::SharedDtor() {
  if (bag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bag_;
  }
  if (this != default_instance_) {
    delete seedbag_;
  }
}

void LOBBY2DB_SaveBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_SaveBagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_SaveBagReq_descriptor_;
}

const LOBBY2DB_SaveBagReq& LOBBY2DB_SaveBagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_SaveBagReq* LOBBY2DB_SaveBagReq::default_instance_ = NULL;

LOBBY2DB_SaveBagReq* LOBBY2DB_SaveBagReq::New() const {
  return new LOBBY2DB_SaveBagReq;
}

void LOBBY2DB_SaveBagReq::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmdid_ = 300003;
    charid_ = GOOGLE_ULONGLONG(0);
    issavebag_ = 0u;
    curbagnum_ = 0u;
    if (has_bag()) {
      if (bag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bag_->clear();
      }
    }
    if (has_seedbag()) {
      if (seedbag_ != NULL) seedbag_->::TgsProtocol::SeedBag::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_SaveBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_SaveBagReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_BAG_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isSaveBag;
        break;
      }

      // optional uint32 isSaveBag = 3;
      case 3: {
        if (tag == 24) {
         parse_isSaveBag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &issavebag_)));
          set_has_issavebag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curBagNum;
        break;
      }

      // optional uint32 curBagNum = 4;
      case 4: {
        if (tag == 32) {
         parse_curBagNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curbagnum_)));
          set_has_curbagnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bag;
        break;
      }

      // optional bytes bag = 5;
      case 5: {
        if (tag == 42) {
         parse_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_seedBag;
        break;
      }

      // optional .TgsProtocol.SeedBag seedBag = 6;
      case 6: {
        if (tag == 50) {
         parse_seedBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seedbag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_SaveBagReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_SaveBagReq)
  return false;
#undef DO_
}

void LOBBY2DB_SaveBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_SaveBagReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_BAG_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional uint32 isSaveBag = 3;
  if (has_issavebag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->issavebag(), output);
  }

  // optional uint32 curBagNum = 4;
  if (has_curbagnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curbagnum(), output);
  }

  // optional bytes bag = 5;
  if (has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->bag(), output);
  }

  // optional .TgsProtocol.SeedBag seedBag = 6;
  if (has_seedbag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->seedbag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_SaveBagReq)
}

::google::protobuf::uint8* LOBBY2DB_SaveBagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_SaveBagReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_BAG_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional uint32 isSaveBag = 3;
  if (has_issavebag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->issavebag(), target);
  }

  // optional uint32 curBagNum = 4;
  if (has_curbagnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curbagnum(), target);
  }

  // optional bytes bag = 5;
  if (has_bag()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->bag(), target);
  }

  // optional .TgsProtocol.SeedBag seedBag = 6;
  if (has_seedbag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->seedbag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_SaveBagReq)
  return target;
}

int LOBBY2DB_SaveBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_BAG_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 isSaveBag = 3;
    if (has_issavebag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->issavebag());
    }

    // optional uint32 curBagNum = 4;
    if (has_curbagnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curbagnum());
    }

    // optional bytes bag = 5;
    if (has_bag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bag());
    }

    // optional .TgsProtocol.SeedBag seedBag = 6;
    if (has_seedbag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seedbag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_SaveBagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_SaveBagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_SaveBagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_SaveBagReq::MergeFrom(const LOBBY2DB_SaveBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_issavebag()) {
      set_issavebag(from.issavebag());
    }
    if (from.has_curbagnum()) {
      set_curbagnum(from.curbagnum());
    }
    if (from.has_bag()) {
      set_bag(from.bag());
    }
    if (from.has_seedbag()) {
      mutable_seedbag()->::TgsProtocol::SeedBag::MergeFrom(from.seedbag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_SaveBagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_SaveBagReq::CopyFrom(const LOBBY2DB_SaveBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_SaveBagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_seedbag()) {
    if (!this->seedbag().IsInitialized()) return false;
  }
  return true;
}

void LOBBY2DB_SaveBagReq::Swap(LOBBY2DB_SaveBagReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(issavebag_, other->issavebag_);
    std::swap(curbagnum_, other->curbagnum_);
    std::swap(bag_, other->bag_);
    std::swap(seedbag_, other->seedbag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_SaveBagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_SaveBagReq_descriptor_;
  metadata.reflection = LOBBY2DB_SaveBagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_AddDiamondReq::kCmdIdFieldNumber;
const int LOBBY2DB_AddDiamondReq::kCharIdFieldNumber;
const int LOBBY2DB_AddDiamondReq::kAddDiamondFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_AddDiamondReq::LOBBY2DB_AddDiamondReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_AddDiamondReq)
}

void LOBBY2DB_AddDiamondReq::InitAsDefaultInstance() {
}

LOBBY2DB_AddDiamondReq::LOBBY2DB_AddDiamondReq(const LOBBY2DB_AddDiamondReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_AddDiamondReq)
}

void LOBBY2DB_AddDiamondReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300005;
  charid_ = GOOGLE_ULONGLONG(0);
  adddiamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_AddDiamondReq::~LOBBY2DB_AddDiamondReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_AddDiamondReq)
  SharedDtor();
}

void LOBBY2DB_AddDiamondReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_AddDiamondReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_AddDiamondReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_AddDiamondReq_descriptor_;
}

const LOBBY2DB_AddDiamondReq& LOBBY2DB_AddDiamondReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_AddDiamondReq* LOBBY2DB_AddDiamondReq::default_instance_ = NULL;

LOBBY2DB_AddDiamondReq* LOBBY2DB_AddDiamondReq::New() const {
  return new LOBBY2DB_AddDiamondReq;
}

void LOBBY2DB_AddDiamondReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmdid_ = 300005;
    charid_ = GOOGLE_ULONGLONG(0);
    adddiamond_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_AddDiamondReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_AddDiamondReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_ADDDIAMOND_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addDiamond;
        break;
      }

      // optional uint32 addDiamond = 3;
      case 3: {
        if (tag == 24) {
         parse_addDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adddiamond_)));
          set_has_adddiamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_AddDiamondReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_AddDiamondReq)
  return false;
#undef DO_
}

void LOBBY2DB_AddDiamondReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_AddDiamondReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_ADDDIAMOND_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional uint32 addDiamond = 3;
  if (has_adddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->adddiamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_AddDiamondReq)
}

::google::protobuf::uint8* LOBBY2DB_AddDiamondReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_AddDiamondReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_ADDDIAMOND_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional uint32 addDiamond = 3;
  if (has_adddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->adddiamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_AddDiamondReq)
  return target;
}

int LOBBY2DB_AddDiamondReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_ADDDIAMOND_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 addDiamond = 3;
    if (has_adddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adddiamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_AddDiamondReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_AddDiamondReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_AddDiamondReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_AddDiamondReq::MergeFrom(const LOBBY2DB_AddDiamondReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_adddiamond()) {
      set_adddiamond(from.adddiamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_AddDiamondReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_AddDiamondReq::CopyFrom(const LOBBY2DB_AddDiamondReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_AddDiamondReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LOBBY2DB_AddDiamondReq::Swap(LOBBY2DB_AddDiamondReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(adddiamond_, other->adddiamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_AddDiamondReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_AddDiamondReq_descriptor_;
  metadata.reflection = LOBBY2DB_AddDiamondReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_ChangeNameCheckReq::kCmdIdFieldNumber;
const int LOBBY2DB_ChangeNameCheckReq::kCharIdFieldNumber;
const int LOBBY2DB_ChangeNameCheckReq::kNewNameFieldNumber;
const int LOBBY2DB_ChangeNameCheckReq::kCmdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_ChangeNameCheckReq::LOBBY2DB_ChangeNameCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_ChangeNameCheckReq)
}

void LOBBY2DB_ChangeNameCheckReq::InitAsDefaultInstance() {
}

LOBBY2DB_ChangeNameCheckReq::LOBBY2DB_ChangeNameCheckReq(const LOBBY2DB_ChangeNameCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_ChangeNameCheckReq)
}

void LOBBY2DB_ChangeNameCheckReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 300007;
  charid_ = GOOGLE_ULONGLONG(0);
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_ChangeNameCheckReq::~LOBBY2DB_ChangeNameCheckReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_ChangeNameCheckReq)
  SharedDtor();
}

void LOBBY2DB_ChangeNameCheckReq::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void LOBBY2DB_ChangeNameCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_ChangeNameCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_ChangeNameCheckReq_descriptor_;
}

const LOBBY2DB_ChangeNameCheckReq& LOBBY2DB_ChangeNameCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_ChangeNameCheckReq* LOBBY2DB_ChangeNameCheckReq::default_instance_ = NULL;

LOBBY2DB_ChangeNameCheckReq* LOBBY2DB_ChangeNameCheckReq::New() const {
  return new LOBBY2DB_ChangeNameCheckReq;
}

void LOBBY2DB_ChangeNameCheckReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmdid_ = 300007;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newname_->clear();
      }
    }
    cmd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_ChangeNameCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_ChangeNameCheckReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CHANGE_NAME_CHECK_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_newName;
        break;
      }

      // required bytes newName = 3;
      case 3: {
        if (tag == 26) {
         parse_newName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_newname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cmd;
        break;
      }

      // required uint32 cmd = 4;
      case 4: {
        if (tag == 32) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_ChangeNameCheckReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_ChangeNameCheckReq)
  return false;
#undef DO_
}

void LOBBY2DB_ChangeNameCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_ChangeNameCheckReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CHANGE_NAME_CHECK_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required bytes newName = 3;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->newname(), output);
  }

  // required uint32 cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_ChangeNameCheckReq)
}

::google::protobuf::uint8* LOBBY2DB_ChangeNameCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_ChangeNameCheckReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CHANGE_NAME_CHECK_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required bytes newName = 3;
  if (has_newname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->newname(), target);
  }

  // required uint32 cmd = 4;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_ChangeNameCheckReq)
  return target;
}

int LOBBY2DB_ChangeNameCheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CHANGE_NAME_CHECK_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bytes newName = 3;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->newname());
    }

    // required uint32 cmd = 4;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_ChangeNameCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_ChangeNameCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_ChangeNameCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_ChangeNameCheckReq::MergeFrom(const LOBBY2DB_ChangeNameCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_ChangeNameCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_ChangeNameCheckReq::CopyFrom(const LOBBY2DB_ChangeNameCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_ChangeNameCheckReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void LOBBY2DB_ChangeNameCheckReq::Swap(LOBBY2DB_ChangeNameCheckReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(newname_, other->newname_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_ChangeNameCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_ChangeNameCheckReq_descriptor_;
  metadata.reflection = LOBBY2DB_ChangeNameCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_ChangeNameCheckRet::kCmdIdFieldNumber;
const int DB2LOBBY_ChangeNameCheckRet::kRetFieldNumber;
const int DB2LOBBY_ChangeNameCheckRet::kCharIdFieldNumber;
const int DB2LOBBY_ChangeNameCheckRet::kNewNameFieldNumber;
const int DB2LOBBY_ChangeNameCheckRet::kCmdFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_ChangeNameCheckRet::DB2LOBBY_ChangeNameCheckRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_ChangeNameCheckRet)
}

void DB2LOBBY_ChangeNameCheckRet::InitAsDefaultInstance() {
}

DB2LOBBY_ChangeNameCheckRet::DB2LOBBY_ChangeNameCheckRet(const DB2LOBBY_ChangeNameCheckRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_ChangeNameCheckRet)
}

void DB2LOBBY_ChangeNameCheckRet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 350006;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_ChangeNameCheckRet::~DB2LOBBY_ChangeNameCheckRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_ChangeNameCheckRet)
  SharedDtor();
}

void DB2LOBBY_ChangeNameCheckRet::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void DB2LOBBY_ChangeNameCheckRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_ChangeNameCheckRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_ChangeNameCheckRet_descriptor_;
}

const DB2LOBBY_ChangeNameCheckRet& DB2LOBBY_ChangeNameCheckRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_ChangeNameCheckRet* DB2LOBBY_ChangeNameCheckRet::default_instance_ = NULL;

DB2LOBBY_ChangeNameCheckRet* DB2LOBBY_ChangeNameCheckRet::New() const {
  return new DB2LOBBY_ChangeNameCheckRet;
}

void DB2LOBBY_ChangeNameCheckRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_ChangeNameCheckRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ret_, charid_);
    cmdid_ = 350006;
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newname_->clear();
      }
    }
    cmd_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_ChangeNameCheckRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_ChangeNameCheckRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CHANGE_NAME_CHECK_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charId;
        break;
      }

      // required uint64 charId = 3;
      case 3: {
        if (tag == 24) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_newName;
        break;
      }

      // required bytes newName = 4;
      case 4: {
        if (tag == 34) {
         parse_newName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_newname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cmd;
        break;
      }

      // required uint32 cmd = 5;
      case 5: {
        if (tag == 40) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_ChangeNameCheckRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_ChangeNameCheckRet)
  return false;
#undef DO_
}

void DB2LOBBY_ChangeNameCheckRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_ChangeNameCheckRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CHANGE_NAME_CHECK_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required bytes newName = 4;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->newname(), output);
  }

  // required uint32 cmd = 5;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_ChangeNameCheckRet)
}

::google::protobuf::uint8* DB2LOBBY_ChangeNameCheckRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_ChangeNameCheckRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CHANGE_NAME_CHECK_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required bytes newName = 4;
  if (has_newname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->newname(), target);
  }

  // required uint32 cmd = 5;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_ChangeNameCheckRet)
  return target;
}

int DB2LOBBY_ChangeNameCheckRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CHANGE_NAME_CHECK_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bytes newName = 4;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->newname());
    }

    // required uint32 cmd = 5;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_ChangeNameCheckRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_ChangeNameCheckRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_ChangeNameCheckRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_ChangeNameCheckRet::MergeFrom(const DB2LOBBY_ChangeNameCheckRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_ChangeNameCheckRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_ChangeNameCheckRet::CopyFrom(const DB2LOBBY_ChangeNameCheckRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_ChangeNameCheckRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void DB2LOBBY_ChangeNameCheckRet::Swap(DB2LOBBY_ChangeNameCheckRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(newname_, other->newname_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_ChangeNameCheckRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_ChangeNameCheckRet_descriptor_;
  metadata.reflection = DB2LOBBY_ChangeNameCheckRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DBLoadWorldReq::kCmdIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DBLoadWorldReq::LOBBY2DBLoadWorldReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DBLoadWorldReq)
}

void LOBBY2DBLoadWorldReq::InitAsDefaultInstance() {
}

LOBBY2DBLoadWorldReq::LOBBY2DBLoadWorldReq(const LOBBY2DBLoadWorldReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DBLoadWorldReq)
}

void LOBBY2DBLoadWorldReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350090;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DBLoadWorldReq::~LOBBY2DBLoadWorldReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DBLoadWorldReq)
  SharedDtor();
}

void LOBBY2DBLoadWorldReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DBLoadWorldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DBLoadWorldReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DBLoadWorldReq_descriptor_;
}

const LOBBY2DBLoadWorldReq& LOBBY2DBLoadWorldReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DBLoadWorldReq* LOBBY2DBLoadWorldReq::default_instance_ = NULL;

LOBBY2DBLoadWorldReq* LOBBY2DBLoadWorldReq::New() const {
  return new LOBBY2DBLoadWorldReq;
}

void LOBBY2DBLoadWorldReq::Clear() {
  cmdid_ = 350090;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DBLoadWorldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DBLoadWorldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_WORLD_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DBLoadWorldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DBLoadWorldReq)
  return false;
#undef DO_
}

void LOBBY2DBLoadWorldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DBLoadWorldReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_WORLD_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DBLoadWorldReq)
}

::google::protobuf::uint8* LOBBY2DBLoadWorldReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DBLoadWorldReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_WORLD_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DBLoadWorldReq)
  return target;
}

int LOBBY2DBLoadWorldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_WORLD_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DBLoadWorldReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DBLoadWorldReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DBLoadWorldReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DBLoadWorldReq::MergeFrom(const LOBBY2DBLoadWorldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DBLoadWorldReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DBLoadWorldReq::CopyFrom(const LOBBY2DBLoadWorldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DBLoadWorldReq::IsInitialized() const {

  return true;
}

void LOBBY2DBLoadWorldReq::Swap(LOBBY2DBLoadWorldReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DBLoadWorldReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DBLoadWorldReq_descriptor_;
  metadata.reflection = LOBBY2DBLoadWorldReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBYLoadWorldRet::kCmdIdFieldNumber;
const int DB2LOBBYLoadWorldRet::kRetFieldNumber;
const int DB2LOBBYLoadWorldRet::kWeekBoxIdFieldNumber;
const int DB2LOBBYLoadWorldRet::kDayBox1FieldNumber;
const int DB2LOBBYLoadWorldRet::kDayBox2FieldNumber;
const int DB2LOBBYLoadWorldRet::kDayBox3FieldNumber;
const int DB2LOBBYLoadWorldRet::kArenaHerosFieldNumber;
const int DB2LOBBYLoadWorldRet::kOpenServerTimeFieldNumber;
const int DB2LOBBYLoadWorldRet::kHalfBuyFieldNumber;
const int DB2LOBBYLoadWorldRet::kAchieveFieldNumber;
const int DB2LOBBYLoadWorldRet::kGlobalItemGotFieldNumber;
const int DB2LOBBYLoadWorldRet::kPasswordGotFieldNumber;
const int DB2LOBBYLoadWorldRet::kSevenDayRankFieldNumber;
const int DB2LOBBYLoadWorldRet::kOptFieldNumber;
const int DB2LOBBYLoadWorldRet::kBoxdropFieldNumber;
const int DB2LOBBYLoadWorldRet::kMailListFieldNumber;
const int DB2LOBBYLoadWorldRet::kAstrologyCountryFieldNumber;
const int DB2LOBBYLoadWorldRet::kAstrologyCountryNextTimeFieldNumber;
const int DB2LOBBYLoadWorldRet::kRebateCountFieldNumber;
const int DB2LOBBYLoadWorldRet::kHeroChangedTimeFieldNumber;
const int DB2LOBBYLoadWorldRet::kChatpasswdFieldNumber;
const int DB2LOBBYLoadWorldRet::kMaxRobotIdFieldNumber;
const int DB2LOBBYLoadWorldRet::kRobotNameFieldNumber;
const int DB2LOBBYLoadWorldRet::kRobotIdCollectionFieldNumber;
const int DB2LOBBYLoadWorldRet::kRobotIndexFieldNumber;
const int DB2LOBBYLoadWorldRet::kMonthcardFieldNumber;
const int DB2LOBBYLoadWorldRet::kHeroQualityChangedTimeFieldNumber;
#endif  // !_MSC_VER

DB2LOBBYLoadWorldRet::DB2LOBBYLoadWorldRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBYLoadWorldRet)
}

void DB2LOBBYLoadWorldRet::InitAsDefaultInstance() {
  halfbuy_ = const_cast< ::TgsProtocol::HalfBuy*>(&::TgsProtocol::HalfBuy::default_instance());
  achieve_ = const_cast< ::TgsProtocol::Achieve*>(&::TgsProtocol::Achieve::default_instance());
  opt_ = const_cast< ::TgsProtocol::OptGlobal*>(&::TgsProtocol::OptGlobal::default_instance());
}

DB2LOBBYLoadWorldRet::DB2LOBBYLoadWorldRet(const DB2LOBBYLoadWorldRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBYLoadWorldRet)
}

void DB2LOBBYLoadWorldRet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 350091;
  ret_ = 0u;
  weekboxid_ = 0u;
  daybox_1_ = 0u;
  daybox_2_ = 0u;
  daybox_3_ = 0u;
  arenaheros_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openservertime_ = 0u;
  halfbuy_ = NULL;
  achieve_ = NULL;
  globalitemgot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwordgot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sevendayrank_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opt_ = NULL;
  boxdrop_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  astrologycountry_ = 0u;
  astrologycountrynexttime_ = 0u;
  rebatecount_ = 0u;
  herochangedtime_ = 0u;
  maxrobotid_ = 0u;
  monthcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heroqualitychangedtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBYLoadWorldRet::~DB2LOBBYLoadWorldRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBYLoadWorldRet)
  SharedDtor();
}

void DB2LOBBYLoadWorldRet::SharedDtor() {
  if (arenaheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arenaheros_;
  }
  if (globalitemgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete globalitemgot_;
  }
  if (passwordgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwordgot_;
  }
  if (sevendayrank_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sevendayrank_;
  }
  if (boxdrop_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxdrop_;
  }
  if (monthcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete monthcard_;
  }
  if (this != default_instance_) {
    delete halfbuy_;
    delete achieve_;
    delete opt_;
  }
}

void DB2LOBBYLoadWorldRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBYLoadWorldRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBYLoadWorldRet_descriptor_;
}

const DB2LOBBYLoadWorldRet& DB2LOBBYLoadWorldRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBYLoadWorldRet* DB2LOBBYLoadWorldRet::default_instance_ = NULL;

DB2LOBBYLoadWorldRet* DB2LOBBYLoadWorldRet::New() const {
  return new DB2LOBBYLoadWorldRet;
}

void DB2LOBBYLoadWorldRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBYLoadWorldRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ret_, daybox_3_);
    cmdid_ = 350091;
    if (has_arenaheros()) {
      if (arenaheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        arenaheros_->clear();
      }
    }
    openservertime_ = 0u;
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_halfbuy()) {
      if (halfbuy_ != NULL) halfbuy_->::TgsProtocol::HalfBuy::Clear();
    }
    if (has_achieve()) {
      if (achieve_ != NULL) achieve_->::TgsProtocol::Achieve::Clear();
    }
    if (has_globalitemgot()) {
      if (globalitemgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        globalitemgot_->clear();
      }
    }
    if (has_passwordgot()) {
      if (passwordgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passwordgot_->clear();
      }
    }
    if (has_sevendayrank()) {
      if (sevendayrank_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sevendayrank_->clear();
      }
    }
    if (has_opt()) {
      if (opt_ != NULL) opt_->::TgsProtocol::OptGlobal::Clear();
    }
    if (has_boxdrop()) {
      if (boxdrop_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxdrop_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 3080192) {
    ZR_(astrologycountrynexttime_, rebatecount_);
    ZR_(herochangedtime_, maxrobotid_);
    astrologycountry_ = 0u;
  }
  if (_has_bits_[24 / 32] & 100663296) {
    if (has_monthcard()) {
      if (monthcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        monthcard_->clear();
      }
    }
    heroqualitychangedtime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  maillist_.Clear();
  chatpasswd_.Clear();
  robotname_.Clear();
  robotidcollection_.Clear();
  robotindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBYLoadWorldRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBYLoadWorldRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_WORLD_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weekBoxId;
        break;
      }

      // required uint32 weekBoxId = 3;
      case 3: {
        if (tag == 24) {
         parse_weekBoxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekboxid_)));
          set_has_weekboxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dayBox_1;
        break;
      }

      // required uint32 dayBox_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_dayBox_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daybox_1_)));
          set_has_daybox_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dayBox_2;
        break;
      }

      // required uint32 dayBox_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_dayBox_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daybox_2_)));
          set_has_daybox_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dayBox_3;
        break;
      }

      // required uint32 dayBox_3 = 6;
      case 6: {
        if (tag == 48) {
         parse_dayBox_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daybox_3_)));
          set_has_daybox_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_arenaHeros;
        break;
      }

      // optional bytes arenaHeros = 8;
      case 8: {
        if (tag == 66) {
         parse_arenaHeros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_arenaheros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_openServerTime;
        break;
      }

      // optional uint32 openServerTime = 9;
      case 9: {
        if (tag == 72) {
         parse_openServerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openservertime_)));
          set_has_openservertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_halfBuy;
        break;
      }

      // optional .TgsProtocol.HalfBuy halfBuy = 10;
      case 10: {
        if (tag == 82) {
         parse_halfBuy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_halfbuy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_achieve;
        break;
      }

      // optional .TgsProtocol.Achieve achieve = 11;
      case 11: {
        if (tag == 90) {
         parse_achieve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achieve()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_globalItemGot;
        break;
      }

      // optional string globalItemGot = 12;
      case 12: {
        if (tag == 98) {
         parse_globalItemGot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalitemgot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->globalitemgot().data(), this->globalitemgot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "globalitemgot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_passwordGot;
        break;
      }

      // optional string passwordGot = 13;
      case 13: {
        if (tag == 106) {
         parse_passwordGot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwordgot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwordgot().data(), this->passwordgot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passwordgot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_sevenDayRank;
        break;
      }

      // optional string sevenDayRank = 14;
      case 14: {
        if (tag == 114) {
         parse_sevenDayRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sevendayrank()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sevendayrank().data(), this->sevendayrank().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sevendayrank");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_opt;
        break;
      }

      // optional .TgsProtocol.OptGlobal opt = 15;
      case 15: {
        if (tag == 122) {
         parse_opt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_boxdrop;
        break;
      }

      // optional string boxdrop = 16;
      case 16: {
        if (tag == 130) {
         parse_boxdrop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxdrop()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxdrop().data(), this->boxdrop().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxdrop");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_mailList;
        break;
      }

      // repeated .TgsProtocol.DBMailInfo mailList = 17;
      case 17: {
        if (tag == 138) {
         parse_mailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_mailList;
        if (input->ExpectTag(144)) goto parse_AstrologyCountry;
        break;
      }

      // optional uint32 AstrologyCountry = 18;
      case 18: {
        if (tag == 144) {
         parse_AstrologyCountry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &astrologycountry_)));
          set_has_astrologycountry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_AstrologyCountryNextTime;
        break;
      }

      // optional uint32 AstrologyCountryNextTime = 19;
      case 19: {
        if (tag == 152) {
         parse_AstrologyCountryNextTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &astrologycountrynexttime_)));
          set_has_astrologycountrynexttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_rebateCount;
        break;
      }

      // optional uint32 rebateCount = 20;
      case 20: {
        if (tag == 160) {
         parse_rebateCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebatecount_)));
          set_has_rebatecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_heroChangedTime;
        break;
      }

      // optional uint32 heroChangedTime = 21;
      case 21: {
        if (tag == 168) {
         parse_heroChangedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herochangedtime_)));
          set_has_herochangedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_chatpasswd;
        break;
      }

      // repeated uint32 chatpasswd = 22;
      case 22: {
        if (tag == 176) {
         parse_chatpasswd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_chatpasswd())));
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chatpasswd())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_chatpasswd;
        if (input->ExpectTag(184)) goto parse_maxRobotId;
        break;
      }

      // optional uint32 maxRobotId = 23;
      case 23: {
        if (tag == 184) {
         parse_maxRobotId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxrobotid_)));
          set_has_maxrobotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_robotName;
        break;
      }

      // repeated string robotName = 24;
      case 24: {
        if (tag == 194) {
         parse_robotName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_robotname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robotname(this->robotname_size() - 1).data(),
            this->robotname(this->robotname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robotname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_robotName;
        if (input->ExpectTag(200)) goto parse_robotIdCollection;
        break;
      }

      // repeated uint64 robotIdCollection = 25;
      case 25: {
        if (tag == 200) {
         parse_robotIdCollection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 200, input, this->mutable_robotidcollection())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_robotidcollection())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_robotIdCollection;
        if (input->ExpectTag(208)) goto parse_robotIndex;
        break;
      }

      // repeated uint32 robotIndex = 26;
      case 26: {
        if (tag == 208) {
         parse_robotIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208, input, this->mutable_robotindex())));
        } else if (tag == 210) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_robotindex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_robotIndex;
        if (input->ExpectTag(218)) goto parse_monthcard;
        break;
      }

      // optional string monthcard = 27;
      case 27: {
        if (tag == 218) {
         parse_monthcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monthcard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monthcard().data(), this->monthcard().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "monthcard");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_heroQualityChangedTime;
        break;
      }

      // optional uint32 heroQualityChangedTime = 28;
      case 28: {
        if (tag == 224) {
         parse_heroQualityChangedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroqualitychangedtime_)));
          set_has_heroqualitychangedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBYLoadWorldRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBYLoadWorldRet)
  return false;
#undef DO_
}

void DB2LOBBYLoadWorldRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBYLoadWorldRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_WORLD_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint32 weekBoxId = 3;
  if (has_weekboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->weekboxid(), output);
  }

  // required uint32 dayBox_1 = 4;
  if (has_daybox_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->daybox_1(), output);
  }

  // required uint32 dayBox_2 = 5;
  if (has_daybox_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->daybox_2(), output);
  }

  // required uint32 dayBox_3 = 6;
  if (has_daybox_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->daybox_3(), output);
  }

  // optional bytes arenaHeros = 8;
  if (has_arenaheros()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->arenaheros(), output);
  }

  // optional uint32 openServerTime = 9;
  if (has_openservertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->openservertime(), output);
  }

  // optional .TgsProtocol.HalfBuy halfBuy = 10;
  if (has_halfbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->halfbuy(), output);
  }

  // optional .TgsProtocol.Achieve achieve = 11;
  if (has_achieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->achieve(), output);
  }

  // optional string globalItemGot = 12;
  if (has_globalitemgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->globalitemgot().data(), this->globalitemgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "globalitemgot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->globalitemgot(), output);
  }

  // optional string passwordGot = 13;
  if (has_passwordgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwordgot().data(), this->passwordgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwordgot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->passwordgot(), output);
  }

  // optional string sevenDayRank = 14;
  if (has_sevendayrank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sevendayrank().data(), this->sevendayrank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sevendayrank");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->sevendayrank(), output);
  }

  // optional .TgsProtocol.OptGlobal opt = 15;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->opt(), output);
  }

  // optional string boxdrop = 16;
  if (has_boxdrop()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxdrop().data(), this->boxdrop().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxdrop");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->boxdrop(), output);
  }

  // repeated .TgsProtocol.DBMailInfo mailList = 17;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->maillist(i), output);
  }

  // optional uint32 AstrologyCountry = 18;
  if (has_astrologycountry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->astrologycountry(), output);
  }

  // optional uint32 AstrologyCountryNextTime = 19;
  if (has_astrologycountrynexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->astrologycountrynexttime(), output);
  }

  // optional uint32 rebateCount = 20;
  if (has_rebatecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->rebatecount(), output);
  }

  // optional uint32 heroChangedTime = 21;
  if (has_herochangedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->herochangedtime(), output);
  }

  // repeated uint32 chatpasswd = 22;
  for (int i = 0; i < this->chatpasswd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->chatpasswd(i), output);
  }

  // optional uint32 maxRobotId = 23;
  if (has_maxrobotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->maxrobotid(), output);
  }

  // repeated string robotName = 24;
  for (int i = 0; i < this->robotname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->robotname(i).data(), this->robotname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "robotname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->robotname(i), output);
  }

  // repeated uint64 robotIdCollection = 25;
  for (int i = 0; i < this->robotidcollection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      25, this->robotidcollection(i), output);
  }

  // repeated uint32 robotIndex = 26;
  for (int i = 0; i < this->robotindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->robotindex(i), output);
  }

  // optional string monthcard = 27;
  if (has_monthcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monthcard().data(), this->monthcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monthcard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->monthcard(), output);
  }

  // optional uint32 heroQualityChangedTime = 28;
  if (has_heroqualitychangedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->heroqualitychangedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBYLoadWorldRet)
}

::google::protobuf::uint8* DB2LOBBYLoadWorldRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBYLoadWorldRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_WORLD_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint32 weekBoxId = 3;
  if (has_weekboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->weekboxid(), target);
  }

  // required uint32 dayBox_1 = 4;
  if (has_daybox_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->daybox_1(), target);
  }

  // required uint32 dayBox_2 = 5;
  if (has_daybox_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->daybox_2(), target);
  }

  // required uint32 dayBox_3 = 6;
  if (has_daybox_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->daybox_3(), target);
  }

  // optional bytes arenaHeros = 8;
  if (has_arenaheros()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->arenaheros(), target);
  }

  // optional uint32 openServerTime = 9;
  if (has_openservertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->openservertime(), target);
  }

  // optional .TgsProtocol.HalfBuy halfBuy = 10;
  if (has_halfbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->halfbuy(), target);
  }

  // optional .TgsProtocol.Achieve achieve = 11;
  if (has_achieve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->achieve(), target);
  }

  // optional string globalItemGot = 12;
  if (has_globalitemgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->globalitemgot().data(), this->globalitemgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "globalitemgot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->globalitemgot(), target);
  }

  // optional string passwordGot = 13;
  if (has_passwordgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwordgot().data(), this->passwordgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwordgot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->passwordgot(), target);
  }

  // optional string sevenDayRank = 14;
  if (has_sevendayrank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sevendayrank().data(), this->sevendayrank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sevendayrank");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->sevendayrank(), target);
  }

  // optional .TgsProtocol.OptGlobal opt = 15;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->opt(), target);
  }

  // optional string boxdrop = 16;
  if (has_boxdrop()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxdrop().data(), this->boxdrop().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxdrop");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->boxdrop(), target);
  }

  // repeated .TgsProtocol.DBMailInfo mailList = 17;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->maillist(i), target);
  }

  // optional uint32 AstrologyCountry = 18;
  if (has_astrologycountry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->astrologycountry(), target);
  }

  // optional uint32 AstrologyCountryNextTime = 19;
  if (has_astrologycountrynexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->astrologycountrynexttime(), target);
  }

  // optional uint32 rebateCount = 20;
  if (has_rebatecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->rebatecount(), target);
  }

  // optional uint32 heroChangedTime = 21;
  if (has_herochangedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->herochangedtime(), target);
  }

  // repeated uint32 chatpasswd = 22;
  for (int i = 0; i < this->chatpasswd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->chatpasswd(i), target);
  }

  // optional uint32 maxRobotId = 23;
  if (has_maxrobotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->maxrobotid(), target);
  }

  // repeated string robotName = 24;
  for (int i = 0; i < this->robotname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robotname(i).data(), this->robotname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robotname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(24, this->robotname(i), target);
  }

  // repeated uint64 robotIdCollection = 25;
  for (int i = 0; i < this->robotidcollection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(25, this->robotidcollection(i), target);
  }

  // repeated uint32 robotIndex = 26;
  for (int i = 0; i < this->robotindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(26, this->robotindex(i), target);
  }

  // optional string monthcard = 27;
  if (has_monthcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monthcard().data(), this->monthcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monthcard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->monthcard(), target);
  }

  // optional uint32 heroQualityChangedTime = 28;
  if (has_heroqualitychangedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->heroqualitychangedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBYLoadWorldRet)
  return target;
}

int DB2LOBBYLoadWorldRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_WORLD_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 weekBoxId = 3;
    if (has_weekboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekboxid());
    }

    // required uint32 dayBox_1 = 4;
    if (has_daybox_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daybox_1());
    }

    // required uint32 dayBox_2 = 5;
    if (has_daybox_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daybox_2());
    }

    // required uint32 dayBox_3 = 6;
    if (has_daybox_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daybox_3());
    }

    // optional bytes arenaHeros = 8;
    if (has_arenaheros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->arenaheros());
    }

    // optional uint32 openServerTime = 9;
    if (has_openservertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openservertime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TgsProtocol.HalfBuy halfBuy = 10;
    if (has_halfbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->halfbuy());
    }

    // optional .TgsProtocol.Achieve achieve = 11;
    if (has_achieve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achieve());
    }

    // optional string globalItemGot = 12;
    if (has_globalitemgot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalitemgot());
    }

    // optional string passwordGot = 13;
    if (has_passwordgot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwordgot());
    }

    // optional string sevenDayRank = 14;
    if (has_sevendayrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sevendayrank());
    }

    // optional .TgsProtocol.OptGlobal opt = 15;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opt());
    }

    // optional string boxdrop = 16;
    if (has_boxdrop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxdrop());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 AstrologyCountry = 18;
    if (has_astrologycountry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->astrologycountry());
    }

    // optional uint32 AstrologyCountryNextTime = 19;
    if (has_astrologycountrynexttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->astrologycountrynexttime());
    }

    // optional uint32 rebateCount = 20;
    if (has_rebatecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebatecount());
    }

    // optional uint32 heroChangedTime = 21;
    if (has_herochangedtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herochangedtime());
    }

    // optional uint32 maxRobotId = 23;
    if (has_maxrobotid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxrobotid());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional string monthcard = 27;
    if (has_monthcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monthcard());
    }

    // optional uint32 heroQualityChangedTime = 28;
    if (has_heroqualitychangedtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroqualitychangedtime());
    }

  }
  // repeated .TgsProtocol.DBMailInfo mailList = 17;
  total_size += 2 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  // repeated uint32 chatpasswd = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->chatpasswd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chatpasswd(i));
    }
    total_size += 2 * this->chatpasswd_size() + data_size;
  }

  // repeated string robotName = 24;
  total_size += 2 * this->robotname_size();
  for (int i = 0; i < this->robotname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->robotname(i));
  }

  // repeated uint64 robotIdCollection = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->robotidcollection_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->robotidcollection(i));
    }
    total_size += 2 * this->robotidcollection_size() + data_size;
  }

  // repeated uint32 robotIndex = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->robotindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->robotindex(i));
    }
    total_size += 2 * this->robotindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBYLoadWorldRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBYLoadWorldRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBYLoadWorldRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBYLoadWorldRet::MergeFrom(const DB2LOBBYLoadWorldRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  chatpasswd_.MergeFrom(from.chatpasswd_);
  robotname_.MergeFrom(from.robotname_);
  robotidcollection_.MergeFrom(from.robotidcollection_);
  robotindex_.MergeFrom(from.robotindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_weekboxid()) {
      set_weekboxid(from.weekboxid());
    }
    if (from.has_daybox_1()) {
      set_daybox_1(from.daybox_1());
    }
    if (from.has_daybox_2()) {
      set_daybox_2(from.daybox_2());
    }
    if (from.has_daybox_3()) {
      set_daybox_3(from.daybox_3());
    }
    if (from.has_arenaheros()) {
      set_arenaheros(from.arenaheros());
    }
    if (from.has_openservertime()) {
      set_openservertime(from.openservertime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_halfbuy()) {
      mutable_halfbuy()->::TgsProtocol::HalfBuy::MergeFrom(from.halfbuy());
    }
    if (from.has_achieve()) {
      mutable_achieve()->::TgsProtocol::Achieve::MergeFrom(from.achieve());
    }
    if (from.has_globalitemgot()) {
      set_globalitemgot(from.globalitemgot());
    }
    if (from.has_passwordgot()) {
      set_passwordgot(from.passwordgot());
    }
    if (from.has_sevendayrank()) {
      set_sevendayrank(from.sevendayrank());
    }
    if (from.has_opt()) {
      mutable_opt()->::TgsProtocol::OptGlobal::MergeFrom(from.opt());
    }
    if (from.has_boxdrop()) {
      set_boxdrop(from.boxdrop());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_astrologycountry()) {
      set_astrologycountry(from.astrologycountry());
    }
    if (from.has_astrologycountrynexttime()) {
      set_astrologycountrynexttime(from.astrologycountrynexttime());
    }
    if (from.has_rebatecount()) {
      set_rebatecount(from.rebatecount());
    }
    if (from.has_herochangedtime()) {
      set_herochangedtime(from.herochangedtime());
    }
    if (from.has_maxrobotid()) {
      set_maxrobotid(from.maxrobotid());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_monthcard()) {
      set_monthcard(from.monthcard());
    }
    if (from.has_heroqualitychangedtime()) {
      set_heroqualitychangedtime(from.heroqualitychangedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBYLoadWorldRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBYLoadWorldRet::CopyFrom(const DB2LOBBYLoadWorldRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBYLoadWorldRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  if (has_halfbuy()) {
    if (!this->halfbuy().IsInitialized()) return false;
  }
  if (has_achieve()) {
    if (!this->achieve().IsInitialized()) return false;
  }
  if (has_opt()) {
    if (!this->opt().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->maillist())) return false;
  return true;
}

void DB2LOBBYLoadWorldRet::Swap(DB2LOBBYLoadWorldRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(weekboxid_, other->weekboxid_);
    std::swap(daybox_1_, other->daybox_1_);
    std::swap(daybox_2_, other->daybox_2_);
    std::swap(daybox_3_, other->daybox_3_);
    std::swap(arenaheros_, other->arenaheros_);
    std::swap(openservertime_, other->openservertime_);
    std::swap(halfbuy_, other->halfbuy_);
    std::swap(achieve_, other->achieve_);
    std::swap(globalitemgot_, other->globalitemgot_);
    std::swap(passwordgot_, other->passwordgot_);
    std::swap(sevendayrank_, other->sevendayrank_);
    std::swap(opt_, other->opt_);
    std::swap(boxdrop_, other->boxdrop_);
    maillist_.Swap(&other->maillist_);
    std::swap(astrologycountry_, other->astrologycountry_);
    std::swap(astrologycountrynexttime_, other->astrologycountrynexttime_);
    std::swap(rebatecount_, other->rebatecount_);
    std::swap(herochangedtime_, other->herochangedtime_);
    chatpasswd_.Swap(&other->chatpasswd_);
    std::swap(maxrobotid_, other->maxrobotid_);
    robotname_.Swap(&other->robotname_);
    robotidcollection_.Swap(&other->robotidcollection_);
    robotindex_.Swap(&other->robotindex_);
    std::swap(monthcard_, other->monthcard_);
    std::swap(heroqualitychangedtime_, other->heroqualitychangedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBYLoadWorldRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBYLoadWorldRet_descriptor_;
  metadata.reflection = DB2LOBBYLoadWorldRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_Server::kCmdIdFieldNumber;
const int DB2LOBBY_Server::kRetFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_Server::DB2LOBBY_Server()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_Server)
}

void DB2LOBBY_Server::InitAsDefaultInstance() {
}

DB2LOBBY_Server::DB2LOBBY_Server(const DB2LOBBY_Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_Server)
}

void DB2LOBBY_Server::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350011;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_Server::~DB2LOBBY_Server() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_Server)
  SharedDtor();
}

void DB2LOBBY_Server::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_Server_descriptor_;
}

const DB2LOBBY_Server& DB2LOBBY_Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_Server* DB2LOBBY_Server::default_instance_ = NULL;

DB2LOBBY_Server* DB2LOBBY_Server::New() const {
  return new DB2LOBBY_Server;
}

void DB2LOBBY_Server::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 350011;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_Server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SERVER];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_Server)
  return false;
#undef DO_
}

void DB2LOBBY_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_Server)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SERVER];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_Server)
}

::google::protobuf::uint8* DB2LOBBY_Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_Server)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SERVER];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_Server)
  return target;
}

int DB2LOBBY_Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SERVER];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_Server::MergeFrom(const DB2LOBBY_Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_Server::CopyFrom(const DB2LOBBY_Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void DB2LOBBY_Server::Swap(DB2LOBBY_Server* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_Server_descriptor_;
  metadata.reflection = DB2LOBBY_Server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateSupremeHotBox::kCmdIdFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kWeekBoxIdFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kDayBox1FieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kDayBox2FieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kDayBox3FieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kOpenServerTimeFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kHalfBuyFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kAchieveFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kGlobalItemGotFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kPasswordGotFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kSevenDayRankFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kOptFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kBoxdropFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kAstrologyCountryFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kAstrologyCountryNextTimeFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kRebateCountFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kHeroChangedTimeFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kChatpasswdFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kMonthcardFieldNumber;
const int LOBBY2DB_UpdateSupremeHotBox::kHeroQualityChangedTimeFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateSupremeHotBox::LOBBY2DB_UpdateSupremeHotBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateSupremeHotBox)
}

void LOBBY2DB_UpdateSupremeHotBox::InitAsDefaultInstance() {
  halfbuy_ = const_cast< ::TgsProtocol::HalfBuy*>(&::TgsProtocol::HalfBuy::default_instance());
  achieve_ = const_cast< ::TgsProtocol::Achieve*>(&::TgsProtocol::Achieve::default_instance());
  opt_ = const_cast< ::TgsProtocol::OptGlobal*>(&::TgsProtocol::OptGlobal::default_instance());
}

LOBBY2DB_UpdateSupremeHotBox::LOBBY2DB_UpdateSupremeHotBox(const LOBBY2DB_UpdateSupremeHotBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateSupremeHotBox)
}

void LOBBY2DB_UpdateSupremeHotBox::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 300008;
  weekboxid_ = 0u;
  daybox_1_ = 0u;
  daybox_2_ = 0u;
  daybox_3_ = 0u;
  openservertime_ = 0u;
  halfbuy_ = NULL;
  achieve_ = NULL;
  globalitemgot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwordgot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sevendayrank_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opt_ = NULL;
  boxdrop_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  astrologycountry_ = 0u;
  astrologycountrynexttime_ = 0u;
  rebatecount_ = 0u;
  herochangedtime_ = 0u;
  monthcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heroqualitychangedtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateSupremeHotBox::~LOBBY2DB_UpdateSupremeHotBox() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateSupremeHotBox)
  SharedDtor();
}

void LOBBY2DB_UpdateSupremeHotBox::SharedDtor() {
  if (globalitemgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete globalitemgot_;
  }
  if (passwordgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwordgot_;
  }
  if (sevendayrank_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sevendayrank_;
  }
  if (boxdrop_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxdrop_;
  }
  if (monthcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete monthcard_;
  }
  if (this != default_instance_) {
    delete halfbuy_;
    delete achieve_;
    delete opt_;
  }
}

void LOBBY2DB_UpdateSupremeHotBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateSupremeHotBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateSupremeHotBox_descriptor_;
}

const LOBBY2DB_UpdateSupremeHotBox& LOBBY2DB_UpdateSupremeHotBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateSupremeHotBox* LOBBY2DB_UpdateSupremeHotBox::default_instance_ = NULL;

LOBBY2DB_UpdateSupremeHotBox* LOBBY2DB_UpdateSupremeHotBox::New() const {
  return new LOBBY2DB_UpdateSupremeHotBox;
}

void LOBBY2DB_UpdateSupremeHotBox::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_UpdateSupremeHotBox*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(weekboxid_, openservertime_);
    cmdid_ = 300008;
    if (has_halfbuy()) {
      if (halfbuy_ != NULL) halfbuy_->::TgsProtocol::HalfBuy::Clear();
    }
    if (has_achieve()) {
      if (achieve_ != NULL) achieve_->::TgsProtocol::Achieve::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(astrologycountry_, rebatecount_);
    if (has_globalitemgot()) {
      if (globalitemgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        globalitemgot_->clear();
      }
    }
    if (has_passwordgot()) {
      if (passwordgot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passwordgot_->clear();
      }
    }
    if (has_sevendayrank()) {
      if (sevendayrank_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sevendayrank_->clear();
      }
    }
    if (has_opt()) {
      if (opt_ != NULL) opt_->::TgsProtocol::OptGlobal::Clear();
    }
    if (has_boxdrop()) {
      if (boxdrop_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxdrop_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 851968) {
    herochangedtime_ = 0u;
    if (has_monthcard()) {
      if (monthcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        monthcard_->clear();
      }
    }
    heroqualitychangedtime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  chatpasswd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateSupremeHotBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateSupremeHotBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_SUPREMEHOTBOX];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weekBoxId;
        break;
      }

      // required uint32 weekBoxId = 2;
      case 2: {
        if (tag == 16) {
         parse_weekBoxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekboxid_)));
          set_has_weekboxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dayBox_1;
        break;
      }

      // required uint32 dayBox_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_dayBox_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daybox_1_)));
          set_has_daybox_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dayBox_2;
        break;
      }

      // required uint32 dayBox_2 = 4;
      case 4: {
        if (tag == 32) {
         parse_dayBox_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daybox_2_)));
          set_has_daybox_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dayBox_3;
        break;
      }

      // required uint32 dayBox_3 = 5;
      case 5: {
        if (tag == 40) {
         parse_dayBox_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daybox_3_)));
          set_has_daybox_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_openServerTime;
        break;
      }

      // required uint32 openServerTime = 6;
      case 6: {
        if (tag == 48) {
         parse_openServerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openservertime_)));
          set_has_openservertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_halfBuy;
        break;
      }

      // optional .TgsProtocol.HalfBuy halfBuy = 7;
      case 7: {
        if (tag == 58) {
         parse_halfBuy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_halfbuy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_achieve;
        break;
      }

      // optional .TgsProtocol.Achieve achieve = 8;
      case 8: {
        if (tag == 66) {
         parse_achieve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achieve()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_globalItemGot;
        break;
      }

      // optional string globalItemGot = 9;
      case 9: {
        if (tag == 74) {
         parse_globalItemGot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalitemgot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->globalitemgot().data(), this->globalitemgot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "globalitemgot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_passwordGot;
        break;
      }

      // optional string passwordGot = 10;
      case 10: {
        if (tag == 82) {
         parse_passwordGot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwordgot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwordgot().data(), this->passwordgot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passwordgot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sevenDayRank;
        break;
      }

      // optional string sevenDayRank = 11;
      case 11: {
        if (tag == 90) {
         parse_sevenDayRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sevendayrank()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sevendayrank().data(), this->sevendayrank().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sevendayrank");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_opt;
        break;
      }

      // optional .TgsProtocol.OptGlobal opt = 12;
      case 12: {
        if (tag == 98) {
         parse_opt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_boxdrop;
        break;
      }

      // optional string boxdrop = 13;
      case 13: {
        if (tag == 106) {
         parse_boxdrop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxdrop()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxdrop().data(), this->boxdrop().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxdrop");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_AstrologyCountry;
        break;
      }

      // optional uint32 AstrologyCountry = 14;
      case 14: {
        if (tag == 112) {
         parse_AstrologyCountry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &astrologycountry_)));
          set_has_astrologycountry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_AstrologyCountryNextTime;
        break;
      }

      // optional uint32 AstrologyCountryNextTime = 15;
      case 15: {
        if (tag == 120) {
         parse_AstrologyCountryNextTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &astrologycountrynexttime_)));
          set_has_astrologycountrynexttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_rebateCount;
        break;
      }

      // optional uint32 rebateCount = 16;
      case 16: {
        if (tag == 128) {
         parse_rebateCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebatecount_)));
          set_has_rebatecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_heroChangedTime;
        break;
      }

      // optional uint32 heroChangedTime = 17;
      case 17: {
        if (tag == 136) {
         parse_heroChangedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herochangedtime_)));
          set_has_herochangedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_chatpasswd;
        break;
      }

      // repeated uint32 chatpasswd = 18;
      case 18: {
        if (tag == 144) {
         parse_chatpasswd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_chatpasswd())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chatpasswd())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_chatpasswd;
        if (input->ExpectTag(154)) goto parse_monthcard;
        break;
      }

      // optional string monthcard = 19;
      case 19: {
        if (tag == 154) {
         parse_monthcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monthcard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monthcard().data(), this->monthcard().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "monthcard");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_heroQualityChangedTime;
        break;
      }

      // optional uint32 heroQualityChangedTime = 20;
      case 20: {
        if (tag == 160) {
         parse_heroQualityChangedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroqualitychangedtime_)));
          set_has_heroqualitychangedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateSupremeHotBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateSupremeHotBox)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateSupremeHotBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateSupremeHotBox)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_SUPREMEHOTBOX];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 weekBoxId = 2;
  if (has_weekboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weekboxid(), output);
  }

  // required uint32 dayBox_1 = 3;
  if (has_daybox_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->daybox_1(), output);
  }

  // required uint32 dayBox_2 = 4;
  if (has_daybox_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->daybox_2(), output);
  }

  // required uint32 dayBox_3 = 5;
  if (has_daybox_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->daybox_3(), output);
  }

  // required uint32 openServerTime = 6;
  if (has_openservertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->openservertime(), output);
  }

  // optional .TgsProtocol.HalfBuy halfBuy = 7;
  if (has_halfbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->halfbuy(), output);
  }

  // optional .TgsProtocol.Achieve achieve = 8;
  if (has_achieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->achieve(), output);
  }

  // optional string globalItemGot = 9;
  if (has_globalitemgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->globalitemgot().data(), this->globalitemgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "globalitemgot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->globalitemgot(), output);
  }

  // optional string passwordGot = 10;
  if (has_passwordgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwordgot().data(), this->passwordgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwordgot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->passwordgot(), output);
  }

  // optional string sevenDayRank = 11;
  if (has_sevendayrank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sevendayrank().data(), this->sevendayrank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sevendayrank");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sevendayrank(), output);
  }

  // optional .TgsProtocol.OptGlobal opt = 12;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->opt(), output);
  }

  // optional string boxdrop = 13;
  if (has_boxdrop()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxdrop().data(), this->boxdrop().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxdrop");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->boxdrop(), output);
  }

  // optional uint32 AstrologyCountry = 14;
  if (has_astrologycountry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->astrologycountry(), output);
  }

  // optional uint32 AstrologyCountryNextTime = 15;
  if (has_astrologycountrynexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->astrologycountrynexttime(), output);
  }

  // optional uint32 rebateCount = 16;
  if (has_rebatecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->rebatecount(), output);
  }

  // optional uint32 heroChangedTime = 17;
  if (has_herochangedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->herochangedtime(), output);
  }

  // repeated uint32 chatpasswd = 18;
  for (int i = 0; i < this->chatpasswd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->chatpasswd(i), output);
  }

  // optional string monthcard = 19;
  if (has_monthcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monthcard().data(), this->monthcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monthcard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->monthcard(), output);
  }

  // optional uint32 heroQualityChangedTime = 20;
  if (has_heroqualitychangedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->heroqualitychangedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateSupremeHotBox)
}

::google::protobuf::uint8* LOBBY2DB_UpdateSupremeHotBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateSupremeHotBox)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_SUPREMEHOTBOX];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 weekBoxId = 2;
  if (has_weekboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weekboxid(), target);
  }

  // required uint32 dayBox_1 = 3;
  if (has_daybox_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->daybox_1(), target);
  }

  // required uint32 dayBox_2 = 4;
  if (has_daybox_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->daybox_2(), target);
  }

  // required uint32 dayBox_3 = 5;
  if (has_daybox_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->daybox_3(), target);
  }

  // required uint32 openServerTime = 6;
  if (has_openservertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->openservertime(), target);
  }

  // optional .TgsProtocol.HalfBuy halfBuy = 7;
  if (has_halfbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->halfbuy(), target);
  }

  // optional .TgsProtocol.Achieve achieve = 8;
  if (has_achieve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->achieve(), target);
  }

  // optional string globalItemGot = 9;
  if (has_globalitemgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->globalitemgot().data(), this->globalitemgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "globalitemgot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->globalitemgot(), target);
  }

  // optional string passwordGot = 10;
  if (has_passwordgot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwordgot().data(), this->passwordgot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwordgot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->passwordgot(), target);
  }

  // optional string sevenDayRank = 11;
  if (has_sevendayrank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sevendayrank().data(), this->sevendayrank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sevendayrank");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sevendayrank(), target);
  }

  // optional .TgsProtocol.OptGlobal opt = 12;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->opt(), target);
  }

  // optional string boxdrop = 13;
  if (has_boxdrop()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxdrop().data(), this->boxdrop().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxdrop");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->boxdrop(), target);
  }

  // optional uint32 AstrologyCountry = 14;
  if (has_astrologycountry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->astrologycountry(), target);
  }

  // optional uint32 AstrologyCountryNextTime = 15;
  if (has_astrologycountrynexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->astrologycountrynexttime(), target);
  }

  // optional uint32 rebateCount = 16;
  if (has_rebatecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->rebatecount(), target);
  }

  // optional uint32 heroChangedTime = 17;
  if (has_herochangedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->herochangedtime(), target);
  }

  // repeated uint32 chatpasswd = 18;
  for (int i = 0; i < this->chatpasswd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->chatpasswd(i), target);
  }

  // optional string monthcard = 19;
  if (has_monthcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monthcard().data(), this->monthcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monthcard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->monthcard(), target);
  }

  // optional uint32 heroQualityChangedTime = 20;
  if (has_heroqualitychangedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->heroqualitychangedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateSupremeHotBox)
  return target;
}

int LOBBY2DB_UpdateSupremeHotBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_SUPREMEHOTBOX];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 weekBoxId = 2;
    if (has_weekboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekboxid());
    }

    // required uint32 dayBox_1 = 3;
    if (has_daybox_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daybox_1());
    }

    // required uint32 dayBox_2 = 4;
    if (has_daybox_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daybox_2());
    }

    // required uint32 dayBox_3 = 5;
    if (has_daybox_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daybox_3());
    }

    // required uint32 openServerTime = 6;
    if (has_openservertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openservertime());
    }

    // optional .TgsProtocol.HalfBuy halfBuy = 7;
    if (has_halfbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->halfbuy());
    }

    // optional .TgsProtocol.Achieve achieve = 8;
    if (has_achieve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achieve());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string globalItemGot = 9;
    if (has_globalitemgot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalitemgot());
    }

    // optional string passwordGot = 10;
    if (has_passwordgot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwordgot());
    }

    // optional string sevenDayRank = 11;
    if (has_sevendayrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sevendayrank());
    }

    // optional .TgsProtocol.OptGlobal opt = 12;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opt());
    }

    // optional string boxdrop = 13;
    if (has_boxdrop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxdrop());
    }

    // optional uint32 AstrologyCountry = 14;
    if (has_astrologycountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->astrologycountry());
    }

    // optional uint32 AstrologyCountryNextTime = 15;
    if (has_astrologycountrynexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->astrologycountrynexttime());
    }

    // optional uint32 rebateCount = 16;
    if (has_rebatecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebatecount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 heroChangedTime = 17;
    if (has_herochangedtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herochangedtime());
    }

    // optional string monthcard = 19;
    if (has_monthcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monthcard());
    }

    // optional uint32 heroQualityChangedTime = 20;
    if (has_heroqualitychangedtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroqualitychangedtime());
    }

  }
  // repeated uint32 chatpasswd = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->chatpasswd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chatpasswd(i));
    }
    total_size += 2 * this->chatpasswd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateSupremeHotBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateSupremeHotBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateSupremeHotBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateSupremeHotBox::MergeFrom(const LOBBY2DB_UpdateSupremeHotBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatpasswd_.MergeFrom(from.chatpasswd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_weekboxid()) {
      set_weekboxid(from.weekboxid());
    }
    if (from.has_daybox_1()) {
      set_daybox_1(from.daybox_1());
    }
    if (from.has_daybox_2()) {
      set_daybox_2(from.daybox_2());
    }
    if (from.has_daybox_3()) {
      set_daybox_3(from.daybox_3());
    }
    if (from.has_openservertime()) {
      set_openservertime(from.openservertime());
    }
    if (from.has_halfbuy()) {
      mutable_halfbuy()->::TgsProtocol::HalfBuy::MergeFrom(from.halfbuy());
    }
    if (from.has_achieve()) {
      mutable_achieve()->::TgsProtocol::Achieve::MergeFrom(from.achieve());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_globalitemgot()) {
      set_globalitemgot(from.globalitemgot());
    }
    if (from.has_passwordgot()) {
      set_passwordgot(from.passwordgot());
    }
    if (from.has_sevendayrank()) {
      set_sevendayrank(from.sevendayrank());
    }
    if (from.has_opt()) {
      mutable_opt()->::TgsProtocol::OptGlobal::MergeFrom(from.opt());
    }
    if (from.has_boxdrop()) {
      set_boxdrop(from.boxdrop());
    }
    if (from.has_astrologycountry()) {
      set_astrologycountry(from.astrologycountry());
    }
    if (from.has_astrologycountrynexttime()) {
      set_astrologycountrynexttime(from.astrologycountrynexttime());
    }
    if (from.has_rebatecount()) {
      set_rebatecount(from.rebatecount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_herochangedtime()) {
      set_herochangedtime(from.herochangedtime());
    }
    if (from.has_monthcard()) {
      set_monthcard(from.monthcard());
    }
    if (from.has_heroqualitychangedtime()) {
      set_heroqualitychangedtime(from.heroqualitychangedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateSupremeHotBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateSupremeHotBox::CopyFrom(const LOBBY2DB_UpdateSupremeHotBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateSupremeHotBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  if (has_halfbuy()) {
    if (!this->halfbuy().IsInitialized()) return false;
  }
  if (has_achieve()) {
    if (!this->achieve().IsInitialized()) return false;
  }
  if (has_opt()) {
    if (!this->opt().IsInitialized()) return false;
  }
  return true;
}

void LOBBY2DB_UpdateSupremeHotBox::Swap(LOBBY2DB_UpdateSupremeHotBox* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(weekboxid_, other->weekboxid_);
    std::swap(daybox_1_, other->daybox_1_);
    std::swap(daybox_2_, other->daybox_2_);
    std::swap(daybox_3_, other->daybox_3_);
    std::swap(openservertime_, other->openservertime_);
    std::swap(halfbuy_, other->halfbuy_);
    std::swap(achieve_, other->achieve_);
    std::swap(globalitemgot_, other->globalitemgot_);
    std::swap(passwordgot_, other->passwordgot_);
    std::swap(sevendayrank_, other->sevendayrank_);
    std::swap(opt_, other->opt_);
    std::swap(boxdrop_, other->boxdrop_);
    std::swap(astrologycountry_, other->astrologycountry_);
    std::swap(astrologycountrynexttime_, other->astrologycountrynexttime_);
    std::swap(rebatecount_, other->rebatecount_);
    std::swap(herochangedtime_, other->herochangedtime_);
    chatpasswd_.Swap(&other->chatpasswd_);
    std::swap(monthcard_, other->monthcard_);
    std::swap(heroqualitychangedtime_, other->heroqualitychangedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateSupremeHotBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateSupremeHotBox_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateSupremeHotBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateArenaRank::kCmdIdFieldNumber;
const int LOBBY2DB_UpdateArenaRank::kArenaHerosFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateArenaRank::LOBBY2DB_UpdateArenaRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateArenaRank)
}

void LOBBY2DB_UpdateArenaRank::InitAsDefaultInstance() {
}

LOBBY2DB_UpdateArenaRank::LOBBY2DB_UpdateArenaRank(const LOBBY2DB_UpdateArenaRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateArenaRank)
}

void LOBBY2DB_UpdateArenaRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 300012;
  arenaheros_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateArenaRank::~LOBBY2DB_UpdateArenaRank() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateArenaRank)
  SharedDtor();
}

void LOBBY2DB_UpdateArenaRank::SharedDtor() {
  if (arenaheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arenaheros_;
  }
  if (this != default_instance_) {
  }
}

void LOBBY2DB_UpdateArenaRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateArenaRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateArenaRank_descriptor_;
}

const LOBBY2DB_UpdateArenaRank& LOBBY2DB_UpdateArenaRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateArenaRank* LOBBY2DB_UpdateArenaRank::default_instance_ = NULL;

LOBBY2DB_UpdateArenaRank* LOBBY2DB_UpdateArenaRank::New() const {
  return new LOBBY2DB_UpdateArenaRank;
}

void LOBBY2DB_UpdateArenaRank::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 300012;
    if (has_arenaheros()) {
      if (arenaheros_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        arenaheros_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateArenaRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateArenaRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_ARENA_RANK];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arenaHeros;
        break;
      }

      // optional bytes arenaHeros = 2;
      case 2: {
        if (tag == 18) {
         parse_arenaHeros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_arenaheros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateArenaRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateArenaRank)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateArenaRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateArenaRank)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_ARENA_RANK];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // optional bytes arenaHeros = 2;
  if (has_arenaheros()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->arenaheros(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateArenaRank)
}

::google::protobuf::uint8* LOBBY2DB_UpdateArenaRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateArenaRank)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_ARENA_RANK];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // optional bytes arenaHeros = 2;
  if (has_arenaheros()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->arenaheros(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateArenaRank)
  return target;
}

int LOBBY2DB_UpdateArenaRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_ARENA_RANK];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional bytes arenaHeros = 2;
    if (has_arenaheros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->arenaheros());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateArenaRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateArenaRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateArenaRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateArenaRank::MergeFrom(const LOBBY2DB_UpdateArenaRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_arenaheros()) {
      set_arenaheros(from.arenaheros());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateArenaRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateArenaRank::CopyFrom(const LOBBY2DB_UpdateArenaRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateArenaRank::IsInitialized() const {

  return true;
}

void LOBBY2DB_UpdateArenaRank::Swap(LOBBY2DB_UpdateArenaRank* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(arenaheros_, other->arenaheros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateArenaRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateArenaRank_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateArenaRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateArenaLog::kCmdIdFieldNumber;
const int LOBBY2DB_UpdateArenaLog::kCharIdFieldNumber;
const int LOBBY2DB_UpdateArenaLog::kArenaLogFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateArenaLog::LOBBY2DB_UpdateArenaLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateArenaLog)
}

void LOBBY2DB_UpdateArenaLog::InitAsDefaultInstance() {
  arenalog_ = const_cast< ::TgsProtocol::DBArenaLog*>(&::TgsProtocol::DBArenaLog::default_instance());
}

LOBBY2DB_UpdateArenaLog::LOBBY2DB_UpdateArenaLog(const LOBBY2DB_UpdateArenaLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateArenaLog)
}

void LOBBY2DB_UpdateArenaLog::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300013;
  charid_ = GOOGLE_ULONGLONG(0);
  arenalog_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateArenaLog::~LOBBY2DB_UpdateArenaLog() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateArenaLog)
  SharedDtor();
}

void LOBBY2DB_UpdateArenaLog::SharedDtor() {
  if (this != default_instance_) {
    delete arenalog_;
  }
}

void LOBBY2DB_UpdateArenaLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateArenaLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateArenaLog_descriptor_;
}

const LOBBY2DB_UpdateArenaLog& LOBBY2DB_UpdateArenaLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateArenaLog* LOBBY2DB_UpdateArenaLog::default_instance_ = NULL;

LOBBY2DB_UpdateArenaLog* LOBBY2DB_UpdateArenaLog::New() const {
  return new LOBBY2DB_UpdateArenaLog;
}

void LOBBY2DB_UpdateArenaLog::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmdid_ = 300013;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_arenalog()) {
      if (arenalog_ != NULL) arenalog_->::TgsProtocol::DBArenaLog::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateArenaLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateArenaLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_ARENA_LOG];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_arenaLog;
        break;
      }

      // required .TgsProtocol.DBArenaLog arenaLog = 3;
      case 3: {
        if (tag == 26) {
         parse_arenaLog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arenalog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateArenaLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateArenaLog)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateArenaLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateArenaLog)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_ARENA_LOG];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required .TgsProtocol.DBArenaLog arenaLog = 3;
  if (has_arenalog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arenalog(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateArenaLog)
}

::google::protobuf::uint8* LOBBY2DB_UpdateArenaLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateArenaLog)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_ARENA_LOG];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required .TgsProtocol.DBArenaLog arenaLog = 3;
  if (has_arenalog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arenalog(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateArenaLog)
  return target;
}

int LOBBY2DB_UpdateArenaLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATE_ARENA_LOG];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required .TgsProtocol.DBArenaLog arenaLog = 3;
    if (has_arenalog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenalog());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateArenaLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateArenaLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateArenaLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateArenaLog::MergeFrom(const LOBBY2DB_UpdateArenaLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_arenalog()) {
      mutable_arenalog()->::TgsProtocol::DBArenaLog::MergeFrom(from.arenalog());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateArenaLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateArenaLog::CopyFrom(const LOBBY2DB_UpdateArenaLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateArenaLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_arenalog()) {
    if (!this->arenalog().IsInitialized()) return false;
  }
  return true;
}

void LOBBY2DB_UpdateArenaLog::Swap(LOBBY2DB_UpdateArenaLog* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(arenalog_, other->arenalog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateArenaLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateArenaLog_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateArenaLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_OfflineMail::kCmdIdFieldNumber;
const int LOBBY2DB_OfflineMail::kCharIdFieldNumber;
const int LOBBY2DB_OfflineMail::kMailinfoFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_OfflineMail::LOBBY2DB_OfflineMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_OfflineMail)
}

void LOBBY2DB_OfflineMail::InitAsDefaultInstance() {
  mailinfo_ = const_cast< ::TgsProtocol::DBMailInfo*>(&::TgsProtocol::DBMailInfo::default_instance());
}

LOBBY2DB_OfflineMail::LOBBY2DB_OfflineMail(const LOBBY2DB_OfflineMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_OfflineMail)
}

void LOBBY2DB_OfflineMail::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300014;
  charid_ = GOOGLE_ULONGLONG(0);
  mailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_OfflineMail::~LOBBY2DB_OfflineMail() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_OfflineMail)
  SharedDtor();
}

void LOBBY2DB_OfflineMail::SharedDtor() {
  if (this != default_instance_) {
    delete mailinfo_;
  }
}

void LOBBY2DB_OfflineMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_OfflineMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_OfflineMail_descriptor_;
}

const LOBBY2DB_OfflineMail& LOBBY2DB_OfflineMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_OfflineMail* LOBBY2DB_OfflineMail::default_instance_ = NULL;

LOBBY2DB_OfflineMail* LOBBY2DB_OfflineMail::New() const {
  return new LOBBY2DB_OfflineMail;
}

void LOBBY2DB_OfflineMail::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmdid_ = 300014;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_mailinfo()) {
      if (mailinfo_ != NULL) mailinfo_->::TgsProtocol::DBMailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_OfflineMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_OfflineMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_OFFLINE_MAIL];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mailinfo;
        break;
      }

      // required .TgsProtocol.DBMailInfo mailinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_mailinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_OfflineMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_OfflineMail)
  return false;
#undef DO_
}

void LOBBY2DB_OfflineMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_OfflineMail)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_OFFLINE_MAIL];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required .TgsProtocol.DBMailInfo mailinfo = 3;
  if (has_mailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mailinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_OfflineMail)
}

::google::protobuf::uint8* LOBBY2DB_OfflineMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_OfflineMail)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_OFFLINE_MAIL];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required .TgsProtocol.DBMailInfo mailinfo = 3;
  if (has_mailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mailinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_OfflineMail)
  return target;
}

int LOBBY2DB_OfflineMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_OFFLINE_MAIL];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required .TgsProtocol.DBMailInfo mailinfo = 3;
    if (has_mailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_OfflineMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_OfflineMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_OfflineMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_OfflineMail::MergeFrom(const LOBBY2DB_OfflineMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mailinfo()) {
      mutable_mailinfo()->::TgsProtocol::DBMailInfo::MergeFrom(from.mailinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_OfflineMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_OfflineMail::CopyFrom(const LOBBY2DB_OfflineMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_OfflineMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_mailinfo()) {
    if (!this->mailinfo().IsInitialized()) return false;
  }
  return true;
}

void LOBBY2DB_OfflineMail::Swap(LOBBY2DB_OfflineMail* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(mailinfo_, other->mailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_OfflineMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_OfflineMail_descriptor_;
  metadata.reflection = LOBBY2DB_OfflineMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_LoadOfflineMail::kCmdIdFieldNumber;
const int DB2LOBBY_LoadOfflineMail::kCharIdFieldNumber;
const int DB2LOBBY_LoadOfflineMail::kMailListFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_LoadOfflineMail::DB2LOBBY_LoadOfflineMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_LoadOfflineMail)
}

void DB2LOBBY_LoadOfflineMail::InitAsDefaultInstance() {
}

DB2LOBBY_LoadOfflineMail::DB2LOBBY_LoadOfflineMail(const DB2LOBBY_LoadOfflineMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_LoadOfflineMail)
}

void DB2LOBBY_LoadOfflineMail::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 360007;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_LoadOfflineMail::~DB2LOBBY_LoadOfflineMail() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_LoadOfflineMail)
  SharedDtor();
}

void DB2LOBBY_LoadOfflineMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_LoadOfflineMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_LoadOfflineMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_LoadOfflineMail_descriptor_;
}

const DB2LOBBY_LoadOfflineMail& DB2LOBBY_LoadOfflineMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_LoadOfflineMail* DB2LOBBY_LoadOfflineMail::default_instance_ = NULL;

DB2LOBBY_LoadOfflineMail* DB2LOBBY_LoadOfflineMail::New() const {
  return new DB2LOBBY_LoadOfflineMail;
}

void DB2LOBBY_LoadOfflineMail::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 360007;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_LoadOfflineMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_LoadOfflineMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADOFFLINE_MAIL];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mailList;
        break;
      }

      // repeated .TgsProtocol.DBMailInfo mailList = 3;
      case 3: {
        if (tag == 26) {
         parse_mailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mailList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_LoadOfflineMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_LoadOfflineMail)
  return false;
#undef DO_
}

void DB2LOBBY_LoadOfflineMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_LoadOfflineMail)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADOFFLINE_MAIL];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // repeated .TgsProtocol.DBMailInfo mailList = 3;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->maillist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_LoadOfflineMail)
}

::google::protobuf::uint8* DB2LOBBY_LoadOfflineMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_LoadOfflineMail)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADOFFLINE_MAIL];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // repeated .TgsProtocol.DBMailInfo mailList = 3;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->maillist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_LoadOfflineMail)
  return target;
}

int DB2LOBBY_LoadOfflineMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADOFFLINE_MAIL];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .TgsProtocol.DBMailInfo mailList = 3;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_LoadOfflineMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_LoadOfflineMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_LoadOfflineMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_LoadOfflineMail::MergeFrom(const DB2LOBBY_LoadOfflineMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_LoadOfflineMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_LoadOfflineMail::CopyFrom(const DB2LOBBY_LoadOfflineMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_LoadOfflineMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->maillist())) return false;
  return true;
}

void DB2LOBBY_LoadOfflineMail::Swap(DB2LOBBY_LoadOfflineMail* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    maillist_.Swap(&other->maillist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_LoadOfflineMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_LoadOfflineMail_descriptor_;
  metadata.reflection = DB2LOBBY_LoadOfflineMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_LoadOfflineMail::kCmdIdFieldNumber;
const int LOBBY2DB_LoadOfflineMail::kCharIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_LoadOfflineMail::LOBBY2DB_LoadOfflineMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_LoadOfflineMail)
}

void LOBBY2DB_LoadOfflineMail::InitAsDefaultInstance() {
}

LOBBY2DB_LoadOfflineMail::LOBBY2DB_LoadOfflineMail(const LOBBY2DB_LoadOfflineMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_LoadOfflineMail)
}

void LOBBY2DB_LoadOfflineMail::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 360006;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_LoadOfflineMail::~LOBBY2DB_LoadOfflineMail() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_LoadOfflineMail)
  SharedDtor();
}

void LOBBY2DB_LoadOfflineMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_LoadOfflineMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_LoadOfflineMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_LoadOfflineMail_descriptor_;
}

const LOBBY2DB_LoadOfflineMail& LOBBY2DB_LoadOfflineMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_LoadOfflineMail* LOBBY2DB_LoadOfflineMail::default_instance_ = NULL;

LOBBY2DB_LoadOfflineMail* LOBBY2DB_LoadOfflineMail::New() const {
  return new LOBBY2DB_LoadOfflineMail;
}

void LOBBY2DB_LoadOfflineMail::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 360006;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_LoadOfflineMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_LoadOfflineMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADOFFLINE_MAIL];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_LoadOfflineMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_LoadOfflineMail)
  return false;
#undef DO_
}

void LOBBY2DB_LoadOfflineMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_LoadOfflineMail)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADOFFLINE_MAIL];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_LoadOfflineMail)
}

::google::protobuf::uint8* LOBBY2DB_LoadOfflineMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_LoadOfflineMail)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADOFFLINE_MAIL];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_LoadOfflineMail)
  return target;
}

int LOBBY2DB_LoadOfflineMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADOFFLINE_MAIL];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_LoadOfflineMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_LoadOfflineMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_LoadOfflineMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_LoadOfflineMail::MergeFrom(const LOBBY2DB_LoadOfflineMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_LoadOfflineMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_LoadOfflineMail::CopyFrom(const LOBBY2DB_LoadOfflineMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_LoadOfflineMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LOBBY2DB_LoadOfflineMail::Swap(LOBBY2DB_LoadOfflineMail* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_LoadOfflineMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_LoadOfflineMail_descriptor_;
  metadata.reflection = LOBBY2DB_LoadOfflineMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_CheckTokenReq::kCmdIdFieldNumber;
const int LOBBY2DB_CheckTokenReq::kCharIdFieldNumber;
const int LOBBY2DB_CheckTokenReq::kDeviceNameFieldNumber;
const int LOBBY2DB_CheckTokenReq::kDeviceTypeFieldNumber;
const int LOBBY2DB_CheckTokenReq::kDeviceUidFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_CheckTokenReq::LOBBY2DB_CheckTokenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_CheckTokenReq)
}

void LOBBY2DB_CheckTokenReq::InitAsDefaultInstance() {
}

LOBBY2DB_CheckTokenReq::LOBBY2DB_CheckTokenReq(const LOBBY2DB_CheckTokenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_CheckTokenReq)
}

void LOBBY2DB_CheckTokenReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 300015;
  charid_ = GOOGLE_ULONGLONG(0);
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_CheckTokenReq::~LOBBY2DB_CheckTokenReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_CheckTokenReq)
  SharedDtor();
}

void LOBBY2DB_CheckTokenReq::SharedDtor() {
  if (devicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicename_;
  }
  if (devicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicetype_;
  }
  if (deviceuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceuid_;
  }
  if (this != default_instance_) {
  }
}

void LOBBY2DB_CheckTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_CheckTokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_CheckTokenReq_descriptor_;
}

const LOBBY2DB_CheckTokenReq& LOBBY2DB_CheckTokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_CheckTokenReq* LOBBY2DB_CheckTokenReq::default_instance_ = NULL;

LOBBY2DB_CheckTokenReq* LOBBY2DB_CheckTokenReq::New() const {
  return new LOBBY2DB_CheckTokenReq;
}

void LOBBY2DB_CheckTokenReq::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmdid_ = 300015;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicename_->clear();
      }
    }
    if (has_devicetype()) {
      if (devicetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicetype_->clear();
      }
    }
    if (has_deviceuid()) {
      if (deviceuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_CheckTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_CheckTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CHECKTOKEN_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceName;
        break;
      }

      // required bytes deviceName = 3;
      case 3: {
        if (tag == 26) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_deviceType;
        break;
      }

      // required bytes deviceType = 4;
      case 4: {
        if (tag == 34) {
         parse_deviceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicetype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_deviceUid;
        break;
      }

      // required bytes deviceUid = 5;
      case 5: {
        if (tag == 42) {
         parse_deviceUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_CheckTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_CheckTokenReq)
  return false;
#undef DO_
}

void LOBBY2DB_CheckTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_CheckTokenReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CHECKTOKEN_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required bytes deviceName = 3;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->devicename(), output);
  }

  // required bytes deviceType = 4;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->devicetype(), output);
  }

  // required bytes deviceUid = 5;
  if (has_deviceuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->deviceuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_CheckTokenReq)
}

::google::protobuf::uint8* LOBBY2DB_CheckTokenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_CheckTokenReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CHECKTOKEN_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required bytes deviceName = 3;
  if (has_devicename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->devicename(), target);
  }

  // required bytes deviceType = 4;
  if (has_devicetype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->devicetype(), target);
  }

  // required bytes deviceUid = 5;
  if (has_deviceuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->deviceuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_CheckTokenReq)
  return target;
}

int LOBBY2DB_CheckTokenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CHECKTOKEN_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bytes deviceName = 3;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicename());
    }

    // required bytes deviceType = 4;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicetype());
    }

    // required bytes deviceUid = 5;
    if (has_deviceuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deviceuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_CheckTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_CheckTokenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_CheckTokenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_CheckTokenReq::MergeFrom(const LOBBY2DB_CheckTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_deviceuid()) {
      set_deviceuid(from.deviceuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_CheckTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_CheckTokenReq::CopyFrom(const LOBBY2DB_CheckTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_CheckTokenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void LOBBY2DB_CheckTokenReq::Swap(LOBBY2DB_CheckTokenReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(devicename_, other->devicename_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(deviceuid_, other->deviceuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_CheckTokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_CheckTokenReq_descriptor_;
  metadata.reflection = LOBBY2DB_CheckTokenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_Server::kCmdIdFieldNumber;
const int LOBBY2DB_Server::kServerIdFieldNumber;
const int LOBBY2DB_Server::kLocalIpFieldNumber;
const int LOBBY2DB_Server::kPortFieldNumber;
const int LOBBY2DB_Server::kOnlineNumFieldNumber;
const int LOBBY2DB_Server::kVersionFieldNumber;
const int LOBBY2DB_Server::kNameFieldNumber;
const int LOBBY2DB_Server::kSourceIpFieldNumber;
const int LOBBY2DB_Server::kSourceDirFieldNumber;
const int LOBBY2DB_Server::kCanloginFieldNumber;
const int LOBBY2DB_Server::kStatusFieldNumber;
const int LOBBY2DB_Server::kSourceVersionFieldNumber;
const int LOBBY2DB_Server::kLoginStrategyIdFieldNumber;
const int LOBBY2DB_Server::kIpFieldNumber;
const int LOBBY2DB_Server::kCanRegisterFieldNumber;
const int LOBBY2DB_Server::kMergeTimesFieldNumber;
const int LOBBY2DB_Server::kLastMergetimeFieldNumber;
const int LOBBY2DB_Server::kCenterPortFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_Server::LOBBY2DB_Server()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_Server)
}

void LOBBY2DB_Server::InitAsDefaultInstance() {
}

LOBBY2DB_Server::LOBBY2DB_Server(const LOBBY2DB_Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_Server)
}

void LOBBY2DB_Server::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 300016;
  serverid_ = 0u;
  localip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  onlinenum_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcedir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canlogin_ = 0u;
  status_ = 0u;
  sourceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loginstrategyid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canregister_ = 0u;
  mergetimes_ = 0u;
  lastmergetime_ = 0u;
  centerport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_Server::~LOBBY2DB_Server() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_Server)
  SharedDtor();
}

void LOBBY2DB_Server::SharedDtor() {
  if (localip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localip_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (sourceip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceip_;
  }
  if (sourcedir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourcedir_;
  }
  if (sourceversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceversion_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void LOBBY2DB_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_Server_descriptor_;
}

const LOBBY2DB_Server& LOBBY2DB_Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_Server* LOBBY2DB_Server::default_instance_ = NULL;

LOBBY2DB_Server* LOBBY2DB_Server::New() const {
  return new LOBBY2DB_Server;
}

void LOBBY2DB_Server::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_Server*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(port_, onlinenum_);
    cmdid_ = 300016;
    serverid_ = 0u;
    if (has_localip()) {
      if (localip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        localip_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_sourceip()) {
      if (sourceip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourceip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(canlogin_, status_);
    ZR_(loginstrategyid_, mergetimes_);
    if (has_sourcedir()) {
      if (sourcedir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourcedir_->clear();
      }
    }
    if (has_sourceversion()) {
      if (sourceversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourceversion_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  ZR_(lastmergetime_, centerport_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_Server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SERVER];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverId;
        break;
      }

      // required uint32 serverId = 2;
      case 2: {
        if (tag == 16) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_localIp;
        break;
      }

      // required bytes localIp = 3;
      case 3: {
        if (tag == 26) {
         parse_localIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_localip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_onlineNum;
        break;
      }

      // optional uint32 onlineNum = 5;
      case 5: {
        if (tag == 40) {
         parse_onlineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinenum_)));
          set_has_onlinenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional bytes version = 6;
      case 6: {
        if (tag == 50) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sourceIp;
        break;
      }

      // optional string sourceIp = 8;
      case 8: {
        if (tag == 66) {
         parse_sourceIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourceip().data(), this->sourceip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourceip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sourceDir;
        break;
      }

      // optional string sourceDir = 9;
      case 9: {
        if (tag == 74) {
         parse_sourceDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcedir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourcedir().data(), this->sourcedir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourcedir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_canlogin;
        break;
      }

      // optional uint32 canlogin = 10;
      case 10: {
        if (tag == 80) {
         parse_canlogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canlogin_)));
          set_has_canlogin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_status;
        break;
      }

      // optional uint32 status = 11;
      case 11: {
        if (tag == 88) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sourceVersion;
        break;
      }

      // optional string sourceVersion = 12;
      case 12: {
        if (tag == 98) {
         parse_sourceVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourceversion().data(), this->sourceversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourceversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_loginStrategyId;
        break;
      }

      // optional uint32 loginStrategyId = 13;
      case 13: {
        if (tag == 104) {
         parse_loginStrategyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loginstrategyid_)));
          set_has_loginstrategyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_ip;
        break;
      }

      // optional bytes ip = 14;
      case 14: {
        if (tag == 114) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_canRegister;
        break;
      }

      // optional uint32 canRegister = 15;
      case 15: {
        if (tag == 120) {
         parse_canRegister:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canregister_)));
          set_has_canregister();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mergeTimes;
        break;
      }

      // optional uint32 mergeTimes = 16;
      case 16: {
        if (tag == 128) {
         parse_mergeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mergetimes_)));
          set_has_mergetimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_lastMergetime;
        break;
      }

      // optional uint32 lastMergetime = 17;
      case 17: {
        if (tag == 136) {
         parse_lastMergetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmergetime_)));
          set_has_lastmergetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_centerPort;
        break;
      }

      // optional uint32 centerPort = 18;
      case 18: {
        if (tag == 144) {
         parse_centerPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &centerport_)));
          set_has_centerport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_Server)
  return false;
#undef DO_
}

void LOBBY2DB_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_Server)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SERVER];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 serverId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required bytes localIp = 3;
  if (has_localip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->localip(), output);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // optional uint32 onlineNum = 5;
  if (has_onlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->onlinenum(), output);
  }

  // optional bytes version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->version(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional string sourceIp = 8;
  if (has_sourceip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceip().data(), this->sourceip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sourceip(), output);
  }

  // optional string sourceDir = 9;
  if (has_sourcedir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcedir().data(), this->sourcedir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourcedir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sourcedir(), output);
  }

  // optional uint32 canlogin = 10;
  if (has_canlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->canlogin(), output);
  }

  // optional uint32 status = 11;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->status(), output);
  }

  // optional string sourceVersion = 12;
  if (has_sourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceversion().data(), this->sourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sourceversion(), output);
  }

  // optional uint32 loginStrategyId = 13;
  if (has_loginstrategyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->loginstrategyid(), output);
  }

  // optional bytes ip = 14;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->ip(), output);
  }

  // optional uint32 canRegister = 15;
  if (has_canregister()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->canregister(), output);
  }

  // optional uint32 mergeTimes = 16;
  if (has_mergetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->mergetimes(), output);
  }

  // optional uint32 lastMergetime = 17;
  if (has_lastmergetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->lastmergetime(), output);
  }

  // optional uint32 centerPort = 18;
  if (has_centerport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->centerport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_Server)
}

::google::protobuf::uint8* LOBBY2DB_Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_Server)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SERVER];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 serverId = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required bytes localIp = 3;
  if (has_localip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->localip(), target);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // optional uint32 onlineNum = 5;
  if (has_onlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->onlinenum(), target);
  }

  // optional bytes version = 6;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->version(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional string sourceIp = 8;
  if (has_sourceip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceip().data(), this->sourceip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sourceip(), target);
  }

  // optional string sourceDir = 9;
  if (has_sourcedir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcedir().data(), this->sourcedir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourcedir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sourcedir(), target);
  }

  // optional uint32 canlogin = 10;
  if (has_canlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->canlogin(), target);
  }

  // optional uint32 status = 11;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->status(), target);
  }

  // optional string sourceVersion = 12;
  if (has_sourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceversion().data(), this->sourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sourceversion(), target);
  }

  // optional uint32 loginStrategyId = 13;
  if (has_loginstrategyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->loginstrategyid(), target);
  }

  // optional bytes ip = 14;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->ip(), target);
  }

  // optional uint32 canRegister = 15;
  if (has_canregister()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->canregister(), target);
  }

  // optional uint32 mergeTimes = 16;
  if (has_mergetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->mergetimes(), target);
  }

  // optional uint32 lastMergetime = 17;
  if (has_lastmergetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->lastmergetime(), target);
  }

  // optional uint32 centerPort = 18;
  if (has_centerport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->centerport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_Server)
  return target;
}

int LOBBY2DB_Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SERVER];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 serverId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required bytes localIp = 3;
    if (has_localip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->localip());
    }

    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 onlineNum = 5;
    if (has_onlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinenum());
    }

    // optional bytes version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string sourceIp = 8;
    if (has_sourceip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sourceDir = 9;
    if (has_sourcedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcedir());
    }

    // optional uint32 canlogin = 10;
    if (has_canlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->canlogin());
    }

    // optional uint32 status = 11;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional string sourceVersion = 12;
    if (has_sourceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceversion());
    }

    // optional uint32 loginStrategyId = 13;
    if (has_loginstrategyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loginstrategyid());
    }

    // optional bytes ip = 14;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional uint32 canRegister = 15;
    if (has_canregister()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->canregister());
    }

    // optional uint32 mergeTimes = 16;
    if (has_mergetimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mergetimes());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 lastMergetime = 17;
    if (has_lastmergetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastmergetime());
    }

    // optional uint32 centerPort = 18;
    if (has_centerport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->centerport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_Server::MergeFrom(const LOBBY2DB_Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_localip()) {
      set_localip(from.localip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_onlinenum()) {
      set_onlinenum(from.onlinenum());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sourceip()) {
      set_sourceip(from.sourceip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sourcedir()) {
      set_sourcedir(from.sourcedir());
    }
    if (from.has_canlogin()) {
      set_canlogin(from.canlogin());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_sourceversion()) {
      set_sourceversion(from.sourceversion());
    }
    if (from.has_loginstrategyid()) {
      set_loginstrategyid(from.loginstrategyid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_canregister()) {
      set_canregister(from.canregister());
    }
    if (from.has_mergetimes()) {
      set_mergetimes(from.mergetimes());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lastmergetime()) {
      set_lastmergetime(from.lastmergetime());
    }
    if (from.has_centerport()) {
      set_centerport(from.centerport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_Server::CopyFrom(const LOBBY2DB_Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void LOBBY2DB_Server::Swap(LOBBY2DB_Server* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(serverid_, other->serverid_);
    std::swap(localip_, other->localip_);
    std::swap(port_, other->port_);
    std::swap(onlinenum_, other->onlinenum_);
    std::swap(version_, other->version_);
    std::swap(name_, other->name_);
    std::swap(sourceip_, other->sourceip_);
    std::swap(sourcedir_, other->sourcedir_);
    std::swap(canlogin_, other->canlogin_);
    std::swap(status_, other->status_);
    std::swap(sourceversion_, other->sourceversion_);
    std::swap(loginstrategyid_, other->loginstrategyid_);
    std::swap(ip_, other->ip_);
    std::swap(canregister_, other->canregister_);
    std::swap(mergetimes_, other->mergetimes_);
    std::swap(lastmergetime_, other->lastmergetime_);
    std::swap(centerport_, other->centerport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_Server_descriptor_;
  metadata.reflection = LOBBY2DB_Server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_ApplyFriend::kCmdIdFieldNumber;
const int LOBBY2DB_ApplyFriend::kCharInfoFieldNumber;
const int LOBBY2DB_ApplyFriend::kDstCharIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_ApplyFriend::LOBBY2DB_ApplyFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_ApplyFriend)
}

void LOBBY2DB_ApplyFriend::InitAsDefaultInstance() {
  charinfo_ = const_cast< ::TgsProtocol::DBFriendInfo*>(&::TgsProtocol::DBFriendInfo::default_instance());
}

LOBBY2DB_ApplyFriend::LOBBY2DB_ApplyFriend(const LOBBY2DB_ApplyFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_ApplyFriend)
}

void LOBBY2DB_ApplyFriend::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300017;
  charinfo_ = NULL;
  dstcharid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_ApplyFriend::~LOBBY2DB_ApplyFriend() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_ApplyFriend)
  SharedDtor();
}

void LOBBY2DB_ApplyFriend::SharedDtor() {
  if (this != default_instance_) {
    delete charinfo_;
  }
}

void LOBBY2DB_ApplyFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_ApplyFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_ApplyFriend_descriptor_;
}

const LOBBY2DB_ApplyFriend& LOBBY2DB_ApplyFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_ApplyFriend* LOBBY2DB_ApplyFriend::default_instance_ = NULL;

LOBBY2DB_ApplyFriend* LOBBY2DB_ApplyFriend::New() const {
  return new LOBBY2DB_ApplyFriend;
}

void LOBBY2DB_ApplyFriend::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmdid_ = 300017;
    if (has_charinfo()) {
      if (charinfo_ != NULL) charinfo_->::TgsProtocol::DBFriendInfo::Clear();
    }
    dstcharid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_ApplyFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_ApplyFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_APPLY_FRIEND];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charInfo;
        break;
      }

      // optional .TgsProtocol.DBFriendInfo charInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_charInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dstCharId;
        break;
      }

      // required uint64 dstCharId = 3;
      case 3: {
        if (tag == 24) {
         parse_dstCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstcharid_)));
          set_has_dstcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_ApplyFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_ApplyFriend)
  return false;
#undef DO_
}

void LOBBY2DB_ApplyFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_ApplyFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_APPLY_FRIEND];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // optional .TgsProtocol.DBFriendInfo charInfo = 2;
  if (has_charinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->charinfo(), output);
  }

  // required uint64 dstCharId = 3;
  if (has_dstcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dstcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_ApplyFriend)
}

::google::protobuf::uint8* LOBBY2DB_ApplyFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_ApplyFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_APPLY_FRIEND];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // optional .TgsProtocol.DBFriendInfo charInfo = 2;
  if (has_charinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->charinfo(), target);
  }

  // required uint64 dstCharId = 3;
  if (has_dstcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dstcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_ApplyFriend)
  return target;
}

int LOBBY2DB_ApplyFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_APPLY_FRIEND];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional .TgsProtocol.DBFriendInfo charInfo = 2;
    if (has_charinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charinfo());
    }

    // required uint64 dstCharId = 3;
    if (has_dstcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_ApplyFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_ApplyFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_ApplyFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_ApplyFriend::MergeFrom(const LOBBY2DB_ApplyFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charinfo()) {
      mutable_charinfo()->::TgsProtocol::DBFriendInfo::MergeFrom(from.charinfo());
    }
    if (from.has_dstcharid()) {
      set_dstcharid(from.dstcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_ApplyFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_ApplyFriend::CopyFrom(const LOBBY2DB_ApplyFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_ApplyFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_charinfo()) {
    if (!this->charinfo().IsInitialized()) return false;
  }
  return true;
}

void LOBBY2DB_ApplyFriend::Swap(LOBBY2DB_ApplyFriend* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charinfo_, other->charinfo_);
    std::swap(dstcharid_, other->dstcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_ApplyFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_ApplyFriend_descriptor_;
  metadata.reflection = LOBBY2DB_ApplyFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_ApplyFriend::kCmdIdFieldNumber;
const int DB2LOBBY_ApplyFriend::kRetFieldNumber;
const int DB2LOBBY_ApplyFriend::kCharIdFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_ApplyFriend::DB2LOBBY_ApplyFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_ApplyFriend)
}

void DB2LOBBY_ApplyFriend::InitAsDefaultInstance() {
}

DB2LOBBY_ApplyFriend::DB2LOBBY_ApplyFriend(const DB2LOBBY_ApplyFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_ApplyFriend)
}

void DB2LOBBY_ApplyFriend::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350012;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_ApplyFriend::~DB2LOBBY_ApplyFriend() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_ApplyFriend)
  SharedDtor();
}

void DB2LOBBY_ApplyFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_ApplyFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_ApplyFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_ApplyFriend_descriptor_;
}

const DB2LOBBY_ApplyFriend& DB2LOBBY_ApplyFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_ApplyFriend* DB2LOBBY_ApplyFriend::default_instance_ = NULL;

DB2LOBBY_ApplyFriend* DB2LOBBY_ApplyFriend::New() const {
  return new DB2LOBBY_ApplyFriend;
}

void DB2LOBBY_ApplyFriend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_ApplyFriend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ret_, charid_);
    cmdid_ = 350012;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_ApplyFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_ApplyFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_APPLY_FRIEND];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charId;
        break;
      }

      // required uint64 charId = 3;
      case 3: {
        if (tag == 24) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_ApplyFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_ApplyFriend)
  return false;
#undef DO_
}

void DB2LOBBY_ApplyFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_ApplyFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_APPLY_FRIEND];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_ApplyFriend)
}

::google::protobuf::uint8* DB2LOBBY_ApplyFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_ApplyFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_APPLY_FRIEND];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_ApplyFriend)
  return target;
}

int DB2LOBBY_ApplyFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_APPLY_FRIEND];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_ApplyFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_ApplyFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_ApplyFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_ApplyFriend::MergeFrom(const DB2LOBBY_ApplyFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_ApplyFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_ApplyFriend::CopyFrom(const DB2LOBBY_ApplyFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_ApplyFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void DB2LOBBY_ApplyFriend::Swap(DB2LOBBY_ApplyFriend* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_ApplyFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_ApplyFriend_descriptor_;
  metadata.reflection = DB2LOBBY_ApplyFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_AddFriend::kCmdIdFieldNumber;
const int LOBBY2DB_AddFriend::kMyCharIdFieldNumber;
const int LOBBY2DB_AddFriend::kDstCharIdFieldNumber;
const int LOBBY2DB_AddFriend::kCharInfoFieldNumber;
const int LOBBY2DB_AddFriend::kBAgreeFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_AddFriend::LOBBY2DB_AddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_AddFriend)
}

void LOBBY2DB_AddFriend::InitAsDefaultInstance() {
  charinfo_ = const_cast< ::TgsProtocol::DBFriendInfo*>(&::TgsProtocol::DBFriendInfo::default_instance());
}

LOBBY2DB_AddFriend::LOBBY2DB_AddFriend(const LOBBY2DB_AddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_AddFriend)
}

void LOBBY2DB_AddFriend::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300018;
  mycharid_ = GOOGLE_ULONGLONG(0);
  dstcharid_ = GOOGLE_ULONGLONG(0);
  charinfo_ = NULL;
  bagree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_AddFriend::~LOBBY2DB_AddFriend() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_AddFriend)
  SharedDtor();
}

void LOBBY2DB_AddFriend::SharedDtor() {
  if (this != default_instance_) {
    delete charinfo_;
  }
}

void LOBBY2DB_AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_AddFriend_descriptor_;
}

const LOBBY2DB_AddFriend& LOBBY2DB_AddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_AddFriend* LOBBY2DB_AddFriend::default_instance_ = NULL;

LOBBY2DB_AddFriend* LOBBY2DB_AddFriend::New() const {
  return new LOBBY2DB_AddFriend;
}

void LOBBY2DB_AddFriend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_AddFriend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(mycharid_, dstcharid_);
    cmdid_ = 300018;
    if (has_charinfo()) {
      if (charinfo_ != NULL) charinfo_->::TgsProtocol::DBFriendInfo::Clear();
    }
    bagree_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_AddFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_ADD_FRIEND];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myCharId;
        break;
      }

      // required uint64 myCharId = 2;
      case 2: {
        if (tag == 16) {
         parse_myCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dstCharId;
        break;
      }

      // required uint64 dstCharId = 3;
      case 3: {
        if (tag == 24) {
         parse_dstCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstcharid_)));
          set_has_dstcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charInfo;
        break;
      }

      // optional .TgsProtocol.DBFriendInfo charInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_charInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bAgree;
        break;
      }

      // required bool bAgree = 5;
      case 5: {
        if (tag == 40) {
         parse_bAgree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bagree_)));
          set_has_bagree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_AddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_AddFriend)
  return false;
#undef DO_
}

void LOBBY2DB_AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_AddFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_ADD_FRIEND];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 myCharId = 2;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mycharid(), output);
  }

  // required uint64 dstCharId = 3;
  if (has_dstcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dstcharid(), output);
  }

  // optional .TgsProtocol.DBFriendInfo charInfo = 4;
  if (has_charinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->charinfo(), output);
  }

  // required bool bAgree = 5;
  if (has_bagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_AddFriend)
}

::google::protobuf::uint8* LOBBY2DB_AddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_AddFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_ADD_FRIEND];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 myCharId = 2;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mycharid(), target);
  }

  // required uint64 dstCharId = 3;
  if (has_dstcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dstcharid(), target);
  }

  // optional .TgsProtocol.DBFriendInfo charInfo = 4;
  if (has_charinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->charinfo(), target);
  }

  // required bool bAgree = 5;
  if (has_bagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_AddFriend)
  return target;
}

int LOBBY2DB_AddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_ADD_FRIEND];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 myCharId = 2;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mycharid());
    }

    // required uint64 dstCharId = 3;
    if (has_dstcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstcharid());
    }

    // optional .TgsProtocol.DBFriendInfo charInfo = 4;
    if (has_charinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charinfo());
    }

    // required bool bAgree = 5;
    if (has_bagree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_AddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_AddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_AddFriend::MergeFrom(const LOBBY2DB_AddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_dstcharid()) {
      set_dstcharid(from.dstcharid());
    }
    if (from.has_charinfo()) {
      mutable_charinfo()->::TgsProtocol::DBFriendInfo::MergeFrom(from.charinfo());
    }
    if (from.has_bagree()) {
      set_bagree(from.bagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_AddFriend::CopyFrom(const LOBBY2DB_AddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_AddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000016) != 0x00000016) return false;

  if (has_charinfo()) {
    if (!this->charinfo().IsInitialized()) return false;
  }
  return true;
}

void LOBBY2DB_AddFriend::Swap(LOBBY2DB_AddFriend* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(mycharid_, other->mycharid_);
    std::swap(dstcharid_, other->dstcharid_);
    std::swap(charinfo_, other->charinfo_);
    std::swap(bagree_, other->bagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_AddFriend_descriptor_;
  metadata.reflection = LOBBY2DB_AddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_AddFriend::kCmdIdFieldNumber;
const int DB2LOBBY_AddFriend::kRetFieldNumber;
const int DB2LOBBY_AddFriend::kMyCharIdFieldNumber;
const int DB2LOBBY_AddFriend::kDstCharIdFieldNumber;
const int DB2LOBBY_AddFriend::kBAgreeFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_AddFriend::DB2LOBBY_AddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_AddFriend)
}

void DB2LOBBY_AddFriend::InitAsDefaultInstance() {
}

DB2LOBBY_AddFriend::DB2LOBBY_AddFriend(const DB2LOBBY_AddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_AddFriend)
}

void DB2LOBBY_AddFriend::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350013;
  ret_ = 0u;
  mycharid_ = GOOGLE_ULONGLONG(0);
  dstcharid_ = GOOGLE_ULONGLONG(0);
  bagree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_AddFriend::~DB2LOBBY_AddFriend() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_AddFriend)
  SharedDtor();
}

void DB2LOBBY_AddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_AddFriend_descriptor_;
}

const DB2LOBBY_AddFriend& DB2LOBBY_AddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_AddFriend* DB2LOBBY_AddFriend::default_instance_ = NULL;

DB2LOBBY_AddFriend* DB2LOBBY_AddFriend::New() const {
  return new DB2LOBBY_AddFriend;
}

void DB2LOBBY_AddFriend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_AddFriend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ret_, bagree_);
    cmdid_ = 350013;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_AddFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_ADD_FRIEND];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_myCharId;
        break;
      }

      // required uint64 myCharId = 3;
      case 3: {
        if (tag == 24) {
         parse_myCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dstCharId;
        break;
      }

      // required uint64 dstCharId = 4;
      case 4: {
        if (tag == 32) {
         parse_dstCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstcharid_)));
          set_has_dstcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bAgree;
        break;
      }

      // required bool bAgree = 5;
      case 5: {
        if (tag == 40) {
         parse_bAgree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bagree_)));
          set_has_bagree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_AddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_AddFriend)
  return false;
#undef DO_
}

void DB2LOBBY_AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_AddFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_ADD_FRIEND];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 myCharId = 3;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mycharid(), output);
  }

  // required uint64 dstCharId = 4;
  if (has_dstcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dstcharid(), output);
  }

  // required bool bAgree = 5;
  if (has_bagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_AddFriend)
}

::google::protobuf::uint8* DB2LOBBY_AddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_AddFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_ADD_FRIEND];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 myCharId = 3;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mycharid(), target);
  }

  // required uint64 dstCharId = 4;
  if (has_dstcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dstcharid(), target);
  }

  // required bool bAgree = 5;
  if (has_bagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_AddFriend)
  return target;
}

int DB2LOBBY_AddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_ADD_FRIEND];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 myCharId = 3;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mycharid());
    }

    // required uint64 dstCharId = 4;
    if (has_dstcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstcharid());
    }

    // required bool bAgree = 5;
    if (has_bagree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_AddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_AddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_AddFriend::MergeFrom(const DB2LOBBY_AddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_dstcharid()) {
      set_dstcharid(from.dstcharid());
    }
    if (from.has_bagree()) {
      set_bagree(from.bagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_AddFriend::CopyFrom(const DB2LOBBY_AddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_AddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void DB2LOBBY_AddFriend::Swap(DB2LOBBY_AddFriend* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(mycharid_, other->mycharid_);
    std::swap(dstcharid_, other->dstcharid_);
    std::swap(bagree_, other->bagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_AddFriend_descriptor_;
  metadata.reflection = DB2LOBBY_AddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_DelFriend::kCmdIdFieldNumber;
const int LOBBY2DB_DelFriend::kMyCharIdFieldNumber;
const int LOBBY2DB_DelFriend::kDstCharIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_DelFriend::LOBBY2DB_DelFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_DelFriend)
}

void LOBBY2DB_DelFriend::InitAsDefaultInstance() {
}

LOBBY2DB_DelFriend::LOBBY2DB_DelFriend(const LOBBY2DB_DelFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_DelFriend)
}

void LOBBY2DB_DelFriend::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300019;
  mycharid_ = GOOGLE_ULONGLONG(0);
  dstcharid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_DelFriend::~LOBBY2DB_DelFriend() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_DelFriend)
  SharedDtor();
}

void LOBBY2DB_DelFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_DelFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_DelFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_DelFriend_descriptor_;
}

const LOBBY2DB_DelFriend& LOBBY2DB_DelFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_DelFriend* LOBBY2DB_DelFriend::default_instance_ = NULL;

LOBBY2DB_DelFriend* LOBBY2DB_DelFriend::New() const {
  return new LOBBY2DB_DelFriend;
}

void LOBBY2DB_DelFriend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_DelFriend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(mycharid_, dstcharid_);
    cmdid_ = 300019;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_DelFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_DelFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_DEL_FRIEND];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myCharId;
        break;
      }

      // required uint64 myCharId = 2;
      case 2: {
        if (tag == 16) {
         parse_myCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dstCharId;
        break;
      }

      // required uint64 dstCharId = 3;
      case 3: {
        if (tag == 24) {
         parse_dstCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstcharid_)));
          set_has_dstcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_DelFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_DelFriend)
  return false;
#undef DO_
}

void LOBBY2DB_DelFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_DelFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_DEL_FRIEND];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 myCharId = 2;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mycharid(), output);
  }

  // required uint64 dstCharId = 3;
  if (has_dstcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dstcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_DelFriend)
}

::google::protobuf::uint8* LOBBY2DB_DelFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_DelFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_DEL_FRIEND];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 myCharId = 2;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mycharid(), target);
  }

  // required uint64 dstCharId = 3;
  if (has_dstcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dstcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_DelFriend)
  return target;
}

int LOBBY2DB_DelFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_DEL_FRIEND];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 myCharId = 2;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mycharid());
    }

    // required uint64 dstCharId = 3;
    if (has_dstcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_DelFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_DelFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_DelFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_DelFriend::MergeFrom(const LOBBY2DB_DelFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_dstcharid()) {
      set_dstcharid(from.dstcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_DelFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_DelFriend::CopyFrom(const LOBBY2DB_DelFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_DelFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void LOBBY2DB_DelFriend::Swap(LOBBY2DB_DelFriend* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(mycharid_, other->mycharid_);
    std::swap(dstcharid_, other->dstcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_DelFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_DelFriend_descriptor_;
  metadata.reflection = LOBBY2DB_DelFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_DelFriend::kCmdIdFieldNumber;
const int DB2LOBBY_DelFriend::kRetFieldNumber;
const int DB2LOBBY_DelFriend::kMyCharIdFieldNumber;
const int DB2LOBBY_DelFriend::kDstCharIdFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_DelFriend::DB2LOBBY_DelFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_DelFriend)
}

void DB2LOBBY_DelFriend::InitAsDefaultInstance() {
}

DB2LOBBY_DelFriend::DB2LOBBY_DelFriend(const DB2LOBBY_DelFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_DelFriend)
}

void DB2LOBBY_DelFriend::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350014;
  ret_ = 0u;
  mycharid_ = GOOGLE_ULONGLONG(0);
  dstcharid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_DelFriend::~DB2LOBBY_DelFriend() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_DelFriend)
  SharedDtor();
}

void DB2LOBBY_DelFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_DelFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_DelFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_DelFriend_descriptor_;
}

const DB2LOBBY_DelFriend& DB2LOBBY_DelFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_DelFriend* DB2LOBBY_DelFriend::default_instance_ = NULL;

DB2LOBBY_DelFriend* DB2LOBBY_DelFriend::New() const {
  return new DB2LOBBY_DelFriend;
}

void DB2LOBBY_DelFriend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_DelFriend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ret_, dstcharid_);
    cmdid_ = 350014;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_DelFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_DelFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_DEL_FRIEND];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_myCharId;
        break;
      }

      // required uint64 myCharId = 3;
      case 3: {
        if (tag == 24) {
         parse_myCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dstCharId;
        break;
      }

      // required uint64 dstCharId = 4;
      case 4: {
        if (tag == 32) {
         parse_dstCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstcharid_)));
          set_has_dstcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_DelFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_DelFriend)
  return false;
#undef DO_
}

void DB2LOBBY_DelFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_DelFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_DEL_FRIEND];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 myCharId = 3;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mycharid(), output);
  }

  // required uint64 dstCharId = 4;
  if (has_dstcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dstcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_DelFriend)
}

::google::protobuf::uint8* DB2LOBBY_DelFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_DelFriend)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_DEL_FRIEND];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 myCharId = 3;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mycharid(), target);
  }

  // required uint64 dstCharId = 4;
  if (has_dstcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dstcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_DelFriend)
  return target;
}

int DB2LOBBY_DelFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_DEL_FRIEND];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 myCharId = 3;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mycharid());
    }

    // required uint64 dstCharId = 4;
    if (has_dstcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_DelFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_DelFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_DelFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_DelFriend::MergeFrom(const DB2LOBBY_DelFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_dstcharid()) {
      set_dstcharid(from.dstcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_DelFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_DelFriend::CopyFrom(const DB2LOBBY_DelFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_DelFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void DB2LOBBY_DelFriend::Swap(DB2LOBBY_DelFriend* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(mycharid_, other->mycharid_);
    std::swap(dstcharid_, other->dstcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_DelFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_DelFriend_descriptor_;
  metadata.reflection = DB2LOBBY_DelFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_SendEnergy::kCmdIdFieldNumber;
const int LOBBY2DB_SendEnergy::kDstCharIdFieldNumber;
const int LOBBY2DB_SendEnergy::kMyCharIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_SendEnergy::LOBBY2DB_SendEnergy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_SendEnergy)
}

void LOBBY2DB_SendEnergy::InitAsDefaultInstance() {
}

LOBBY2DB_SendEnergy::LOBBY2DB_SendEnergy(const LOBBY2DB_SendEnergy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_SendEnergy)
}

void LOBBY2DB_SendEnergy::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300020;
  dstcharid_ = GOOGLE_ULONGLONG(0);
  mycharid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_SendEnergy::~LOBBY2DB_SendEnergy() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_SendEnergy)
  SharedDtor();
}

void LOBBY2DB_SendEnergy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_SendEnergy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_SendEnergy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_SendEnergy_descriptor_;
}

const LOBBY2DB_SendEnergy& LOBBY2DB_SendEnergy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_SendEnergy* LOBBY2DB_SendEnergy::default_instance_ = NULL;

LOBBY2DB_SendEnergy* LOBBY2DB_SendEnergy::New() const {
  return new LOBBY2DB_SendEnergy;
}

void LOBBY2DB_SendEnergy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_SendEnergy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(dstcharid_, mycharid_);
    cmdid_ = 300020;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_SendEnergy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_SendEnergy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SENDENERGY];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dstCharId;
        break;
      }

      // required uint64 dstCharId = 2;
      case 2: {
        if (tag == 16) {
         parse_dstCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstcharid_)));
          set_has_dstcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_myCharId;
        break;
      }

      // required uint64 myCharId = 3;
      case 3: {
        if (tag == 24) {
         parse_myCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_SendEnergy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_SendEnergy)
  return false;
#undef DO_
}

void LOBBY2DB_SendEnergy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_SendEnergy)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SENDENERGY];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 dstCharId = 2;
  if (has_dstcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstcharid(), output);
  }

  // required uint64 myCharId = 3;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mycharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_SendEnergy)
}

::google::protobuf::uint8* LOBBY2DB_SendEnergy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_SendEnergy)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SENDENERGY];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 dstCharId = 2;
  if (has_dstcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstcharid(), target);
  }

  // required uint64 myCharId = 3;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mycharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_SendEnergy)
  return target;
}

int LOBBY2DB_SendEnergy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SENDENERGY];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 dstCharId = 2;
    if (has_dstcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstcharid());
    }

    // required uint64 myCharId = 3;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mycharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_SendEnergy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_SendEnergy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_SendEnergy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_SendEnergy::MergeFrom(const LOBBY2DB_SendEnergy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_dstcharid()) {
      set_dstcharid(from.dstcharid());
    }
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_SendEnergy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_SendEnergy::CopyFrom(const LOBBY2DB_SendEnergy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_SendEnergy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void LOBBY2DB_SendEnergy::Swap(LOBBY2DB_SendEnergy* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(dstcharid_, other->dstcharid_);
    std::swap(mycharid_, other->mycharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_SendEnergy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_SendEnergy_descriptor_;
  metadata.reflection = LOBBY2DB_SendEnergy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_PurchaseInfo::kCmdIdFieldNumber;
const int LOBBY2DB_PurchaseInfo::kMyCharIdFieldNumber;
const int LOBBY2DB_PurchaseInfo::kGoodsIdFieldNumber;
const int LOBBY2DB_PurchaseInfo::kGoodsQuantityFieldNumber;
const int LOBBY2DB_PurchaseInfo::kValueFieldNumber;
const int LOBBY2DB_PurchaseInfo::kDiamondPaidUseFieldNumber;
const int LOBBY2DB_PurchaseInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_PurchaseInfo::LOBBY2DB_PurchaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_PurchaseInfo)
}

void LOBBY2DB_PurchaseInfo::InitAsDefaultInstance() {
}

LOBBY2DB_PurchaseInfo::LOBBY2DB_PurchaseInfo(const LOBBY2DB_PurchaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_PurchaseInfo)
}

void LOBBY2DB_PurchaseInfo::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300021;
  mycharid_ = GOOGLE_ULONGLONG(0);
  goodsid_ = 0u;
  goodsquantity_ = 0u;
  value_ = 0u;
  diamondpaiduse_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_PurchaseInfo::~LOBBY2DB_PurchaseInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_PurchaseInfo)
  SharedDtor();
}

void LOBBY2DB_PurchaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_PurchaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_PurchaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_PurchaseInfo_descriptor_;
}

const LOBBY2DB_PurchaseInfo& LOBBY2DB_PurchaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_PurchaseInfo* LOBBY2DB_PurchaseInfo::default_instance_ = NULL;

LOBBY2DB_PurchaseInfo* LOBBY2DB_PurchaseInfo::New() const {
  return new LOBBY2DB_PurchaseInfo;
}

void LOBBY2DB_PurchaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_PurchaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(goodsid_, time_);
    cmdid_ = 300021;
    mycharid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_PurchaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_PurchaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_PURCHASEINFO];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myCharId;
        break;
      }

      // required uint64 myCharId = 2;
      case 2: {
        if (tag == 16) {
         parse_myCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_goodsId;
        break;
      }

      // required uint32 goodsId = 3;
      case 3: {
        if (tag == 24) {
         parse_goodsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_goodsQuantity;
        break;
      }

      // required uint32 goodsQuantity = 4;
      case 4: {
        if (tag == 32) {
         parse_goodsQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsquantity_)));
          set_has_goodsquantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // required uint32 value = 5;
      case 5: {
        if (tag == 40) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_diamondPaidUse;
        break;
      }

      // required uint32 diamondPaidUse = 6;
      case 6: {
        if (tag == 48) {
         parse_diamondPaidUse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamondpaiduse_)));
          set_has_diamondpaiduse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // required uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_PurchaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_PurchaseInfo)
  return false;
#undef DO_
}

void LOBBY2DB_PurchaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_PurchaseInfo)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_PURCHASEINFO];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 myCharId = 2;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mycharid(), output);
  }

  // required uint32 goodsId = 3;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->goodsid(), output);
  }

  // required uint32 goodsQuantity = 4;
  if (has_goodsquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->goodsquantity(), output);
  }

  // required uint32 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value(), output);
  }

  // required uint32 diamondPaidUse = 6;
  if (has_diamondpaiduse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->diamondpaiduse(), output);
  }

  // required uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_PurchaseInfo)
}

::google::protobuf::uint8* LOBBY2DB_PurchaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_PurchaseInfo)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_PURCHASEINFO];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 myCharId = 2;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mycharid(), target);
  }

  // required uint32 goodsId = 3;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->goodsid(), target);
  }

  // required uint32 goodsQuantity = 4;
  if (has_goodsquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->goodsquantity(), target);
  }

  // required uint32 value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value(), target);
  }

  // required uint32 diamondPaidUse = 6;
  if (has_diamondpaiduse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->diamondpaiduse(), target);
  }

  // required uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_PurchaseInfo)
  return target;
}

int LOBBY2DB_PurchaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_PURCHASEINFO];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 myCharId = 2;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mycharid());
    }

    // required uint32 goodsId = 3;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsid());
    }

    // required uint32 goodsQuantity = 4;
    if (has_goodsquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsquantity());
    }

    // required uint32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 diamondPaidUse = 6;
    if (has_diamondpaiduse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamondpaiduse());
    }

    // required uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_PurchaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_PurchaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_PurchaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_PurchaseInfo::MergeFrom(const LOBBY2DB_PurchaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_goodsquantity()) {
      set_goodsquantity(from.goodsquantity());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_diamondpaiduse()) {
      set_diamondpaiduse(from.diamondpaiduse());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_PurchaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_PurchaseInfo::CopyFrom(const LOBBY2DB_PurchaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_PurchaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  return true;
}

void LOBBY2DB_PurchaseInfo::Swap(LOBBY2DB_PurchaseInfo* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(mycharid_, other->mycharid_);
    std::swap(goodsid_, other->goodsid_);
    std::swap(goodsquantity_, other->goodsquantity_);
    std::swap(value_, other->value_);
    std::swap(diamondpaiduse_, other->diamondpaiduse_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_PurchaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_PurchaseInfo_descriptor_;
  metadata.reflection = LOBBY2DB_PurchaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_Shop::kCmdIdFieldNumber;
const int DB2LOBBY_Shop::kShopItemFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_Shop::DB2LOBBY_Shop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_Shop)
}

void DB2LOBBY_Shop::InitAsDefaultInstance() {
}

DB2LOBBY_Shop::DB2LOBBY_Shop(const DB2LOBBY_Shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_Shop)
}

void DB2LOBBY_Shop::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350015;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_Shop::~DB2LOBBY_Shop() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_Shop)
  SharedDtor();
}

void DB2LOBBY_Shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_Shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_Shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_Shop_descriptor_;
}

const DB2LOBBY_Shop& DB2LOBBY_Shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_Shop* DB2LOBBY_Shop::default_instance_ = NULL;

DB2LOBBY_Shop* DB2LOBBY_Shop::New() const {
  return new DB2LOBBY_Shop;
}

void DB2LOBBY_Shop::Clear() {
  cmdid_ = 350015;
  shopitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_Shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_Shop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SHOP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shopItem;
        break;
      }

      // repeated .TgsProtocol.ShopInfo shopItem = 2;
      case 2: {
        if (tag == 18) {
         parse_shopItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shopItem;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_Shop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_Shop)
  return false;
#undef DO_
}

void DB2LOBBY_Shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_Shop)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SHOP];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.ShopInfo shopItem = 2;
  for (int i = 0; i < this->shopitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shopitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_Shop)
}

::google::protobuf::uint8* DB2LOBBY_Shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_Shop)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SHOP];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.ShopInfo shopItem = 2;
  for (int i = 0; i < this->shopitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shopitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_Shop)
  return target;
}

int DB2LOBBY_Shop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SHOP];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  // repeated .TgsProtocol.ShopInfo shopItem = 2;
  total_size += 1 * this->shopitem_size();
  for (int i = 0; i < this->shopitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_Shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_Shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_Shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_Shop::MergeFrom(const DB2LOBBY_Shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  shopitem_.MergeFrom(from.shopitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_Shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_Shop::CopyFrom(const DB2LOBBY_Shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_Shop::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->shopitem())) return false;
  return true;
}

void DB2LOBBY_Shop::Swap(DB2LOBBY_Shop* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    shopitem_.Swap(&other->shopitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_Shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_Shop_descriptor_;
  metadata.reflection = DB2LOBBY_Shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_GetTargetFriendInfo::kCmdIdFieldNumber;
const int LOBBY2DB_GetTargetFriendInfo::kMyCharIdFieldNumber;
const int LOBBY2DB_GetTargetFriendInfo::kDstCharIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_GetTargetFriendInfo::LOBBY2DB_GetTargetFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_GetTargetFriendInfo)
}

void LOBBY2DB_GetTargetFriendInfo::InitAsDefaultInstance() {
}

LOBBY2DB_GetTargetFriendInfo::LOBBY2DB_GetTargetFriendInfo(const LOBBY2DB_GetTargetFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_GetTargetFriendInfo)
}

void LOBBY2DB_GetTargetFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300022;
  mycharid_ = GOOGLE_ULONGLONG(0);
  dstcharid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_GetTargetFriendInfo::~LOBBY2DB_GetTargetFriendInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_GetTargetFriendInfo)
  SharedDtor();
}

void LOBBY2DB_GetTargetFriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_GetTargetFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_GetTargetFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_GetTargetFriendInfo_descriptor_;
}

const LOBBY2DB_GetTargetFriendInfo& LOBBY2DB_GetTargetFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_GetTargetFriendInfo* LOBBY2DB_GetTargetFriendInfo::default_instance_ = NULL;

LOBBY2DB_GetTargetFriendInfo* LOBBY2DB_GetTargetFriendInfo::New() const {
  return new LOBBY2DB_GetTargetFriendInfo;
}

void LOBBY2DB_GetTargetFriendInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_GetTargetFriendInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(mycharid_, dstcharid_);
    cmdid_ = 300022;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_GetTargetFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_GetTargetFriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_TARGET_FRIENDINFO];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myCharId;
        break;
      }

      // required uint64 myCharId = 2;
      case 2: {
        if (tag == 16) {
         parse_myCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dstCharId;
        break;
      }

      // required uint64 dstCharId = 3;
      case 3: {
        if (tag == 24) {
         parse_dstCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstcharid_)));
          set_has_dstcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_GetTargetFriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_GetTargetFriendInfo)
  return false;
#undef DO_
}

void LOBBY2DB_GetTargetFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_GetTargetFriendInfo)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_TARGET_FRIENDINFO];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 myCharId = 2;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mycharid(), output);
  }

  // required uint64 dstCharId = 3;
  if (has_dstcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dstcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_GetTargetFriendInfo)
}

::google::protobuf::uint8* LOBBY2DB_GetTargetFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_GetTargetFriendInfo)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_TARGET_FRIENDINFO];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 myCharId = 2;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mycharid(), target);
  }

  // required uint64 dstCharId = 3;
  if (has_dstcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dstcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_GetTargetFriendInfo)
  return target;
}

int LOBBY2DB_GetTargetFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_TARGET_FRIENDINFO];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 myCharId = 2;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mycharid());
    }

    // required uint64 dstCharId = 3;
    if (has_dstcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_GetTargetFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_GetTargetFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_GetTargetFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_GetTargetFriendInfo::MergeFrom(const LOBBY2DB_GetTargetFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_dstcharid()) {
      set_dstcharid(from.dstcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_GetTargetFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_GetTargetFriendInfo::CopyFrom(const LOBBY2DB_GetTargetFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_GetTargetFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void LOBBY2DB_GetTargetFriendInfo::Swap(LOBBY2DB_GetTargetFriendInfo* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(mycharid_, other->mycharid_);
    std::swap(dstcharid_, other->dstcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_GetTargetFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_GetTargetFriendInfo_descriptor_;
  metadata.reflection = LOBBY2DB_GetTargetFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_GetTargetFriendInfo::kCmdIdFieldNumber;
const int DB2LOBBY_GetTargetFriendInfo::kRetFieldNumber;
const int DB2LOBBY_GetTargetFriendInfo::kCharidFieldNumber;
const int DB2LOBBY_GetTargetFriendInfo::kBfriendFieldNumber;
const int DB2LOBBY_GetTargetFriendInfo::kBlackFieldNumber;
const int DB2LOBBY_GetTargetFriendInfo::kApplyFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_GetTargetFriendInfo::DB2LOBBY_GetTargetFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_GetTargetFriendInfo)
}

void DB2LOBBY_GetTargetFriendInfo::InitAsDefaultInstance() {
}

DB2LOBBY_GetTargetFriendInfo::DB2LOBBY_GetTargetFriendInfo(const DB2LOBBY_GetTargetFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_GetTargetFriendInfo)
}

void DB2LOBBY_GetTargetFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350016;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  bfriend_ = false;
  black_ = false;
  apply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_GetTargetFriendInfo::~DB2LOBBY_GetTargetFriendInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_GetTargetFriendInfo)
  SharedDtor();
}

void DB2LOBBY_GetTargetFriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_GetTargetFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_GetTargetFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_GetTargetFriendInfo_descriptor_;
}

const DB2LOBBY_GetTargetFriendInfo& DB2LOBBY_GetTargetFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_GetTargetFriendInfo* DB2LOBBY_GetTargetFriendInfo::default_instance_ = NULL;

DB2LOBBY_GetTargetFriendInfo* DB2LOBBY_GetTargetFriendInfo::New() const {
  return new DB2LOBBY_GetTargetFriendInfo;
}

void DB2LOBBY_GetTargetFriendInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBY_GetTargetFriendInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ret_, apply_);
    cmdid_ = 350016;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_GetTargetFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_GetTargetFriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_TARGET_FRIENDINFO_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bfriend;
        break;
      }

      // required bool bfriend = 4;
      case 4: {
        if (tag == 32) {
         parse_bfriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bfriend_)));
          set_has_bfriend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_black;
        break;
      }

      // required bool black = 5;
      case 5: {
        if (tag == 40) {
         parse_black:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &black_)));
          set_has_black();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_apply;
        break;
      }

      // required bool apply = 6;
      case 6: {
        if (tag == 48) {
         parse_apply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_)));
          set_has_apply();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_GetTargetFriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_GetTargetFriendInfo)
  return false;
#undef DO_
}

void DB2LOBBY_GetTargetFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_GetTargetFriendInfo)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_TARGET_FRIENDINFO_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required bool bfriend = 4;
  if (has_bfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bfriend(), output);
  }

  // required bool black = 5;
  if (has_black()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->black(), output);
  }

  // required bool apply = 6;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->apply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_GetTargetFriendInfo)
}

::google::protobuf::uint8* DB2LOBBY_GetTargetFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_GetTargetFriendInfo)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_TARGET_FRIENDINFO_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required bool bfriend = 4;
  if (has_bfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bfriend(), target);
  }

  // required bool black = 5;
  if (has_black()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->black(), target);
  }

  // required bool apply = 6;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->apply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_GetTargetFriendInfo)
  return target;
}

int DB2LOBBY_GetTargetFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_TARGET_FRIENDINFO_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required bool bfriend = 4;
    if (has_bfriend()) {
      total_size += 1 + 1;
    }

    // required bool black = 5;
    if (has_black()) {
      total_size += 1 + 1;
    }

    // required bool apply = 6;
    if (has_apply()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_GetTargetFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_GetTargetFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_GetTargetFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_GetTargetFriendInfo::MergeFrom(const DB2LOBBY_GetTargetFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_bfriend()) {
      set_bfriend(from.bfriend());
    }
    if (from.has_black()) {
      set_black(from.black());
    }
    if (from.has_apply()) {
      set_apply(from.apply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_GetTargetFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_GetTargetFriendInfo::CopyFrom(const DB2LOBBY_GetTargetFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_GetTargetFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  return true;
}

void DB2LOBBY_GetTargetFriendInfo::Swap(DB2LOBBY_GetTargetFriendInfo* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(bfriend_, other->bfriend_);
    std::swap(black_, other->black_);
    std::swap(apply_, other->apply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_GetTargetFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_GetTargetFriendInfo_descriptor_;
  metadata.reflection = DB2LOBBY_GetTargetFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DBGetTargetUserinfoReq::kCmdIdFieldNumber;
const int LOBBY2DBGetTargetUserinfoReq::kCmdFieldNumber;
const int LOBBY2DBGetTargetUserinfoReq::kMyCharIdFieldNumber;
const int LOBBY2DBGetTargetUserinfoReq::kDstCharIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DBGetTargetUserinfoReq::LOBBY2DBGetTargetUserinfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DBGetTargetUserinfoReq)
}

void LOBBY2DBGetTargetUserinfoReq::InitAsDefaultInstance() {
}

LOBBY2DBGetTargetUserinfoReq::LOBBY2DBGetTargetUserinfoReq(const LOBBY2DBGetTargetUserinfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DBGetTargetUserinfoReq)
}

void LOBBY2DBGetTargetUserinfoReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 380000;
  cmd_ = 0u;
  mycharid_ = GOOGLE_ULONGLONG(0);
  dstcharid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DBGetTargetUserinfoReq::~LOBBY2DBGetTargetUserinfoReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DBGetTargetUserinfoReq)
  SharedDtor();
}

void LOBBY2DBGetTargetUserinfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DBGetTargetUserinfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DBGetTargetUserinfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DBGetTargetUserinfoReq_descriptor_;
}

const LOBBY2DBGetTargetUserinfoReq& LOBBY2DBGetTargetUserinfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DBGetTargetUserinfoReq* LOBBY2DBGetTargetUserinfoReq::default_instance_ = NULL;

LOBBY2DBGetTargetUserinfoReq* LOBBY2DBGetTargetUserinfoReq::New() const {
  return new LOBBY2DBGetTargetUserinfoReq;
}

void LOBBY2DBGetTargetUserinfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DBGetTargetUserinfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(cmd_, dstcharid_);
    cmdid_ = 380000;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DBGetTargetUserinfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DBGetTargetUserinfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_TARGET_USERINFO_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required uint32 cmd = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_myCharId;
        break;
      }

      // required uint64 myCharId = 3;
      case 3: {
        if (tag == 24) {
         parse_myCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dstCharId;
        break;
      }

      // required uint64 dstCharId = 4;
      case 4: {
        if (tag == 32) {
         parse_dstCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstcharid_)));
          set_has_dstcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DBGetTargetUserinfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DBGetTargetUserinfoReq)
  return false;
#undef DO_
}

void LOBBY2DBGetTargetUserinfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DBGetTargetUserinfoReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_TARGET_USERINFO_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }

  // required uint64 myCharId = 3;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mycharid(), output);
  }

  // required uint64 dstCharId = 4;
  if (has_dstcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dstcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DBGetTargetUserinfoReq)
}

::google::protobuf::uint8* LOBBY2DBGetTargetUserinfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DBGetTargetUserinfoReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_TARGET_USERINFO_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }

  // required uint64 myCharId = 3;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mycharid(), target);
  }

  // required uint64 dstCharId = 4;
  if (has_dstcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dstcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DBGetTargetUserinfoReq)
  return target;
}

int LOBBY2DBGetTargetUserinfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_TARGET_USERINFO_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // required uint64 myCharId = 3;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mycharid());
    }

    // required uint64 dstCharId = 4;
    if (has_dstcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DBGetTargetUserinfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DBGetTargetUserinfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DBGetTargetUserinfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DBGetTargetUserinfoReq::MergeFrom(const LOBBY2DBGetTargetUserinfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_dstcharid()) {
      set_dstcharid(from.dstcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DBGetTargetUserinfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DBGetTargetUserinfoReq::CopyFrom(const LOBBY2DBGetTargetUserinfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DBGetTargetUserinfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void LOBBY2DBGetTargetUserinfoReq::Swap(LOBBY2DBGetTargetUserinfoReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(cmd_, other->cmd_);
    std::swap(mycharid_, other->mycharid_);
    std::swap(dstcharid_, other->dstcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DBGetTargetUserinfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DBGetTargetUserinfoReq_descriptor_;
  metadata.reflection = LOBBY2DBGetTargetUserinfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBYGetTargetUserinfoRet::kCmdIdFieldNumber;
const int DB2LOBBYGetTargetUserinfoRet::kRetFieldNumber;
const int DB2LOBBYGetTargetUserinfoRet::kCmdFieldNumber;
const int DB2LOBBYGetTargetUserinfoRet::kMyCharIdFieldNumber;
const int DB2LOBBYGetTargetUserinfoRet::kDstCharIdFieldNumber;
const int DB2LOBBYGetTargetUserinfoRet::kOtherFieldNumber;
#endif  // !_MSC_VER

DB2LOBBYGetTargetUserinfoRet::DB2LOBBYGetTargetUserinfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBYGetTargetUserinfoRet)
}

void DB2LOBBYGetTargetUserinfoRet::InitAsDefaultInstance() {
  other_ = const_cast< ::TgsProtocol::OtherUserInfo*>(&::TgsProtocol::OtherUserInfo::default_instance());
}

DB2LOBBYGetTargetUserinfoRet::DB2LOBBYGetTargetUserinfoRet(const DB2LOBBYGetTargetUserinfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBYGetTargetUserinfoRet)
}

void DB2LOBBYGetTargetUserinfoRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 380001;
  ret_ = 0u;
  cmd_ = 0u;
  mycharid_ = GOOGLE_ULONGLONG(0);
  dstcharid_ = GOOGLE_ULONGLONG(0);
  other_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBYGetTargetUserinfoRet::~DB2LOBBYGetTargetUserinfoRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBYGetTargetUserinfoRet)
  SharedDtor();
}

void DB2LOBBYGetTargetUserinfoRet::SharedDtor() {
  if (this != default_instance_) {
    delete other_;
  }
}

void DB2LOBBYGetTargetUserinfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBYGetTargetUserinfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBYGetTargetUserinfoRet_descriptor_;
}

const DB2LOBBYGetTargetUserinfoRet& DB2LOBBYGetTargetUserinfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBYGetTargetUserinfoRet* DB2LOBBYGetTargetUserinfoRet::default_instance_ = NULL;

DB2LOBBYGetTargetUserinfoRet* DB2LOBBYGetTargetUserinfoRet::New() const {
  return new DB2LOBBYGetTargetUserinfoRet;
}

void DB2LOBBYGetTargetUserinfoRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBYGetTargetUserinfoRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ret_, dstcharid_);
    cmdid_ = 380001;
    cmd_ = 0u;
    if (has_other()) {
      if (other_ != NULL) other_->::TgsProtocol::OtherUserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBYGetTargetUserinfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBYGetTargetUserinfoRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_TARGET_USERINFO_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cmd;
        break;
      }

      // required uint32 cmd = 3;
      case 3: {
        if (tag == 24) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_myCharId;
        break;
      }

      // required uint64 myCharId = 4;
      case 4: {
        if (tag == 32) {
         parse_myCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dstCharId;
        break;
      }

      // required uint64 dstCharId = 5;
      case 5: {
        if (tag == 40) {
         parse_dstCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstcharid_)));
          set_has_dstcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_other;
        break;
      }

      // optional .TgsProtocol.OtherUserInfo other = 6;
      case 6: {
        if (tag == 50) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBYGetTargetUserinfoRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBYGetTargetUserinfoRet)
  return false;
#undef DO_
}

void DB2LOBBYGetTargetUserinfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBYGetTargetUserinfoRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_TARGET_USERINFO_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint32 cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cmd(), output);
  }

  // required uint64 myCharId = 4;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mycharid(), output);
  }

  // required uint64 dstCharId = 5;
  if (has_dstcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dstcharid(), output);
  }

  // optional .TgsProtocol.OtherUserInfo other = 6;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->other(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBYGetTargetUserinfoRet)
}

::google::protobuf::uint8* DB2LOBBYGetTargetUserinfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBYGetTargetUserinfoRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_TARGET_USERINFO_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint32 cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cmd(), target);
  }

  // required uint64 myCharId = 4;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mycharid(), target);
  }

  // required uint64 dstCharId = 5;
  if (has_dstcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dstcharid(), target);
  }

  // optional .TgsProtocol.OtherUserInfo other = 6;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->other(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBYGetTargetUserinfoRet)
  return target;
}

int DB2LOBBYGetTargetUserinfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_TARGET_USERINFO_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // required uint64 myCharId = 4;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mycharid());
    }

    // required uint64 dstCharId = 5;
    if (has_dstcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstcharid());
    }

    // optional .TgsProtocol.OtherUserInfo other = 6;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBYGetTargetUserinfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBYGetTargetUserinfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBYGetTargetUserinfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBYGetTargetUserinfoRet::MergeFrom(const DB2LOBBYGetTargetUserinfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_dstcharid()) {
      set_dstcharid(from.dstcharid());
    }
    if (from.has_other()) {
      mutable_other()->::TgsProtocol::OtherUserInfo::MergeFrom(from.other());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBYGetTargetUserinfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBYGetTargetUserinfoRet::CopyFrom(const DB2LOBBYGetTargetUserinfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBYGetTargetUserinfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (has_other()) {
    if (!this->other().IsInitialized()) return false;
  }
  return true;
}

void DB2LOBBYGetTargetUserinfoRet::Swap(DB2LOBBYGetTargetUserinfoRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(cmd_, other->cmd_);
    std::swap(mycharid_, other->mycharid_);
    std::swap(dstcharid_, other->dstcharid_);
    std::swap(other_, other->other_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBYGetTargetUserinfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBYGetTargetUserinfoRet_descriptor_;
  metadata.reflection = DB2LOBBYGetTargetUserinfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DBGetRecommandFriendReq::kCmdIdFieldNumber;
const int LOBBY2DBGetRecommandFriendReq::kCharIdFieldNumber;
const int LOBBY2DBGetRecommandFriendReq::kLevelFieldNumber;
#endif  // !_MSC_VER

LOBBY2DBGetRecommandFriendReq::LOBBY2DBGetRecommandFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DBGetRecommandFriendReq)
}

void LOBBY2DBGetRecommandFriendReq::InitAsDefaultInstance() {
}

LOBBY2DBGetRecommandFriendReq::LOBBY2DBGetRecommandFriendReq(const LOBBY2DBGetRecommandFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DBGetRecommandFriendReq)
}

void LOBBY2DBGetRecommandFriendReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 360000;
  charid_ = GOOGLE_ULONGLONG(0);
  level_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DBGetRecommandFriendReq::~LOBBY2DBGetRecommandFriendReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DBGetRecommandFriendReq)
  SharedDtor();
}

void LOBBY2DBGetRecommandFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DBGetRecommandFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DBGetRecommandFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DBGetRecommandFriendReq_descriptor_;
}

const LOBBY2DBGetRecommandFriendReq& LOBBY2DBGetRecommandFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DBGetRecommandFriendReq* LOBBY2DBGetRecommandFriendReq::default_instance_ = NULL;

LOBBY2DBGetRecommandFriendReq* LOBBY2DBGetRecommandFriendReq::New() const {
  return new LOBBY2DBGetRecommandFriendReq;
}

void LOBBY2DBGetRecommandFriendReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DBGetRecommandFriendReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(charid_, level_);
    cmdid_ = 360000;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DBGetRecommandFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DBGetRecommandFriendReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_RECOMMAND_FRIEND_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint64 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DBGetRecommandFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DBGetRecommandFriendReq)
  return false;
#undef DO_
}

void LOBBY2DBGetRecommandFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DBGetRecommandFriendReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_RECOMMAND_FRIEND_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required uint64 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DBGetRecommandFriendReq)
}

::google::protobuf::uint8* LOBBY2DBGetRecommandFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DBGetRecommandFriendReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_RECOMMAND_FRIEND_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required uint64 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DBGetRecommandFriendReq)
  return target;
}

int LOBBY2DBGetRecommandFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_GET_RECOMMAND_FRIEND_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint64 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DBGetRecommandFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DBGetRecommandFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DBGetRecommandFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DBGetRecommandFriendReq::MergeFrom(const LOBBY2DBGetRecommandFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DBGetRecommandFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DBGetRecommandFriendReq::CopyFrom(const LOBBY2DBGetRecommandFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DBGetRecommandFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void LOBBY2DBGetRecommandFriendReq::Swap(LOBBY2DBGetRecommandFriendReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DBGetRecommandFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DBGetRecommandFriendReq_descriptor_;
  metadata.reflection = LOBBY2DBGetRecommandFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBYGetRecommandFriendRet::kCmdIdFieldNumber;
const int DB2LOBBYGetRecommandFriendRet::kCharIdFieldNumber;
const int DB2LOBBYGetRecommandFriendRet::kRecommandListFieldNumber;
const int DB2LOBBYGetRecommandFriendRet::kRecommandBigListFieldNumber;
#endif  // !_MSC_VER

DB2LOBBYGetRecommandFriendRet::DB2LOBBYGetRecommandFriendRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBYGetRecommandFriendRet)
}

void DB2LOBBYGetRecommandFriendRet::InitAsDefaultInstance() {
}

DB2LOBBYGetRecommandFriendRet::DB2LOBBYGetRecommandFriendRet(const DB2LOBBYGetRecommandFriendRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBYGetRecommandFriendRet)
}

void DB2LOBBYGetRecommandFriendRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 360001;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBYGetRecommandFriendRet::~DB2LOBBYGetRecommandFriendRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBYGetRecommandFriendRet)
  SharedDtor();
}

void DB2LOBBYGetRecommandFriendRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBYGetRecommandFriendRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBYGetRecommandFriendRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBYGetRecommandFriendRet_descriptor_;
}

const DB2LOBBYGetRecommandFriendRet& DB2LOBBYGetRecommandFriendRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBYGetRecommandFriendRet* DB2LOBBYGetRecommandFriendRet::default_instance_ = NULL;

DB2LOBBYGetRecommandFriendRet* DB2LOBBYGetRecommandFriendRet::New() const {
  return new DB2LOBBYGetRecommandFriendRet;
}

void DB2LOBBYGetRecommandFriendRet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 360001;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  recommandlist_.Clear();
  recommandbiglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBYGetRecommandFriendRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBYGetRecommandFriendRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_RECOMMAND_FRIEND_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (tag == 16) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recommandList;
        break;
      }

      // repeated .TgsProtocol.ClientFriendInfo recommandList = 3;
      case 3: {
        if (tag == 26) {
         parse_recommandList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommandlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recommandList;
        if (input->ExpectTag(34)) goto parse_recommandBigList;
        break;
      }

      // repeated .TgsProtocol.ClientFriendInfo recommandBigList = 4;
      case 4: {
        if (tag == 34) {
         parse_recommandBigList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommandbiglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_recommandBigList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBYGetRecommandFriendRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBYGetRecommandFriendRet)
  return false;
#undef DO_
}

void DB2LOBBYGetRecommandFriendRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBYGetRecommandFriendRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_RECOMMAND_FRIEND_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // repeated .TgsProtocol.ClientFriendInfo recommandList = 3;
  for (int i = 0; i < this->recommandlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recommandlist(i), output);
  }

  // repeated .TgsProtocol.ClientFriendInfo recommandBigList = 4;
  for (int i = 0; i < this->recommandbiglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recommandbiglist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBYGetRecommandFriendRet)
}

::google::protobuf::uint8* DB2LOBBYGetRecommandFriendRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBYGetRecommandFriendRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_RECOMMAND_FRIEND_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // repeated .TgsProtocol.ClientFriendInfo recommandList = 3;
  for (int i = 0; i < this->recommandlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recommandlist(i), target);
  }

  // repeated .TgsProtocol.ClientFriendInfo recommandBigList = 4;
  for (int i = 0; i < this->recommandbiglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recommandbiglist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBYGetRecommandFriendRet)
  return target;
}

int DB2LOBBYGetRecommandFriendRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GET_RECOMMAND_FRIEND_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .TgsProtocol.ClientFriendInfo recommandList = 3;
  total_size += 1 * this->recommandlist_size();
  for (int i = 0; i < this->recommandlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommandlist(i));
  }

  // repeated .TgsProtocol.ClientFriendInfo recommandBigList = 4;
  total_size += 1 * this->recommandbiglist_size();
  for (int i = 0; i < this->recommandbiglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommandbiglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBYGetRecommandFriendRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBYGetRecommandFriendRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBYGetRecommandFriendRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBYGetRecommandFriendRet::MergeFrom(const DB2LOBBYGetRecommandFriendRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommandlist_.MergeFrom(from.recommandlist_);
  recommandbiglist_.MergeFrom(from.recommandbiglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBYGetRecommandFriendRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBYGetRecommandFriendRet::CopyFrom(const DB2LOBBYGetRecommandFriendRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBYGetRecommandFriendRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->recommandlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->recommandbiglist())) return false;
  return true;
}

void DB2LOBBYGetRecommandFriendRet::Swap(DB2LOBBYGetRecommandFriendRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    recommandlist_.Swap(&other->recommandlist_);
    recommandbiglist_.Swap(&other->recommandbiglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBYGetRecommandFriendRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBYGetRecommandFriendRet_descriptor_;
  metadata.reflection = DB2LOBBYGetRecommandFriendRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbActivity::kIdFieldNumber;
const int DbActivity::kClosedFieldNumber;
const int DbActivity::kOpentypeFieldNumber;
const int DbActivity::kActypeFieldNumber;
const int DbActivity::kShowBeginTimeFieldNumber;
const int DbActivity::kShowEndTimeFieldNumber;
const int DbActivity::kBeginTimeFieldNumber;
const int DbActivity::kEndTimeFieldNumber;
const int DbActivity::kPlayerLevFieldNumber;
const int DbActivity::kTodayTimesFieldNumber;
const int DbActivity::kValuesFieldNumber;
const int DbActivity::kRewardsFieldNumber;
const int DbActivity::kNameFieldNumber;
const int DbActivity::kDescFieldNumber;
const int DbActivity::kChildDescFieldNumber;
const int DbActivity::kValues2FieldNumber;
const int DbActivity::kActivetimeFieldNumber;
const int DbActivity::kCountdownFieldNumber;
#endif  // !_MSC_VER

DbActivity::DbActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbActivity)
}

void DbActivity::InitAsDefaultInstance() {
}

DbActivity::DbActivity(const DbActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbActivity)
}

void DbActivity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  closed_ = 0u;
  opentype_ = 0u;
  actype_ = 0u;
  showbegintime_ = 0u;
  showendtime_ = 0u;
  begintime_ = 0u;
  endtime_ = 0u;
  playerlev_ = 0u;
  todaytimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  values_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rewards_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  childdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  values2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetime_ = 0u;
  countdown_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbActivity::~DbActivity() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbActivity)
  SharedDtor();
}

void DbActivity::SharedDtor() {
  if (todaytimes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete todaytimes_;
  }
  if (values_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete values_;
  }
  if (rewards_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewards_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (childdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete childdesc_;
  }
  if (values2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete values2_;
  }
  if (this != default_instance_) {
  }
}

void DbActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbActivity_descriptor_;
}

const DbActivity& DbActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DbActivity* DbActivity::default_instance_ = NULL;

DbActivity* DbActivity::New() const {
  return new DbActivity;
}

void DbActivity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbActivity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, endtime_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    playerlev_ = 0u;
    if (has_todaytimes()) {
      if (todaytimes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        todaytimes_->clear();
      }
    }
    if (has_values()) {
      if (values_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        values_->clear();
      }
    }
    if (has_rewards()) {
      if (rewards_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewards_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_childdesc()) {
      if (childdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        childdesc_->clear();
      }
    }
    if (has_values2()) {
      if (values2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        values2_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    activetime_ = 0u;
    countdown_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_closed;
        break;
      }

      // optional uint32 closed = 2;
      case 2: {
        if (tag == 16) {
         parse_closed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closed_)));
          set_has_closed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opentype;
        break;
      }

      // optional uint32 opentype = 3;
      case 3: {
        if (tag == 24) {
         parse_opentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opentype_)));
          set_has_opentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_actype;
        break;
      }

      // optional uint32 actype = 4;
      case 4: {
        if (tag == 32) {
         parse_actype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actype_)));
          set_has_actype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_showBeginTime;
        break;
      }

      // optional uint32 showBeginTime = 5;
      case 5: {
        if (tag == 40) {
         parse_showBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showbegintime_)));
          set_has_showbegintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_showEndTime;
        break;
      }

      // optional uint32 showEndTime = 6;
      case 6: {
        if (tag == 48) {
         parse_showEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showendtime_)));
          set_has_showendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_beginTime;
        break;
      }

      // optional uint32 beginTime = 7;
      case 7: {
        if (tag == 56) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_endTime;
        break;
      }

      // optional uint32 endTime = 8;
      case 8: {
        if (tag == 64) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_playerLev;
        break;
      }

      // optional uint32 playerLev = 9;
      case 9: {
        if (tag == 72) {
         parse_playerLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerlev_)));
          set_has_playerlev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_todayTimes;
        break;
      }

      // optional bytes todayTimes = 10;
      case 10: {
        if (tag == 82) {
         parse_todayTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_todaytimes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_values;
        break;
      }

      // optional bytes values = 11;
      case 11: {
        if (tag == 90) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_rewards;
        break;
      }

      // optional bytes rewards = 12;
      case 12: {
        if (tag == 98) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_name;
        break;
      }

      // optional bytes name = 13;
      case 13: {
        if (tag == 106) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_desc;
        break;
      }

      // optional bytes desc = 14;
      case 14: {
        if (tag == 114) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_childDesc;
        break;
      }

      // optional bytes childDesc = 15;
      case 15: {
        if (tag == 122) {
         parse_childDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_childdesc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_values2;
        break;
      }

      // optional bytes values2 = 16;
      case 16: {
        if (tag == 130) {
         parse_values2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_values2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_activetime;
        break;
      }

      // optional uint32 activetime = 17;
      case 17: {
        if (tag == 136) {
         parse_activetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activetime_)));
          set_has_activetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_countdown;
        break;
      }

      // optional uint32 countdown = 18;
      case 18: {
        if (tag == 144) {
         parse_countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbActivity)
  return false;
#undef DO_
}

void DbActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbActivity)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 closed = 2;
  if (has_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->closed(), output);
  }

  // optional uint32 opentype = 3;
  if (has_opentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opentype(), output);
  }

  // optional uint32 actype = 4;
  if (has_actype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->actype(), output);
  }

  // optional uint32 showBeginTime = 5;
  if (has_showbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->showbegintime(), output);
  }

  // optional uint32 showEndTime = 6;
  if (has_showendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->showendtime(), output);
  }

  // optional uint32 beginTime = 7;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->begintime(), output);
  }

  // optional uint32 endTime = 8;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->endtime(), output);
  }

  // optional uint32 playerLev = 9;
  if (has_playerlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->playerlev(), output);
  }

  // optional bytes todayTimes = 10;
  if (has_todaytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->todaytimes(), output);
  }

  // optional bytes values = 11;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->values(), output);
  }

  // optional bytes rewards = 12;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->rewards(), output);
  }

  // optional bytes name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->name(), output);
  }

  // optional bytes desc = 14;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->desc(), output);
  }

  // optional bytes childDesc = 15;
  if (has_childdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->childdesc(), output);
  }

  // optional bytes values2 = 16;
  if (has_values2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->values2(), output);
  }

  // optional uint32 activetime = 17;
  if (has_activetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->activetime(), output);
  }

  // optional uint32 countdown = 18;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->countdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbActivity)
}

::google::protobuf::uint8* DbActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbActivity)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 closed = 2;
  if (has_closed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->closed(), target);
  }

  // optional uint32 opentype = 3;
  if (has_opentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opentype(), target);
  }

  // optional uint32 actype = 4;
  if (has_actype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->actype(), target);
  }

  // optional uint32 showBeginTime = 5;
  if (has_showbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->showbegintime(), target);
  }

  // optional uint32 showEndTime = 6;
  if (has_showendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->showendtime(), target);
  }

  // optional uint32 beginTime = 7;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->begintime(), target);
  }

  // optional uint32 endTime = 8;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->endtime(), target);
  }

  // optional uint32 playerLev = 9;
  if (has_playerlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->playerlev(), target);
  }

  // optional bytes todayTimes = 10;
  if (has_todaytimes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->todaytimes(), target);
  }

  // optional bytes values = 11;
  if (has_values()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->values(), target);
  }

  // optional bytes rewards = 12;
  if (has_rewards()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->rewards(), target);
  }

  // optional bytes name = 13;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->name(), target);
  }

  // optional bytes desc = 14;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->desc(), target);
  }

  // optional bytes childDesc = 15;
  if (has_childdesc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->childdesc(), target);
  }

  // optional bytes values2 = 16;
  if (has_values2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->values2(), target);
  }

  // optional uint32 activetime = 17;
  if (has_activetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->activetime(), target);
  }

  // optional uint32 countdown = 18;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->countdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbActivity)
  return target;
}

int DbActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 closed = 2;
    if (has_closed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->closed());
    }

    // optional uint32 opentype = 3;
    if (has_opentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opentype());
    }

    // optional uint32 actype = 4;
    if (has_actype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actype());
    }

    // optional uint32 showBeginTime = 5;
    if (has_showbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showbegintime());
    }

    // optional uint32 showEndTime = 6;
    if (has_showendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showendtime());
    }

    // optional uint32 beginTime = 7;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // optional uint32 endTime = 8;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 playerLev = 9;
    if (has_playerlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerlev());
    }

    // optional bytes todayTimes = 10;
    if (has_todaytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->todaytimes());
    }

    // optional bytes values = 11;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->values());
    }

    // optional bytes rewards = 12;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rewards());
    }

    // optional bytes name = 13;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes desc = 14;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional bytes childDesc = 15;
    if (has_childdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->childdesc());
    }

    // optional bytes values2 = 16;
    if (has_values2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->values2());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 activetime = 17;
    if (has_activetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activetime());
    }

    // optional uint32 countdown = 18;
    if (has_countdown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbActivity::MergeFrom(const DbActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_closed()) {
      set_closed(from.closed());
    }
    if (from.has_opentype()) {
      set_opentype(from.opentype());
    }
    if (from.has_actype()) {
      set_actype(from.actype());
    }
    if (from.has_showbegintime()) {
      set_showbegintime(from.showbegintime());
    }
    if (from.has_showendtime()) {
      set_showendtime(from.showendtime());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerlev()) {
      set_playerlev(from.playerlev());
    }
    if (from.has_todaytimes()) {
      set_todaytimes(from.todaytimes());
    }
    if (from.has_values()) {
      set_values(from.values());
    }
    if (from.has_rewards()) {
      set_rewards(from.rewards());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_childdesc()) {
      set_childdesc(from.childdesc());
    }
    if (from.has_values2()) {
      set_values2(from.values2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_activetime()) {
      set_activetime(from.activetime());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbActivity::CopyFrom(const DbActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DbActivity::Swap(DbActivity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(closed_, other->closed_);
    std::swap(opentype_, other->opentype_);
    std::swap(actype_, other->actype_);
    std::swap(showbegintime_, other->showbegintime_);
    std::swap(showendtime_, other->showendtime_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(playerlev_, other->playerlev_);
    std::swap(todaytimes_, other->todaytimes_);
    std::swap(values_, other->values_);
    std::swap(rewards_, other->rewards_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(childdesc_, other->childdesc_);
    std::swap(values2_, other->values2_);
    std::swap(activetime_, other->activetime_);
    std::swap(countdown_, other->countdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbActivity_descriptor_;
  metadata.reflection = DbActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_LoadActivityReq::kCmdIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_LoadActivityReq::LOBBY2DB_LoadActivityReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_LoadActivityReq)
}

void LOBBY2DB_LoadActivityReq::InitAsDefaultInstance() {
}

LOBBY2DB_LoadActivityReq::LOBBY2DB_LoadActivityReq(const LOBBY2DB_LoadActivityReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_LoadActivityReq)
}

void LOBBY2DB_LoadActivityReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300050;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_LoadActivityReq::~LOBBY2DB_LoadActivityReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_LoadActivityReq)
  SharedDtor();
}

void LOBBY2DB_LoadActivityReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_LoadActivityReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_LoadActivityReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_LoadActivityReq_descriptor_;
}

const LOBBY2DB_LoadActivityReq& LOBBY2DB_LoadActivityReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_LoadActivityReq* LOBBY2DB_LoadActivityReq::default_instance_ = NULL;

LOBBY2DB_LoadActivityReq* LOBBY2DB_LoadActivityReq::New() const {
  return new LOBBY2DB_LoadActivityReq;
}

void LOBBY2DB_LoadActivityReq::Clear() {
  cmdid_ = 300050;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_LoadActivityReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_LoadActivityReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADACTIVITYREQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_LoadActivityReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_LoadActivityReq)
  return false;
#undef DO_
}

void LOBBY2DB_LoadActivityReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_LoadActivityReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADACTIVITYREQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_LoadActivityReq)
}

::google::protobuf::uint8* LOBBY2DB_LoadActivityReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_LoadActivityReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADACTIVITYREQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_LoadActivityReq)
  return target;
}

int LOBBY2DB_LoadActivityReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADACTIVITYREQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_LoadActivityReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_LoadActivityReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_LoadActivityReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_LoadActivityReq::MergeFrom(const LOBBY2DB_LoadActivityReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_LoadActivityReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_LoadActivityReq::CopyFrom(const LOBBY2DB_LoadActivityReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_LoadActivityReq::IsInitialized() const {

  return true;
}

void LOBBY2DB_LoadActivityReq::Swap(LOBBY2DB_LoadActivityReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_LoadActivityReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_LoadActivityReq_descriptor_;
  metadata.reflection = LOBBY2DB_LoadActivityReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_LoadActivityRet::kCmdIdFieldNumber;
const int DB2LOBBY_LoadActivityRet::kItemsFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_LoadActivityRet::DB2LOBBY_LoadActivityRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_LoadActivityRet)
}

void DB2LOBBY_LoadActivityRet::InitAsDefaultInstance() {
}

DB2LOBBY_LoadActivityRet::DB2LOBBY_LoadActivityRet(const DB2LOBBY_LoadActivityRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_LoadActivityRet)
}

void DB2LOBBY_LoadActivityRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350050;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_LoadActivityRet::~DB2LOBBY_LoadActivityRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_LoadActivityRet)
  SharedDtor();
}

void DB2LOBBY_LoadActivityRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_LoadActivityRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_LoadActivityRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_LoadActivityRet_descriptor_;
}

const DB2LOBBY_LoadActivityRet& DB2LOBBY_LoadActivityRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_LoadActivityRet* DB2LOBBY_LoadActivityRet::default_instance_ = NULL;

DB2LOBBY_LoadActivityRet* DB2LOBBY_LoadActivityRet::New() const {
  return new DB2LOBBY_LoadActivityRet;
}

void DB2LOBBY_LoadActivityRet::Clear() {
  cmdid_ = 350050;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_LoadActivityRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_LoadActivityRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADACTIVITYRET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .TgsProtocol.DbActivity items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_LoadActivityRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_LoadActivityRet)
  return false;
#undef DO_
}

void DB2LOBBY_LoadActivityRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_LoadActivityRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADACTIVITYRET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DbActivity items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_LoadActivityRet)
}

::google::protobuf::uint8* DB2LOBBY_LoadActivityRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_LoadActivityRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADACTIVITYRET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DbActivity items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_LoadActivityRet)
  return target;
}

int DB2LOBBY_LoadActivityRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADACTIVITYRET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  // repeated .TgsProtocol.DbActivity items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_LoadActivityRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_LoadActivityRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_LoadActivityRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_LoadActivityRet::MergeFrom(const DB2LOBBY_LoadActivityRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_LoadActivityRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_LoadActivityRet::CopyFrom(const DB2LOBBY_LoadActivityRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_LoadActivityRet::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void DB2LOBBY_LoadActivityRet::Swap(DB2LOBBY_LoadActivityRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_LoadActivityRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_LoadActivityRet_descriptor_;
  metadata.reflection = DB2LOBBY_LoadActivityRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateActivityReq::kCmdIdFieldNumber;
const int LOBBY2DB_UpdateActivityReq::kTypeFieldNumber;
const int LOBBY2DB_UpdateActivityReq::kItemFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateActivityReq::LOBBY2DB_UpdateActivityReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateActivityReq)
}

void LOBBY2DB_UpdateActivityReq::InitAsDefaultInstance() {
}

LOBBY2DB_UpdateActivityReq::LOBBY2DB_UpdateActivityReq(const LOBBY2DB_UpdateActivityReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateActivityReq)
}

void LOBBY2DB_UpdateActivityReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300051;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateActivityReq::~LOBBY2DB_UpdateActivityReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateActivityReq)
  SharedDtor();
}

void LOBBY2DB_UpdateActivityReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_UpdateActivityReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateActivityReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateActivityReq_descriptor_;
}

const LOBBY2DB_UpdateActivityReq& LOBBY2DB_UpdateActivityReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateActivityReq* LOBBY2DB_UpdateActivityReq::default_instance_ = NULL;

LOBBY2DB_UpdateActivityReq* LOBBY2DB_UpdateActivityReq::New() const {
  return new LOBBY2DB_UpdateActivityReq;
}

void LOBBY2DB_UpdateActivityReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 300051;
    type_ = 0u;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateActivityReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateActivityReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEACTIVITYREQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.DbActivity item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateActivityReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateActivityReq)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateActivityReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateActivityReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEACTIVITYREQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // repeated .TgsProtocol.DbActivity item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateActivityReq)
}

::google::protobuf::uint8* LOBBY2DB_UpdateActivityReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateActivityReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEACTIVITYREQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // repeated .TgsProtocol.DbActivity item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateActivityReq)
  return target;
}

int LOBBY2DB_UpdateActivityReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEACTIVITYREQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .TgsProtocol.DbActivity item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateActivityReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateActivityReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateActivityReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateActivityReq::MergeFrom(const LOBBY2DB_UpdateActivityReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateActivityReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateActivityReq::CopyFrom(const LOBBY2DB_UpdateActivityReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateActivityReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void LOBBY2DB_UpdateActivityReq::Swap(LOBBY2DB_UpdateActivityReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(type_, other->type_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateActivityReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateActivityReq_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateActivityReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbRank::kTypeFieldNumber;
const int DbRank::kCharidFieldNumber;
const int DbRank::kValueFieldNumber;
const int DbRank::kTemplateIdFieldNumber;
const int DbRank::kInstanceIdFieldNumber;
const int DbRank::kInstanceValueFieldNumber;
#endif  // !_MSC_VER

DbRank::DbRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbRank)
}

void DbRank::InitAsDefaultInstance() {
}

DbRank::DbRank(const DbRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbRank)
}

void DbRank::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  templateid_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  instancevalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbRank::~DbRank() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbRank)
  SharedDtor();
}

void DbRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbRank_descriptor_;
}

const DbRank& DbRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DbRank* DbRank::default_instance_ = NULL;

DbRank* DbRank::New() const {
  return new DbRank;
}

void DbRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, instancevalue_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // required uint64 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_templateId;
        break;
      }

      // optional uint32 templateId = 5;
      case 5: {
        if (tag == 40) {
         parse_templateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_instanceId;
        break;
      }

      // optional uint64 instanceId = 6;
      case 6: {
        if (tag == 48) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_instanceValue;
        break;
      }

      // optional uint32 instanceValue = 7;
      case 7: {
        if (tag == 56) {
         parse_instanceValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instancevalue_)));
          set_has_instancevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbRank)
  return false;
#undef DO_
}

void DbRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbRank)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint64 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->value(), output);
  }

  // optional uint32 templateId = 5;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->templateid(), output);
  }

  // optional uint64 instanceId = 6;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->instanceid(), output);
  }

  // optional uint32 instanceValue = 7;
  if (has_instancevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->instancevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbRank)
}

::google::protobuf::uint8* DbRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbRank)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint64 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->value(), target);
  }

  // optional uint32 templateId = 5;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->templateid(), target);
  }

  // optional uint64 instanceId = 6;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->instanceid(), target);
  }

  // optional uint32 instanceValue = 7;
  if (has_instancevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->instancevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbRank)
  return target;
}

int DbRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint64 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional uint32 templateId = 5;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }

    // optional uint64 instanceId = 6;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 instanceValue = 7;
    if (has_instancevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instancevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbRank::MergeFrom(const DbRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_instancevalue()) {
      set_instancevalue(from.instancevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbRank::CopyFrom(const DbRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DbRank::Swap(DbRank* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(value_, other->value_);
    std::swap(templateid_, other->templateid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(instancevalue_, other->instancevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbRank_descriptor_;
  metadata.reflection = DbRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_LoadRankReq::kCmdIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_LoadRankReq::LOBBY2DB_LoadRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_LoadRankReq)
}

void LOBBY2DB_LoadRankReq::InitAsDefaultInstance() {
}

LOBBY2DB_LoadRankReq::LOBBY2DB_LoadRankReq(const LOBBY2DB_LoadRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_LoadRankReq)
}

void LOBBY2DB_LoadRankReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300060;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_LoadRankReq::~LOBBY2DB_LoadRankReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_LoadRankReq)
  SharedDtor();
}

void LOBBY2DB_LoadRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_LoadRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_LoadRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_LoadRankReq_descriptor_;
}

const LOBBY2DB_LoadRankReq& LOBBY2DB_LoadRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_LoadRankReq* LOBBY2DB_LoadRankReq::default_instance_ = NULL;

LOBBY2DB_LoadRankReq* LOBBY2DB_LoadRankReq::New() const {
  return new LOBBY2DB_LoadRankReq;
}

void LOBBY2DB_LoadRankReq::Clear() {
  cmdid_ = 300060;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_LoadRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_LoadRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADRANKREQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_LoadRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_LoadRankReq)
  return false;
#undef DO_
}

void LOBBY2DB_LoadRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_LoadRankReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADRANKREQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_LoadRankReq)
}

::google::protobuf::uint8* LOBBY2DB_LoadRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_LoadRankReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADRANKREQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_LoadRankReq)
  return target;
}

int LOBBY2DB_LoadRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADRANKREQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_LoadRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_LoadRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_LoadRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_LoadRankReq::MergeFrom(const LOBBY2DB_LoadRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_LoadRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_LoadRankReq::CopyFrom(const LOBBY2DB_LoadRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_LoadRankReq::IsInitialized() const {

  return true;
}

void LOBBY2DB_LoadRankReq::Swap(LOBBY2DB_LoadRankReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_LoadRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_LoadRankReq_descriptor_;
  metadata.reflection = LOBBY2DB_LoadRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_LoadRankRet::kCmdIdFieldNumber;
const int DB2LOBBY_LoadRankRet::kItemsFieldNumber;
const int DB2LOBBY_LoadRankRet::kRetFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_LoadRankRet::DB2LOBBY_LoadRankRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_LoadRankRet)
}

void DB2LOBBY_LoadRankRet::InitAsDefaultInstance() {
}

DB2LOBBY_LoadRankRet::DB2LOBBY_LoadRankRet(const DB2LOBBY_LoadRankRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_LoadRankRet)
}

void DB2LOBBY_LoadRankRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350060;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_LoadRankRet::~DB2LOBBY_LoadRankRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_LoadRankRet)
  SharedDtor();
}

void DB2LOBBY_LoadRankRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_LoadRankRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_LoadRankRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_LoadRankRet_descriptor_;
}

const DB2LOBBY_LoadRankRet& DB2LOBBY_LoadRankRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_LoadRankRet* DB2LOBBY_LoadRankRet::default_instance_ = NULL;

DB2LOBBY_LoadRankRet* DB2LOBBY_LoadRankRet::New() const {
  return new DB2LOBBY_LoadRankRet;
}

void DB2LOBBY_LoadRankRet::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    cmdid_ = 350060;
    ret_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_LoadRankRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_LoadRankRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADRANKRET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .TgsProtocol.DbRank items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_LoadRankRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_LoadRankRet)
  return false;
#undef DO_
}

void DB2LOBBY_LoadRankRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_LoadRankRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADRANKRET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DbRank items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_LoadRankRet)
}

::google::protobuf::uint8* DB2LOBBY_LoadRankRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_LoadRankRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADRANKRET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DbRank items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_LoadRankRet)
  return target;
}

int DB2LOBBY_LoadRankRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADRANKRET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .TgsProtocol.DbRank items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_LoadRankRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_LoadRankRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_LoadRankRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_LoadRankRet::MergeFrom(const DB2LOBBY_LoadRankRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_LoadRankRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_LoadRankRet::CopyFrom(const DB2LOBBY_LoadRankRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_LoadRankRet::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void DB2LOBBY_LoadRankRet::Swap(DB2LOBBY_LoadRankRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    items_.Swap(&other->items_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_LoadRankRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_LoadRankRet_descriptor_;
  metadata.reflection = DB2LOBBY_LoadRankRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateRankReq::kCmdIdFieldNumber;
const int LOBBY2DB_UpdateRankReq::kItemFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateRankReq::LOBBY2DB_UpdateRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateRankReq)
}

void LOBBY2DB_UpdateRankReq::InitAsDefaultInstance() {
}

LOBBY2DB_UpdateRankReq::LOBBY2DB_UpdateRankReq(const LOBBY2DB_UpdateRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateRankReq)
}

void LOBBY2DB_UpdateRankReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300061;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateRankReq::~LOBBY2DB_UpdateRankReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateRankReq)
  SharedDtor();
}

void LOBBY2DB_UpdateRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_UpdateRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateRankReq_descriptor_;
}

const LOBBY2DB_UpdateRankReq& LOBBY2DB_UpdateRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateRankReq* LOBBY2DB_UpdateRankReq::default_instance_ = NULL;

LOBBY2DB_UpdateRankReq* LOBBY2DB_UpdateRankReq::New() const {
  return new LOBBY2DB_UpdateRankReq;
}

void LOBBY2DB_UpdateRankReq::Clear() {
  cmdid_ = 300061;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATERANKREQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.DbRank item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateRankReq)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateRankReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATERANKREQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DbRank item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateRankReq)
}

::google::protobuf::uint8* LOBBY2DB_UpdateRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateRankReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATERANKREQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DbRank item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateRankReq)
  return target;
}

int LOBBY2DB_UpdateRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATERANKREQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  // repeated .TgsProtocol.DbRank item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateRankReq::MergeFrom(const LOBBY2DB_UpdateRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateRankReq::CopyFrom(const LOBBY2DB_UpdateRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateRankReq::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void LOBBY2DB_UpdateRankReq::Swap(LOBBY2DB_UpdateRankReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateRankReq_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_ClearRankReq::kCmdIdFieldNumber;
const int LOBBY2DB_ClearRankReq::kTypeFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_ClearRankReq::LOBBY2DB_ClearRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_ClearRankReq)
}

void LOBBY2DB_ClearRankReq::InitAsDefaultInstance() {
}

LOBBY2DB_ClearRankReq::LOBBY2DB_ClearRankReq(const LOBBY2DB_ClearRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_ClearRankReq)
}

void LOBBY2DB_ClearRankReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300062;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_ClearRankReq::~LOBBY2DB_ClearRankReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_ClearRankReq)
  SharedDtor();
}

void LOBBY2DB_ClearRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_ClearRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_ClearRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_ClearRankReq_descriptor_;
}

const LOBBY2DB_ClearRankReq& LOBBY2DB_ClearRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_ClearRankReq* LOBBY2DB_ClearRankReq::default_instance_ = NULL;

LOBBY2DB_ClearRankReq* LOBBY2DB_ClearRankReq::New() const {
  return new LOBBY2DB_ClearRankReq;
}

void LOBBY2DB_ClearRankReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 300062;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_ClearRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_ClearRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARRANKREQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_ClearRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_ClearRankReq)
  return false;
#undef DO_
}

void LOBBY2DB_ClearRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_ClearRankReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARRANKREQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_ClearRankReq)
}

::google::protobuf::uint8* LOBBY2DB_ClearRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_ClearRankReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARRANKREQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_ClearRankReq)
  return target;
}

int LOBBY2DB_ClearRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARRANKREQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_ClearRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_ClearRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_ClearRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_ClearRankReq::MergeFrom(const LOBBY2DB_ClearRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_ClearRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_ClearRankReq::CopyFrom(const LOBBY2DB_ClearRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_ClearRankReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LOBBY2DB_ClearRankReq::Swap(LOBBY2DB_ClearRankReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_ClearRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_ClearRankReq_descriptor_;
  metadata.reflection = LOBBY2DB_ClearRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_ClearPlayerRank_Req::kCmdIdFieldNumber;
const int LOBBY2DB_ClearPlayerRank_Req::kCharidFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_ClearPlayerRank_Req::LOBBY2DB_ClearPlayerRank_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_ClearPlayerRank_Req)
}

void LOBBY2DB_ClearPlayerRank_Req::InitAsDefaultInstance() {
}

LOBBY2DB_ClearPlayerRank_Req::LOBBY2DB_ClearPlayerRank_Req(const LOBBY2DB_ClearPlayerRank_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_ClearPlayerRank_Req)
}

void LOBBY2DB_ClearPlayerRank_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300075;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_ClearPlayerRank_Req::~LOBBY2DB_ClearPlayerRank_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_ClearPlayerRank_Req)
  SharedDtor();
}

void LOBBY2DB_ClearPlayerRank_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_ClearPlayerRank_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_ClearPlayerRank_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_ClearPlayerRank_Req_descriptor_;
}

const LOBBY2DB_ClearPlayerRank_Req& LOBBY2DB_ClearPlayerRank_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_ClearPlayerRank_Req* LOBBY2DB_ClearPlayerRank_Req::default_instance_ = NULL;

LOBBY2DB_ClearPlayerRank_Req* LOBBY2DB_ClearPlayerRank_Req::New() const {
  return new LOBBY2DB_ClearPlayerRank_Req;
}

void LOBBY2DB_ClearPlayerRank_Req::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 300075;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_ClearPlayerRank_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_ClearPlayerRank_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARPLAYERRANK_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_ClearPlayerRank_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_ClearPlayerRank_Req)
  return false;
#undef DO_
}

void LOBBY2DB_ClearPlayerRank_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_ClearPlayerRank_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARPLAYERRANK_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_ClearPlayerRank_Req)
}

::google::protobuf::uint8* LOBBY2DB_ClearPlayerRank_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_ClearPlayerRank_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARPLAYERRANK_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_ClearPlayerRank_Req)
  return target;
}

int LOBBY2DB_ClearPlayerRank_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARPLAYERRANK_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_ClearPlayerRank_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_ClearPlayerRank_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_ClearPlayerRank_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_ClearPlayerRank_Req::MergeFrom(const LOBBY2DB_ClearPlayerRank_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_ClearPlayerRank_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_ClearPlayerRank_Req::CopyFrom(const LOBBY2DB_ClearPlayerRank_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_ClearPlayerRank_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LOBBY2DB_ClearPlayerRank_Req::Swap(LOBBY2DB_ClearPlayerRank_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_ClearPlayerRank_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_ClearPlayerRank_Req_descriptor_;
  metadata.reflection = LOBBY2DB_ClearPlayerRank_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbArena::kRankFieldNumber;
const int DbArena::kCharidFieldNumber;
const int DbArena::kBestrankFieldNumber;
const int DbArena::kTop3TimeFieldNumber;
const int DbArena::kWinnumFieldNumber;
const int DbArena::kEnemysrankFieldNumber;
#endif  // !_MSC_VER

DbArena::DbArena()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DbArena)
}

void DbArena::InitAsDefaultInstance() {
}

DbArena::DbArena(const DbArena& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DbArena)
}

void DbArena::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rank_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  bestrank_ = 0u;
  top3time_ = 0u;
  winnum_ = GOOGLE_ULONGLONG(0);
  enemysrank_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbArena::~DbArena() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DbArena)
  SharedDtor();
}

void DbArena::SharedDtor() {
  if (enemysrank_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enemysrank_;
  }
  if (this != default_instance_) {
  }
}

void DbArena::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbArena::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbArena_descriptor_;
}

const DbArena& DbArena::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DbArena* DbArena::default_instance_ = NULL;

DbArena* DbArena::New() const {
  return new DbArena;
}

void DbArena::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbArena*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, winnum_);
    top3time_ = 0u;
    if (has_enemysrank()) {
      if (enemysrank_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enemysrank_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbArena::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DbArena)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bestrank;
        break;
      }

      // required uint32 bestrank = 3;
      case 3: {
        if (tag == 24) {
         parse_bestrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bestrank_)));
          set_has_bestrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_top3time;
        break;
      }

      // required uint32 top3time = 4;
      case 4: {
        if (tag == 32) {
         parse_top3time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top3time_)));
          set_has_top3time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_winnum;
        break;
      }

      // required uint64 winnum = 5;
      case 5: {
        if (tag == 40) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_enemysrank;
        break;
      }

      // required string enemysrank = 6;
      case 6: {
        if (tag == 50) {
         parse_enemysrank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemysrank()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enemysrank().data(), this->enemysrank().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "enemysrank");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DbArena)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DbArena)
  return false;
#undef DO_
}

void DbArena::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DbArena)
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required uint32 bestrank = 3;
  if (has_bestrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bestrank(), output);
  }

  // required uint32 top3time = 4;
  if (has_top3time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->top3time(), output);
  }

  // required uint64 winnum = 5;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->winnum(), output);
  }

  // required string enemysrank = 6;
  if (has_enemysrank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enemysrank().data(), this->enemysrank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enemysrank");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->enemysrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DbArena)
}

::google::protobuf::uint8* DbArena::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DbArena)
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required uint32 bestrank = 3;
  if (has_bestrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bestrank(), target);
  }

  // required uint32 top3time = 4;
  if (has_top3time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->top3time(), target);
  }

  // required uint64 winnum = 5;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->winnum(), target);
  }

  // required string enemysrank = 6;
  if (has_enemysrank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enemysrank().data(), this->enemysrank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enemysrank");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->enemysrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DbArena)
  return target;
}

int DbArena::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 bestrank = 3;
    if (has_bestrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bestrank());
    }

    // required uint32 top3time = 4;
    if (has_top3time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top3time());
    }

    // required uint64 winnum = 5;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->winnum());
    }

    // required string enemysrank = 6;
    if (has_enemysrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemysrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbArena::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbArena* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbArena*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbArena::MergeFrom(const DbArena& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_bestrank()) {
      set_bestrank(from.bestrank());
    }
    if (from.has_top3time()) {
      set_top3time(from.top3time());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_enemysrank()) {
      set_enemysrank(from.enemysrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbArena::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbArena::CopyFrom(const DbArena& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbArena::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DbArena::Swap(DbArena* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(charid_, other->charid_);
    std::swap(bestrank_, other->bestrank_);
    std::swap(top3time_, other->top3time_);
    std::swap(winnum_, other->winnum_);
    std::swap(enemysrank_, other->enemysrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbArena::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbArena_descriptor_;
  metadata.reflection = DbArena_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_LoadArenaReq::kCmdIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_LoadArenaReq::LOBBY2DB_LoadArenaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_LoadArenaReq)
}

void LOBBY2DB_LoadArenaReq::InitAsDefaultInstance() {
}

LOBBY2DB_LoadArenaReq::LOBBY2DB_LoadArenaReq(const LOBBY2DB_LoadArenaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_LoadArenaReq)
}

void LOBBY2DB_LoadArenaReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300070;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_LoadArenaReq::~LOBBY2DB_LoadArenaReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_LoadArenaReq)
  SharedDtor();
}

void LOBBY2DB_LoadArenaReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_LoadArenaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_LoadArenaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_LoadArenaReq_descriptor_;
}

const LOBBY2DB_LoadArenaReq& LOBBY2DB_LoadArenaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_LoadArenaReq* LOBBY2DB_LoadArenaReq::default_instance_ = NULL;

LOBBY2DB_LoadArenaReq* LOBBY2DB_LoadArenaReq::New() const {
  return new LOBBY2DB_LoadArenaReq;
}

void LOBBY2DB_LoadArenaReq::Clear() {
  cmdid_ = 300070;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_LoadArenaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_LoadArenaReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADARENAREQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_LoadArenaReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_LoadArenaReq)
  return false;
#undef DO_
}

void LOBBY2DB_LoadArenaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_LoadArenaReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADARENAREQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_LoadArenaReq)
}

::google::protobuf::uint8* LOBBY2DB_LoadArenaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_LoadArenaReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADARENAREQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_LoadArenaReq)
  return target;
}

int LOBBY2DB_LoadArenaReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADARENAREQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_LoadArenaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_LoadArenaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_LoadArenaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_LoadArenaReq::MergeFrom(const LOBBY2DB_LoadArenaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_LoadArenaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_LoadArenaReq::CopyFrom(const LOBBY2DB_LoadArenaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_LoadArenaReq::IsInitialized() const {

  return true;
}

void LOBBY2DB_LoadArenaReq::Swap(LOBBY2DB_LoadArenaReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_LoadArenaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_LoadArenaReq_descriptor_;
  metadata.reflection = LOBBY2DB_LoadArenaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_LoadArenaRet::kCmdIdFieldNumber;
const int DB2LOBBY_LoadArenaRet::kItemsFieldNumber;
const int DB2LOBBY_LoadArenaRet::kRetFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_LoadArenaRet::DB2LOBBY_LoadArenaRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_LoadArenaRet)
}

void DB2LOBBY_LoadArenaRet::InitAsDefaultInstance() {
}

DB2LOBBY_LoadArenaRet::DB2LOBBY_LoadArenaRet(const DB2LOBBY_LoadArenaRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_LoadArenaRet)
}

void DB2LOBBY_LoadArenaRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350070;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_LoadArenaRet::~DB2LOBBY_LoadArenaRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_LoadArenaRet)
  SharedDtor();
}

void DB2LOBBY_LoadArenaRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_LoadArenaRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_LoadArenaRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_LoadArenaRet_descriptor_;
}

const DB2LOBBY_LoadArenaRet& DB2LOBBY_LoadArenaRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_LoadArenaRet* DB2LOBBY_LoadArenaRet::default_instance_ = NULL;

DB2LOBBY_LoadArenaRet* DB2LOBBY_LoadArenaRet::New() const {
  return new DB2LOBBY_LoadArenaRet;
}

void DB2LOBBY_LoadArenaRet::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    cmdid_ = 350070;
    ret_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_LoadArenaRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_LoadArenaRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADARENARET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .TgsProtocol.DbArena items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_LoadArenaRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_LoadArenaRet)
  return false;
#undef DO_
}

void DB2LOBBY_LoadArenaRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_LoadArenaRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADARENARET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DbArena items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_LoadArenaRet)
}

::google::protobuf::uint8* DB2LOBBY_LoadArenaRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_LoadArenaRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADARENARET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DbArena items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_LoadArenaRet)
  return target;
}

int DB2LOBBY_LoadArenaRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADARENARET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .TgsProtocol.DbArena items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_LoadArenaRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_LoadArenaRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_LoadArenaRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_LoadArenaRet::MergeFrom(const DB2LOBBY_LoadArenaRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_LoadArenaRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_LoadArenaRet::CopyFrom(const DB2LOBBY_LoadArenaRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_LoadArenaRet::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void DB2LOBBY_LoadArenaRet::Swap(DB2LOBBY_LoadArenaRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    items_.Swap(&other->items_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_LoadArenaRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_LoadArenaRet_descriptor_;
  metadata.reflection = DB2LOBBY_LoadArenaRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateArenaReq::kCmdIdFieldNumber;
const int LOBBY2DB_UpdateArenaReq::kItemFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateArenaReq::LOBBY2DB_UpdateArenaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateArenaReq)
}

void LOBBY2DB_UpdateArenaReq::InitAsDefaultInstance() {
}

LOBBY2DB_UpdateArenaReq::LOBBY2DB_UpdateArenaReq(const LOBBY2DB_UpdateArenaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateArenaReq)
}

void LOBBY2DB_UpdateArenaReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300071;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateArenaReq::~LOBBY2DB_UpdateArenaReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateArenaReq)
  SharedDtor();
}

void LOBBY2DB_UpdateArenaReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_UpdateArenaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateArenaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateArenaReq_descriptor_;
}

const LOBBY2DB_UpdateArenaReq& LOBBY2DB_UpdateArenaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateArenaReq* LOBBY2DB_UpdateArenaReq::default_instance_ = NULL;

LOBBY2DB_UpdateArenaReq* LOBBY2DB_UpdateArenaReq::New() const {
  return new LOBBY2DB_UpdateArenaReq;
}

void LOBBY2DB_UpdateArenaReq::Clear() {
  cmdid_ = 300071;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateArenaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateArenaReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEARENAREQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.DbArena item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateArenaReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateArenaReq)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateArenaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateArenaReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEARENAREQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DbArena item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateArenaReq)
}

::google::protobuf::uint8* LOBBY2DB_UpdateArenaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateArenaReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEARENAREQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DbArena item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateArenaReq)
  return target;
}

int LOBBY2DB_UpdateArenaReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEARENAREQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  // repeated .TgsProtocol.DbArena item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateArenaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateArenaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateArenaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateArenaReq::MergeFrom(const LOBBY2DB_UpdateArenaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateArenaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateArenaReq::CopyFrom(const LOBBY2DB_UpdateArenaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateArenaReq::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void LOBBY2DB_UpdateArenaReq::Swap(LOBBY2DB_UpdateArenaReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateArenaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateArenaReq_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateArenaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBServerCompare::kRankFieldNumber;
const int DBServerCompare::kTypeFieldNumber;
const int DBServerCompare::kCharidFieldNumber;
const int DBServerCompare::kValueFieldNumber;
#endif  // !_MSC_VER

DBServerCompare::DBServerCompare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBServerCompare)
}

void DBServerCompare::InitAsDefaultInstance() {
}

DBServerCompare::DBServerCompare(const DBServerCompare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBServerCompare)
}

void DBServerCompare::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  type_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBServerCompare::~DBServerCompare() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBServerCompare)
  SharedDtor();
}

void DBServerCompare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBServerCompare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBServerCompare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBServerCompare_descriptor_;
}

const DBServerCompare& DBServerCompare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DBServerCompare* DBServerCompare::default_instance_ = NULL;

DBServerCompare* DBServerCompare::New() const {
  return new DBServerCompare;
}

void DBServerCompare::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBServerCompare*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rank_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBServerCompare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBServerCompare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .TgsProtocol.ServerCompareType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::ServerCompareType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::ServerCompareType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // required uint64 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBServerCompare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBServerCompare)
  return false;
#undef DO_
}

void DBServerCompare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBServerCompare)
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required .TgsProtocol.ServerCompareType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint64 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBServerCompare)
}

::google::protobuf::uint8* DBServerCompare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBServerCompare)
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required .TgsProtocol.ServerCompareType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint64 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBServerCompare)
  return target;
}

int DBServerCompare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required .TgsProtocol.ServerCompareType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint64 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBServerCompare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBServerCompare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBServerCompare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBServerCompare::MergeFrom(const DBServerCompare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBServerCompare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBServerCompare::CopyFrom(const DBServerCompare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBServerCompare::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DBServerCompare::Swap(DBServerCompare* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBServerCompare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBServerCompare_descriptor_;
  metadata.reflection = DBServerCompare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_LoadServerCompare_Req::kCmdIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_LoadServerCompare_Req::LOBBY2DB_LoadServerCompare_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_LoadServerCompare_Req)
}

void LOBBY2DB_LoadServerCompare_Req::InitAsDefaultInstance() {
}

LOBBY2DB_LoadServerCompare_Req::LOBBY2DB_LoadServerCompare_Req(const LOBBY2DB_LoadServerCompare_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_LoadServerCompare_Req)
}

void LOBBY2DB_LoadServerCompare_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300072;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_LoadServerCompare_Req::~LOBBY2DB_LoadServerCompare_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_LoadServerCompare_Req)
  SharedDtor();
}

void LOBBY2DB_LoadServerCompare_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_LoadServerCompare_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_LoadServerCompare_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_LoadServerCompare_Req_descriptor_;
}

const LOBBY2DB_LoadServerCompare_Req& LOBBY2DB_LoadServerCompare_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_LoadServerCompare_Req* LOBBY2DB_LoadServerCompare_Req::default_instance_ = NULL;

LOBBY2DB_LoadServerCompare_Req* LOBBY2DB_LoadServerCompare_Req::New() const {
  return new LOBBY2DB_LoadServerCompare_Req;
}

void LOBBY2DB_LoadServerCompare_Req::Clear() {
  cmdid_ = 300072;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_LoadServerCompare_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_LoadServerCompare_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADSERVERCOMPARE_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_LoadServerCompare_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_LoadServerCompare_Req)
  return false;
#undef DO_
}

void LOBBY2DB_LoadServerCompare_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_LoadServerCompare_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADSERVERCOMPARE_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_LoadServerCompare_Req)
}

::google::protobuf::uint8* LOBBY2DB_LoadServerCompare_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_LoadServerCompare_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADSERVERCOMPARE_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_LoadServerCompare_Req)
  return target;
}

int LOBBY2DB_LoadServerCompare_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADSERVERCOMPARE_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_LoadServerCompare_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_LoadServerCompare_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_LoadServerCompare_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_LoadServerCompare_Req::MergeFrom(const LOBBY2DB_LoadServerCompare_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_LoadServerCompare_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_LoadServerCompare_Req::CopyFrom(const LOBBY2DB_LoadServerCompare_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_LoadServerCompare_Req::IsInitialized() const {

  return true;
}

void LOBBY2DB_LoadServerCompare_Req::Swap(LOBBY2DB_LoadServerCompare_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_LoadServerCompare_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_LoadServerCompare_Req_descriptor_;
  metadata.reflection = LOBBY2DB_LoadServerCompare_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_LoadServerCompare_Ret::kCmdIdFieldNumber;
const int DB2LOBBY_LoadServerCompare_Ret::kRetFieldNumber;
const int DB2LOBBY_LoadServerCompare_Ret::kCompareInfoFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_LoadServerCompare_Ret::DB2LOBBY_LoadServerCompare_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_LoadServerCompare_Ret)
}

void DB2LOBBY_LoadServerCompare_Ret::InitAsDefaultInstance() {
}

DB2LOBBY_LoadServerCompare_Ret::DB2LOBBY_LoadServerCompare_Ret(const DB2LOBBY_LoadServerCompare_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_LoadServerCompare_Ret)
}

void DB2LOBBY_LoadServerCompare_Ret::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350071;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_LoadServerCompare_Ret::~DB2LOBBY_LoadServerCompare_Ret() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_LoadServerCompare_Ret)
  SharedDtor();
}

void DB2LOBBY_LoadServerCompare_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_LoadServerCompare_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_LoadServerCompare_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_LoadServerCompare_Ret_descriptor_;
}

const DB2LOBBY_LoadServerCompare_Ret& DB2LOBBY_LoadServerCompare_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_LoadServerCompare_Ret* DB2LOBBY_LoadServerCompare_Ret::default_instance_ = NULL;

DB2LOBBY_LoadServerCompare_Ret* DB2LOBBY_LoadServerCompare_Ret::New() const {
  return new DB2LOBBY_LoadServerCompare_Ret;
}

void DB2LOBBY_LoadServerCompare_Ret::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 350071;
    ret_ = 0u;
  }
  compare_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_LoadServerCompare_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_LoadServerCompare_Ret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADSERVERCOMPARE_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_compare_info;
        break;
      }

      // repeated .TgsProtocol.DBServerCompare compare_info = 3;
      case 3: {
        if (tag == 26) {
         parse_compare_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compare_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_compare_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_LoadServerCompare_Ret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_LoadServerCompare_Ret)
  return false;
#undef DO_
}

void DB2LOBBY_LoadServerCompare_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_LoadServerCompare_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADSERVERCOMPARE_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .TgsProtocol.DBServerCompare compare_info = 3;
  for (int i = 0; i < this->compare_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->compare_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_LoadServerCompare_Ret)
}

::google::protobuf::uint8* DB2LOBBY_LoadServerCompare_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_LoadServerCompare_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADSERVERCOMPARE_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .TgsProtocol.DBServerCompare compare_info = 3;
  for (int i = 0; i < this->compare_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->compare_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_LoadServerCompare_Ret)
  return target;
}

int DB2LOBBY_LoadServerCompare_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOADSERVERCOMPARE_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .TgsProtocol.DBServerCompare compare_info = 3;
  total_size += 1 * this->compare_info_size();
  for (int i = 0; i < this->compare_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compare_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_LoadServerCompare_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_LoadServerCompare_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_LoadServerCompare_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_LoadServerCompare_Ret::MergeFrom(const DB2LOBBY_LoadServerCompare_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  compare_info_.MergeFrom(from.compare_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_LoadServerCompare_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_LoadServerCompare_Ret::CopyFrom(const DB2LOBBY_LoadServerCompare_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_LoadServerCompare_Ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->compare_info())) return false;
  return true;
}

void DB2LOBBY_LoadServerCompare_Ret::Swap(DB2LOBBY_LoadServerCompare_Ret* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    compare_info_.Swap(&other->compare_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_LoadServerCompare_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_LoadServerCompare_Ret_descriptor_;
  metadata.reflection = DB2LOBBY_LoadServerCompare_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateServerCompare_Req::kCmdIdFieldNumber;
const int LOBBY2DB_UpdateServerCompare_Req::kCompareInfoFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateServerCompare_Req::LOBBY2DB_UpdateServerCompare_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateServerCompare_Req)
}

void LOBBY2DB_UpdateServerCompare_Req::InitAsDefaultInstance() {
}

LOBBY2DB_UpdateServerCompare_Req::LOBBY2DB_UpdateServerCompare_Req(const LOBBY2DB_UpdateServerCompare_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateServerCompare_Req)
}

void LOBBY2DB_UpdateServerCompare_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300073;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateServerCompare_Req::~LOBBY2DB_UpdateServerCompare_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateServerCompare_Req)
  SharedDtor();
}

void LOBBY2DB_UpdateServerCompare_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_UpdateServerCompare_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateServerCompare_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateServerCompare_Req_descriptor_;
}

const LOBBY2DB_UpdateServerCompare_Req& LOBBY2DB_UpdateServerCompare_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateServerCompare_Req* LOBBY2DB_UpdateServerCompare_Req::default_instance_ = NULL;

LOBBY2DB_UpdateServerCompare_Req* LOBBY2DB_UpdateServerCompare_Req::New() const {
  return new LOBBY2DB_UpdateServerCompare_Req;
}

void LOBBY2DB_UpdateServerCompare_Req::Clear() {
  cmdid_ = 300073;
  compare_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateServerCompare_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateServerCompare_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATESERVERCOMPARE_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_compare_info;
        break;
      }

      // repeated .TgsProtocol.DBServerCompare compare_info = 2;
      case 2: {
        if (tag == 18) {
         parse_compare_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compare_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_compare_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateServerCompare_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateServerCompare_Req)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateServerCompare_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateServerCompare_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATESERVERCOMPARE_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DBServerCompare compare_info = 2;
  for (int i = 0; i < this->compare_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->compare_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateServerCompare_Req)
}

::google::protobuf::uint8* LOBBY2DB_UpdateServerCompare_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateServerCompare_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATESERVERCOMPARE_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DBServerCompare compare_info = 2;
  for (int i = 0; i < this->compare_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->compare_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateServerCompare_Req)
  return target;
}

int LOBBY2DB_UpdateServerCompare_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATESERVERCOMPARE_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  // repeated .TgsProtocol.DBServerCompare compare_info = 2;
  total_size += 1 * this->compare_info_size();
  for (int i = 0; i < this->compare_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compare_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateServerCompare_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateServerCompare_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateServerCompare_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateServerCompare_Req::MergeFrom(const LOBBY2DB_UpdateServerCompare_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  compare_info_.MergeFrom(from.compare_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateServerCompare_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateServerCompare_Req::CopyFrom(const LOBBY2DB_UpdateServerCompare_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateServerCompare_Req::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->compare_info())) return false;
  return true;
}

void LOBBY2DB_UpdateServerCompare_Req::Swap(LOBBY2DB_UpdateServerCompare_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    compare_info_.Swap(&other->compare_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateServerCompare_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateServerCompare_Req_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateServerCompare_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_ClearServerCompare_Req::kCmdIdFieldNumber;
const int LOBBY2DB_ClearServerCompare_Req::kTypeFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_ClearServerCompare_Req::LOBBY2DB_ClearServerCompare_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_ClearServerCompare_Req)
}

void LOBBY2DB_ClearServerCompare_Req::InitAsDefaultInstance() {
}

LOBBY2DB_ClearServerCompare_Req::LOBBY2DB_ClearServerCompare_Req(const LOBBY2DB_ClearServerCompare_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_ClearServerCompare_Req)
}

void LOBBY2DB_ClearServerCompare_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 300074;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_ClearServerCompare_Req::~LOBBY2DB_ClearServerCompare_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_ClearServerCompare_Req)
  SharedDtor();
}

void LOBBY2DB_ClearServerCompare_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_ClearServerCompare_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_ClearServerCompare_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_ClearServerCompare_Req_descriptor_;
}

const LOBBY2DB_ClearServerCompare_Req& LOBBY2DB_ClearServerCompare_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_ClearServerCompare_Req* LOBBY2DB_ClearServerCompare_Req::default_instance_ = NULL;

LOBBY2DB_ClearServerCompare_Req* LOBBY2DB_ClearServerCompare_Req::New() const {
  return new LOBBY2DB_ClearServerCompare_Req;
}

void LOBBY2DB_ClearServerCompare_Req::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 300074;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_ClearServerCompare_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_ClearServerCompare_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARSERVERCOMPARE_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .TgsProtocol.ServerCompareType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::ServerCompareType_IsValid(value)) {
            set_type(static_cast< ::TgsProtocol::ServerCompareType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_ClearServerCompare_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_ClearServerCompare_Req)
  return false;
#undef DO_
}

void LOBBY2DB_ClearServerCompare_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_ClearServerCompare_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARSERVERCOMPARE_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required .TgsProtocol.ServerCompareType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_ClearServerCompare_Req)
}

::google::protobuf::uint8* LOBBY2DB_ClearServerCompare_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_ClearServerCompare_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARSERVERCOMPARE_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required .TgsProtocol.ServerCompareType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_ClearServerCompare_Req)
  return target;
}

int LOBBY2DB_ClearServerCompare_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CLEARSERVERCOMPARE_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required .TgsProtocol.ServerCompareType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_ClearServerCompare_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_ClearServerCompare_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_ClearServerCompare_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_ClearServerCompare_Req::MergeFrom(const LOBBY2DB_ClearServerCompare_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_ClearServerCompare_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_ClearServerCompare_Req::CopyFrom(const LOBBY2DB_ClearServerCompare_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_ClearServerCompare_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LOBBY2DB_ClearServerCompare_Req::Swap(LOBBY2DB_ClearServerCompare_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_ClearServerCompare_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_ClearServerCompare_Req_descriptor_;
  metadata.reflection = LOBBY2DB_ClearServerCompare_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBGuildPlayer::kCharidFieldNumber;
const int DBGuildPlayer::kGuildidFieldNumber;
const int DBGuildPlayer::kJobFieldNumber;
const int DBGuildPlayer::kJointimeFieldNumber;
const int DBGuildPlayer::kRitualFieldNumber;
const int DBGuildPlayer::kDaysFieldNumber;
const int DBGuildPlayer::kRewardgotFieldNumber;
const int DBGuildPlayer::kRitualtimeFieldNumber;
const int DBGuildPlayer::kRaterewardFieldNumber;
const int DBGuildPlayer::kTerritoryFieldNumber;
const int DBGuildPlayer::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

DBGuildPlayer::DBGuildPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBGuildPlayer)
}

void DBGuildPlayer::InitAsDefaultInstance() {
}

DBGuildPlayer::DBGuildPlayer(const DBGuildPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBGuildPlayer)
}

void DBGuildPlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  guildid_ = 0u;
  job_ = 0u;
  jointime_ = 0u;
  ritual_ = 0u;
  days_ = 0u;
  rewardgot_ = 0u;
  ritualtime_ = 0u;
  ratereward_ = 0u;
  territory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skill_level_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBGuildPlayer::~DBGuildPlayer() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBGuildPlayer)
  SharedDtor();
}

void DBGuildPlayer::SharedDtor() {
  if (territory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete territory_;
  }
  if (skill_level_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skill_level_;
  }
  if (this != default_instance_) {
  }
}

void DBGuildPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBGuildPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBGuildPlayer_descriptor_;
}

const DBGuildPlayer& DBGuildPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DBGuildPlayer* DBGuildPlayer::default_instance_ = NULL;

DBGuildPlayer* DBGuildPlayer::New() const {
  return new DBGuildPlayer;
}

void DBGuildPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBGuildPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, ritualtime_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ratereward_ = 0u;
    if (has_territory()) {
      if (territory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        territory_->clear();
      }
    }
    if (has_skill_level()) {
      if (skill_level_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skill_level_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBGuildPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBGuildPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // required uint32 guildid = 2;
      case 2: {
        if (tag == 16) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // required uint32 job = 3;
      case 3: {
        if (tag == 24) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_jointime;
        break;
      }

      // required uint32 jointime = 4;
      case 4: {
        if (tag == 32) {
         parse_jointime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ritual;
        break;
      }

      // optional uint32 ritual = 5;
      case 5: {
        if (tag == 40) {
         parse_ritual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ritual_)));
          set_has_ritual();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_days;
        break;
      }

      // optional uint32 days = 6;
      case 6: {
        if (tag == 48) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rewardgot;
        break;
      }

      // optional uint32 rewardgot = 7;
      case 7: {
        if (tag == 56) {
         parse_rewardgot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardgot_)));
          set_has_rewardgot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ritualtime;
        break;
      }

      // optional uint32 ritualtime = 8;
      case 8: {
        if (tag == 64) {
         parse_ritualtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ritualtime_)));
          set_has_ritualtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ratereward;
        break;
      }

      // optional uint32 ratereward = 9;
      case 9: {
        if (tag == 72) {
         parse_ratereward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratereward_)));
          set_has_ratereward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_territory;
        break;
      }

      // optional bytes territory = 10;
      case 10: {
        if (tag == 82) {
         parse_territory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_territory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_skill_level;
        break;
      }

      // optional string skill_level = 11;
      case 11: {
        if (tag == 90) {
         parse_skill_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skill_level().data(), this->skill_level().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skill_level");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBGuildPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBGuildPlayer)
  return false;
#undef DO_
}

void DBGuildPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBGuildPlayer)
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guildid(), output);
  }

  // required uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // required uint32 jointime = 4;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->jointime(), output);
  }

  // optional uint32 ritual = 5;
  if (has_ritual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ritual(), output);
  }

  // optional uint32 days = 6;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->days(), output);
  }

  // optional uint32 rewardgot = 7;
  if (has_rewardgot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rewardgot(), output);
  }

  // optional uint32 ritualtime = 8;
  if (has_ritualtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ritualtime(), output);
  }

  // optional uint32 ratereward = 9;
  if (has_ratereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ratereward(), output);
  }

  // optional bytes territory = 10;
  if (has_territory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->territory(), output);
  }

  // optional string skill_level = 11;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill_level().data(), this->skill_level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill_level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->skill_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBGuildPlayer)
}

::google::protobuf::uint8* DBGuildPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBGuildPlayer)
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guildid(), target);
  }

  // required uint32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job(), target);
  }

  // required uint32 jointime = 4;
  if (has_jointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->jointime(), target);
  }

  // optional uint32 ritual = 5;
  if (has_ritual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ritual(), target);
  }

  // optional uint32 days = 6;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->days(), target);
  }

  // optional uint32 rewardgot = 7;
  if (has_rewardgot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rewardgot(), target);
  }

  // optional uint32 ritualtime = 8;
  if (has_ritualtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ritualtime(), target);
  }

  // optional uint32 ratereward = 9;
  if (has_ratereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ratereward(), target);
  }

  // optional bytes territory = 10;
  if (has_territory()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->territory(), target);
  }

  // optional string skill_level = 11;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill_level().data(), this->skill_level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill_level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->skill_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBGuildPlayer)
  return target;
}

int DBGuildPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // required uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // required uint32 jointime = 4;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jointime());
    }

    // optional uint32 ritual = 5;
    if (has_ritual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ritual());
    }

    // optional uint32 days = 6;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days());
    }

    // optional uint32 rewardgot = 7;
    if (has_rewardgot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardgot());
    }

    // optional uint32 ritualtime = 8;
    if (has_ritualtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ritualtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ratereward = 9;
    if (has_ratereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ratereward());
    }

    // optional bytes territory = 10;
    if (has_territory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->territory());
    }

    // optional string skill_level = 11;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBGuildPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBGuildPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBGuildPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBGuildPlayer::MergeFrom(const DBGuildPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
    if (from.has_ritual()) {
      set_ritual(from.ritual());
    }
    if (from.has_days()) {
      set_days(from.days());
    }
    if (from.has_rewardgot()) {
      set_rewardgot(from.rewardgot());
    }
    if (from.has_ritualtime()) {
      set_ritualtime(from.ritualtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ratereward()) {
      set_ratereward(from.ratereward());
    }
    if (from.has_territory()) {
      set_territory(from.territory());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBGuildPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBGuildPlayer::CopyFrom(const DBGuildPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGuildPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DBGuildPlayer::Swap(DBGuildPlayer* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(job_, other->job_);
    std::swap(jointime_, other->jointime_);
    std::swap(ritual_, other->ritual_);
    std::swap(days_, other->days_);
    std::swap(rewardgot_, other->rewardgot_);
    std::swap(ritualtime_, other->ritualtime_);
    std::swap(ratereward_, other->ratereward_);
    std::swap(territory_, other->territory_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBGuildPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBGuildPlayer_descriptor_;
  metadata.reflection = DBGuildPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBGuildApply::kCharidFieldNumber;
const int DBGuildApply::kGuildidFieldNumber;
#endif  // !_MSC_VER

DBGuildApply::DBGuildApply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBGuildApply)
}

void DBGuildApply::InitAsDefaultInstance() {
}

DBGuildApply::DBGuildApply(const DBGuildApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBGuildApply)
}

void DBGuildApply::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBGuildApply::~DBGuildApply() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBGuildApply)
  SharedDtor();
}

void DBGuildApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBGuildApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBGuildApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBGuildApply_descriptor_;
}

const DBGuildApply& DBGuildApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DBGuildApply* DBGuildApply::default_instance_ = NULL;

DBGuildApply* DBGuildApply::New() const {
  return new DBGuildApply;
}

void DBGuildApply::Clear() {
  charid_ = GOOGLE_ULONGLONG(0);
  guildid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBGuildApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBGuildApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // repeated uint32 guildid = 2;
      case 2: {
        if (tag == 16) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_guildid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guildid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBGuildApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBGuildApply)
  return false;
#undef DO_
}

void DBGuildApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBGuildApply)
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // repeated uint32 guildid = 2;
  for (int i = 0; i < this->guildid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->guildid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBGuildApply)
}

::google::protobuf::uint8* DBGuildApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBGuildApply)
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // repeated uint32 guildid = 2;
  for (int i = 0; i < this->guildid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->guildid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBGuildApply)
  return target;
}

int DBGuildApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated uint32 guildid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->guildid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->guildid(i));
    }
    total_size += 1 * this->guildid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBGuildApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBGuildApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBGuildApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBGuildApply::MergeFrom(const DBGuildApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildid_.MergeFrom(from.guildid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBGuildApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBGuildApply::CopyFrom(const DBGuildApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGuildApply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DBGuildApply::Swap(DBGuildApply* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    guildid_.Swap(&other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBGuildApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBGuildApply_descriptor_;
  metadata.reflection = DBGuildApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBGuildInfo::kInfoFieldNumber;
const int DBGuildInfo::kGuildMapFieldNumber;
const int DBGuildInfo::kPassedChapteridFieldNumber;
const int DBGuildInfo::kChapterFieldNumber;
#endif  // !_MSC_VER

DBGuildInfo::DBGuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DBGuildInfo)
}

void DBGuildInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::TgsProtocol::GuildInfo*>(&::TgsProtocol::GuildInfo::default_instance());
  chapter_ = const_cast< ::TgsProtocol::GuildChapterInfo*>(&::TgsProtocol::GuildChapterInfo::default_instance());
}

DBGuildInfo::DBGuildInfo(const DBGuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DBGuildInfo)
}

void DBGuildInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_ = NULL;
  guild_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passed_chapterid_ = 0u;
  chapter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBGuildInfo::~DBGuildInfo() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DBGuildInfo)
  SharedDtor();
}

void DBGuildInfo::SharedDtor() {
  if (guild_map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_map_;
  }
  if (this != default_instance_) {
    delete info_;
    delete chapter_;
  }
}

void DBGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBGuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBGuildInfo_descriptor_;
}

const DBGuildInfo& DBGuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DBGuildInfo* DBGuildInfo::default_instance_ = NULL;

DBGuildInfo* DBGuildInfo::New() const {
  return new DBGuildInfo;
}

void DBGuildInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_info()) {
      if (info_ != NULL) info_->::TgsProtocol::GuildInfo::Clear();
    }
    if (has_guild_map()) {
      if (guild_map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_map_->clear();
      }
    }
    passed_chapterid_ = 0u;
    if (has_chapter()) {
      if (chapter_ != NULL) chapter_->::TgsProtocol::GuildChapterInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DBGuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TgsProtocol.GuildInfo info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild_map;
        break;
      }

      // optional bytes guild_map = 2;
      case 2: {
        if (tag == 18) {
         parse_guild_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guild_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_passed_chapterid;
        break;
      }

      // optional uint32 passed_chapterid = 3;
      case 3: {
        if (tag == 24) {
         parse_passed_chapterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passed_chapterid_)));
          set_has_passed_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chapter;
        break;
      }

      // optional .TgsProtocol.GuildChapterInfo chapter = 4;
      case 4: {
        if (tag == 34) {
         parse_chapter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chapter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DBGuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DBGuildInfo)
  return false;
#undef DO_
}

void DBGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DBGuildInfo)
  // required .TgsProtocol.GuildInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional bytes guild_map = 2;
  if (has_guild_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->guild_map(), output);
  }

  // optional uint32 passed_chapterid = 3;
  if (has_passed_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->passed_chapterid(), output);
  }

  // optional .TgsProtocol.GuildChapterInfo chapter = 4;
  if (has_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chapter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DBGuildInfo)
}

::google::protobuf::uint8* DBGuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DBGuildInfo)
  // required .TgsProtocol.GuildInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional bytes guild_map = 2;
  if (has_guild_map()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->guild_map(), target);
  }

  // optional uint32 passed_chapterid = 3;
  if (has_passed_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->passed_chapterid(), target);
  }

  // optional .TgsProtocol.GuildChapterInfo chapter = 4;
  if (has_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chapter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DBGuildInfo)
  return target;
}

int DBGuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TgsProtocol.GuildInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional bytes guild_map = 2;
    if (has_guild_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guild_map());
    }

    // optional uint32 passed_chapterid = 3;
    if (has_passed_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passed_chapterid());
    }

    // optional .TgsProtocol.GuildChapterInfo chapter = 4;
    if (has_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chapter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBGuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBGuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBGuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBGuildInfo::MergeFrom(const DBGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::TgsProtocol::GuildInfo::MergeFrom(from.info());
    }
    if (from.has_guild_map()) {
      set_guild_map(from.guild_map());
    }
    if (from.has_passed_chapterid()) {
      set_passed_chapterid(from.passed_chapterid());
    }
    if (from.has_chapter()) {
      mutable_chapter()->::TgsProtocol::GuildChapterInfo::MergeFrom(from.chapter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBGuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBGuildInfo::CopyFrom(const DBGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGuildInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_chapter()) {
    if (!this->chapter().IsInitialized()) return false;
  }
  return true;
}

void DBGuildInfo::Swap(DBGuildInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(guild_map_, other->guild_map_);
    std::swap(passed_chapterid_, other->passed_chapterid_);
    std::swap(chapter_, other->chapter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBGuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBGuildInfo_descriptor_;
  metadata.reflection = DBGuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_LoadGuild_Req::kCmdIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_LoadGuild_Req::LOBBY2DB_LoadGuild_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_LoadGuild_Req)
}

void LOBBY2DB_LoadGuild_Req::InitAsDefaultInstance() {
}

LOBBY2DB_LoadGuild_Req::LOBBY2DB_LoadGuild_Req(const LOBBY2DB_LoadGuild_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_LoadGuild_Req)
}

void LOBBY2DB_LoadGuild_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350080;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_LoadGuild_Req::~LOBBY2DB_LoadGuild_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_LoadGuild_Req)
  SharedDtor();
}

void LOBBY2DB_LoadGuild_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_LoadGuild_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_LoadGuild_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_LoadGuild_Req_descriptor_;
}

const LOBBY2DB_LoadGuild_Req& LOBBY2DB_LoadGuild_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_LoadGuild_Req* LOBBY2DB_LoadGuild_Req::default_instance_ = NULL;

LOBBY2DB_LoadGuild_Req* LOBBY2DB_LoadGuild_Req::New() const {
  return new LOBBY2DB_LoadGuild_Req;
}

void LOBBY2DB_LoadGuild_Req::Clear() {
  cmdid_ = 350080;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_LoadGuild_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_LoadGuild_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADGUILD_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_LoadGuild_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_LoadGuild_Req)
  return false;
#undef DO_
}

void LOBBY2DB_LoadGuild_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_LoadGuild_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADGUILD_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_LoadGuild_Req)
}

::google::protobuf::uint8* LOBBY2DB_LoadGuild_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_LoadGuild_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADGUILD_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_LoadGuild_Req)
  return target;
}

int LOBBY2DB_LoadGuild_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOADGUILD_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_LoadGuild_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_LoadGuild_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_LoadGuild_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_LoadGuild_Req::MergeFrom(const LOBBY2DB_LoadGuild_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_LoadGuild_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_LoadGuild_Req::CopyFrom(const LOBBY2DB_LoadGuild_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_LoadGuild_Req::IsInitialized() const {

  return true;
}

void LOBBY2DB_LoadGuild_Req::Swap(LOBBY2DB_LoadGuild_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_LoadGuild_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_LoadGuild_Req_descriptor_;
  metadata.reflection = LOBBY2DB_LoadGuild_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_GuildInfo_Ret::kCmdIdFieldNumber;
const int DB2LOBBY_GuildInfo_Ret::kItemFieldNumber;
const int DB2LOBBY_GuildInfo_Ret::kRetFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_GuildInfo_Ret::DB2LOBBY_GuildInfo_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_GuildInfo_Ret)
}

void DB2LOBBY_GuildInfo_Ret::InitAsDefaultInstance() {
}

DB2LOBBY_GuildInfo_Ret::DB2LOBBY_GuildInfo_Ret(const DB2LOBBY_GuildInfo_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_GuildInfo_Ret)
}

void DB2LOBBY_GuildInfo_Ret::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350081;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_GuildInfo_Ret::~DB2LOBBY_GuildInfo_Ret() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_GuildInfo_Ret)
  SharedDtor();
}

void DB2LOBBY_GuildInfo_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_GuildInfo_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_GuildInfo_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_GuildInfo_Ret_descriptor_;
}

const DB2LOBBY_GuildInfo_Ret& DB2LOBBY_GuildInfo_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_GuildInfo_Ret* DB2LOBBY_GuildInfo_Ret::default_instance_ = NULL;

DB2LOBBY_GuildInfo_Ret* DB2LOBBY_GuildInfo_Ret::New() const {
  return new DB2LOBBY_GuildInfo_Ret;
}

void DB2LOBBY_GuildInfo_Ret::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    cmdid_ = 350081;
    ret_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_GuildInfo_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_GuildInfo_Ret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDINFO_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.DBGuildInfo item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_GuildInfo_Ret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_GuildInfo_Ret)
  return false;
#undef DO_
}

void DB2LOBBY_GuildInfo_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_GuildInfo_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDINFO_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DBGuildInfo item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_GuildInfo_Ret)
}

::google::protobuf::uint8* DB2LOBBY_GuildInfo_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_GuildInfo_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDINFO_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DBGuildInfo item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_GuildInfo_Ret)
  return target;
}

int DB2LOBBY_GuildInfo_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDINFO_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .TgsProtocol.DBGuildInfo item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_GuildInfo_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_GuildInfo_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_GuildInfo_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_GuildInfo_Ret::MergeFrom(const DB2LOBBY_GuildInfo_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_GuildInfo_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_GuildInfo_Ret::CopyFrom(const DB2LOBBY_GuildInfo_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_GuildInfo_Ret::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void DB2LOBBY_GuildInfo_Ret::Swap(DB2LOBBY_GuildInfo_Ret* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    item_.Swap(&other->item_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_GuildInfo_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_GuildInfo_Ret_descriptor_;
  metadata.reflection = DB2LOBBY_GuildInfo_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_GuildPlayers_Ret::kCmdIdFieldNumber;
const int DB2LOBBY_GuildPlayers_Ret::kItemFieldNumber;
const int DB2LOBBY_GuildPlayers_Ret::kRetFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_GuildPlayers_Ret::DB2LOBBY_GuildPlayers_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_GuildPlayers_Ret)
}

void DB2LOBBY_GuildPlayers_Ret::InitAsDefaultInstance() {
}

DB2LOBBY_GuildPlayers_Ret::DB2LOBBY_GuildPlayers_Ret(const DB2LOBBY_GuildPlayers_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_GuildPlayers_Ret)
}

void DB2LOBBY_GuildPlayers_Ret::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350082;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_GuildPlayers_Ret::~DB2LOBBY_GuildPlayers_Ret() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_GuildPlayers_Ret)
  SharedDtor();
}

void DB2LOBBY_GuildPlayers_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_GuildPlayers_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_GuildPlayers_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_GuildPlayers_Ret_descriptor_;
}

const DB2LOBBY_GuildPlayers_Ret& DB2LOBBY_GuildPlayers_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_GuildPlayers_Ret* DB2LOBBY_GuildPlayers_Ret::default_instance_ = NULL;

DB2LOBBY_GuildPlayers_Ret* DB2LOBBY_GuildPlayers_Ret::New() const {
  return new DB2LOBBY_GuildPlayers_Ret;
}

void DB2LOBBY_GuildPlayers_Ret::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    cmdid_ = 350082;
    ret_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_GuildPlayers_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_GuildPlayers_Ret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDPlAYERS_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.DBGuildPlayer item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_GuildPlayers_Ret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_GuildPlayers_Ret)
  return false;
#undef DO_
}

void DB2LOBBY_GuildPlayers_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_GuildPlayers_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDPlAYERS_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DBGuildPlayer item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_GuildPlayers_Ret)
}

::google::protobuf::uint8* DB2LOBBY_GuildPlayers_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_GuildPlayers_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDPlAYERS_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DBGuildPlayer item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_GuildPlayers_Ret)
  return target;
}

int DB2LOBBY_GuildPlayers_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDPlAYERS_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .TgsProtocol.DBGuildPlayer item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_GuildPlayers_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_GuildPlayers_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_GuildPlayers_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_GuildPlayers_Ret::MergeFrom(const DB2LOBBY_GuildPlayers_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_GuildPlayers_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_GuildPlayers_Ret::CopyFrom(const DB2LOBBY_GuildPlayers_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_GuildPlayers_Ret::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void DB2LOBBY_GuildPlayers_Ret::Swap(DB2LOBBY_GuildPlayers_Ret* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    item_.Swap(&other->item_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_GuildPlayers_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_GuildPlayers_Ret_descriptor_;
  metadata.reflection = DB2LOBBY_GuildPlayers_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBY_GuildApplys_Ret::kCmdIdFieldNumber;
const int DB2LOBBY_GuildApplys_Ret::kItemFieldNumber;
const int DB2LOBBY_GuildApplys_Ret::kRetFieldNumber;
#endif  // !_MSC_VER

DB2LOBBY_GuildApplys_Ret::DB2LOBBY_GuildApplys_Ret()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBY_GuildApplys_Ret)
}

void DB2LOBBY_GuildApplys_Ret::InitAsDefaultInstance() {
}

DB2LOBBY_GuildApplys_Ret::DB2LOBBY_GuildApplys_Ret(const DB2LOBBY_GuildApplys_Ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBY_GuildApplys_Ret)
}

void DB2LOBBY_GuildApplys_Ret::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350083;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBY_GuildApplys_Ret::~DB2LOBBY_GuildApplys_Ret() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBY_GuildApplys_Ret)
  SharedDtor();
}

void DB2LOBBY_GuildApplys_Ret::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBY_GuildApplys_Ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBY_GuildApplys_Ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBY_GuildApplys_Ret_descriptor_;
}

const DB2LOBBY_GuildApplys_Ret& DB2LOBBY_GuildApplys_Ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBY_GuildApplys_Ret* DB2LOBBY_GuildApplys_Ret::default_instance_ = NULL;

DB2LOBBY_GuildApplys_Ret* DB2LOBBY_GuildApplys_Ret::New() const {
  return new DB2LOBBY_GuildApplys_Ret;
}

void DB2LOBBY_GuildApplys_Ret::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    cmdid_ = 350083;
    ret_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBY_GuildApplys_Ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBY_GuildApplys_Ret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDAPPLYS_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.DBGuildApply item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBY_GuildApplys_Ret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBY_GuildApplys_Ret)
  return false;
#undef DO_
}

void DB2LOBBY_GuildApplys_Ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBY_GuildApplys_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDAPPLYS_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DBGuildApply item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBY_GuildApplys_Ret)
}

::google::protobuf::uint8* DB2LOBBY_GuildApplys_Ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBY_GuildApplys_Ret)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDAPPLYS_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DBGuildApply item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBY_GuildApplys_Ret)
  return target;
}

int DB2LOBBY_GuildApplys_Ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_GUILDAPPLYS_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .TgsProtocol.DBGuildApply item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBY_GuildApplys_Ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBY_GuildApplys_Ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBY_GuildApplys_Ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBY_GuildApplys_Ret::MergeFrom(const DB2LOBBY_GuildApplys_Ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBY_GuildApplys_Ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBY_GuildApplys_Ret::CopyFrom(const DB2LOBBY_GuildApplys_Ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBY_GuildApplys_Ret::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void DB2LOBBY_GuildApplys_Ret::Swap(DB2LOBBY_GuildApplys_Ret* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    item_.Swap(&other->item_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBY_GuildApplys_Ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBY_GuildApplys_Ret_descriptor_;
  metadata.reflection = DB2LOBBY_GuildApplys_Ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateGuildInfo_Req::kCmdIdFieldNumber;
const int LOBBY2DB_UpdateGuildInfo_Req::kTypeFieldNumber;
const int LOBBY2DB_UpdateGuildInfo_Req::kGuildIdFieldNumber;
const int LOBBY2DB_UpdateGuildInfo_Req::kItemFieldNumber;
const int LOBBY2DB_UpdateGuildInfo_Req::kGuildMapFieldNumber;
const int LOBBY2DB_UpdateGuildInfo_Req::kPassedChapteridFieldNumber;
const int LOBBY2DB_UpdateGuildInfo_Req::kChapterFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateGuildInfo_Req::LOBBY2DB_UpdateGuildInfo_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateGuildInfo_Req)
}

void LOBBY2DB_UpdateGuildInfo_Req::InitAsDefaultInstance() {
  item_ = const_cast< ::TgsProtocol::GuildInfo*>(&::TgsProtocol::GuildInfo::default_instance());
  chapter_ = const_cast< ::TgsProtocol::GuildChapterInfo*>(&::TgsProtocol::GuildChapterInfo::default_instance());
}

LOBBY2DB_UpdateGuildInfo_Req::LOBBY2DB_UpdateGuildInfo_Req(const LOBBY2DB_UpdateGuildInfo_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateGuildInfo_Req)
}

void LOBBY2DB_UpdateGuildInfo_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 350085;
  type_ = 0u;
  guild_id_ = 0u;
  item_ = NULL;
  guild_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passed_chapterid_ = 0u;
  chapter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateGuildInfo_Req::~LOBBY2DB_UpdateGuildInfo_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateGuildInfo_Req)
  SharedDtor();
}

void LOBBY2DB_UpdateGuildInfo_Req::SharedDtor() {
  if (guild_map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_map_;
  }
  if (this != default_instance_) {
    delete item_;
    delete chapter_;
  }
}

void LOBBY2DB_UpdateGuildInfo_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateGuildInfo_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateGuildInfo_Req_descriptor_;
}

const LOBBY2DB_UpdateGuildInfo_Req& LOBBY2DB_UpdateGuildInfo_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateGuildInfo_Req* LOBBY2DB_UpdateGuildInfo_Req::default_instance_ = NULL;

LOBBY2DB_UpdateGuildInfo_Req* LOBBY2DB_UpdateGuildInfo_Req::New() const {
  return new LOBBY2DB_UpdateGuildInfo_Req;
}

void LOBBY2DB_UpdateGuildInfo_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_UpdateGuildInfo_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(guild_id_, passed_chapterid_);
    cmdid_ = 350085;
    type_ = 0u;
    if (has_item()) {
      if (item_ != NULL) item_->::TgsProtocol::GuildInfo::Clear();
    }
    if (has_guild_map()) {
      if (guild_map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_map_->clear();
      }
    }
    if (has_chapter()) {
      if (chapter_ != NULL) chapter_->::TgsProtocol::GuildChapterInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateGuildInfo_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateGuildInfo_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDINFO_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guild_id;
        break;
      }

      // required uint32 guild_id = 3;
      case 3: {
        if (tag == 24) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // optional .TgsProtocol.GuildInfo item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_guild_map;
        break;
      }

      // optional bytes guild_map = 5;
      case 5: {
        if (tag == 42) {
         parse_guild_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guild_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_passed_chapterid;
        break;
      }

      // optional uint32 passed_chapterid = 6;
      case 6: {
        if (tag == 48) {
         parse_passed_chapterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passed_chapterid_)));
          set_has_passed_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_chapter;
        break;
      }

      // optional .TgsProtocol.GuildChapterInfo chapter = 7;
      case 7: {
        if (tag == 58) {
         parse_chapter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chapter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateGuildInfo_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateGuildInfo_Req)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateGuildInfo_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateGuildInfo_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDINFO_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 guild_id = 3;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guild_id(), output);
  }

  // optional .TgsProtocol.GuildInfo item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }

  // optional bytes guild_map = 5;
  if (has_guild_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->guild_map(), output);
  }

  // optional uint32 passed_chapterid = 6;
  if (has_passed_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->passed_chapterid(), output);
  }

  // optional .TgsProtocol.GuildChapterInfo chapter = 7;
  if (has_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chapter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateGuildInfo_Req)
}

::google::protobuf::uint8* LOBBY2DB_UpdateGuildInfo_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateGuildInfo_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDINFO_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 guild_id = 3;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guild_id(), target);
  }

  // optional .TgsProtocol.GuildInfo item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }

  // optional bytes guild_map = 5;
  if (has_guild_map()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->guild_map(), target);
  }

  // optional uint32 passed_chapterid = 6;
  if (has_passed_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->passed_chapterid(), target);
  }

  // optional .TgsProtocol.GuildChapterInfo chapter = 7;
  if (has_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chapter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateGuildInfo_Req)
  return target;
}

int LOBBY2DB_UpdateGuildInfo_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDINFO_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 guild_id = 3;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional .TgsProtocol.GuildInfo item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional bytes guild_map = 5;
    if (has_guild_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guild_map());
    }

    // optional uint32 passed_chapterid = 6;
    if (has_passed_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passed_chapterid());
    }

    // optional .TgsProtocol.GuildChapterInfo chapter = 7;
    if (has_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chapter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateGuildInfo_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateGuildInfo_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateGuildInfo_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateGuildInfo_Req::MergeFrom(const LOBBY2DB_UpdateGuildInfo_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_item()) {
      mutable_item()->::TgsProtocol::GuildInfo::MergeFrom(from.item());
    }
    if (from.has_guild_map()) {
      set_guild_map(from.guild_map());
    }
    if (from.has_passed_chapterid()) {
      set_passed_chapterid(from.passed_chapterid());
    }
    if (from.has_chapter()) {
      mutable_chapter()->::TgsProtocol::GuildChapterInfo::MergeFrom(from.chapter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateGuildInfo_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateGuildInfo_Req::CopyFrom(const LOBBY2DB_UpdateGuildInfo_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateGuildInfo_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_chapter()) {
    if (!this->chapter().IsInitialized()) return false;
  }
  return true;
}

void LOBBY2DB_UpdateGuildInfo_Req::Swap(LOBBY2DB_UpdateGuildInfo_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(type_, other->type_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(item_, other->item_);
    std::swap(guild_map_, other->guild_map_);
    std::swap(passed_chapterid_, other->passed_chapterid_);
    std::swap(chapter_, other->chapter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateGuildInfo_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateGuildInfo_Req_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateGuildInfo_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateGuildPlayer_Req::kCmdIdFieldNumber;
const int LOBBY2DB_UpdateGuildPlayer_Req::kItemFieldNumber;
const int LOBBY2DB_UpdateGuildPlayer_Req::kTerritoryFieldNumber;
const int LOBBY2DB_UpdateGuildPlayer_Req::kTerritoryCharidFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateGuildPlayer_Req::LOBBY2DB_UpdateGuildPlayer_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateGuildPlayer_Req)
}

void LOBBY2DB_UpdateGuildPlayer_Req::InitAsDefaultInstance() {
}

LOBBY2DB_UpdateGuildPlayer_Req::LOBBY2DB_UpdateGuildPlayer_Req(const LOBBY2DB_UpdateGuildPlayer_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateGuildPlayer_Req)
}

void LOBBY2DB_UpdateGuildPlayer_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 350086;
  territory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  territory_charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateGuildPlayer_Req::~LOBBY2DB_UpdateGuildPlayer_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateGuildPlayer_Req)
  SharedDtor();
}

void LOBBY2DB_UpdateGuildPlayer_Req::SharedDtor() {
  if (territory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete territory_;
  }
  if (this != default_instance_) {
  }
}

void LOBBY2DB_UpdateGuildPlayer_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateGuildPlayer_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateGuildPlayer_Req_descriptor_;
}

const LOBBY2DB_UpdateGuildPlayer_Req& LOBBY2DB_UpdateGuildPlayer_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateGuildPlayer_Req* LOBBY2DB_UpdateGuildPlayer_Req::default_instance_ = NULL;

LOBBY2DB_UpdateGuildPlayer_Req* LOBBY2DB_UpdateGuildPlayer_Req::New() const {
  return new LOBBY2DB_UpdateGuildPlayer_Req;
}

void LOBBY2DB_UpdateGuildPlayer_Req::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    cmdid_ = 350086;
    if (has_territory()) {
      if (territory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        territory_->clear();
      }
    }
    territory_charid_ = GOOGLE_ULONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateGuildPlayer_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateGuildPlayer_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDPLAYER_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.DBGuildPlayer item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(26)) goto parse_territory;
        break;
      }

      // optional bytes territory = 3;
      case 3: {
        if (tag == 26) {
         parse_territory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_territory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_territory_charid;
        break;
      }

      // optional uint64 territory_charid = 4;
      case 4: {
        if (tag == 32) {
         parse_territory_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &territory_charid_)));
          set_has_territory_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateGuildPlayer_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateGuildPlayer_Req)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateGuildPlayer_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateGuildPlayer_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDPLAYER_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DBGuildPlayer item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // optional bytes territory = 3;
  if (has_territory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->territory(), output);
  }

  // optional uint64 territory_charid = 4;
  if (has_territory_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->territory_charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateGuildPlayer_Req)
}

::google::protobuf::uint8* LOBBY2DB_UpdateGuildPlayer_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateGuildPlayer_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDPLAYER_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DBGuildPlayer item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // optional bytes territory = 3;
  if (has_territory()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->territory(), target);
  }

  // optional uint64 territory_charid = 4;
  if (has_territory_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->territory_charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateGuildPlayer_Req)
  return target;
}

int LOBBY2DB_UpdateGuildPlayer_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDPLAYER_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional bytes territory = 3;
    if (has_territory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->territory());
    }

    // optional uint64 territory_charid = 4;
    if (has_territory_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->territory_charid());
    }

  }
  // repeated .TgsProtocol.DBGuildPlayer item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateGuildPlayer_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateGuildPlayer_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateGuildPlayer_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateGuildPlayer_Req::MergeFrom(const LOBBY2DB_UpdateGuildPlayer_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_territory()) {
      set_territory(from.territory());
    }
    if (from.has_territory_charid()) {
      set_territory_charid(from.territory_charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateGuildPlayer_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateGuildPlayer_Req::CopyFrom(const LOBBY2DB_UpdateGuildPlayer_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateGuildPlayer_Req::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void LOBBY2DB_UpdateGuildPlayer_Req::Swap(LOBBY2DB_UpdateGuildPlayer_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    item_.Swap(&other->item_);
    std::swap(territory_, other->territory_);
    std::swap(territory_charid_, other->territory_charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateGuildPlayer_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateGuildPlayer_Req_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateGuildPlayer_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateGuildApply_Req::kCmdIdFieldNumber;
const int LOBBY2DB_UpdateGuildApply_Req::kItemFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateGuildApply_Req::LOBBY2DB_UpdateGuildApply_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateGuildApply_Req)
}

void LOBBY2DB_UpdateGuildApply_Req::InitAsDefaultInstance() {
}

LOBBY2DB_UpdateGuildApply_Req::LOBBY2DB_UpdateGuildApply_Req(const LOBBY2DB_UpdateGuildApply_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateGuildApply_Req)
}

void LOBBY2DB_UpdateGuildApply_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350087;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateGuildApply_Req::~LOBBY2DB_UpdateGuildApply_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateGuildApply_Req)
  SharedDtor();
}

void LOBBY2DB_UpdateGuildApply_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_UpdateGuildApply_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateGuildApply_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateGuildApply_Req_descriptor_;
}

const LOBBY2DB_UpdateGuildApply_Req& LOBBY2DB_UpdateGuildApply_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateGuildApply_Req* LOBBY2DB_UpdateGuildApply_Req::default_instance_ = NULL;

LOBBY2DB_UpdateGuildApply_Req* LOBBY2DB_UpdateGuildApply_Req::New() const {
  return new LOBBY2DB_UpdateGuildApply_Req;
}

void LOBBY2DB_UpdateGuildApply_Req::Clear() {
  cmdid_ = 350087;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateGuildApply_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateGuildApply_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDAPPLY_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .TgsProtocol.DBGuildApply item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateGuildApply_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateGuildApply_Req)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateGuildApply_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateGuildApply_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDAPPLY_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DBGuildApply item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateGuildApply_Req)
}

::google::protobuf::uint8* LOBBY2DB_UpdateGuildApply_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateGuildApply_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDAPPLY_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DBGuildApply item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateGuildApply_Req)
  return target;
}

int LOBBY2DB_UpdateGuildApply_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDAPPLY_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  // repeated .TgsProtocol.DBGuildApply item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateGuildApply_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateGuildApply_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateGuildApply_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateGuildApply_Req::MergeFrom(const LOBBY2DB_UpdateGuildApply_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateGuildApply_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateGuildApply_Req::CopyFrom(const LOBBY2DB_UpdateGuildApply_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateGuildApply_Req::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void LOBBY2DB_UpdateGuildApply_Req::Swap(LOBBY2DB_UpdateGuildApply_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateGuildApply_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateGuildApply_Req_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateGuildApply_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateGuildRitual_Req::kCmdIdFieldNumber;
const int LOBBY2DB_UpdateGuildRitual_Req::kGuildidFieldNumber;
const int LOBBY2DB_UpdateGuildRitual_Req::kRateFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateGuildRitual_Req::LOBBY2DB_UpdateGuildRitual_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateGuildRitual_Req)
}

void LOBBY2DB_UpdateGuildRitual_Req::InitAsDefaultInstance() {
}

LOBBY2DB_UpdateGuildRitual_Req::LOBBY2DB_UpdateGuildRitual_Req(const LOBBY2DB_UpdateGuildRitual_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateGuildRitual_Req)
}

void LOBBY2DB_UpdateGuildRitual_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350088;
  guildid_ = 0u;
  rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateGuildRitual_Req::~LOBBY2DB_UpdateGuildRitual_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateGuildRitual_Req)
  SharedDtor();
}

void LOBBY2DB_UpdateGuildRitual_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_UpdateGuildRitual_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateGuildRitual_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateGuildRitual_Req_descriptor_;
}

const LOBBY2DB_UpdateGuildRitual_Req& LOBBY2DB_UpdateGuildRitual_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateGuildRitual_Req* LOBBY2DB_UpdateGuildRitual_Req::default_instance_ = NULL;

LOBBY2DB_UpdateGuildRitual_Req* LOBBY2DB_UpdateGuildRitual_Req::New() const {
  return new LOBBY2DB_UpdateGuildRitual_Req;
}

void LOBBY2DB_UpdateGuildRitual_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DB_UpdateGuildRitual_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(guildid_, rate_);
    cmdid_ = 350088;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateGuildRitual_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateGuildRitual_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDRITUAL_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // required uint32 guildid = 2;
      case 2: {
        if (tag == 16) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // required uint32 rate = 3;
      case 3: {
        if (tag == 24) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateGuildRitual_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateGuildRitual_Req)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateGuildRitual_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateGuildRitual_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDRITUAL_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guildid(), output);
  }

  // required uint32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateGuildRitual_Req)
}

::google::protobuf::uint8* LOBBY2DB_UpdateGuildRitual_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateGuildRitual_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDRITUAL_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guildid(), target);
  }

  // required uint32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateGuildRitual_Req)
  return target;
}

int LOBBY2DB_UpdateGuildRitual_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDRITUAL_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // required uint32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateGuildRitual_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateGuildRitual_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateGuildRitual_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateGuildRitual_Req::MergeFrom(const LOBBY2DB_UpdateGuildRitual_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateGuildRitual_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateGuildRitual_Req::CopyFrom(const LOBBY2DB_UpdateGuildRitual_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateGuildRitual_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void LOBBY2DB_UpdateGuildRitual_Req::Swap(LOBBY2DB_UpdateGuildRitual_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(guildid_, other->guildid_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateGuildRitual_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateGuildRitual_Req_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateGuildRitual_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DB_UpdateGuildNewDay_Req::kCmdIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DB_UpdateGuildNewDay_Req::LOBBY2DB_UpdateGuildNewDay_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DB_UpdateGuildNewDay_Req)
}

void LOBBY2DB_UpdateGuildNewDay_Req::InitAsDefaultInstance() {
}

LOBBY2DB_UpdateGuildNewDay_Req::LOBBY2DB_UpdateGuildNewDay_Req(const LOBBY2DB_UpdateGuildNewDay_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DB_UpdateGuildNewDay_Req)
}

void LOBBY2DB_UpdateGuildNewDay_Req::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350089;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DB_UpdateGuildNewDay_Req::~LOBBY2DB_UpdateGuildNewDay_Req() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DB_UpdateGuildNewDay_Req)
  SharedDtor();
}

void LOBBY2DB_UpdateGuildNewDay_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DB_UpdateGuildNewDay_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DB_UpdateGuildNewDay_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DB_UpdateGuildNewDay_Req_descriptor_;
}

const LOBBY2DB_UpdateGuildNewDay_Req& LOBBY2DB_UpdateGuildNewDay_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DB_UpdateGuildNewDay_Req* LOBBY2DB_UpdateGuildNewDay_Req::default_instance_ = NULL;

LOBBY2DB_UpdateGuildNewDay_Req* LOBBY2DB_UpdateGuildNewDay_Req::New() const {
  return new LOBBY2DB_UpdateGuildNewDay_Req;
}

void LOBBY2DB_UpdateGuildNewDay_Req::Clear() {
  cmdid_ = 350089;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DB_UpdateGuildNewDay_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DB_UpdateGuildNewDay_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDNEWDAY_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DB_UpdateGuildNewDay_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DB_UpdateGuildNewDay_Req)
  return false;
#undef DO_
}

void LOBBY2DB_UpdateGuildNewDay_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DB_UpdateGuildNewDay_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDNEWDAY_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DB_UpdateGuildNewDay_Req)
}

::google::protobuf::uint8* LOBBY2DB_UpdateGuildNewDay_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DB_UpdateGuildNewDay_Req)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDNEWDAY_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DB_UpdateGuildNewDay_Req)
  return target;
}

int LOBBY2DB_UpdateGuildNewDay_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_UPDATEGUILDNEWDAY_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DB_UpdateGuildNewDay_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DB_UpdateGuildNewDay_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DB_UpdateGuildNewDay_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DB_UpdateGuildNewDay_Req::MergeFrom(const LOBBY2DB_UpdateGuildNewDay_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DB_UpdateGuildNewDay_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DB_UpdateGuildNewDay_Req::CopyFrom(const LOBBY2DB_UpdateGuildNewDay_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DB_UpdateGuildNewDay_Req::IsInitialized() const {

  return true;
}

void LOBBY2DB_UpdateGuildNewDay_Req::Swap(LOBBY2DB_UpdateGuildNewDay_Req* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DB_UpdateGuildNewDay_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DB_UpdateGuildNewDay_Req_descriptor_;
  metadata.reflection = LOBBY2DB_UpdateGuildNewDay_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DBLoadTreasureReq::kCmdIdFieldNumber;
const int LOBBY2DBLoadTreasureReq::kLevelFieldNumber;
#endif  // !_MSC_VER

LOBBY2DBLoadTreasureReq::LOBBY2DBLoadTreasureReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DBLoadTreasureReq)
}

void LOBBY2DBLoadTreasureReq::InitAsDefaultInstance() {
}

LOBBY2DBLoadTreasureReq::LOBBY2DBLoadTreasureReq(const LOBBY2DBLoadTreasureReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DBLoadTreasureReq)
}

void LOBBY2DBLoadTreasureReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 360004;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DBLoadTreasureReq::~LOBBY2DBLoadTreasureReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DBLoadTreasureReq)
  SharedDtor();
}

void LOBBY2DBLoadTreasureReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DBLoadTreasureReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DBLoadTreasureReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DBLoadTreasureReq_descriptor_;
}

const LOBBY2DBLoadTreasureReq& LOBBY2DBLoadTreasureReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DBLoadTreasureReq* LOBBY2DBLoadTreasureReq::default_instance_ = NULL;

LOBBY2DBLoadTreasureReq* LOBBY2DBLoadTreasureReq::New() const {
  return new LOBBY2DBLoadTreasureReq;
}

void LOBBY2DBLoadTreasureReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 360004;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DBLoadTreasureReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DBLoadTreasureReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_TREASURE_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DBLoadTreasureReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DBLoadTreasureReq)
  return false;
#undef DO_
}

void LOBBY2DBLoadTreasureReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DBLoadTreasureReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_TREASURE_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DBLoadTreasureReq)
}

::google::protobuf::uint8* LOBBY2DBLoadTreasureReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DBLoadTreasureReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_TREASURE_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DBLoadTreasureReq)
  return target;
}

int LOBBY2DBLoadTreasureReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_TREASURE_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DBLoadTreasureReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DBLoadTreasureReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DBLoadTreasureReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DBLoadTreasureReq::MergeFrom(const LOBBY2DBLoadTreasureReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DBLoadTreasureReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DBLoadTreasureReq::CopyFrom(const LOBBY2DBLoadTreasureReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DBLoadTreasureReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LOBBY2DBLoadTreasureReq::Swap(LOBBY2DBLoadTreasureReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DBLoadTreasureReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DBLoadTreasureReq_descriptor_;
  metadata.reflection = LOBBY2DBLoadTreasureReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBYLoadTreasureRet::kCmdIdFieldNumber;
const int DB2LOBBYLoadTreasureRet::kPlayerFieldNumber;
const int DB2LOBBYLoadTreasureRet::kRetFieldNumber;
#endif  // !_MSC_VER

DB2LOBBYLoadTreasureRet::DB2LOBBYLoadTreasureRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBYLoadTreasureRet)
}

void DB2LOBBYLoadTreasureRet::InitAsDefaultInstance() {
}

DB2LOBBYLoadTreasureRet::DB2LOBBYLoadTreasureRet(const DB2LOBBYLoadTreasureRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBYLoadTreasureRet)
}

void DB2LOBBYLoadTreasureRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 360005;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBYLoadTreasureRet::~DB2LOBBYLoadTreasureRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBYLoadTreasureRet)
  SharedDtor();
}

void DB2LOBBYLoadTreasureRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBYLoadTreasureRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBYLoadTreasureRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBYLoadTreasureRet_descriptor_;
}

const DB2LOBBYLoadTreasureRet& DB2LOBBYLoadTreasureRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBYLoadTreasureRet* DB2LOBBYLoadTreasureRet::default_instance_ = NULL;

DB2LOBBYLoadTreasureRet* DB2LOBBYLoadTreasureRet::New() const {
  return new DB2LOBBYLoadTreasureRet;
}

void DB2LOBBYLoadTreasureRet::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    cmdid_ = 360005;
    ret_ = 0u;
  }
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBYLoadTreasureRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBYLoadTreasureRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_TREASURE_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // repeated .TgsProtocol.DbTreasureInfo player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBYLoadTreasureRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBYLoadTreasureRet)
  return false;
#undef DO_
}

void DB2LOBBYLoadTreasureRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBYLoadTreasureRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_TREASURE_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // repeated .TgsProtocol.DbTreasureInfo player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(i), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBYLoadTreasureRet)
}

::google::protobuf::uint8* DB2LOBBYLoadTreasureRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBYLoadTreasureRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_TREASURE_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // repeated .TgsProtocol.DbTreasureInfo player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(i), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBYLoadTreasureRet)
  return target;
}

int DB2LOBBYLoadTreasureRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_TREASURE_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .TgsProtocol.DbTreasureInfo player = 2;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBYLoadTreasureRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBYLoadTreasureRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBYLoadTreasureRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBYLoadTreasureRet::MergeFrom(const DB2LOBBYLoadTreasureRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBYLoadTreasureRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBYLoadTreasureRet::CopyFrom(const DB2LOBBYLoadTreasureRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBYLoadTreasureRet::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->player())) return false;
  return true;
}

void DB2LOBBYLoadTreasureRet::Swap(DB2LOBBYLoadTreasureRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    player_.Swap(&other->player_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBYLoadTreasureRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBYLoadTreasureRet_descriptor_;
  metadata.reflection = DB2LOBBYLoadTreasureRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DBLoadRobotReq::kCmdIdFieldNumber;
const int LOBBY2DBLoadRobotReq::kCharIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DBLoadRobotReq::LOBBY2DBLoadRobotReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DBLoadRobotReq)
}

void LOBBY2DBLoadRobotReq::InitAsDefaultInstance() {
}

LOBBY2DBLoadRobotReq::LOBBY2DBLoadRobotReq(const LOBBY2DBLoadRobotReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DBLoadRobotReq)
}

void LOBBY2DBLoadRobotReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350092;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DBLoadRobotReq::~LOBBY2DBLoadRobotReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DBLoadRobotReq)
  SharedDtor();
}

void LOBBY2DBLoadRobotReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOBBY2DBLoadRobotReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DBLoadRobotReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DBLoadRobotReq_descriptor_;
}

const LOBBY2DBLoadRobotReq& LOBBY2DBLoadRobotReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DBLoadRobotReq* LOBBY2DBLoadRobotReq::default_instance_ = NULL;

LOBBY2DBLoadRobotReq* LOBBY2DBLoadRobotReq::New() const {
  return new LOBBY2DBLoadRobotReq;
}

void LOBBY2DBLoadRobotReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmdid_ = 350092;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DBLoadRobotReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DBLoadRobotReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_ROBOT_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CharId;
        break;
      }

      // required uint64 CharId = 2;
      case 2: {
        if (tag == 16) {
         parse_CharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DBLoadRobotReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DBLoadRobotReq)
  return false;
#undef DO_
}

void LOBBY2DBLoadRobotReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DBLoadRobotReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_ROBOT_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 CharId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DBLoadRobotReq)
}

::google::protobuf::uint8* LOBBY2DBLoadRobotReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DBLoadRobotReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_ROBOT_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 CharId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DBLoadRobotReq)
  return target;
}

int LOBBY2DBLoadRobotReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_LOAD_ROBOT_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 CharId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DBLoadRobotReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DBLoadRobotReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DBLoadRobotReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DBLoadRobotReq::MergeFrom(const LOBBY2DBLoadRobotReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DBLoadRobotReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DBLoadRobotReq::CopyFrom(const LOBBY2DBLoadRobotReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DBLoadRobotReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LOBBY2DBLoadRobotReq::Swap(LOBBY2DBLoadRobotReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DBLoadRobotReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DBLoadRobotReq_descriptor_;
  metadata.reflection = LOBBY2DBLoadRobotReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBYLoadRobotRet::kCmdIdFieldNumber;
const int DB2LOBBYLoadRobotRet::kRetFieldNumber;
const int DB2LOBBYLoadRobotRet::kCharIdFieldNumber;
const int DB2LOBBYLoadRobotRet::kCharInfoFieldNumber;
const int DB2LOBBYLoadRobotRet::kIndexFieldNumber;
const int DB2LOBBYLoadRobotRet::kOwnerIdFieldNumber;
const int DB2LOBBYLoadRobotRet::kGrowupIndexFieldNumber;
#endif  // !_MSC_VER

DB2LOBBYLoadRobotRet::DB2LOBBYLoadRobotRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBYLoadRobotRet)
}

void DB2LOBBYLoadRobotRet::InitAsDefaultInstance() {
  charinfo_ = const_cast< ::TgsProtocol::DB2LOBBY_LoadCharRet*>(&::TgsProtocol::DB2LOBBY_LoadCharRet::default_instance());
}

DB2LOBBYLoadRobotRet::DB2LOBBYLoadRobotRet(const DB2LOBBYLoadRobotRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBYLoadRobotRet)
}

void DB2LOBBYLoadRobotRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350093;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charinfo_ = NULL;
  index_ = 0u;
  ownerid_ = GOOGLE_ULONGLONG(0);
  growupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBYLoadRobotRet::~DB2LOBBYLoadRobotRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBYLoadRobotRet)
  SharedDtor();
}

void DB2LOBBYLoadRobotRet::SharedDtor() {
  if (this != default_instance_) {
    delete charinfo_;
  }
}

void DB2LOBBYLoadRobotRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBYLoadRobotRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBYLoadRobotRet_descriptor_;
}

const DB2LOBBYLoadRobotRet& DB2LOBBYLoadRobotRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBYLoadRobotRet* DB2LOBBYLoadRobotRet::default_instance_ = NULL;

DB2LOBBYLoadRobotRet* DB2LOBBYLoadRobotRet::New() const {
  return new DB2LOBBYLoadRobotRet;
}

void DB2LOBBYLoadRobotRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBYLoadRobotRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ret_, charid_);
    ZR_(ownerid_, growupindex_);
    cmdid_ = 350093;
    if (has_charinfo()) {
      if (charinfo_ != NULL) charinfo_->::TgsProtocol::DB2LOBBY_LoadCharRet::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBYLoadRobotRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBYLoadRobotRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_ROBOT_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charId;
        break;
      }

      // required uint64 charId = 3;
      case 3: {
        if (tag == 24) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charInfo;
        break;
      }

      // required .TgsProtocol.DB2LOBBY_LoadCharRet charInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_charInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // required uint32 index = 5;
      case 5: {
        if (tag == 40) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ownerId;
        break;
      }

      // required uint64 ownerId = 6;
      case 6: {
        if (tag == 48) {
         parse_ownerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_growupIndex;
        break;
      }

      // required uint32 growupIndex = 7;
      case 7: {
        if (tag == 56) {
         parse_growupIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &growupindex_)));
          set_has_growupindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBYLoadRobotRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBYLoadRobotRet)
  return false;
#undef DO_
}

void DB2LOBBYLoadRobotRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBYLoadRobotRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_ROBOT_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required .TgsProtocol.DB2LOBBY_LoadCharRet charInfo = 4;
  if (has_charinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->charinfo(), output);
  }

  // required uint32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }

  // required uint64 ownerId = 6;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ownerid(), output);
  }

  // required uint32 growupIndex = 7;
  if (has_growupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->growupindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBYLoadRobotRet)
}

::google::protobuf::uint8* DB2LOBBYLoadRobotRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBYLoadRobotRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_ROBOT_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required .TgsProtocol.DB2LOBBY_LoadCharRet charInfo = 4;
  if (has_charinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->charinfo(), target);
  }

  // required uint32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }

  // required uint64 ownerId = 6;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ownerid(), target);
  }

  // required uint32 growupIndex = 7;
  if (has_growupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->growupindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBYLoadRobotRet)
  return target;
}

int DB2LOBBYLoadRobotRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_LOAD_ROBOT_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required .TgsProtocol.DB2LOBBY_LoadCharRet charInfo = 4;
    if (has_charinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charinfo());
    }

    // required uint32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint64 ownerId = 6;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // required uint32 growupIndex = 7;
    if (has_growupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->growupindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBYLoadRobotRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBYLoadRobotRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBYLoadRobotRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBYLoadRobotRet::MergeFrom(const DB2LOBBYLoadRobotRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charinfo()) {
      mutable_charinfo()->::TgsProtocol::DB2LOBBY_LoadCharRet::MergeFrom(from.charinfo());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_growupindex()) {
      set_growupindex(from.growupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBYLoadRobotRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBYLoadRobotRet::CopyFrom(const DB2LOBBYLoadRobotRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBYLoadRobotRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  if (has_charinfo()) {
    if (!this->charinfo().IsInitialized()) return false;
  }
  return true;
}

void DB2LOBBYLoadRobotRet::Swap(DB2LOBBYLoadRobotRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(charinfo_, other->charinfo_);
    std::swap(index_, other->index_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(growupindex_, other->growupindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBYLoadRobotRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBYLoadRobotRet_descriptor_;
  metadata.reflection = DB2LOBBYLoadRobotRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DBCreateRobotReq::kCmdIdFieldNumber;
const int LOBBY2DBCreateRobotReq::kCharidFieldNumber;
const int LOBBY2DBCreateRobotReq::kCharNameFieldNumber;
const int LOBBY2DBCreateRobotReq::kIndexFieldNumber;
const int LOBBY2DBCreateRobotReq::kOwnerIdFieldNumber;
#endif  // !_MSC_VER

LOBBY2DBCreateRobotReq::LOBBY2DBCreateRobotReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DBCreateRobotReq)
}

void LOBBY2DBCreateRobotReq::InitAsDefaultInstance() {
}

LOBBY2DBCreateRobotReq::LOBBY2DBCreateRobotReq(const LOBBY2DBCreateRobotReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DBCreateRobotReq)
}

void LOBBY2DBCreateRobotReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdid_ = 350094;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  ownerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DBCreateRobotReq::~LOBBY2DBCreateRobotReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DBCreateRobotReq)
  SharedDtor();
}

void LOBBY2DBCreateRobotReq::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void LOBBY2DBCreateRobotReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DBCreateRobotReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DBCreateRobotReq_descriptor_;
}

const LOBBY2DBCreateRobotReq& LOBBY2DBCreateRobotReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DBCreateRobotReq* LOBBY2DBCreateRobotReq::default_instance_ = NULL;

LOBBY2DBCreateRobotReq* LOBBY2DBCreateRobotReq::New() const {
  return new LOBBY2DBCreateRobotReq;
}

void LOBBY2DBCreateRobotReq::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmdid_ = 350094;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    index_ = 0u;
    ownerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DBCreateRobotReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DBCreateRobotReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CREATE_ROBOT_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_charName;
        break;
      }

      // required string charName = 3;
      case 3: {
        if (tag == 26) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ownerId;
        break;
      }

      // required uint64 ownerId = 5;
      case 5: {
        if (tag == 40) {
         parse_ownerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DBCreateRobotReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DBCreateRobotReq)
  return false;
#undef DO_
}

void LOBBY2DBCreateRobotReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DBCreateRobotReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CREATE_ROBOT_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required string charName = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->charname(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // required uint64 ownerId = 5;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ownerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DBCreateRobotReq)
}

::google::protobuf::uint8* LOBBY2DBCreateRobotReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DBCreateRobotReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CREATE_ROBOT_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required string charName = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // required uint64 ownerId = 5;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ownerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DBCreateRobotReq)
  return target;
}

int LOBBY2DBCreateRobotReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_CREATE_ROBOT_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string charName = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint64 ownerId = 5;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DBCreateRobotReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DBCreateRobotReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DBCreateRobotReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DBCreateRobotReq::MergeFrom(const LOBBY2DBCreateRobotReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DBCreateRobotReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DBCreateRobotReq::CopyFrom(const LOBBY2DBCreateRobotReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DBCreateRobotReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void LOBBY2DBCreateRobotReq::Swap(LOBBY2DBCreateRobotReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(index_, other->index_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DBCreateRobotReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DBCreateRobotReq_descriptor_;
  metadata.reflection = LOBBY2DBCreateRobotReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBYCreateRobotRet::kCmdIdFieldNumber;
const int DB2LOBBYCreateRobotRet::kRetFieldNumber;
const int DB2LOBBYCreateRobotRet::kCharidFieldNumber;
const int DB2LOBBYCreateRobotRet::kIndexFieldNumber;
const int DB2LOBBYCreateRobotRet::kOwnerIdFieldNumber;
#endif  // !_MSC_VER

DB2LOBBYCreateRobotRet::DB2LOBBYCreateRobotRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBYCreateRobotRet)
}

void DB2LOBBYCreateRobotRet::InitAsDefaultInstance() {
}

DB2LOBBYCreateRobotRet::DB2LOBBYCreateRobotRet(const DB2LOBBYCreateRobotRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBYCreateRobotRet)
}

void DB2LOBBYCreateRobotRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350095;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  ownerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBYCreateRobotRet::~DB2LOBBYCreateRobotRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBYCreateRobotRet)
  SharedDtor();
}

void DB2LOBBYCreateRobotRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBYCreateRobotRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBYCreateRobotRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBYCreateRobotRet_descriptor_;
}

const DB2LOBBYCreateRobotRet& DB2LOBBYCreateRobotRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBYCreateRobotRet* DB2LOBBYCreateRobotRet::default_instance_ = NULL;

DB2LOBBYCreateRobotRet* DB2LOBBYCreateRobotRet::New() const {
  return new DB2LOBBYCreateRobotRet;
}

void DB2LOBBYCreateRobotRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBYCreateRobotRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ret_, index_);
    cmdid_ = 350095;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBYCreateRobotRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBYCreateRobotRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CREATE_ROBOT_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ownerId;
        break;
      }

      // required uint64 ownerId = 5;
      case 5: {
        if (tag == 40) {
         parse_ownerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBYCreateRobotRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBYCreateRobotRet)
  return false;
#undef DO_
}

void DB2LOBBYCreateRobotRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBYCreateRobotRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CREATE_ROBOT_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // required uint64 ownerId = 5;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ownerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBYCreateRobotRet)
}

::google::protobuf::uint8* DB2LOBBYCreateRobotRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBYCreateRobotRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CREATE_ROBOT_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // required uint64 ownerId = 5;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ownerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBYCreateRobotRet)
  return target;
}

int DB2LOBBYCreateRobotRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_CREATE_ROBOT_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint64 ownerId = 5;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBYCreateRobotRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBYCreateRobotRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBYCreateRobotRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBYCreateRobotRet::MergeFrom(const DB2LOBBYCreateRobotRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBYCreateRobotRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBYCreateRobotRet::CopyFrom(const DB2LOBBYCreateRobotRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBYCreateRobotRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void DB2LOBBYCreateRobotRet::Swap(DB2LOBBYCreateRobotRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(index_, other->index_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBYCreateRobotRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBYCreateRobotRet_descriptor_;
  metadata.reflection = DB2LOBBYCreateRobotRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOBBY2DBSaveRobotReq::kCmdIdFieldNumber;
const int LOBBY2DBSaveRobotReq::kCharIdFieldNumber;
const int LOBBY2DBSaveRobotReq::kCharInfoFieldNumber;
const int LOBBY2DBSaveRobotReq::kIndexFieldNumber;
const int LOBBY2DBSaveRobotReq::kOwnerIdFieldNumber;
const int LOBBY2DBSaveRobotReq::kGrowupIndexFieldNumber;
#endif  // !_MSC_VER

LOBBY2DBSaveRobotReq::LOBBY2DBSaveRobotReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.LOBBY2DBSaveRobotReq)
}

void LOBBY2DBSaveRobotReq::InitAsDefaultInstance() {
  charinfo_ = const_cast< ::TgsProtocol::LOBBY2DB_SaveCharReq*>(&::TgsProtocol::LOBBY2DB_SaveCharReq::default_instance());
}

LOBBY2DBSaveRobotReq::LOBBY2DBSaveRobotReq(const LOBBY2DBSaveRobotReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.LOBBY2DBSaveRobotReq)
}

void LOBBY2DBSaveRobotReq::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350096;
  charid_ = GOOGLE_ULONGLONG(0);
  charinfo_ = NULL;
  index_ = 0u;
  ownerid_ = GOOGLE_ULONGLONG(0);
  growupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOBBY2DBSaveRobotReq::~LOBBY2DBSaveRobotReq() {
  // @@protoc_insertion_point(destructor:TgsProtocol.LOBBY2DBSaveRobotReq)
  SharedDtor();
}

void LOBBY2DBSaveRobotReq::SharedDtor() {
  if (this != default_instance_) {
    delete charinfo_;
  }
}

void LOBBY2DBSaveRobotReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOBBY2DBSaveRobotReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOBBY2DBSaveRobotReq_descriptor_;
}

const LOBBY2DBSaveRobotReq& LOBBY2DBSaveRobotReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

LOBBY2DBSaveRobotReq* LOBBY2DBSaveRobotReq::default_instance_ = NULL;

LOBBY2DBSaveRobotReq* LOBBY2DBSaveRobotReq::New() const {
  return new LOBBY2DBSaveRobotReq;
}

void LOBBY2DBSaveRobotReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOBBY2DBSaveRobotReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ownerid_, growupindex_);
    cmdid_ = 350096;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charinfo()) {
      if (charinfo_ != NULL) charinfo_->::TgsProtocol::LOBBY2DB_SaveCharReq::Clear();
    }
    index_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOBBY2DBSaveRobotReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.LOBBY2DBSaveRobotReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_ROBOT_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CharId;
        break;
      }

      // required uint64 CharId = 2;
      case 2: {
        if (tag == 16) {
         parse_CharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_charInfo;
        break;
      }

      // required .TgsProtocol.LOBBY2DB_SaveCharReq charInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_charInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ownerId;
        break;
      }

      // required uint64 ownerId = 5;
      case 5: {
        if (tag == 40) {
         parse_ownerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_growupIndex;
        break;
      }

      // required uint32 growupIndex = 6;
      case 6: {
        if (tag == 48) {
         parse_growupIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &growupindex_)));
          set_has_growupindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.LOBBY2DBSaveRobotReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.LOBBY2DBSaveRobotReq)
  return false;
#undef DO_
}

void LOBBY2DBSaveRobotReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.LOBBY2DBSaveRobotReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_ROBOT_REQ];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint64 CharId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required .TgsProtocol.LOBBY2DB_SaveCharReq charInfo = 3;
  if (has_charinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->charinfo(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // required uint64 ownerId = 5;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ownerid(), output);
  }

  // required uint32 growupIndex = 6;
  if (has_growupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->growupindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.LOBBY2DBSaveRobotReq)
}

::google::protobuf::uint8* LOBBY2DBSaveRobotReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.LOBBY2DBSaveRobotReq)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_ROBOT_REQ];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint64 CharId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required .TgsProtocol.LOBBY2DB_SaveCharReq charInfo = 3;
  if (has_charinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->charinfo(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // required uint64 ownerId = 5;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ownerid(), target);
  }

  // required uint32 growupIndex = 6;
  if (has_growupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->growupindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.LOBBY2DBSaveRobotReq)
  return target;
}

int LOBBY2DBSaveRobotReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = LOBBY2DB_SAVE_ROBOT_REQ];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint64 CharId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required .TgsProtocol.LOBBY2DB_SaveCharReq charInfo = 3;
    if (has_charinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charinfo());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint64 ownerId = 5;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // required uint32 growupIndex = 6;
    if (has_growupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->growupindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOBBY2DBSaveRobotReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOBBY2DBSaveRobotReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOBBY2DBSaveRobotReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOBBY2DBSaveRobotReq::MergeFrom(const LOBBY2DBSaveRobotReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charinfo()) {
      mutable_charinfo()->::TgsProtocol::LOBBY2DB_SaveCharReq::MergeFrom(from.charinfo());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_growupindex()) {
      set_growupindex(from.growupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOBBY2DBSaveRobotReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOBBY2DBSaveRobotReq::CopyFrom(const LOBBY2DBSaveRobotReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOBBY2DBSaveRobotReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  if (has_charinfo()) {
    if (!this->charinfo().IsInitialized()) return false;
  }
  return true;
}

void LOBBY2DBSaveRobotReq::Swap(LOBBY2DBSaveRobotReq* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(charid_, other->charid_);
    std::swap(charinfo_, other->charinfo_);
    std::swap(index_, other->index_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(growupindex_, other->growupindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOBBY2DBSaveRobotReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOBBY2DBSaveRobotReq_descriptor_;
  metadata.reflection = LOBBY2DBSaveRobotReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB2LOBBYSaveRobotRet::kCmdIdFieldNumber;
const int DB2LOBBYSaveRobotRet::kRetFieldNumber;
const int DB2LOBBYSaveRobotRet::kCharIdFieldNumber;
#endif  // !_MSC_VER

DB2LOBBYSaveRobotRet::DB2LOBBYSaveRobotRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TgsProtocol.DB2LOBBYSaveRobotRet)
}

void DB2LOBBYSaveRobotRet::InitAsDefaultInstance() {
}

DB2LOBBYSaveRobotRet::DB2LOBBYSaveRobotRet(const DB2LOBBYSaveRobotRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TgsProtocol.DB2LOBBYSaveRobotRet)
}

void DB2LOBBYSaveRobotRet::SharedCtor() {
  _cached_size_ = 0;
  cmdid_ = 350097;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB2LOBBYSaveRobotRet::~DB2LOBBYSaveRobotRet() {
  // @@protoc_insertion_point(destructor:TgsProtocol.DB2LOBBYSaveRobotRet)
  SharedDtor();
}

void DB2LOBBYSaveRobotRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DB2LOBBYSaveRobotRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB2LOBBYSaveRobotRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB2LOBBYSaveRobotRet_descriptor_;
}

const DB2LOBBYSaveRobotRet& DB2LOBBYSaveRobotRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5flobby_5fdb_2eproto();
  return *default_instance_;
}

DB2LOBBYSaveRobotRet* DB2LOBBYSaveRobotRet::default_instance_ = NULL;

DB2LOBBYSaveRobotRet* DB2LOBBYSaveRobotRet::New() const {
  return new DB2LOBBYSaveRobotRet;
}

void DB2LOBBYSaveRobotRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DB2LOBBYSaveRobotRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ret_, charid_);
    cmdid_ = 350097;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB2LOBBYSaveRobotRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TgsProtocol.DB2LOBBYSaveRobotRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_ROBOT_RET];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TgsProtocol::PacketDef_IsValid(value)) {
            set_cmdid(static_cast< ::TgsProtocol::PacketDef >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charId;
        break;
      }

      // required uint64 charId = 3;
      case 3: {
        if (tag == 24) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TgsProtocol.DB2LOBBYSaveRobotRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TgsProtocol.DB2LOBBYSaveRobotRet)
  return false;
#undef DO_
}

void DB2LOBBYSaveRobotRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TgsProtocol.DB2LOBBYSaveRobotRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_ROBOT_RET];
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdid(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TgsProtocol.DB2LOBBYSaveRobotRet)
}

::google::protobuf::uint8* DB2LOBBYSaveRobotRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TgsProtocol.DB2LOBBYSaveRobotRet)
  // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_ROBOT_RET];
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdid(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // required uint64 charId = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TgsProtocol.DB2LOBBYSaveRobotRet)
  return target;
}

int DB2LOBBYSaveRobotRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TgsProtocol.PacketDef cmdId = 1 [default = DB2LOBBY_SAVE_ROBOT_RET];
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdid());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint64 charId = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB2LOBBYSaveRobotRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB2LOBBYSaveRobotRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB2LOBBYSaveRobotRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB2LOBBYSaveRobotRet::MergeFrom(const DB2LOBBYSaveRobotRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB2LOBBYSaveRobotRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB2LOBBYSaveRobotRet::CopyFrom(const DB2LOBBYSaveRobotRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB2LOBBYSaveRobotRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void DB2LOBBYSaveRobotRet::Swap(DB2LOBBYSaveRobotRet* other) {
  if (other != this) {
    std::swap(cmdid_, other->cmdid_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB2LOBBYSaveRobotRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB2LOBBYSaveRobotRet_descriptor_;
  metadata.reflection = DB2LOBBYSaveRobotRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TgsProtocol

// @@protoc_insertion_point(global_scope)
